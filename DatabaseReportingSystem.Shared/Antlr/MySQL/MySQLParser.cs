//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./MySQLParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MySQLParser : MySQLParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NOT2_SYMBOL=1, CONCAT_PIPES_SYMBOL=2, INT_NUMBER=3, LONG_NUMBER=4, ULONGLONG_NUMBER=5, 
		EQUAL_OPERATOR=6, ASSIGN_OPERATOR=7, NULL_SAFE_EQUAL_OPERATOR=8, GREATER_OR_EQUAL_OPERATOR=9, 
		GREATER_THAN_OPERATOR=10, LESS_OR_EQUAL_OPERATOR=11, LESS_THAN_OPERATOR=12, 
		NOT_EQUAL_OPERATOR=13, PLUS_OPERATOR=14, MINUS_OPERATOR=15, MULT_OPERATOR=16, 
		DIV_OPERATOR=17, MOD_OPERATOR=18, LOGICAL_NOT_OPERATOR=19, BITWISE_NOT_OPERATOR=20, 
		SHIFT_LEFT_OPERATOR=21, SHIFT_RIGHT_OPERATOR=22, LOGICAL_AND_OPERATOR=23, 
		BITWISE_AND_OPERATOR=24, BITWISE_XOR_OPERATOR=25, LOGICAL_OR_OPERATOR=26, 
		BITWISE_OR_OPERATOR=27, DOT_SYMBOL=28, COMMA_SYMBOL=29, SEMICOLON_SYMBOL=30, 
		COLON_SYMBOL=31, OPEN_PAR_SYMBOL=32, CLOSE_PAR_SYMBOL=33, OPEN_CURLY_SYMBOL=34, 
		CLOSE_CURLY_SYMBOL=35, UNDERLINE_SYMBOL=36, JSON_SEPARATOR_SYMBOL=37, 
		JSON_UNQUOTED_SEPARATOR_SYMBOL=38, AT_SIGN_SYMBOL=39, AT_TEXT_SUFFIX=40, 
		AT_AT_SIGN_SYMBOL=41, NULL2_SYMBOL=42, PARAM_MARKER=43, HEX_NUMBER=44, 
		BIN_NUMBER=45, DECIMAL_NUMBER=46, FLOAT_NUMBER=47, ACCESSIBLE_SYMBOL=48, 
		ACCOUNT_SYMBOL=49, ACTION_SYMBOL=50, ADD_SYMBOL=51, ADDDATE_SYMBOL=52, 
		AFTER_SYMBOL=53, AGAINST_SYMBOL=54, AGGREGATE_SYMBOL=55, ALGORITHM_SYMBOL=56, 
		ALL_SYMBOL=57, ALTER_SYMBOL=58, ALWAYS_SYMBOL=59, ANALYZE_SYMBOL=60, AND_SYMBOL=61, 
		ANY_SYMBOL=62, AS_SYMBOL=63, ASC_SYMBOL=64, ASCII_SYMBOL=65, ASENSITIVE_SYMBOL=66, 
		AT_SYMBOL=67, AUTOEXTEND_SIZE_SYMBOL=68, AUTO_INCREMENT_SYMBOL=69, AVG_ROW_LENGTH_SYMBOL=70, 
		AVG_SYMBOL=71, BACKUP_SYMBOL=72, BEFORE_SYMBOL=73, BEGIN_SYMBOL=74, BETWEEN_SYMBOL=75, 
		BIGINT_SYMBOL=76, BINARY_SYMBOL=77, BINLOG_SYMBOL=78, BIT_AND_SYMBOL=79, 
		BIT_OR_SYMBOL=80, BIT_SYMBOL=81, BIT_XOR_SYMBOL=82, BLOB_SYMBOL=83, BLOCK_SYMBOL=84, 
		BOOLEAN_SYMBOL=85, BOOL_SYMBOL=86, BOTH_SYMBOL=87, BTREE_SYMBOL=88, BY_SYMBOL=89, 
		BYTE_SYMBOL=90, CACHE_SYMBOL=91, CALL_SYMBOL=92, CASCADE_SYMBOL=93, CASCADED_SYMBOL=94, 
		CASE_SYMBOL=95, CAST_SYMBOL=96, CATALOG_NAME_SYMBOL=97, CHAIN_SYMBOL=98, 
		CHANGE_SYMBOL=99, CHANGED_SYMBOL=100, CHANNEL_SYMBOL=101, CHARSET_SYMBOL=102, 
		CHAR_SYMBOL=103, CHECKSUM_SYMBOL=104, CHECK_SYMBOL=105, CIPHER_SYMBOL=106, 
		CLASS_ORIGIN_SYMBOL=107, CLIENT_SYMBOL=108, CLOSE_SYMBOL=109, COALESCE_SYMBOL=110, 
		CODE_SYMBOL=111, COLLATE_SYMBOL=112, COLLATION_SYMBOL=113, COLUMNS_SYMBOL=114, 
		COLUMN_SYMBOL=115, COLUMN_NAME_SYMBOL=116, COLUMN_FORMAT_SYMBOL=117, COMMENT_SYMBOL=118, 
		COMMITTED_SYMBOL=119, COMMIT_SYMBOL=120, COMPACT_SYMBOL=121, COMPLETION_SYMBOL=122, 
		COMPRESSED_SYMBOL=123, COMPRESSION_SYMBOL=124, CONCURRENT_SYMBOL=125, 
		CONDITION_SYMBOL=126, CONNECTION_SYMBOL=127, CONSISTENT_SYMBOL=128, CONSTRAINT_SYMBOL=129, 
		CONSTRAINT_CATALOG_SYMBOL=130, CONSTRAINT_NAME_SYMBOL=131, CONSTRAINT_SCHEMA_SYMBOL=132, 
		CONTAINS_SYMBOL=133, CONTEXT_SYMBOL=134, CONTINUE_SYMBOL=135, CONVERT_SYMBOL=136, 
		COUNT_SYMBOL=137, CPU_SYMBOL=138, CREATE_SYMBOL=139, CROSS_SYMBOL=140, 
		CUBE_SYMBOL=141, CURDATE_SYMBOL=142, CURRENT_SYMBOL=143, CURRENT_DATE_SYMBOL=144, 
		CURRENT_TIME_SYMBOL=145, CURRENT_USER_SYMBOL=146, CURSOR_SYMBOL=147, CURSOR_NAME_SYMBOL=148, 
		CURTIME_SYMBOL=149, DATABASE_SYMBOL=150, DATABASES_SYMBOL=151, DATAFILE_SYMBOL=152, 
		DATA_SYMBOL=153, DATETIME_SYMBOL=154, DATE_ADD_SYMBOL=155, DATE_SUB_SYMBOL=156, 
		DATE_SYMBOL=157, DAY_HOUR_SYMBOL=158, DAY_MICROSECOND_SYMBOL=159, DAY_MINUTE_SYMBOL=160, 
		DAY_SECOND_SYMBOL=161, DAY_SYMBOL=162, DEALLOCATE_SYMBOL=163, DECIMAL_SYMBOL=164, 
		DECLARE_SYMBOL=165, DEFAULT_SYMBOL=166, DEFAULT_AUTH_SYMBOL=167, DEFINER_SYMBOL=168, 
		DELAYED_SYMBOL=169, DELAY_KEY_WRITE_SYMBOL=170, DELETE_SYMBOL=171, DESC_SYMBOL=172, 
		DESCRIBE_SYMBOL=173, DETERMINISTIC_SYMBOL=174, DIAGNOSTICS_SYMBOL=175, 
		DIRECTORY_SYMBOL=176, DISABLE_SYMBOL=177, DISCARD_SYMBOL=178, DISK_SYMBOL=179, 
		DISTINCT_SYMBOL=180, DIV_SYMBOL=181, DOUBLE_SYMBOL=182, DO_SYMBOL=183, 
		DROP_SYMBOL=184, DUAL_SYMBOL=185, DUMPFILE_SYMBOL=186, DUPLICATE_SYMBOL=187, 
		DYNAMIC_SYMBOL=188, EACH_SYMBOL=189, ELSE_SYMBOL=190, ELSEIF_SYMBOL=191, 
		ENABLE_SYMBOL=192, ENCLOSED_SYMBOL=193, ENCRYPTION_SYMBOL=194, END_SYMBOL=195, 
		ENDS_SYMBOL=196, ENGINES_SYMBOL=197, ENGINE_SYMBOL=198, ENUM_SYMBOL=199, 
		ERROR_SYMBOL=200, ERRORS_SYMBOL=201, ESCAPED_SYMBOL=202, ESCAPE_SYMBOL=203, 
		EVENTS_SYMBOL=204, EVENT_SYMBOL=205, EVERY_SYMBOL=206, EXCHANGE_SYMBOL=207, 
		EXECUTE_SYMBOL=208, EXISTS_SYMBOL=209, EXIT_SYMBOL=210, EXPANSION_SYMBOL=211, 
		EXPIRE_SYMBOL=212, EXPLAIN_SYMBOL=213, EXPORT_SYMBOL=214, EXTENDED_SYMBOL=215, 
		EXTENT_SIZE_SYMBOL=216, EXTRACT_SYMBOL=217, FALSE_SYMBOL=218, FAST_SYMBOL=219, 
		FAULTS_SYMBOL=220, FETCH_SYMBOL=221, FILE_SYMBOL=222, FILE_BLOCK_SIZE_SYMBOL=223, 
		FILTER_SYMBOL=224, FIRST_SYMBOL=225, FIXED_SYMBOL=226, FLOAT_SYMBOL=227, 
		FLUSH_SYMBOL=228, FOLLOWS_SYMBOL=229, FORCE_SYMBOL=230, FOREIGN_SYMBOL=231, 
		FOR_SYMBOL=232, FORMAT_SYMBOL=233, FOUND_SYMBOL=234, FROM_SYMBOL=235, 
		FULL_SYMBOL=236, FULLTEXT_SYMBOL=237, FUNCTION_SYMBOL=238, GET_SYMBOL=239, 
		GENERAL_SYMBOL=240, GENERATED_SYMBOL=241, GROUP_REPLICATION_SYMBOL=242, 
		GEOMETRYCOLLECTION_SYMBOL=243, GEOMETRY_SYMBOL=244, GET_FORMAT_SYMBOL=245, 
		GLOBAL_SYMBOL=246, GRANT_SYMBOL=247, GRANTS_SYMBOL=248, GROUP_SYMBOL=249, 
		GROUP_CONCAT_SYMBOL=250, HANDLER_SYMBOL=251, HASH_SYMBOL=252, HAVING_SYMBOL=253, 
		HELP_SYMBOL=254, HIGH_PRIORITY_SYMBOL=255, HOST_SYMBOL=256, HOSTS_SYMBOL=257, 
		HOUR_MICROSECOND_SYMBOL=258, HOUR_MINUTE_SYMBOL=259, HOUR_SECOND_SYMBOL=260, 
		HOUR_SYMBOL=261, IDENTIFIED_SYMBOL=262, IF_SYMBOL=263, IGNORE_SYMBOL=264, 
		IGNORE_SERVER_IDS_SYMBOL=265, IMPORT_SYMBOL=266, INDEXES_SYMBOL=267, INDEX_SYMBOL=268, 
		INFILE_SYMBOL=269, INITIAL_SIZE_SYMBOL=270, INNER_SYMBOL=271, INOUT_SYMBOL=272, 
		INSENSITIVE_SYMBOL=273, INSERT_SYMBOL=274, INSERT_METHOD_SYMBOL=275, INSTANCE_SYMBOL=276, 
		INSTALL_SYMBOL=277, INTERVAL_SYMBOL=278, INTO_SYMBOL=279, INT_SYMBOL=280, 
		INVOKER_SYMBOL=281, IN_SYMBOL=282, IO_AFTER_GTIDS_SYMBOL=283, IO_BEFORE_GTIDS_SYMBOL=284, 
		IO_SYMBOL=285, IPC_SYMBOL=286, IS_SYMBOL=287, ISOLATION_SYMBOL=288, ISSUER_SYMBOL=289, 
		ITERATE_SYMBOL=290, JOIN_SYMBOL=291, JSON_SYMBOL=292, KEYS_SYMBOL=293, 
		KEY_BLOCK_SIZE_SYMBOL=294, KEY_SYMBOL=295, KILL_SYMBOL=296, LANGUAGE_SYMBOL=297, 
		LAST_SYMBOL=298, LEADING_SYMBOL=299, LEAVES_SYMBOL=300, LEAVE_SYMBOL=301, 
		LEFT_SYMBOL=302, LESS_SYMBOL=303, LEVEL_SYMBOL=304, LIKE_SYMBOL=305, LIMIT_SYMBOL=306, 
		LINEAR_SYMBOL=307, LINES_SYMBOL=308, LINESTRING_SYMBOL=309, LIST_SYMBOL=310, 
		LOAD_SYMBOL=311, LOCAL_SYMBOL=312, LOCKS_SYMBOL=313, LOCK_SYMBOL=314, 
		LOGFILE_SYMBOL=315, LOGS_SYMBOL=316, LONGBLOB_SYMBOL=317, LONGTEXT_SYMBOL=318, 
		LONG_SYMBOL=319, LOOP_SYMBOL=320, LOW_PRIORITY_SYMBOL=321, MASTER_AUTO_POSITION_SYMBOL=322, 
		MASTER_BIND_SYMBOL=323, MASTER_CONNECT_RETRY_SYMBOL=324, MASTER_DELAY_SYMBOL=325, 
		MASTER_HOST_SYMBOL=326, MASTER_LOG_FILE_SYMBOL=327, MASTER_LOG_POS_SYMBOL=328, 
		MASTER_PASSWORD_SYMBOL=329, MASTER_PORT_SYMBOL=330, MASTER_RETRY_COUNT_SYMBOL=331, 
		MASTER_SSL_CAPATH_SYMBOL=332, MASTER_SSL_CA_SYMBOL=333, MASTER_SSL_CERT_SYMBOL=334, 
		MASTER_SSL_CIPHER_SYMBOL=335, MASTER_SSL_CRL_SYMBOL=336, MASTER_SSL_CRLPATH_SYMBOL=337, 
		MASTER_SSL_KEY_SYMBOL=338, MASTER_SSL_SYMBOL=339, MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL=340, 
		MASTER_SYMBOL=341, MASTER_TLS_VERSION_SYMBOL=342, MASTER_USER_SYMBOL=343, 
		MASTER_HEARTBEAT_PERIOD_SYMBOL=344, MATCH_SYMBOL=345, MAX_CONNECTIONS_PER_HOUR_SYMBOL=346, 
		MAX_QUERIES_PER_HOUR_SYMBOL=347, MAX_ROWS_SYMBOL=348, MAX_SIZE_SYMBOL=349, 
		MAX_SYMBOL=350, MAX_UPDATES_PER_HOUR_SYMBOL=351, MAX_USER_CONNECTIONS_SYMBOL=352, 
		MAXVALUE_SYMBOL=353, MEDIUMBLOB_SYMBOL=354, MEDIUMINT_SYMBOL=355, MEDIUMTEXT_SYMBOL=356, 
		MEDIUM_SYMBOL=357, MEMORY_SYMBOL=358, MERGE_SYMBOL=359, MESSAGE_TEXT_SYMBOL=360, 
		MICROSECOND_SYMBOL=361, MID_SYMBOL=362, MIGRATE_SYMBOL=363, MINUTE_MICROSECOND_SYMBOL=364, 
		MINUTE_SECOND_SYMBOL=365, MINUTE_SYMBOL=366, MIN_ROWS_SYMBOL=367, MIN_SYMBOL=368, 
		MODE_SYMBOL=369, MODIFIES_SYMBOL=370, MODIFY_SYMBOL=371, MOD_SYMBOL=372, 
		MONTH_SYMBOL=373, MULTILINESTRING_SYMBOL=374, MULTIPOINT_SYMBOL=375, MULTIPOLYGON_SYMBOL=376, 
		MUTEX_SYMBOL=377, MYSQL_ERRNO_SYMBOL=378, NAMES_SYMBOL=379, NAME_SYMBOL=380, 
		NATIONAL_SYMBOL=381, NATURAL_SYMBOL=382, NCHAR_SYMBOL=383, NDBCLUSTER_SYMBOL=384, 
		NEVER_SYMBOL=385, NEW_SYMBOL=386, NEXT_SYMBOL=387, NODEGROUP_SYMBOL=388, 
		NONE_SYMBOL=389, NOT_SYMBOL=390, NOW_SYMBOL=391, NO_SYMBOL=392, NO_WAIT_SYMBOL=393, 
		NO_WRITE_TO_BINLOG_SYMBOL=394, NULL_SYMBOL=395, NUMBER_SYMBOL=396, NUMERIC_SYMBOL=397, 
		NVARCHAR_SYMBOL=398, OFFLINE_SYMBOL=399, OFFSET_SYMBOL=400, ON_SYMBOL=401, 
		ONE_SYMBOL=402, ONLINE_SYMBOL=403, ONLY_SYMBOL=404, OPEN_SYMBOL=405, OPTIMIZE_SYMBOL=406, 
		OPTIMIZER_COSTS_SYMBOL=407, OPTIONS_SYMBOL=408, OPTION_SYMBOL=409, OPTIONALLY_SYMBOL=410, 
		ORDER_SYMBOL=411, OR_SYMBOL=412, OUTER_SYMBOL=413, OUTFILE_SYMBOL=414, 
		OUT_SYMBOL=415, OWNER_SYMBOL=416, PACK_KEYS_SYMBOL=417, PAGE_SYMBOL=418, 
		PARSER_SYMBOL=419, PARTIAL_SYMBOL=420, PARTITIONING_SYMBOL=421, PARTITIONS_SYMBOL=422, 
		PARTITION_SYMBOL=423, PASSWORD_SYMBOL=424, PHASE_SYMBOL=425, PLUGINS_SYMBOL=426, 
		PLUGIN_DIR_SYMBOL=427, PLUGIN_SYMBOL=428, POINT_SYMBOL=429, POLYGON_SYMBOL=430, 
		PORT_SYMBOL=431, POSITION_SYMBOL=432, PRECEDES_SYMBOL=433, PRECISION_SYMBOL=434, 
		PREPARE_SYMBOL=435, PRESERVE_SYMBOL=436, PREV_SYMBOL=437, PRIMARY_SYMBOL=438, 
		PRIVILEGES_SYMBOL=439, PROCEDURE_SYMBOL=440, PROCESS_SYMBOL=441, PROCESSLIST_SYMBOL=442, 
		PROFILE_SYMBOL=443, PROFILES_SYMBOL=444, PROXY_SYMBOL=445, PURGE_SYMBOL=446, 
		QUARTER_SYMBOL=447, QUERY_SYMBOL=448, QUICK_SYMBOL=449, RANGE_SYMBOL=450, 
		READS_SYMBOL=451, READ_ONLY_SYMBOL=452, READ_SYMBOL=453, READ_WRITE_SYMBOL=454, 
		REAL_SYMBOL=455, REBUILD_SYMBOL=456, RECOVER_SYMBOL=457, REDO_BUFFER_SIZE_SYMBOL=458, 
		REDUNDANT_SYMBOL=459, REFERENCES_SYMBOL=460, REGEXP_SYMBOL=461, RELAY_SYMBOL=462, 
		RELAYLOG_SYMBOL=463, RELAY_LOG_FILE_SYMBOL=464, RELAY_LOG_POS_SYMBOL=465, 
		RELAY_THREAD_SYMBOL=466, RELEASE_SYMBOL=467, RELOAD_SYMBOL=468, REMOVE_SYMBOL=469, 
		RENAME_SYMBOL=470, REORGANIZE_SYMBOL=471, REPAIR_SYMBOL=472, REPEATABLE_SYMBOL=473, 
		REPEAT_SYMBOL=474, REPLACE_SYMBOL=475, REPLICATION_SYMBOL=476, REPLICATE_DO_DB_SYMBOL=477, 
		REPLICATE_IGNORE_DB_SYMBOL=478, REPLICATE_DO_TABLE_SYMBOL=479, REPLICATE_IGNORE_TABLE_SYMBOL=480, 
		REPLICATE_WILD_DO_TABLE_SYMBOL=481, REPLICATE_WILD_IGNORE_TABLE_SYMBOL=482, 
		REPLICATE_REWRITE_DB_SYMBOL=483, REQUIRE_SYMBOL=484, RESET_SYMBOL=485, 
		RESIGNAL_SYMBOL=486, RESTORE_SYMBOL=487, RESTRICT_SYMBOL=488, RESUME_SYMBOL=489, 
		RETURNED_SQLSTATE_SYMBOL=490, RETURNS_SYMBOL=491, RETURN_SYMBOL=492, REVERSE_SYMBOL=493, 
		REVOKE_SYMBOL=494, RIGHT_SYMBOL=495, ROLLBACK_SYMBOL=496, ROLLUP_SYMBOL=497, 
		ROTATE_SYMBOL=498, ROUTINE_SYMBOL=499, ROWS_SYMBOL=500, ROW_COUNT_SYMBOL=501, 
		ROW_FORMAT_SYMBOL=502, ROW_SYMBOL=503, RTREE_SYMBOL=504, SAVEPOINT_SYMBOL=505, 
		SCHEDULE_SYMBOL=506, SCHEMA_NAME_SYMBOL=507, SECOND_MICROSECOND_SYMBOL=508, 
		SECOND_SYMBOL=509, SECURITY_SYMBOL=510, SELECT_SYMBOL=511, SENSITIVE_SYMBOL=512, 
		SEPARATOR_SYMBOL=513, SERIALIZABLE_SYMBOL=514, SERIAL_SYMBOL=515, SESSION_SYMBOL=516, 
		SERVER_SYMBOL=517, SESSION_USER_SYMBOL=518, SET_SYMBOL=519, SHARE_SYMBOL=520, 
		SHOW_SYMBOL=521, SHUTDOWN_SYMBOL=522, SIGNAL_SYMBOL=523, SIGNED_SYMBOL=524, 
		SIMPLE_SYMBOL=525, SLAVE_SYMBOL=526, SLOW_SYMBOL=527, SMALLINT_SYMBOL=528, 
		SNAPSHOT_SYMBOL=529, SOCKET_SYMBOL=530, SONAME_SYMBOL=531, SOUNDS_SYMBOL=532, 
		SOURCE_SYMBOL=533, SPATIAL_SYMBOL=534, SPECIFIC_SYMBOL=535, SQLEXCEPTION_SYMBOL=536, 
		SQLSTATE_SYMBOL=537, SQLWARNING_SYMBOL=538, SQL_AFTER_GTIDS_SYMBOL=539, 
		SQL_AFTER_MTS_GAPS_SYMBOL=540, SQL_BEFORE_GTIDS_SYMBOL=541, SQL_BIG_RESULT_SYMBOL=542, 
		SQL_BUFFER_RESULT_SYMBOL=543, SQL_CALC_FOUND_ROWS_SYMBOL=544, SQL_NO_CACHE_SYMBOL=545, 
		SQL_SMALL_RESULT_SYMBOL=546, SQL_SYMBOL=547, SQL_THREAD_SYMBOL=548, SSL_SYMBOL=549, 
		STACKED_SYMBOL=550, STARTING_SYMBOL=551, STARTS_SYMBOL=552, START_SYMBOL=553, 
		STATS_AUTO_RECALC_SYMBOL=554, STATS_PERSISTENT_SYMBOL=555, STATS_SAMPLE_PAGES_SYMBOL=556, 
		STATUS_SYMBOL=557, STDDEV_SAMP_SYMBOL=558, STDDEV_SYMBOL=559, STDDEV_POP_SYMBOL=560, 
		STD_SYMBOL=561, STOP_SYMBOL=562, STORAGE_SYMBOL=563, STORED_SYMBOL=564, 
		STRAIGHT_JOIN_SYMBOL=565, STRING_SYMBOL=566, SUBCLASS_ORIGIN_SYMBOL=567, 
		SUBDATE_SYMBOL=568, SUBJECT_SYMBOL=569, SUBPARTITIONS_SYMBOL=570, SUBPARTITION_SYMBOL=571, 
		SUBSTR_SYMBOL=572, SUBSTRING_SYMBOL=573, SUM_SYMBOL=574, SUPER_SYMBOL=575, 
		SUSPEND_SYMBOL=576, SWAPS_SYMBOL=577, SWITCHES_SYMBOL=578, SYSDATE_SYMBOL=579, 
		SYSTEM_USER_SYMBOL=580, TABLES_SYMBOL=581, TABLESPACE_SYMBOL=582, TABLE_SYMBOL=583, 
		TABLE_CHECKSUM_SYMBOL=584, TABLE_NAME_SYMBOL=585, TEMPORARY_SYMBOL=586, 
		TEMPTABLE_SYMBOL=587, TERMINATED_SYMBOL=588, TEXT_SYMBOL=589, THAN_SYMBOL=590, 
		THEN_SYMBOL=591, TIMESTAMP_SYMBOL=592, TIMESTAMPADD_SYMBOL=593, TIMESTAMPDIFF_SYMBOL=594, 
		TIME_SYMBOL=595, TINYBLOB_SYMBOL=596, TINYINT_SYMBOL=597, TINYTEXT_SYMBOL=598, 
		TO_SYMBOL=599, TRAILING_SYMBOL=600, TRANSACTION_SYMBOL=601, TRIGGERS_SYMBOL=602, 
		TRIGGER_SYMBOL=603, TRIM_SYMBOL=604, TRUE_SYMBOL=605, TRUNCATE_SYMBOL=606, 
		TYPES_SYMBOL=607, TYPE_SYMBOL=608, UDF_RETURNS_SYMBOL=609, UNCOMMITTED_SYMBOL=610, 
		UNDEFINED_SYMBOL=611, UNDOFILE_SYMBOL=612, UNDO_BUFFER_SIZE_SYMBOL=613, 
		UNDO_SYMBOL=614, UNICODE_SYMBOL=615, UNINSTALL_SYMBOL=616, UNION_SYMBOL=617, 
		UNIQUE_SYMBOL=618, UNKNOWN_SYMBOL=619, UNLOCK_SYMBOL=620, UNSIGNED_SYMBOL=621, 
		UNTIL_SYMBOL=622, UPDATE_SYMBOL=623, UPGRADE_SYMBOL=624, USAGE_SYMBOL=625, 
		USER_RESOURCES_SYMBOL=626, USER_SYMBOL=627, USE_FRM_SYMBOL=628, USE_SYMBOL=629, 
		USING_SYMBOL=630, UTC_DATE_SYMBOL=631, UTC_TIMESTAMP_SYMBOL=632, UTC_TIME_SYMBOL=633, 
		VALIDATION_SYMBOL=634, VALUES_SYMBOL=635, VALUE_SYMBOL=636, VARBINARY_SYMBOL=637, 
		VARCHAR_SYMBOL=638, VARIABLES_SYMBOL=639, VARIANCE_SYMBOL=640, VARYING_SYMBOL=641, 
		VAR_POP_SYMBOL=642, VAR_SAMP_SYMBOL=643, VIEW_SYMBOL=644, VIRTUAL_SYMBOL=645, 
		WAIT_SYMBOL=646, WARNINGS_SYMBOL=647, WEEK_SYMBOL=648, WEIGHT_STRING_SYMBOL=649, 
		WHEN_SYMBOL=650, WHERE_SYMBOL=651, WHILE_SYMBOL=652, WITH_SYMBOL=653, 
		WITHOUT_SYMBOL=654, WORK_SYMBOL=655, WRAPPER_SYMBOL=656, WRITE_SYMBOL=657, 
		X509_SYMBOL=658, XA_SYMBOL=659, XID_SYMBOL=660, XML_SYMBOL=661, XOR_SYMBOL=662, 
		YEAR_MONTH_SYMBOL=663, YEAR_SYMBOL=664, ZEROFILL_SYMBOL=665, PERSIST_SYMBOL=666, 
		ROLE_SYMBOL=667, ADMIN_SYMBOL=668, INVISIBLE_SYMBOL=669, VISIBLE_SYMBOL=670, 
		EXCEPT_SYMBOL=671, COMPONENT_SYMBOL=672, RECURSIVE_SYMBOL=673, JSON_OBJECTAGG_SYMBOL=674, 
		JSON_ARRAYAGG_SYMBOL=675, OF_SYMBOL=676, SKIP_SYMBOL=677, LOCKED_SYMBOL=678, 
		NOWAIT_SYMBOL=679, GROUPING_SYMBOL=680, PERSIST_ONLY_SYMBOL=681, HISTOGRAM_SYMBOL=682, 
		BUCKETS_SYMBOL=683, REMOTE_SYMBOL=684, CLONE_SYMBOL=685, CUME_DIST_SYMBOL=686, 
		DENSE_RANK_SYMBOL=687, EXCLUDE_SYMBOL=688, FIRST_VALUE_SYMBOL=689, FOLLOWING_SYMBOL=690, 
		GROUPS_SYMBOL=691, LAG_SYMBOL=692, LAST_VALUE_SYMBOL=693, LEAD_SYMBOL=694, 
		NTH_VALUE_SYMBOL=695, NTILE_SYMBOL=696, NULLS_SYMBOL=697, OTHERS_SYMBOL=698, 
		OVER_SYMBOL=699, PERCENT_RANK_SYMBOL=700, PRECEDING_SYMBOL=701, RANK_SYMBOL=702, 
		RESPECT_SYMBOL=703, ROW_NUMBER_SYMBOL=704, TIES_SYMBOL=705, UNBOUNDED_SYMBOL=706, 
		WINDOW_SYMBOL=707, EMPTY_SYMBOL=708, JSON_TABLE_SYMBOL=709, NESTED_SYMBOL=710, 
		ORDINALITY_SYMBOL=711, PATH_SYMBOL=712, HISTORY_SYMBOL=713, REUSE_SYMBOL=714, 
		SRID_SYMBOL=715, THREAD_PRIORITY_SYMBOL=716, RESOURCE_SYMBOL=717, SYSTEM_SYMBOL=718, 
		VCPU_SYMBOL=719, MASTER_PUBLIC_KEY_PATH_SYMBOL=720, GET_MASTER_PUBLIC_KEY_SYMBOL=721, 
		RESTART_SYMBOL=722, DEFINITION_SYMBOL=723, DESCRIPTION_SYMBOL=724, ORGANIZATION_SYMBOL=725, 
		REFERENCE_SYMBOL=726, OPTIONAL_SYMBOL=727, SECONDARY_SYMBOL=728, SECONDARY_ENGINE_SYMBOL=729, 
		SECONDARY_LOAD_SYMBOL=730, SECONDARY_UNLOAD_SYMBOL=731, ACTIVE_SYMBOL=732, 
		INACTIVE_SYMBOL=733, LATERAL_SYMBOL=734, RETAIN_SYMBOL=735, OLD_SYMBOL=736, 
		NETWORK_NAMESPACE_SYMBOL=737, ENFORCED_SYMBOL=738, ARRAY_SYMBOL=739, OJ_SYMBOL=740, 
		MEMBER_SYMBOL=741, RANDOM_SYMBOL=742, MASTER_COMPRESSION_ALGORITHM_SYMBOL=743, 
		MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL=744, PRIVILEGE_CHECKS_USER_SYMBOL=745, 
		MASTER_TLS_CIPHERSUITES_SYMBOL=746, REQUIRE_ROW_FORMAT_SYMBOL=747, PASSWORD_LOCK_TIME_SYMBOL=748, 
		FAILED_LOGIN_ATTEMPTS_SYMBOL=749, REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL=750, 
		STREAM_SYMBOL=751, OFF_SYMBOL=752, RETURNING_SYMBOL=753, JSON_VALUE_SYMBOL=754, 
		TLS_SYMBOL=755, ATTRIBUTE_SYMBOL=756, ENGINE_ATTRIBUTE_SYMBOL=757, SECONDARY_ENGINE_ATTRIBUTE_SYMBOL=758, 
		SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL=759, ZONE_SYMBOL=760, GRAMMAR_SELECTOR_DERIVED_EXPR=761, 
		REPLICA_SYMBOL=762, REPLICAS_SYMBOL=763, ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL=764, 
		GET_SOURCE_PUBLIC_KEY_SYMBOL=765, SOURCE_AUTO_POSITION_SYMBOL=766, SOURCE_BIND_SYMBOL=767, 
		SOURCE_COMPRESSION_ALGORITHM_SYMBOL=768, SOURCE_CONNECT_RETRY_SYMBOL=769, 
		SOURCE_DELAY_SYMBOL=770, SOURCE_HEARTBEAT_PERIOD_SYMBOL=771, SOURCE_HOST_SYMBOL=772, 
		SOURCE_LOG_FILE_SYMBOL=773, SOURCE_LOG_POS_SYMBOL=774, SOURCE_PASSWORD_SYMBOL=775, 
		SOURCE_PORT_SYMBOL=776, SOURCE_PUBLIC_KEY_PATH_SYMBOL=777, SOURCE_RETRY_COUNT_SYMBOL=778, 
		SOURCE_SSL_SYMBOL=779, SOURCE_SSL_CA_SYMBOL=780, SOURCE_SSL_CAPATH_SYMBOL=781, 
		SOURCE_SSL_CERT_SYMBOL=782, SOURCE_SSL_CIPHER_SYMBOL=783, SOURCE_SSL_CRL_SYMBOL=784, 
		SOURCE_SSL_CRLPATH_SYMBOL=785, SOURCE_SSL_KEY_SYMBOL=786, SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL=787, 
		SOURCE_TLS_CIPHERSUITES_SYMBOL=788, SOURCE_TLS_VERSION_SYMBOL=789, SOURCE_USER_SYMBOL=790, 
		SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL=791, ST_COLLECT_SYMBOL=792, KEYRING_SYMBOL=793, 
		AUTHENTICATION_SYMBOL=794, FACTOR_SYMBOL=795, FINISH_SYMBOL=796, INITIATE_SYMBOL=797, 
		REGISTRATION_SYMBOL=798, UNREGISTER_SYMBOL=799, INITIAL_SYMBOL=800, CHALLENGE_RESPONSE_SYMBOL=801, 
		GTID_ONLY_SYMBOL=802, INTERSECT_SYMBOL=803, BULK_SYMBOL=804, URL_SYMBOL=805, 
		GENERATE_SYMBOL=806, PARSE_TREE_SYMBOL=807, LOG_SYMBOL=808, GTIDS_SYMBOL=809, 
		PARALLEL_SYMBOL=810, S3_SYMBOL=811, QUALIFY_SYMBOL=812, AUTO_SYMBOL=813, 
		MANUAL_SYMBOL=814, BERNOULLI_SYMBOL=815, TABLESAMPLE_SYMBOL=816, WHITESPACE=817, 
		INVALID_INPUT=818, UNDERSCORE_CHARSET=819, IDENTIFIER=820, NCHAR_TEXT=821, 
		BACK_TICK_QUOTED_ID=822, DOUBLE_QUOTED_TEXT=823, SINGLE_QUOTED_TEXT=824, 
		DOLLAR_QUOTED_STRING_TEXT=825, VERSION_COMMENT_START=826, MYSQL_COMMENT_START=827, 
		VERSION_COMMENT_END=828, BLOCK_COMMENT=829, INVALID_BLOCK_COMMENT=830, 
		POUND_COMMENT=831, DASHDASH_COMMENT=832, NOT_EQUAL2_OPERATOR=833;
	public const int
		RULE_queries = 0, RULE_query = 1, RULE_simpleStatement = 2, RULE_alterStatement = 3, 
		RULE_alterDatabase = 4, RULE_alterDatabaseOption = 5, RULE_alterEvent = 6, 
		RULE_alterLogfileGroup = 7, RULE_alterLogfileGroupOptions = 8, RULE_alterLogfileGroupOption = 9, 
		RULE_alterServer = 10, RULE_alterTable = 11, RULE_alterTableActions = 12, 
		RULE_alterCommandList = 13, RULE_alterCommandsModifierList = 14, RULE_standaloneAlterCommands = 15, 
		RULE_alterPartition = 16, RULE_alterList = 17, RULE_alterCommandsModifier = 18, 
		RULE_alterListItem = 19, RULE_place = 20, RULE_restrict = 21, RULE_alterOrderList = 22, 
		RULE_alterAlgorithmOption = 23, RULE_alterLockOption = 24, RULE_indexLockAndAlgorithm = 25, 
		RULE_withValidation = 26, RULE_removePartitioning = 27, RULE_allOrPartitionNameList = 28, 
		RULE_alterTablespace = 29, RULE_alterUndoTablespace = 30, RULE_undoTableSpaceOptions = 31, 
		RULE_undoTableSpaceOption = 32, RULE_alterTablespaceOptions = 33, RULE_alterTablespaceOption = 34, 
		RULE_changeTablespaceOption = 35, RULE_alterView = 36, RULE_viewTail = 37, 
		RULE_viewQueryBlock = 38, RULE_viewCheckOption = 39, RULE_alterInstanceStatement = 40, 
		RULE_createStatement = 41, RULE_createDatabase = 42, RULE_createDatabaseOption = 43, 
		RULE_createTable = 44, RULE_tableElementList = 45, RULE_tableElement = 46, 
		RULE_duplicateAsQe = 47, RULE_asCreateQueryExpression = 48, RULE_queryExpressionOrParens = 49, 
		RULE_queryExpressionWithOptLockingClauses = 50, RULE_createRoutine = 51, 
		RULE_createProcedure = 52, RULE_routineString = 53, RULE_storedRoutineBody = 54, 
		RULE_createFunction = 55, RULE_createUdf = 56, RULE_routineCreateOption = 57, 
		RULE_routineAlterOptions = 58, RULE_routineOption = 59, RULE_createIndex = 60, 
		RULE_indexNameAndType = 61, RULE_createIndexTarget = 62, RULE_createLogfileGroup = 63, 
		RULE_logfileGroupOptions = 64, RULE_logfileGroupOption = 65, RULE_createServer = 66, 
		RULE_serverOptions = 67, RULE_serverOption = 68, RULE_createTablespace = 69, 
		RULE_createUndoTablespace = 70, RULE_tsDataFileName = 71, RULE_tsDataFile = 72, 
		RULE_tablespaceOptions = 73, RULE_tablespaceOption = 74, RULE_tsOptionInitialSize = 75, 
		RULE_tsOptionUndoRedoBufferSize = 76, RULE_tsOptionAutoextendSize = 77, 
		RULE_tsOptionMaxSize = 78, RULE_tsOptionExtentSize = 79, RULE_tsOptionNodegroup = 80, 
		RULE_tsOptionEngine = 81, RULE_tsOptionWait = 82, RULE_tsOptionComment = 83, 
		RULE_tsOptionFileblockSize = 84, RULE_tsOptionEncryption = 85, RULE_tsOptionEngineAttribute = 86, 
		RULE_createView = 87, RULE_viewReplaceOrAlgorithm = 88, RULE_viewAlgorithm = 89, 
		RULE_viewSuid = 90, RULE_createTrigger = 91, RULE_triggerFollowsPrecedesClause = 92, 
		RULE_createEvent = 93, RULE_createRole = 94, RULE_createSpatialReference = 95, 
		RULE_srsAttribute = 96, RULE_dropStatement = 97, RULE_dropDatabase = 98, 
		RULE_dropEvent = 99, RULE_dropFunction = 100, RULE_dropProcedure = 101, 
		RULE_dropIndex = 102, RULE_dropLogfileGroup = 103, RULE_dropLogfileGroupOption = 104, 
		RULE_dropServer = 105, RULE_dropTable = 106, RULE_dropTableSpace = 107, 
		RULE_dropTrigger = 108, RULE_dropView = 109, RULE_dropRole = 110, RULE_dropSpatialReference = 111, 
		RULE_dropUndoTablespace = 112, RULE_renameTableStatement = 113, RULE_renamePair = 114, 
		RULE_truncateTableStatement = 115, RULE_importStatement = 116, RULE_callStatement = 117, 
		RULE_deleteStatement = 118, RULE_partitionDelete = 119, RULE_deleteStatementOption = 120, 
		RULE_doStatement = 121, RULE_handlerStatement = 122, RULE_handlerReadOrScan = 123, 
		RULE_insertStatement = 124, RULE_insertLockOption = 125, RULE_insertFromConstructor = 126, 
		RULE_fields = 127, RULE_insertValues = 128, RULE_insertQueryExpression = 129, 
		RULE_valueList = 130, RULE_values = 131, RULE_valuesReference = 132, RULE_insertUpdateList = 133, 
		RULE_loadStatement = 134, RULE_dataOrXml = 135, RULE_loadDataLock = 136, 
		RULE_loadFrom = 137, RULE_loadSourceType = 138, RULE_sourceCount = 139, 
		RULE_sourceOrder = 140, RULE_xmlRowsIdentifiedBy = 141, RULE_loadDataFileTail = 142, 
		RULE_loadDataFileTargetList = 143, RULE_fieldOrVariableList = 144, RULE_loadAlgorithm = 145, 
		RULE_loadParallel = 146, RULE_loadMemory = 147, RULE_replaceStatement = 148, 
		RULE_selectStatement = 149, RULE_selectStatementWithInto = 150, RULE_queryExpression = 151, 
		RULE_queryExpressionBody = 152, RULE_queryExpressionParens = 153, RULE_queryPrimary = 154, 
		RULE_querySpecification = 155, RULE_subquery = 156, RULE_querySpecOption = 157, 
		RULE_limitClause = 158, RULE_simpleLimitClause = 159, RULE_limitOptions = 160, 
		RULE_limitOption = 161, RULE_intoClause = 162, RULE_procedureAnalyseClause = 163, 
		RULE_havingClause = 164, RULE_qualifyClause = 165, RULE_windowClause = 166, 
		RULE_windowDefinition = 167, RULE_windowSpec = 168, RULE_windowSpecDetails = 169, 
		RULE_windowFrameClause = 170, RULE_windowFrameUnits = 171, RULE_windowFrameExtent = 172, 
		RULE_windowFrameStart = 173, RULE_windowFrameBetween = 174, RULE_windowFrameBound = 175, 
		RULE_windowFrameExclusion = 176, RULE_withClause = 177, RULE_commonTableExpression = 178, 
		RULE_groupByClause = 179, RULE_olapOption = 180, RULE_orderClause = 181, 
		RULE_direction = 182, RULE_fromClause = 183, RULE_tableReferenceList = 184, 
		RULE_tableValueConstructor = 185, RULE_explicitTable = 186, RULE_rowValueExplicit = 187, 
		RULE_selectOption = 188, RULE_lockingClauseList = 189, RULE_lockingClause = 190, 
		RULE_lockStrengh = 191, RULE_lockedRowAction = 192, RULE_selectItemList = 193, 
		RULE_selectItem = 194, RULE_selectAlias = 195, RULE_whereClause = 196, 
		RULE_tableReference = 197, RULE_escapedTableReference = 198, RULE_joinedTable = 199, 
		RULE_naturalJoinType = 200, RULE_innerJoinType = 201, RULE_outerJoinType = 202, 
		RULE_tableFactor = 203, RULE_singleTable = 204, RULE_singleTableParens = 205, 
		RULE_derivedTable = 206, RULE_tableReferenceListParens = 207, RULE_tableFunction = 208, 
		RULE_columnsClause = 209, RULE_jtColumn = 210, RULE_onEmptyOrError = 211, 
		RULE_onEmptyOrErrorJsonTable = 212, RULE_onEmpty = 213, RULE_onError = 214, 
		RULE_jsonOnResponse = 215, RULE_unionOption = 216, RULE_tableAlias = 217, 
		RULE_indexHintList = 218, RULE_indexHint = 219, RULE_indexHintType = 220, 
		RULE_keyOrIndex = 221, RULE_constraintKeyType = 222, RULE_indexHintClause = 223, 
		RULE_indexList = 224, RULE_indexListElement = 225, RULE_updateStatement = 226, 
		RULE_transactionOrLockingStatement = 227, RULE_transactionStatement = 228, 
		RULE_beginWork = 229, RULE_startTransactionOptionList = 230, RULE_savepointStatement = 231, 
		RULE_lockStatement = 232, RULE_lockItem = 233, RULE_lockOption = 234, 
		RULE_xaStatement = 235, RULE_xaConvert = 236, RULE_xid = 237, RULE_replicationStatement = 238, 
		RULE_purgeOptions = 239, RULE_resetOption = 240, RULE_masterOrBinaryLogsAndGtids = 241, 
		RULE_sourceResetOptions = 242, RULE_replicationLoad = 243, RULE_changeReplicationSource = 244, 
		RULE_changeSource = 245, RULE_sourceDefinitions = 246, RULE_sourceDefinition = 247, 
		RULE_changeReplicationSourceAutoPosition = 248, RULE_changeReplicationSourceHost = 249, 
		RULE_changeReplicationSourceBind = 250, RULE_changeReplicationSourceUser = 251, 
		RULE_changeReplicationSourcePassword = 252, RULE_changeReplicationSourcePort = 253, 
		RULE_changeReplicationSourceConnectRetry = 254, RULE_changeReplicationSourceRetryCount = 255, 
		RULE_changeReplicationSourceDelay = 256, RULE_changeReplicationSourceSSL = 257, 
		RULE_changeReplicationSourceSSLCA = 258, RULE_changeReplicationSourceSSLCApath = 259, 
		RULE_changeReplicationSourceSSLCipher = 260, RULE_changeReplicationSourceSSLCLR = 261, 
		RULE_changeReplicationSourceSSLCLRpath = 262, RULE_changeReplicationSourceSSLKey = 263, 
		RULE_changeReplicationSourceSSLVerifyServerCert = 264, RULE_changeReplicationSourceTLSVersion = 265, 
		RULE_changeReplicationSourceTLSCiphersuites = 266, RULE_changeReplicationSourceSSLCert = 267, 
		RULE_changeReplicationSourcePublicKey = 268, RULE_changeReplicationSourceGetSourcePublicKey = 269, 
		RULE_changeReplicationSourceHeartbeatPeriod = 270, RULE_changeReplicationSourceCompressionAlgorithm = 271, 
		RULE_changeReplicationSourceZstdCompressionLevel = 272, RULE_privilegeCheckDef = 273, 
		RULE_tablePrimaryKeyCheckDef = 274, RULE_assignGtidsToAnonymousTransactionsDefinition = 275, 
		RULE_sourceTlsCiphersuitesDef = 276, RULE_sourceFileDef = 277, RULE_sourceLogFile = 278, 
		RULE_sourceLogPos = 279, RULE_serverIdList = 280, RULE_changeReplication = 281, 
		RULE_filterDefinition = 282, RULE_filterDbList = 283, RULE_filterTableList = 284, 
		RULE_filterStringList = 285, RULE_filterWildDbTableString = 286, RULE_filterDbPairList = 287, 
		RULE_startReplicaStatement = 288, RULE_stopReplicaStatement = 289, RULE_replicaUntil = 290, 
		RULE_userOption = 291, RULE_passwordOption = 292, RULE_defaultAuthOption = 293, 
		RULE_pluginDirOption = 294, RULE_replicaThreadOptions = 295, RULE_replicaThreadOption = 296, 
		RULE_groupReplication = 297, RULE_groupReplicationStartOptions = 298, 
		RULE_groupReplicationStartOption = 299, RULE_groupReplicationUser = 300, 
		RULE_groupReplicationPassword = 301, RULE_groupReplicationPluginAuth = 302, 
		RULE_replica = 303, RULE_preparedStatement = 304, RULE_executeStatement = 305, 
		RULE_executeVarList = 306, RULE_cloneStatement = 307, RULE_dataDirSSL = 308, 
		RULE_ssl = 309, RULE_accountManagementStatement = 310, RULE_alterUserStatement = 311, 
		RULE_alterUserList = 312, RULE_alterUser = 313, RULE_oldAlterUser = 314, 
		RULE_userFunction = 315, RULE_createUserStatement = 316, RULE_createUserTail = 317, 
		RULE_userAttributes = 318, RULE_defaultRoleClause = 319, RULE_requireClause = 320, 
		RULE_connectOptions = 321, RULE_accountLockPasswordExpireOptions = 322, 
		RULE_userAttribute = 323, RULE_dropUserStatement = 324, RULE_grantStatement = 325, 
		RULE_grantTargetList = 326, RULE_grantOptions = 327, RULE_exceptRoleList = 328, 
		RULE_withRoles = 329, RULE_grantAs = 330, RULE_versionedRequireClause = 331, 
		RULE_renameUserStatement = 332, RULE_revokeStatement = 333, RULE_aclType = 334, 
		RULE_roleOrPrivilegesList = 335, RULE_roleOrPrivilege = 336, RULE_grantIdentifier = 337, 
		RULE_requireList = 338, RULE_requireListElement = 339, RULE_grantOption = 340, 
		RULE_setRoleStatement = 341, RULE_roleList = 342, RULE_role = 343, RULE_tableAdministrationStatement = 344, 
		RULE_histogramAutoUpdate = 345, RULE_histogramUpdateParam = 346, RULE_histogramNumBuckets = 347, 
		RULE_histogram = 348, RULE_checkOption = 349, RULE_repairType = 350, RULE_uninstallStatement = 351, 
		RULE_installStatement = 352, RULE_installOptionType = 353, RULE_installSetRvalue = 354, 
		RULE_installSetValue = 355, RULE_installSetValueList = 356, RULE_setStatement = 357, 
		RULE_startOptionValueList = 358, RULE_transactionCharacteristics = 359, 
		RULE_transactionAccessMode = 360, RULE_isolationLevel = 361, RULE_optionValueListContinued = 362, 
		RULE_optionValueNoOptionType = 363, RULE_optionValue = 364, RULE_setSystemVariable = 365, 
		RULE_startOptionValueListFollowingOptionType = 366, RULE_optionValueFollowingOptionType = 367, 
		RULE_setExprOrDefault = 368, RULE_showDatabasesStatement = 369, RULE_showTablesStatement = 370, 
		RULE_showTriggersStatement = 371, RULE_showEventsStatement = 372, RULE_showTableStatusStatement = 373, 
		RULE_showOpenTablesStatement = 374, RULE_showParseTreeStatement = 375, 
		RULE_showPluginsStatement = 376, RULE_showEngineLogsStatement = 377, RULE_showEngineMutexStatement = 378, 
		RULE_showEngineStatusStatement = 379, RULE_showColumnsStatement = 380, 
		RULE_showBinaryLogsStatement = 381, RULE_showBinaryLogStatusStatement = 382, 
		RULE_showReplicasStatement = 383, RULE_showBinlogEventsStatement = 384, 
		RULE_showRelaylogEventsStatement = 385, RULE_showKeysStatement = 386, 
		RULE_showEnginesStatement = 387, RULE_showCountWarningsStatement = 388, 
		RULE_showCountErrorsStatement = 389, RULE_showWarningsStatement = 390, 
		RULE_showErrorsStatement = 391, RULE_showProfilesStatement = 392, RULE_showProfileStatement = 393, 
		RULE_showStatusStatement = 394, RULE_showProcessListStatement = 395, RULE_showVariablesStatement = 396, 
		RULE_showCharacterSetStatement = 397, RULE_showCollationStatement = 398, 
		RULE_showPrivilegesStatement = 399, RULE_showGrantsStatement = 400, RULE_showCreateDatabaseStatement = 401, 
		RULE_showCreateTableStatement = 402, RULE_showCreateViewStatement = 403, 
		RULE_showMasterStatusStatement = 404, RULE_showReplicaStatusStatement = 405, 
		RULE_showCreateProcedureStatement = 406, RULE_showCreateFunctionStatement = 407, 
		RULE_showCreateTriggerStatement = 408, RULE_showCreateProcedureStatusStatement = 409, 
		RULE_showCreateFunctionStatusStatement = 410, RULE_showCreateProcedureCodeStatement = 411, 
		RULE_showCreateFunctionCodeStatement = 412, RULE_showCreateEventStatement = 413, 
		RULE_showCreateUserStatement = 414, RULE_showCommandType = 415, RULE_engineOrAll = 416, 
		RULE_fromOrIn = 417, RULE_inDb = 418, RULE_profileDefinitions = 419, RULE_profileDefinition = 420, 
		RULE_otherAdministrativeStatement = 421, RULE_keyCacheListOrParts = 422, 
		RULE_keyCacheList = 423, RULE_assignToKeycache = 424, RULE_assignToKeycachePartition = 425, 
		RULE_cacheKeyList = 426, RULE_keyUsageElement = 427, RULE_keyUsageList = 428, 
		RULE_flushOption = 429, RULE_logType = 430, RULE_flushTables = 431, RULE_flushTablesOptions = 432, 
		RULE_preloadTail = 433, RULE_preloadList = 434, RULE_preloadKeys = 435, 
		RULE_adminPartition = 436, RULE_resourceGroupManagement = 437, RULE_createResourceGroup = 438, 
		RULE_resourceGroupVcpuList = 439, RULE_vcpuNumOrRange = 440, RULE_resourceGroupPriority = 441, 
		RULE_resourceGroupEnableDisable = 442, RULE_alterResourceGroup = 443, 
		RULE_setResourceGroup = 444, RULE_threadIdList = 445, RULE_dropResourceGroup = 446, 
		RULE_utilityStatement = 447, RULE_describeStatement = 448, RULE_explainStatement = 449, 
		RULE_explainOptions = 450, RULE_explainableStatement = 451, RULE_explainInto = 452, 
		RULE_helpCommand = 453, RULE_useCommand = 454, RULE_restartServer = 455, 
		RULE_expr = 456, RULE_boolPri = 457, RULE_compOp = 458, RULE_predicate = 459, 
		RULE_predicateOperations = 460, RULE_bitExpr = 461, RULE_simpleExpr = 462, 
		RULE_arrayCast = 463, RULE_jsonOperator = 464, RULE_sumExpr = 465, RULE_groupingOperation = 466, 
		RULE_windowFunctionCall = 467, RULE_samplingMethod = 468, RULE_samplingPercentage = 469, 
		RULE_tablesampleClause = 470, RULE_windowingClause = 471, RULE_leadLagInfo = 472, 
		RULE_stableInteger = 473, RULE_paramOrVar = 474, RULE_nullTreatment = 475, 
		RULE_jsonFunction = 476, RULE_inSumExpr = 477, RULE_identListArg = 478, 
		RULE_identList = 479, RULE_fulltextOptions = 480, RULE_runtimeFunctionCall = 481, 
		RULE_returningType = 482, RULE_geometryFunction = 483, RULE_timeFunctionParameters = 484, 
		RULE_fractionalPrecision = 485, RULE_weightStringLevels = 486, RULE_weightStringLevelListItem = 487, 
		RULE_dateTimeTtype = 488, RULE_trimFunction = 489, RULE_substringFunction = 490, 
		RULE_functionCall = 491, RULE_udfExprList = 492, RULE_udfExpr = 493, RULE_userVariable = 494, 
		RULE_inExpressionUserVariableAssignment = 495, RULE_rvalueSystemOrUserVariable = 496, 
		RULE_lvalueVariable = 497, RULE_rvalueSystemVariable = 498, RULE_whenExpression = 499, 
		RULE_thenExpression = 500, RULE_elseExpression = 501, RULE_castType = 502, 
		RULE_exprList = 503, RULE_charset = 504, RULE_notRule = 505, RULE_not2Rule = 506, 
		RULE_interval = 507, RULE_intervalTimeStamp = 508, RULE_exprListWithParentheses = 509, 
		RULE_exprWithParentheses = 510, RULE_simpleExprWithParentheses = 511, 
		RULE_orderList = 512, RULE_orderExpression = 513, RULE_groupList = 514, 
		RULE_groupingExpression = 515, RULE_channel = 516, RULE_compoundStatement = 517, 
		RULE_returnStatement = 518, RULE_ifStatement = 519, RULE_ifBody = 520, 
		RULE_thenStatement = 521, RULE_compoundStatementList = 522, RULE_caseStatement = 523, 
		RULE_elseStatement = 524, RULE_labeledBlock = 525, RULE_unlabeledBlock = 526, 
		RULE_label = 527, RULE_beginEndBlock = 528, RULE_labeledControl = 529, 
		RULE_unlabeledControl = 530, RULE_loopBlock = 531, RULE_whileDoBlock = 532, 
		RULE_repeatUntilBlock = 533, RULE_spDeclarations = 534, RULE_spDeclaration = 535, 
		RULE_variableDeclaration = 536, RULE_conditionDeclaration = 537, RULE_spCondition = 538, 
		RULE_sqlstate = 539, RULE_handlerDeclaration = 540, RULE_handlerCondition = 541, 
		RULE_cursorDeclaration = 542, RULE_iterateStatement = 543, RULE_leaveStatement = 544, 
		RULE_getDiagnosticsStatement = 545, RULE_signalAllowedExpr = 546, RULE_statementInformationItem = 547, 
		RULE_conditionInformationItem = 548, RULE_signalInformationItemName = 549, 
		RULE_signalStatement = 550, RULE_resignalStatement = 551, RULE_signalInformationItem = 552, 
		RULE_cursorOpen = 553, RULE_cursorClose = 554, RULE_cursorFetch = 555, 
		RULE_schedule = 556, RULE_columnDefinition = 557, RULE_checkOrReferences = 558, 
		RULE_checkConstraint = 559, RULE_constraintEnforcement = 560, RULE_tableConstraintDef = 561, 
		RULE_constraintName = 562, RULE_fieldDefinition = 563, RULE_columnAttribute = 564, 
		RULE_columnFormat = 565, RULE_storageMedia = 566, RULE_now = 567, RULE_nowOrSignedLiteral = 568, 
		RULE_gcolAttribute = 569, RULE_references = 570, RULE_deleteOption = 571, 
		RULE_keyList = 572, RULE_keyPart = 573, RULE_keyListWithExpression = 574, 
		RULE_keyPartOrExpression = 575, RULE_indexType = 576, RULE_indexOption = 577, 
		RULE_commonIndexOption = 578, RULE_visibility = 579, RULE_indexTypeClause = 580, 
		RULE_fulltextIndexOption = 581, RULE_spatialIndexOption = 582, RULE_dataTypeDefinition = 583, 
		RULE_dataType = 584, RULE_nchar = 585, RULE_realType = 586, RULE_fieldLength = 587, 
		RULE_fieldOptions = 588, RULE_charsetWithOptBinary = 589, RULE_ascii = 590, 
		RULE_unicode = 591, RULE_wsNumCodepoints = 592, RULE_typeDatetimePrecision = 593, 
		RULE_functionDatetimePrecision = 594, RULE_charsetName = 595, RULE_collationName = 596, 
		RULE_createTableOptions = 597, RULE_createTableOptionsEtc = 598, RULE_createPartitioningEtc = 599, 
		RULE_createTableOptionsSpaceSeparated = 600, RULE_createTableOption = 601, 
		RULE_ternaryOption = 602, RULE_defaultCollation = 603, RULE_defaultEncryption = 604, 
		RULE_defaultCharset = 605, RULE_partitionClause = 606, RULE_partitionTypeDef = 607, 
		RULE_subPartitions = 608, RULE_partitionKeyAlgorithm = 609, RULE_partitionDefinitions = 610, 
		RULE_partitionDefinition = 611, RULE_partitionValuesIn = 612, RULE_partitionOption = 613, 
		RULE_subpartitionDefinition = 614, RULE_partitionValueItemListParen = 615, 
		RULE_partitionValueItem = 616, RULE_definerClause = 617, RULE_ifExists = 618, 
		RULE_ifExistsIdentifier = 619, RULE_persistedVariableIdentifier = 620, 
		RULE_ifNotExists = 621, RULE_ignoreUnknownUser = 622, RULE_procedureParameter = 623, 
		RULE_functionParameter = 624, RULE_collate = 625, RULE_typeWithOptCollate = 626, 
		RULE_schemaIdentifierPair = 627, RULE_viewRefList = 628, RULE_updateList = 629, 
		RULE_updateElement = 630, RULE_charsetClause = 631, RULE_fieldsClause = 632, 
		RULE_fieldTerm = 633, RULE_linesClause = 634, RULE_lineTerm = 635, RULE_userList = 636, 
		RULE_createUserList = 637, RULE_createUser = 638, RULE_createUserWithMfa = 639, 
		RULE_identification = 640, RULE_identifiedByPassword = 641, RULE_identifiedByRandomPassword = 642, 
		RULE_identifiedWithPlugin = 643, RULE_identifiedWithPluginAsAuth = 644, 
		RULE_identifiedWithPluginByPassword = 645, RULE_identifiedWithPluginByRandomPassword = 646, 
		RULE_initialAuth = 647, RULE_retainCurrentPassword = 648, RULE_discardOldPassword = 649, 
		RULE_userRegistration = 650, RULE_factor = 651, RULE_replacePassword = 652, 
		RULE_userIdentifierOrText = 653, RULE_user = 654, RULE_likeClause = 655, 
		RULE_likeOrWhere = 656, RULE_onlineOption = 657, RULE_noWriteToBinLog = 658, 
		RULE_usePartition = 659, RULE_fieldIdentifier = 660, RULE_columnName = 661, 
		RULE_columnInternalRef = 662, RULE_columnInternalRefList = 663, RULE_columnRef = 664, 
		RULE_insertIdentifier = 665, RULE_indexName = 666, RULE_indexRef = 667, 
		RULE_tableWild = 668, RULE_schemaName = 669, RULE_schemaRef = 670, RULE_procedureName = 671, 
		RULE_procedureRef = 672, RULE_functionName = 673, RULE_functionRef = 674, 
		RULE_triggerName = 675, RULE_triggerRef = 676, RULE_viewName = 677, RULE_viewRef = 678, 
		RULE_tablespaceName = 679, RULE_tablespaceRef = 680, RULE_logfileGroupName = 681, 
		RULE_logfileGroupRef = 682, RULE_eventName = 683, RULE_eventRef = 684, 
		RULE_udfName = 685, RULE_serverName = 686, RULE_serverRef = 687, RULE_engineRef = 688, 
		RULE_tableName = 689, RULE_filterTableRef = 690, RULE_tableRefWithWildcard = 691, 
		RULE_tableRef = 692, RULE_tableRefList = 693, RULE_tableAliasRefList = 694, 
		RULE_parameterName = 695, RULE_labelIdentifier = 696, RULE_labelRef = 697, 
		RULE_roleIdentifier = 698, RULE_pluginRef = 699, RULE_componentRef = 700, 
		RULE_resourceGroupRef = 701, RULE_windowName = 702, RULE_pureIdentifier = 703, 
		RULE_identifier = 704, RULE_identifierList = 705, RULE_identifierListWithParentheses = 706, 
		RULE_qualifiedIdentifier = 707, RULE_simpleIdentifier = 708, RULE_dotIdentifier = 709, 
		RULE_ulong_number = 710, RULE_real_ulong_number = 711, RULE_ulonglongNumber = 712, 
		RULE_real_ulonglong_number = 713, RULE_signedLiteral = 714, RULE_signedLiteralOrNull = 715, 
		RULE_literal = 716, RULE_literalOrNull = 717, RULE_nullAsLiteral = 718, 
		RULE_stringList = 719, RULE_textStringLiteral = 720, RULE_textString = 721, 
		RULE_textStringHash = 722, RULE_textLiteral = 723, RULE_textStringNoLinebreak = 724, 
		RULE_textStringLiteralList = 725, RULE_numLiteral = 726, RULE_boolLiteral = 727, 
		RULE_nullLiteral = 728, RULE_int64Literal = 729, RULE_temporalLiteral = 730, 
		RULE_floatOptions = 731, RULE_standardFloatOptions = 732, RULE_precision = 733, 
		RULE_textOrIdentifier = 734, RULE_lValueIdentifier = 735, RULE_roleIdentifierOrText = 736, 
		RULE_sizeNumber = 737, RULE_parentheses = 738, RULE_equal = 739, RULE_optionType = 740, 
		RULE_rvalueSystemVariableType = 741, RULE_setVarIdentType = 742, RULE_jsonAttribute = 743, 
		RULE_identifierKeyword = 744, RULE_identifierKeywordsAmbiguous1RolesAndLabels = 745, 
		RULE_identifierKeywordsAmbiguous2Labels = 746, RULE_labelKeyword = 747, 
		RULE_identifierKeywordsAmbiguous3Roles = 748, RULE_identifierKeywordsUnambiguous = 749, 
		RULE_roleKeyword = 750, RULE_lValueKeyword = 751, RULE_identifierKeywordsAmbiguous4SystemVariables = 752, 
		RULE_roleOrIdentifierKeyword = 753, RULE_roleOrLabelKeyword = 754;
	public static readonly string[] ruleNames = {
		"queries", "query", "simpleStatement", "alterStatement", "alterDatabase", 
		"alterDatabaseOption", "alterEvent", "alterLogfileGroup", "alterLogfileGroupOptions", 
		"alterLogfileGroupOption", "alterServer", "alterTable", "alterTableActions", 
		"alterCommandList", "alterCommandsModifierList", "standaloneAlterCommands", 
		"alterPartition", "alterList", "alterCommandsModifier", "alterListItem", 
		"place", "restrict", "alterOrderList", "alterAlgorithmOption", "alterLockOption", 
		"indexLockAndAlgorithm", "withValidation", "removePartitioning", "allOrPartitionNameList", 
		"alterTablespace", "alterUndoTablespace", "undoTableSpaceOptions", "undoTableSpaceOption", 
		"alterTablespaceOptions", "alterTablespaceOption", "changeTablespaceOption", 
		"alterView", "viewTail", "viewQueryBlock", "viewCheckOption", "alterInstanceStatement", 
		"createStatement", "createDatabase", "createDatabaseOption", "createTable", 
		"tableElementList", "tableElement", "duplicateAsQe", "asCreateQueryExpression", 
		"queryExpressionOrParens", "queryExpressionWithOptLockingClauses", "createRoutine", 
		"createProcedure", "routineString", "storedRoutineBody", "createFunction", 
		"createUdf", "routineCreateOption", "routineAlterOptions", "routineOption", 
		"createIndex", "indexNameAndType", "createIndexTarget", "createLogfileGroup", 
		"logfileGroupOptions", "logfileGroupOption", "createServer", "serverOptions", 
		"serverOption", "createTablespace", "createUndoTablespace", "tsDataFileName", 
		"tsDataFile", "tablespaceOptions", "tablespaceOption", "tsOptionInitialSize", 
		"tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize", "tsOptionMaxSize", 
		"tsOptionExtentSize", "tsOptionNodegroup", "tsOptionEngine", "tsOptionWait", 
		"tsOptionComment", "tsOptionFileblockSize", "tsOptionEncryption", "tsOptionEngineAttribute", 
		"createView", "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", "createTrigger", 
		"triggerFollowsPrecedesClause", "createEvent", "createRole", "createSpatialReference", 
		"srsAttribute", "dropStatement", "dropDatabase", "dropEvent", "dropFunction", 
		"dropProcedure", "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption", 
		"dropServer", "dropTable", "dropTableSpace", "dropTrigger", "dropView", 
		"dropRole", "dropSpatialReference", "dropUndoTablespace", "renameTableStatement", 
		"renamePair", "truncateTableStatement", "importStatement", "callStatement", 
		"deleteStatement", "partitionDelete", "deleteStatementOption", "doStatement", 
		"handlerStatement", "handlerReadOrScan", "insertStatement", "insertLockOption", 
		"insertFromConstructor", "fields", "insertValues", "insertQueryExpression", 
		"valueList", "values", "valuesReference", "insertUpdateList", "loadStatement", 
		"dataOrXml", "loadDataLock", "loadFrom", "loadSourceType", "sourceCount", 
		"sourceOrder", "xmlRowsIdentifiedBy", "loadDataFileTail", "loadDataFileTargetList", 
		"fieldOrVariableList", "loadAlgorithm", "loadParallel", "loadMemory", 
		"replaceStatement", "selectStatement", "selectStatementWithInto", "queryExpression", 
		"queryExpressionBody", "queryExpressionParens", "queryPrimary", "querySpecification", 
		"subquery", "querySpecOption", "limitClause", "simpleLimitClause", "limitOptions", 
		"limitOption", "intoClause", "procedureAnalyseClause", "havingClause", 
		"qualifyClause", "windowClause", "windowDefinition", "windowSpec", "windowSpecDetails", 
		"windowFrameClause", "windowFrameUnits", "windowFrameExtent", "windowFrameStart", 
		"windowFrameBetween", "windowFrameBound", "windowFrameExclusion", "withClause", 
		"commonTableExpression", "groupByClause", "olapOption", "orderClause", 
		"direction", "fromClause", "tableReferenceList", "tableValueConstructor", 
		"explicitTable", "rowValueExplicit", "selectOption", "lockingClauseList", 
		"lockingClause", "lockStrengh", "lockedRowAction", "selectItemList", "selectItem", 
		"selectAlias", "whereClause", "tableReference", "escapedTableReference", 
		"joinedTable", "naturalJoinType", "innerJoinType", "outerJoinType", "tableFactor", 
		"singleTable", "singleTableParens", "derivedTable", "tableReferenceListParens", 
		"tableFunction", "columnsClause", "jtColumn", "onEmptyOrError", "onEmptyOrErrorJsonTable", 
		"onEmpty", "onError", "jsonOnResponse", "unionOption", "tableAlias", "indexHintList", 
		"indexHint", "indexHintType", "keyOrIndex", "constraintKeyType", "indexHintClause", 
		"indexList", "indexListElement", "updateStatement", "transactionOrLockingStatement", 
		"transactionStatement", "beginWork", "startTransactionOptionList", "savepointStatement", 
		"lockStatement", "lockItem", "lockOption", "xaStatement", "xaConvert", 
		"xid", "replicationStatement", "purgeOptions", "resetOption", "masterOrBinaryLogsAndGtids", 
		"sourceResetOptions", "replicationLoad", "changeReplicationSource", "changeSource", 
		"sourceDefinitions", "sourceDefinition", "changeReplicationSourceAutoPosition", 
		"changeReplicationSourceHost", "changeReplicationSourceBind", "changeReplicationSourceUser", 
		"changeReplicationSourcePassword", "changeReplicationSourcePort", "changeReplicationSourceConnectRetry", 
		"changeReplicationSourceRetryCount", "changeReplicationSourceDelay", "changeReplicationSourceSSL", 
		"changeReplicationSourceSSLCA", "changeReplicationSourceSSLCApath", "changeReplicationSourceSSLCipher", 
		"changeReplicationSourceSSLCLR", "changeReplicationSourceSSLCLRpath", 
		"changeReplicationSourceSSLKey", "changeReplicationSourceSSLVerifyServerCert", 
		"changeReplicationSourceTLSVersion", "changeReplicationSourceTLSCiphersuites", 
		"changeReplicationSourceSSLCert", "changeReplicationSourcePublicKey", 
		"changeReplicationSourceGetSourcePublicKey", "changeReplicationSourceHeartbeatPeriod", 
		"changeReplicationSourceCompressionAlgorithm", "changeReplicationSourceZstdCompressionLevel", 
		"privilegeCheckDef", "tablePrimaryKeyCheckDef", "assignGtidsToAnonymousTransactionsDefinition", 
		"sourceTlsCiphersuitesDef", "sourceFileDef", "sourceLogFile", "sourceLogPos", 
		"serverIdList", "changeReplication", "filterDefinition", "filterDbList", 
		"filterTableList", "filterStringList", "filterWildDbTableString", "filterDbPairList", 
		"startReplicaStatement", "stopReplicaStatement", "replicaUntil", "userOption", 
		"passwordOption", "defaultAuthOption", "pluginDirOption", "replicaThreadOptions", 
		"replicaThreadOption", "groupReplication", "groupReplicationStartOptions", 
		"groupReplicationStartOption", "groupReplicationUser", "groupReplicationPassword", 
		"groupReplicationPluginAuth", "replica", "preparedStatement", "executeStatement", 
		"executeVarList", "cloneStatement", "dataDirSSL", "ssl", "accountManagementStatement", 
		"alterUserStatement", "alterUserList", "alterUser", "oldAlterUser", "userFunction", 
		"createUserStatement", "createUserTail", "userAttributes", "defaultRoleClause", 
		"requireClause", "connectOptions", "accountLockPasswordExpireOptions", 
		"userAttribute", "dropUserStatement", "grantStatement", "grantTargetList", 
		"grantOptions", "exceptRoleList", "withRoles", "grantAs", "versionedRequireClause", 
		"renameUserStatement", "revokeStatement", "aclType", "roleOrPrivilegesList", 
		"roleOrPrivilege", "grantIdentifier", "requireList", "requireListElement", 
		"grantOption", "setRoleStatement", "roleList", "role", "tableAdministrationStatement", 
		"histogramAutoUpdate", "histogramUpdateParam", "histogramNumBuckets", 
		"histogram", "checkOption", "repairType", "uninstallStatement", "installStatement", 
		"installOptionType", "installSetRvalue", "installSetValue", "installSetValueList", 
		"setStatement", "startOptionValueList", "transactionCharacteristics", 
		"transactionAccessMode", "isolationLevel", "optionValueListContinued", 
		"optionValueNoOptionType", "optionValue", "setSystemVariable", "startOptionValueListFollowingOptionType", 
		"optionValueFollowingOptionType", "setExprOrDefault", "showDatabasesStatement", 
		"showTablesStatement", "showTriggersStatement", "showEventsStatement", 
		"showTableStatusStatement", "showOpenTablesStatement", "showParseTreeStatement", 
		"showPluginsStatement", "showEngineLogsStatement", "showEngineMutexStatement", 
		"showEngineStatusStatement", "showColumnsStatement", "showBinaryLogsStatement", 
		"showBinaryLogStatusStatement", "showReplicasStatement", "showBinlogEventsStatement", 
		"showRelaylogEventsStatement", "showKeysStatement", "showEnginesStatement", 
		"showCountWarningsStatement", "showCountErrorsStatement", "showWarningsStatement", 
		"showErrorsStatement", "showProfilesStatement", "showProfileStatement", 
		"showStatusStatement", "showProcessListStatement", "showVariablesStatement", 
		"showCharacterSetStatement", "showCollationStatement", "showPrivilegesStatement", 
		"showGrantsStatement", "showCreateDatabaseStatement", "showCreateTableStatement", 
		"showCreateViewStatement", "showMasterStatusStatement", "showReplicaStatusStatement", 
		"showCreateProcedureStatement", "showCreateFunctionStatement", "showCreateTriggerStatement", 
		"showCreateProcedureStatusStatement", "showCreateFunctionStatusStatement", 
		"showCreateProcedureCodeStatement", "showCreateFunctionCodeStatement", 
		"showCreateEventStatement", "showCreateUserStatement", "showCommandType", 
		"engineOrAll", "fromOrIn", "inDb", "profileDefinitions", "profileDefinition", 
		"otherAdministrativeStatement", "keyCacheListOrParts", "keyCacheList", 
		"assignToKeycache", "assignToKeycachePartition", "cacheKeyList", "keyUsageElement", 
		"keyUsageList", "flushOption", "logType", "flushTables", "flushTablesOptions", 
		"preloadTail", "preloadList", "preloadKeys", "adminPartition", "resourceGroupManagement", 
		"createResourceGroup", "resourceGroupVcpuList", "vcpuNumOrRange", "resourceGroupPriority", 
		"resourceGroupEnableDisable", "alterResourceGroup", "setResourceGroup", 
		"threadIdList", "dropResourceGroup", "utilityStatement", "describeStatement", 
		"explainStatement", "explainOptions", "explainableStatement", "explainInto", 
		"helpCommand", "useCommand", "restartServer", "expr", "boolPri", "compOp", 
		"predicate", "predicateOperations", "bitExpr", "simpleExpr", "arrayCast", 
		"jsonOperator", "sumExpr", "groupingOperation", "windowFunctionCall", 
		"samplingMethod", "samplingPercentage", "tablesampleClause", "windowingClause", 
		"leadLagInfo", "stableInteger", "paramOrVar", "nullTreatment", "jsonFunction", 
		"inSumExpr", "identListArg", "identList", "fulltextOptions", "runtimeFunctionCall", 
		"returningType", "geometryFunction", "timeFunctionParameters", "fractionalPrecision", 
		"weightStringLevels", "weightStringLevelListItem", "dateTimeTtype", "trimFunction", 
		"substringFunction", "functionCall", "udfExprList", "udfExpr", "userVariable", 
		"inExpressionUserVariableAssignment", "rvalueSystemOrUserVariable", "lvalueVariable", 
		"rvalueSystemVariable", "whenExpression", "thenExpression", "elseExpression", 
		"castType", "exprList", "charset", "notRule", "not2Rule", "interval", 
		"intervalTimeStamp", "exprListWithParentheses", "exprWithParentheses", 
		"simpleExprWithParentheses", "orderList", "orderExpression", "groupList", 
		"groupingExpression", "channel", "compoundStatement", "returnStatement", 
		"ifStatement", "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
		"elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock", 
		"labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", "repeatUntilBlock", 
		"spDeclarations", "spDeclaration", "variableDeclaration", "conditionDeclaration", 
		"spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", "cursorDeclaration", 
		"iterateStatement", "leaveStatement", "getDiagnosticsStatement", "signalAllowedExpr", 
		"statementInformationItem", "conditionInformationItem", "signalInformationItemName", 
		"signalStatement", "resignalStatement", "signalInformationItem", "cursorOpen", 
		"cursorClose", "cursorFetch", "schedule", "columnDefinition", "checkOrReferences", 
		"checkConstraint", "constraintEnforcement", "tableConstraintDef", "constraintName", 
		"fieldDefinition", "columnAttribute", "columnFormat", "storageMedia", 
		"now", "nowOrSignedLiteral", "gcolAttribute", "references", "deleteOption", 
		"keyList", "keyPart", "keyListWithExpression", "keyPartOrExpression", 
		"indexType", "indexOption", "commonIndexOption", "visibility", "indexTypeClause", 
		"fulltextIndexOption", "spatialIndexOption", "dataTypeDefinition", "dataType", 
		"nchar", "realType", "fieldLength", "fieldOptions", "charsetWithOptBinary", 
		"ascii", "unicode", "wsNumCodepoints", "typeDatetimePrecision", "functionDatetimePrecision", 
		"charsetName", "collationName", "createTableOptions", "createTableOptionsEtc", 
		"createPartitioningEtc", "createTableOptionsSpaceSeparated", "createTableOption", 
		"ternaryOption", "defaultCollation", "defaultEncryption", "defaultCharset", 
		"partitionClause", "partitionTypeDef", "subPartitions", "partitionKeyAlgorithm", 
		"partitionDefinitions", "partitionDefinition", "partitionValuesIn", "partitionOption", 
		"subpartitionDefinition", "partitionValueItemListParen", "partitionValueItem", 
		"definerClause", "ifExists", "ifExistsIdentifier", "persistedVariableIdentifier", 
		"ifNotExists", "ignoreUnknownUser", "procedureParameter", "functionParameter", 
		"collate", "typeWithOptCollate", "schemaIdentifierPair", "viewRefList", 
		"updateList", "updateElement", "charsetClause", "fieldsClause", "fieldTerm", 
		"linesClause", "lineTerm", "userList", "createUserList", "createUser", 
		"createUserWithMfa", "identification", "identifiedByPassword", "identifiedByRandomPassword", 
		"identifiedWithPlugin", "identifiedWithPluginAsAuth", "identifiedWithPluginByPassword", 
		"identifiedWithPluginByRandomPassword", "initialAuth", "retainCurrentPassword", 
		"discardOldPassword", "userRegistration", "factor", "replacePassword", 
		"userIdentifierOrText", "user", "likeClause", "likeOrWhere", "onlineOption", 
		"noWriteToBinLog", "usePartition", "fieldIdentifier", "columnName", "columnInternalRef", 
		"columnInternalRefList", "columnRef", "insertIdentifier", "indexName", 
		"indexRef", "tableWild", "schemaName", "schemaRef", "procedureName", "procedureRef", 
		"functionName", "functionRef", "triggerName", "triggerRef", "viewName", 
		"viewRef", "tablespaceName", "tablespaceRef", "logfileGroupName", "logfileGroupRef", 
		"eventName", "eventRef", "udfName", "serverName", "serverRef", "engineRef", 
		"tableName", "filterTableRef", "tableRefWithWildcard", "tableRef", "tableRefList", 
		"tableAliasRefList", "parameterName", "labelIdentifier", "labelRef", "roleIdentifier", 
		"pluginRef", "componentRef", "resourceGroupRef", "windowName", "pureIdentifier", 
		"identifier", "identifierList", "identifierListWithParentheses", "qualifiedIdentifier", 
		"simpleIdentifier", "dotIdentifier", "ulong_number", "real_ulong_number", 
		"ulonglongNumber", "real_ulonglong_number", "signedLiteral", "signedLiteralOrNull", 
		"literal", "literalOrNull", "nullAsLiteral", "stringList", "textStringLiteral", 
		"textString", "textStringHash", "textLiteral", "textStringNoLinebreak", 
		"textStringLiteralList", "numLiteral", "boolLiteral", "nullLiteral", "int64Literal", 
		"temporalLiteral", "floatOptions", "standardFloatOptions", "precision", 
		"textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", "sizeNumber", 
		"parentheses", "equal", "optionType", "rvalueSystemVariableType", "setVarIdentType", 
		"jsonAttribute", "identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", 
		"identifierKeywordsAmbiguous2Labels", "labelKeyword", "identifierKeywordsAmbiguous3Roles", 
		"identifierKeywordsUnambiguous", "roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
		"roleOrIdentifierKeyword", "roleOrLabelKeyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'='", "':='", "'<=>'", "'>='", "'>'", 
		"'<='", "'<'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'~'", 
		"'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", "'|'", "'.'", "','", "';'", 
		"':'", "'('", "')'", "'{'", "'}'", "'_'", "'->'", "'->>'", "'@'", null, 
		"'@@'", "'\\N'", "'?'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", "INT_NUMBER", "LONG_NUMBER", 
		"ULONGLONG_NUMBER", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", 
		"GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
		"LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", 
		"MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", 
		"BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", 
		"LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", 
		"LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
		"SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", "CLOSE_PAR_SYMBOL", 
		"OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", "JSON_SEPARATOR_SYMBOL", 
		"JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", 
		"AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
		"DECIMAL_NUMBER", "FLOAT_NUMBER", "ACCESSIBLE_SYMBOL", "ACCOUNT_SYMBOL", 
		"ACTION_SYMBOL", "ADD_SYMBOL", "ADDDATE_SYMBOL", "AFTER_SYMBOL", "AGAINST_SYMBOL", 
		"AGGREGATE_SYMBOL", "ALGORITHM_SYMBOL", "ALL_SYMBOL", "ALTER_SYMBOL", 
		"ALWAYS_SYMBOL", "ANALYZE_SYMBOL", "AND_SYMBOL", "ANY_SYMBOL", "AS_SYMBOL", 
		"ASC_SYMBOL", "ASCII_SYMBOL", "ASENSITIVE_SYMBOL", "AT_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", 
		"AUTO_INCREMENT_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", "AVG_SYMBOL", "BACKUP_SYMBOL", 
		"BEFORE_SYMBOL", "BEGIN_SYMBOL", "BETWEEN_SYMBOL", "BIGINT_SYMBOL", "BINARY_SYMBOL", 
		"BINLOG_SYMBOL", "BIT_AND_SYMBOL", "BIT_OR_SYMBOL", "BIT_SYMBOL", "BIT_XOR_SYMBOL", 
		"BLOB_SYMBOL", "BLOCK_SYMBOL", "BOOLEAN_SYMBOL", "BOOL_SYMBOL", "BOTH_SYMBOL", 
		"BTREE_SYMBOL", "BY_SYMBOL", "BYTE_SYMBOL", "CACHE_SYMBOL", "CALL_SYMBOL", 
		"CASCADE_SYMBOL", "CASCADED_SYMBOL", "CASE_SYMBOL", "CAST_SYMBOL", "CATALOG_NAME_SYMBOL", 
		"CHAIN_SYMBOL", "CHANGE_SYMBOL", "CHANGED_SYMBOL", "CHANNEL_SYMBOL", "CHARSET_SYMBOL", 
		"CHAR_SYMBOL", "CHECKSUM_SYMBOL", "CHECK_SYMBOL", "CIPHER_SYMBOL", "CLASS_ORIGIN_SYMBOL", 
		"CLIENT_SYMBOL", "CLOSE_SYMBOL", "COALESCE_SYMBOL", "CODE_SYMBOL", "COLLATE_SYMBOL", 
		"COLLATION_SYMBOL", "COLUMNS_SYMBOL", "COLUMN_SYMBOL", "COLUMN_NAME_SYMBOL", 
		"COLUMN_FORMAT_SYMBOL", "COMMENT_SYMBOL", "COMMITTED_SYMBOL", "COMMIT_SYMBOL", 
		"COMPACT_SYMBOL", "COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", 
		"CONCURRENT_SYMBOL", "CONDITION_SYMBOL", "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", 
		"CONSTRAINT_SYMBOL", "CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_NAME_SYMBOL", 
		"CONSTRAINT_SCHEMA_SYMBOL", "CONTAINS_SYMBOL", "CONTEXT_SYMBOL", "CONTINUE_SYMBOL", 
		"CONVERT_SYMBOL", "COUNT_SYMBOL", "CPU_SYMBOL", "CREATE_SYMBOL", "CROSS_SYMBOL", 
		"CUBE_SYMBOL", "CURDATE_SYMBOL", "CURRENT_SYMBOL", "CURRENT_DATE_SYMBOL", 
		"CURRENT_TIME_SYMBOL", "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURSOR_NAME_SYMBOL", 
		"CURTIME_SYMBOL", "DATABASE_SYMBOL", "DATABASES_SYMBOL", "DATAFILE_SYMBOL", 
		"DATA_SYMBOL", "DATETIME_SYMBOL", "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", 
		"DATE_SYMBOL", "DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", 
		"DAY_SECOND_SYMBOL", "DAY_SYMBOL", "DEALLOCATE_SYMBOL", "DECIMAL_SYMBOL", 
		"DECLARE_SYMBOL", "DEFAULT_SYMBOL", "DEFAULT_AUTH_SYMBOL", "DEFINER_SYMBOL", 
		"DELAYED_SYMBOL", "DELAY_KEY_WRITE_SYMBOL", "DELETE_SYMBOL", "DESC_SYMBOL", 
		"DESCRIBE_SYMBOL", "DETERMINISTIC_SYMBOL", "DIAGNOSTICS_SYMBOL", "DIRECTORY_SYMBOL", 
		"DISABLE_SYMBOL", "DISCARD_SYMBOL", "DISK_SYMBOL", "DISTINCT_SYMBOL", 
		"DIV_SYMBOL", "DOUBLE_SYMBOL", "DO_SYMBOL", "DROP_SYMBOL", "DUAL_SYMBOL", 
		"DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "EACH_SYMBOL", 
		"ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENABLE_SYMBOL", "ENCLOSED_SYMBOL", "ENCRYPTION_SYMBOL", 
		"END_SYMBOL", "ENDS_SYMBOL", "ENGINES_SYMBOL", "ENGINE_SYMBOL", "ENUM_SYMBOL", 
		"ERROR_SYMBOL", "ERRORS_SYMBOL", "ESCAPED_SYMBOL", "ESCAPE_SYMBOL", "EVENTS_SYMBOL", 
		"EVENT_SYMBOL", "EVERY_SYMBOL", "EXCHANGE_SYMBOL", "EXECUTE_SYMBOL", "EXISTS_SYMBOL", 
		"EXIT_SYMBOL", "EXPANSION_SYMBOL", "EXPIRE_SYMBOL", "EXPLAIN_SYMBOL", 
		"EXPORT_SYMBOL", "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", "EXTRACT_SYMBOL", 
		"FALSE_SYMBOL", "FAST_SYMBOL", "FAULTS_SYMBOL", "FETCH_SYMBOL", "FILE_SYMBOL", 
		"FILE_BLOCK_SIZE_SYMBOL", "FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", 
		"FLOAT_SYMBOL", "FLUSH_SYMBOL", "FOLLOWS_SYMBOL", "FORCE_SYMBOL", "FOREIGN_SYMBOL", 
		"FOR_SYMBOL", "FORMAT_SYMBOL", "FOUND_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL", 
		"FULLTEXT_SYMBOL", "FUNCTION_SYMBOL", "GET_SYMBOL", "GENERAL_SYMBOL", 
		"GENERATED_SYMBOL", "GROUP_REPLICATION_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", 
		"GEOMETRY_SYMBOL", "GET_FORMAT_SYMBOL", "GLOBAL_SYMBOL", "GRANT_SYMBOL", 
		"GRANTS_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", "HANDLER_SYMBOL", 
		"HASH_SYMBOL", "HAVING_SYMBOL", "HELP_SYMBOL", "HIGH_PRIORITY_SYMBOL", 
		"HOST_SYMBOL", "HOSTS_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", 
		"HOUR_SECOND_SYMBOL", "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", "IF_SYMBOL", 
		"IGNORE_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", "IMPORT_SYMBOL", "INDEXES_SYMBOL", 
		"INDEX_SYMBOL", "INFILE_SYMBOL", "INITIAL_SIZE_SYMBOL", "INNER_SYMBOL", 
		"INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", "INSERT_METHOD_SYMBOL", 
		"INSTANCE_SYMBOL", "INSTALL_SYMBOL", "INTERVAL_SYMBOL", "INTO_SYMBOL", 
		"INT_SYMBOL", "INVOKER_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
		"IO_BEFORE_GTIDS_SYMBOL", "IO_SYMBOL", "IPC_SYMBOL", "IS_SYMBOL", "ISOLATION_SYMBOL", 
		"ISSUER_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL", "JSON_SYMBOL", "KEYS_SYMBOL", 
		"KEY_BLOCK_SIZE_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", "LANGUAGE_SYMBOL", 
		"LAST_SYMBOL", "LEADING_SYMBOL", "LEAVES_SYMBOL", "LEAVE_SYMBOL", "LEFT_SYMBOL", 
		"LESS_SYMBOL", "LEVEL_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL", 
		"LINES_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOAD_SYMBOL", "LOCAL_SYMBOL", 
		"LOCKS_SYMBOL", "LOCK_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "LONGBLOB_SYMBOL", 
		"LONGTEXT_SYMBOL", "LONG_SYMBOL", "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", 
		"MASTER_AUTO_POSITION_SYMBOL", "MASTER_BIND_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL", 
		"MASTER_DELAY_SYMBOL", "MASTER_HOST_SYMBOL", "MASTER_LOG_FILE_SYMBOL", 
		"MASTER_LOG_POS_SYMBOL", "MASTER_PASSWORD_SYMBOL", "MASTER_PORT_SYMBOL", 
		"MASTER_RETRY_COUNT_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", "MASTER_SSL_CA_SYMBOL", 
		"MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL", 
		"MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", "MASTER_SSL_SYMBOL", 
		"MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MASTER_SYMBOL", "MASTER_TLS_VERSION_SYMBOL", 
		"MASTER_USER_SYMBOL", "MASTER_HEARTBEAT_PERIOD_SYMBOL", "MATCH_SYMBOL", 
		"MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", "MAX_ROWS_SYMBOL", 
		"MAX_SIZE_SYMBOL", "MAX_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", "MAX_USER_CONNECTIONS_SYMBOL", 
		"MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", "MEDIUMTEXT_SYMBOL", 
		"MEDIUM_SYMBOL", "MEMORY_SYMBOL", "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", 
		"MICROSECOND_SYMBOL", "MID_SYMBOL", "MIGRATE_SYMBOL", "MINUTE_MICROSECOND_SYMBOL", 
		"MINUTE_SECOND_SYMBOL", "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", "MIN_SYMBOL", 
		"MODE_SYMBOL", "MODIFIES_SYMBOL", "MODIFY_SYMBOL", "MOD_SYMBOL", "MONTH_SYMBOL", 
		"MULTILINESTRING_SYMBOL", "MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", 
		"MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", "NAMES_SYMBOL", "NAME_SYMBOL", "NATIONAL_SYMBOL", 
		"NATURAL_SYMBOL", "NCHAR_SYMBOL", "NDBCLUSTER_SYMBOL", "NEVER_SYMBOL", 
		"NEW_SYMBOL", "NEXT_SYMBOL", "NODEGROUP_SYMBOL", "NONE_SYMBOL", "NOT_SYMBOL", 
		"NOW_SYMBOL", "NO_SYMBOL", "NO_WAIT_SYMBOL", "NO_WRITE_TO_BINLOG_SYMBOL", 
		"NULL_SYMBOL", "NUMBER_SYMBOL", "NUMERIC_SYMBOL", "NVARCHAR_SYMBOL", "OFFLINE_SYMBOL", 
		"OFFSET_SYMBOL", "ON_SYMBOL", "ONE_SYMBOL", "ONLINE_SYMBOL", "ONLY_SYMBOL", 
		"OPEN_SYMBOL", "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL", "OPTIONS_SYMBOL", 
		"OPTION_SYMBOL", "OPTIONALLY_SYMBOL", "ORDER_SYMBOL", "OR_SYMBOL", "OUTER_SYMBOL", 
		"OUTFILE_SYMBOL", "OUT_SYMBOL", "OWNER_SYMBOL", "PACK_KEYS_SYMBOL", "PAGE_SYMBOL", 
		"PARSER_SYMBOL", "PARTIAL_SYMBOL", "PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", 
		"PARTITION_SYMBOL", "PASSWORD_SYMBOL", "PHASE_SYMBOL", "PLUGINS_SYMBOL", 
		"PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", "POINT_SYMBOL", "POLYGON_SYMBOL", 
		"PORT_SYMBOL", "POSITION_SYMBOL", "PRECEDES_SYMBOL", "PRECISION_SYMBOL", 
		"PREPARE_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL", "PRIMARY_SYMBOL", 
		"PRIVILEGES_SYMBOL", "PROCEDURE_SYMBOL", "PROCESS_SYMBOL", "PROCESSLIST_SYMBOL", 
		"PROFILE_SYMBOL", "PROFILES_SYMBOL", "PROXY_SYMBOL", "PURGE_SYMBOL", "QUARTER_SYMBOL", 
		"QUERY_SYMBOL", "QUICK_SYMBOL", "RANGE_SYMBOL", "READS_SYMBOL", "READ_ONLY_SYMBOL", 
		"READ_SYMBOL", "READ_WRITE_SYMBOL", "REAL_SYMBOL", "REBUILD_SYMBOL", "RECOVER_SYMBOL", 
		"REDO_BUFFER_SIZE_SYMBOL", "REDUNDANT_SYMBOL", "REFERENCES_SYMBOL", "REGEXP_SYMBOL", 
		"RELAY_SYMBOL", "RELAYLOG_SYMBOL", "RELAY_LOG_FILE_SYMBOL", "RELAY_LOG_POS_SYMBOL", 
		"RELAY_THREAD_SYMBOL", "RELEASE_SYMBOL", "RELOAD_SYMBOL", "REMOVE_SYMBOL", 
		"RENAME_SYMBOL", "REORGANIZE_SYMBOL", "REPAIR_SYMBOL", "REPEATABLE_SYMBOL", 
		"REPEAT_SYMBOL", "REPLACE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", 
		"REPLICATE_IGNORE_DB_SYMBOL", "REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", 
		"REPLICATE_WILD_DO_TABLE_SYMBOL", "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", 
		"REPLICATE_REWRITE_DB_SYMBOL", "REQUIRE_SYMBOL", "RESET_SYMBOL", "RESIGNAL_SYMBOL", 
		"RESTORE_SYMBOL", "RESTRICT_SYMBOL", "RESUME_SYMBOL", "RETURNED_SQLSTATE_SYMBOL", 
		"RETURNS_SYMBOL", "RETURN_SYMBOL", "REVERSE_SYMBOL", "REVOKE_SYMBOL", 
		"RIGHT_SYMBOL", "ROLLBACK_SYMBOL", "ROLLUP_SYMBOL", "ROTATE_SYMBOL", "ROUTINE_SYMBOL", 
		"ROWS_SYMBOL", "ROW_COUNT_SYMBOL", "ROW_FORMAT_SYMBOL", "ROW_SYMBOL", 
		"RTREE_SYMBOL", "SAVEPOINT_SYMBOL", "SCHEDULE_SYMBOL", "SCHEMA_NAME_SYMBOL", 
		"SECOND_MICROSECOND_SYMBOL", "SECOND_SYMBOL", "SECURITY_SYMBOL", "SELECT_SYMBOL", 
		"SENSITIVE_SYMBOL", "SEPARATOR_SYMBOL", "SERIALIZABLE_SYMBOL", "SERIAL_SYMBOL", 
		"SESSION_SYMBOL", "SERVER_SYMBOL", "SESSION_USER_SYMBOL", "SET_SYMBOL", 
		"SHARE_SYMBOL", "SHOW_SYMBOL", "SHUTDOWN_SYMBOL", "SIGNAL_SYMBOL", "SIGNED_SYMBOL", 
		"SIMPLE_SYMBOL", "SLAVE_SYMBOL", "SLOW_SYMBOL", "SMALLINT_SYMBOL", "SNAPSHOT_SYMBOL", 
		"SOCKET_SYMBOL", "SONAME_SYMBOL", "SOUNDS_SYMBOL", "SOURCE_SYMBOL", "SPATIAL_SYMBOL", 
		"SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", "SQLSTATE_SYMBOL", "SQLWARNING_SYMBOL", 
		"SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL", "SQL_BEFORE_GTIDS_SYMBOL", 
		"SQL_BIG_RESULT_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", 
		"SQL_NO_CACHE_SYMBOL", "SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SQL_THREAD_SYMBOL", 
		"SSL_SYMBOL", "STACKED_SYMBOL", "STARTING_SYMBOL", "STARTS_SYMBOL", "START_SYMBOL", 
		"STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL", 
		"STATUS_SYMBOL", "STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", 
		"STD_SYMBOL", "STOP_SYMBOL", "STORAGE_SYMBOL", "STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL", 
		"STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", "SUBDATE_SYMBOL", "SUBJECT_SYMBOL", 
		"SUBPARTITIONS_SYMBOL", "SUBPARTITION_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", 
		"SUM_SYMBOL", "SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", "SWITCHES_SYMBOL", 
		"SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", "TABLES_SYMBOL", "TABLESPACE_SYMBOL", 
		"TABLE_SYMBOL", "TABLE_CHECKSUM_SYMBOL", "TABLE_NAME_SYMBOL", "TEMPORARY_SYMBOL", 
		"TEMPTABLE_SYMBOL", "TERMINATED_SYMBOL", "TEXT_SYMBOL", "THAN_SYMBOL", 
		"THEN_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMPADD_SYMBOL", "TIMESTAMPDIFF_SYMBOL", 
		"TIME_SYMBOL", "TINYBLOB_SYMBOL", "TINYINT_SYMBOL", "TINYTEXT_SYMBOL", 
		"TO_SYMBOL", "TRAILING_SYMBOL", "TRANSACTION_SYMBOL", "TRIGGERS_SYMBOL", 
		"TRIGGER_SYMBOL", "TRIM_SYMBOL", "TRUE_SYMBOL", "TRUNCATE_SYMBOL", "TYPES_SYMBOL", 
		"TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "UNCOMMITTED_SYMBOL", "UNDEFINED_SYMBOL", 
		"UNDOFILE_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", "UNDO_SYMBOL", "UNICODE_SYMBOL", 
		"UNINSTALL_SYMBOL", "UNION_SYMBOL", "UNIQUE_SYMBOL", "UNKNOWN_SYMBOL", 
		"UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UNTIL_SYMBOL", "UPDATE_SYMBOL", "UPGRADE_SYMBOL", 
		"USAGE_SYMBOL", "USER_RESOURCES_SYMBOL", "USER_SYMBOL", "USE_FRM_SYMBOL", 
		"USE_SYMBOL", "USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL", 
		"UTC_TIME_SYMBOL", "VALIDATION_SYMBOL", "VALUES_SYMBOL", "VALUE_SYMBOL", 
		"VARBINARY_SYMBOL", "VARCHAR_SYMBOL", "VARIABLES_SYMBOL", "VARIANCE_SYMBOL", 
		"VARYING_SYMBOL", "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", "VIEW_SYMBOL", 
		"VIRTUAL_SYMBOL", "WAIT_SYMBOL", "WARNINGS_SYMBOL", "WEEK_SYMBOL", "WEIGHT_STRING_SYMBOL", 
		"WHEN_SYMBOL", "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL", "WITHOUT_SYMBOL", 
		"WORK_SYMBOL", "WRAPPER_SYMBOL", "WRITE_SYMBOL", "X509_SYMBOL", "XA_SYMBOL", 
		"XID_SYMBOL", "XML_SYMBOL", "XOR_SYMBOL", "YEAR_MONTH_SYMBOL", "YEAR_SYMBOL", 
		"ZEROFILL_SYMBOL", "PERSIST_SYMBOL", "ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", 
		"VISIBLE_SYMBOL", "EXCEPT_SYMBOL", "COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", 
		"JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", "OF_SYMBOL", "SKIP_SYMBOL", 
		"LOCKED_SYMBOL", "NOWAIT_SYMBOL", "GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL", 
		"HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL", "REMOTE_SYMBOL", "CLONE_SYMBOL", 
		"CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", "FIRST_VALUE_SYMBOL", 
		"FOLLOWING_SYMBOL", "GROUPS_SYMBOL", "LAG_SYMBOL", "LAST_VALUE_SYMBOL", 
		"LEAD_SYMBOL", "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", "NULLS_SYMBOL", "OTHERS_SYMBOL", 
		"OVER_SYMBOL", "PERCENT_RANK_SYMBOL", "PRECEDING_SYMBOL", "RANK_SYMBOL", 
		"RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", "TIES_SYMBOL", "UNBOUNDED_SYMBOL", 
		"WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", "NESTED_SYMBOL", 
		"ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", "REUSE_SYMBOL", 
		"SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", "SYSTEM_SYMBOL", 
		"VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
		"RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL", 
		"REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", 
		"SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", "INACTIVE_SYMBOL", 
		"LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL", 
		"ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", "RANDOM_SYMBOL", 
		"MASTER_COMPRESSION_ALGORITHM_SYMBOL", "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", 
		"PRIVILEGE_CHECKS_USER_SYMBOL", "MASTER_TLS_CIPHERSUITES_SYMBOL", "REQUIRE_ROW_FORMAT_SYMBOL", 
		"PASSWORD_LOCK_TIME_SYMBOL", "FAILED_LOGIN_ATTEMPTS_SYMBOL", "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL", 
		"STREAM_SYMBOL", "OFF_SYMBOL", "RETURNING_SYMBOL", "JSON_VALUE_SYMBOL", 
		"TLS_SYMBOL", "ATTRIBUTE_SYMBOL", "ENGINE_ATTRIBUTE_SYMBOL", "SECONDARY_ENGINE_ATTRIBUTE_SYMBOL", 
		"SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL", "ZONE_SYMBOL", "GRAMMAR_SELECTOR_DERIVED_EXPR", 
		"REPLICA_SYMBOL", "REPLICAS_SYMBOL", "ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL", 
		"GET_SOURCE_PUBLIC_KEY_SYMBOL", "SOURCE_AUTO_POSITION_SYMBOL", "SOURCE_BIND_SYMBOL", 
		"SOURCE_COMPRESSION_ALGORITHM_SYMBOL", "SOURCE_CONNECT_RETRY_SYMBOL", 
		"SOURCE_DELAY_SYMBOL", "SOURCE_HEARTBEAT_PERIOD_SYMBOL", "SOURCE_HOST_SYMBOL", 
		"SOURCE_LOG_FILE_SYMBOL", "SOURCE_LOG_POS_SYMBOL", "SOURCE_PASSWORD_SYMBOL", 
		"SOURCE_PORT_SYMBOL", "SOURCE_PUBLIC_KEY_PATH_SYMBOL", "SOURCE_RETRY_COUNT_SYMBOL", 
		"SOURCE_SSL_SYMBOL", "SOURCE_SSL_CA_SYMBOL", "SOURCE_SSL_CAPATH_SYMBOL", 
		"SOURCE_SSL_CERT_SYMBOL", "SOURCE_SSL_CIPHER_SYMBOL", "SOURCE_SSL_CRL_SYMBOL", 
		"SOURCE_SSL_CRLPATH_SYMBOL", "SOURCE_SSL_KEY_SYMBOL", "SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL", 
		"SOURCE_TLS_CIPHERSUITES_SYMBOL", "SOURCE_TLS_VERSION_SYMBOL", "SOURCE_USER_SYMBOL", 
		"SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL", "ST_COLLECT_SYMBOL", "KEYRING_SYMBOL", 
		"AUTHENTICATION_SYMBOL", "FACTOR_SYMBOL", "FINISH_SYMBOL", "INITIATE_SYMBOL", 
		"REGISTRATION_SYMBOL", "UNREGISTER_SYMBOL", "INITIAL_SYMBOL", "CHALLENGE_RESPONSE_SYMBOL", 
		"GTID_ONLY_SYMBOL", "INTERSECT_SYMBOL", "BULK_SYMBOL", "URL_SYMBOL", "GENERATE_SYMBOL", 
		"PARSE_TREE_SYMBOL", "LOG_SYMBOL", "GTIDS_SYMBOL", "PARALLEL_SYMBOL", 
		"S3_SYMBOL", "QUALIFY_SYMBOL", "AUTO_SYMBOL", "MANUAL_SYMBOL", "BERNOULLI_SYMBOL", 
		"TABLESAMPLE_SYMBOL", "WHITESPACE", "INVALID_INPUT", "UNDERSCORE_CHARSET", 
		"IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", "DOUBLE_QUOTED_TEXT", 
		"SINGLE_QUOTED_TEXT", "DOLLAR_QUOTED_STRING_TEXT", "VERSION_COMMENT_START", 
		"MYSQL_COMMENT_START", "VERSION_COMMENT_END", "BLOCK_COMMENT", "INVALID_BLOCK_COMMENT", 
		"POUND_COMMENT", "DASHDASH_COMMENT", "NOT_EQUAL2_OPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MySQLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MySQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MySQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MySQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MySQLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext[] query() {
			return GetRuleContexts<QueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query(int i) {
			return GetRuleContext<QueryContext>(i);
		}
		public QueriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queries; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueries(this);
		}
	}

	[RuleVersion(0)]
	public QueriesContext queries() {
		QueriesContext _localctx = new QueriesContext(Context, State);
		EnterRule(_localctx, 0, RULE_queries);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1510;
					query();
					}
					} 
				}
				State = 1515;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 1516;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON_SYMBOL() { return GetToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginWorkContext beginWork() {
			return GetRuleContext<BeginWorkContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 1518;
				simpleStatement();
				}
				break;
			case 2:
				{
				State = 1519;
				beginWork();
				}
				break;
			}
			State = 1522;
			Match(SEMICOLON_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementContext alterStatement() {
			return GetRuleContext<AlterStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateStatementContext createStatement() {
			return GetRuleContext<CreateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropStatementContext dropStatement() {
			return GetRuleContext<DropStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableStatementContext renameTableStatement() {
			return GetRuleContext<RenameTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruncateTableStatementContext truncateTableStatement() {
			return GetRuleContext<TruncateTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerStatementContext handlerStatement() {
			return GetRuleContext<HandlerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadStatementContext loadStatement() {
			return GetRuleContext<LoadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionOrLockingStatementContext transactionOrLockingStatement() {
			return GetRuleContext<TransactionOrLockingStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationStatementContext replicationStatement() {
			return GetRuleContext<ReplicationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreparedStatementContext preparedStatement() {
			return GetRuleContext<PreparedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloneStatementContext cloneStatement() {
			return GetRuleContext<CloneStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountManagementStatementContext accountManagementStatement() {
			return GetRuleContext<AccountManagementStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAdministrationStatementContext tableAdministrationStatement() {
			return GetRuleContext<TableAdministrationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UninstallStatementContext uninstallStatement() {
			return GetRuleContext<UninstallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstallStatementContext installStatement() {
			return GetRuleContext<InstallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowDatabasesStatementContext showDatabasesStatement() {
			return GetRuleContext<ShowDatabasesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowTablesStatementContext showTablesStatement() {
			return GetRuleContext<ShowTablesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowTriggersStatementContext showTriggersStatement() {
			return GetRuleContext<ShowTriggersStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowEventsStatementContext showEventsStatement() {
			return GetRuleContext<ShowEventsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowTableStatusStatementContext showTableStatusStatement() {
			return GetRuleContext<ShowTableStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowOpenTablesStatementContext showOpenTablesStatement() {
			return GetRuleContext<ShowOpenTablesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowParseTreeStatementContext showParseTreeStatement() {
			return GetRuleContext<ShowParseTreeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowPluginsStatementContext showPluginsStatement() {
			return GetRuleContext<ShowPluginsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowEngineLogsStatementContext showEngineLogsStatement() {
			return GetRuleContext<ShowEngineLogsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowEngineMutexStatementContext showEngineMutexStatement() {
			return GetRuleContext<ShowEngineMutexStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowEngineStatusStatementContext showEngineStatusStatement() {
			return GetRuleContext<ShowEngineStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowColumnsStatementContext showColumnsStatement() {
			return GetRuleContext<ShowColumnsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowBinaryLogsStatementContext showBinaryLogsStatement() {
			return GetRuleContext<ShowBinaryLogsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowBinaryLogStatusStatementContext showBinaryLogStatusStatement() {
			return GetRuleContext<ShowBinaryLogStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowReplicasStatementContext showReplicasStatement() {
			return GetRuleContext<ShowReplicasStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowBinlogEventsStatementContext showBinlogEventsStatement() {
			return GetRuleContext<ShowBinlogEventsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowRelaylogEventsStatementContext showRelaylogEventsStatement() {
			return GetRuleContext<ShowRelaylogEventsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowKeysStatementContext showKeysStatement() {
			return GetRuleContext<ShowKeysStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowEnginesStatementContext showEnginesStatement() {
			return GetRuleContext<ShowEnginesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCountWarningsStatementContext showCountWarningsStatement() {
			return GetRuleContext<ShowCountWarningsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCountErrorsStatementContext showCountErrorsStatement() {
			return GetRuleContext<ShowCountErrorsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowWarningsStatementContext showWarningsStatement() {
			return GetRuleContext<ShowWarningsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowErrorsStatementContext showErrorsStatement() {
			return GetRuleContext<ShowErrorsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowProfilesStatementContext showProfilesStatement() {
			return GetRuleContext<ShowProfilesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowProfileStatementContext showProfileStatement() {
			return GetRuleContext<ShowProfileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowStatusStatementContext showStatusStatement() {
			return GetRuleContext<ShowStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowProcessListStatementContext showProcessListStatement() {
			return GetRuleContext<ShowProcessListStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowVariablesStatementContext showVariablesStatement() {
			return GetRuleContext<ShowVariablesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCharacterSetStatementContext showCharacterSetStatement() {
			return GetRuleContext<ShowCharacterSetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCollationStatementContext showCollationStatement() {
			return GetRuleContext<ShowCollationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowPrivilegesStatementContext showPrivilegesStatement() {
			return GetRuleContext<ShowPrivilegesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowGrantsStatementContext showGrantsStatement() {
			return GetRuleContext<ShowGrantsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateDatabaseStatementContext showCreateDatabaseStatement() {
			return GetRuleContext<ShowCreateDatabaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateTableStatementContext showCreateTableStatement() {
			return GetRuleContext<ShowCreateTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateViewStatementContext showCreateViewStatement() {
			return GetRuleContext<ShowCreateViewStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowMasterStatusStatementContext showMasterStatusStatement() {
			return GetRuleContext<ShowMasterStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowReplicaStatusStatementContext showReplicaStatusStatement() {
			return GetRuleContext<ShowReplicaStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateProcedureStatementContext showCreateProcedureStatement() {
			return GetRuleContext<ShowCreateProcedureStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateFunctionStatementContext showCreateFunctionStatement() {
			return GetRuleContext<ShowCreateFunctionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateTriggerStatementContext showCreateTriggerStatement() {
			return GetRuleContext<ShowCreateTriggerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateProcedureStatusStatementContext showCreateProcedureStatusStatement() {
			return GetRuleContext<ShowCreateProcedureStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateFunctionStatusStatementContext showCreateFunctionStatusStatement() {
			return GetRuleContext<ShowCreateFunctionStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateProcedureCodeStatementContext showCreateProcedureCodeStatement() {
			return GetRuleContext<ShowCreateProcedureCodeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateFunctionCodeStatementContext showCreateFunctionCodeStatement() {
			return GetRuleContext<ShowCreateFunctionCodeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateEventStatementContext showCreateEventStatement() {
			return GetRuleContext<ShowCreateEventStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateUserStatementContext showCreateUserStatement() {
			return GetRuleContext<ShowCreateUserStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupManagementContext resourceGroupManagement() {
			return GetRuleContext<ResourceGroupManagementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherAdministrativeStatementContext otherAdministrativeStatement() {
			return GetRuleContext<OtherAdministrativeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UtilityStatementContext utilityStatement() {
			return GetRuleContext<UtilityStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetDiagnosticsStatementContext getDiagnosticsStatement() {
			return GetRuleContext<GetDiagnosticsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalStatementContext signalStatement() {
			return GetRuleContext<SignalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResignalStatementContext resignalStatement() {
			return GetRuleContext<ResignalStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_simpleStatement);
		try {
			State = 1600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1524;
				alterStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1525;
				createStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1526;
				dropStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1527;
				renameTableStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1528;
				truncateTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1529;
				importStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1530;
				callStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1531;
				deleteStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1532;
				doStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1533;
				handlerStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1534;
				insertStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1535;
				loadStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1536;
				replaceStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1537;
				selectStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1538;
				updateStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1539;
				transactionOrLockingStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1540;
				replicationStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1541;
				preparedStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1542;
				cloneStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1543;
				accountManagementStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1544;
				tableAdministrationStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1545;
				uninstallStatement();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1546;
				installStatement();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1547;
				setStatement();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1548;
				showDatabasesStatement();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1549;
				showTablesStatement();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1550;
				showTriggersStatement();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1551;
				showEventsStatement();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1552;
				showTableStatusStatement();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1553;
				showOpenTablesStatement();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1554;
				showParseTreeStatement();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1555;
				showPluginsStatement();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1556;
				showEngineLogsStatement();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1557;
				showEngineMutexStatement();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1558;
				showEngineStatusStatement();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1559;
				showColumnsStatement();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1560;
				showBinaryLogsStatement();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1561;
				showBinaryLogStatusStatement();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1562;
				showReplicasStatement();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1563;
				showBinlogEventsStatement();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1564;
				showRelaylogEventsStatement();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1565;
				showKeysStatement();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1566;
				showEnginesStatement();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1567;
				showCountWarningsStatement();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1568;
				showCountErrorsStatement();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1569;
				showWarningsStatement();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1570;
				showErrorsStatement();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1571;
				showProfilesStatement();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1572;
				showProfileStatement();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1573;
				showStatusStatement();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1574;
				showProcessListStatement();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1575;
				showVariablesStatement();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1576;
				showCharacterSetStatement();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1577;
				showCollationStatement();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1578;
				showPrivilegesStatement();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1579;
				showGrantsStatement();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1580;
				showCreateDatabaseStatement();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1581;
				showCreateTableStatement();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1582;
				showCreateViewStatement();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1583;
				showMasterStatusStatement();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1584;
				showReplicaStatusStatement();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1585;
				showCreateProcedureStatement();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1586;
				showCreateFunctionStatement();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1587;
				showCreateTriggerStatement();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1588;
				showCreateProcedureStatusStatement();
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1589;
				showCreateFunctionStatusStatement();
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1590;
				showCreateProcedureCodeStatement();
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1591;
				showCreateFunctionCodeStatement();
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1592;
				showCreateEventStatement();
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1593;
				showCreateUserStatement();
				}
				break;
			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1594;
				resourceGroupManagement();
				}
				break;
			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1595;
				otherAdministrativeStatement();
				}
				break;
			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1596;
				utilityStatement();
				}
				break;
			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1597;
				getDiagnosticsStatement();
				}
				break;
			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1598;
				signalStatement();
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1599;
				resignalStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseContext alterDatabase() {
			return GetRuleContext<AlterDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterViewContext alterView() {
			return GetRuleContext<AlterViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterEventContext alterEvent() {
			return GetRuleContext<AlterEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceContext alterTablespace() {
			return GetRuleContext<AlterTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterUndoTablespaceContext alterUndoTablespace() {
			return GetRuleContext<AlterUndoTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupContext alterLogfileGroup() {
			return GetRuleContext<AlterLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterServerContext alterServer() {
			return GetRuleContext<AlterServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterInstanceStatementContext alterInstanceStatement() {
			return GetRuleContext<AlterInstanceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineAlterOptionsContext routineAlterOptions() {
			return GetRuleContext<RoutineAlterOptionsContext>(0);
		}
		public AlterStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterStatement(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementContext alterStatement() {
		AlterStatementContext _localctx = new AlterStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_alterStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602;
			Match(ALTER_SYMBOL);
			State = 1623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 1603;
				alterTable();
				}
				break;
			case 2:
				{
				State = 1604;
				alterDatabase();
				}
				break;
			case 3:
				{
				State = 1605;
				Match(PROCEDURE_SYMBOL);
				State = 1606;
				procedureRef();
				State = 1608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 72057594037960705L) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 370)) & ~0x3f) == 0 && ((1L << (_la - 370)) & 5242881L) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL) {
					{
					State = 1607;
					routineAlterOptions();
					}
				}

				}
				break;
			case 4:
				{
				State = 1610;
				Match(FUNCTION_SYMBOL);
				State = 1611;
				functionRef();
				State = 1613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 72057594037960705L) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 370)) & ~0x3f) == 0 && ((1L << (_la - 370)) & 5242881L) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL) {
					{
					State = 1612;
					routineAlterOptions();
					}
				}

				}
				break;
			case 5:
				{
				State = 1615;
				alterView();
				}
				break;
			case 6:
				{
				State = 1616;
				alterEvent();
				}
				break;
			case 7:
				{
				State = 1617;
				alterTablespace();
				}
				break;
			case 8:
				{
				State = 1618;
				if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				State = 1619;
				alterUndoTablespace();
				}
				break;
			case 9:
				{
				State = 1620;
				alterLogfileGroup();
				}
				break;
			case 10:
				{
				State = 1621;
				alterServer();
				}
				break;
			case 11:
				{
				State = 1622;
				alterInstanceStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseOptionContext[] alterDatabaseOption() {
			return GetRuleContexts<AlterDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseOptionContext alterDatabaseOption(int i) {
			return GetRuleContext<AlterDatabaseOptionContext>(i);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterDatabase(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseContext alterDatabase() {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(Context, State);
		EnterRule(_localctx, 8, RULE_alterDatabase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1625;
			Match(DATABASE_SYMBOL);
			State = 1626;
			schemaRef();
			State = 1628;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1627;
					alterDatabaseOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1630;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption() {
			return GetRuleContext<CreateDatabaseOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY_SYMBOL() { return GetToken(MySQLParser.ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TernaryOptionContext ternaryOption() {
			return GetRuleContext<TernaryOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterDatabaseOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabaseOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterDatabaseOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterDatabaseOption(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseOptionContext alterDatabaseOption() {
		AlterDatabaseOptionContext _localctx = new AlterDatabaseOptionContext(Context, State);
		EnterRule(_localctx, 10, RULE_alterDatabaseOption);
		int _la;
		try {
			State = 1639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1632;
				createDatabaseOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1633;
				Match(READ_SYMBOL);
				State = 1634;
				Match(ONLY_SYMBOL);
				State = 1636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 1635;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 1638;
				ternaryOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySQLParser.ON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySQLParser.ON_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleContext schedule() {
			return GetRuleContext<ScheduleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		public AlterEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterEvent(this);
		}
	}

	[RuleVersion(0)]
	public AlterEventContext alterEvent() {
		AlterEventContext _localctx = new AlterEventContext(Context, State);
		EnterRule(_localctx, 12, RULE_alterEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 1641;
				definerClause();
				}
			}

			State = 1644;
			Match(EVENT_SYMBOL);
			State = 1645;
			eventRef();
			State = 1649;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 1646;
				Match(ON_SYMBOL);
				State = 1647;
				Match(SCHEDULE_SYMBOL);
				State = 1648;
				schedule();
				}
				break;
			}
			State = 1657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 1651;
				Match(ON_SYMBOL);
				State = 1652;
				Match(COMPLETION_SYMBOL);
				State = 1654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 1653;
					Match(NOT_SYMBOL);
					}
				}

				State = 1656;
				Match(PRESERVE_SYMBOL);
				}
			}

			State = 1662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RENAME_SYMBOL) {
				{
				State = 1659;
				Match(RENAME_SYMBOL);
				State = 1660;
				Match(TO_SYMBOL);
				State = 1661;
				identifier();
				}
			}

			State = 1670;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENABLE_SYMBOL:
				{
				State = 1664;
				Match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				State = 1665;
				Match(DISABLE_SYMBOL);
				State = 1668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 1666;
					Match(ON_SYMBOL);
					State = 1667;
					replica();
					}
				}

				}
				break;
			case Eof:
			case SEMICOLON_SYMBOL:
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
				break;
			default:
				break;
			}
			State = 1674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				State = 1672;
				Match(COMMENT_SYMBOL);
				State = 1673;
				textLiteral();
				}
			}

			State = 1678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DO_SYMBOL) {
				{
				State = 1676;
				Match(DO_SYMBOL);
				State = 1677;
				compoundStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
			return GetRuleContext<AlterLogfileGroupOptionsContext>(0);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroup(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupContext alterLogfileGroup() {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(Context, State);
		EnterRule(_localctx, 14, RULE_alterLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1680;
			Match(LOGFILE_SYMBOL);
			State = 1681;
			Match(GROUP_SYMBOL);
			State = 1682;
			logfileGroupRef();
			State = 1683;
			Match(ADD_SYMBOL);
			State = 1684;
			Match(UNDOFILE_SYMBOL);
			State = 1685;
			textLiteral();
			State = 1687;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 1686;
				alterLogfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupOptionContext[] alterLogfileGroupOption() {
			return GetRuleContexts<AlterLogfileGroupOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupOptionContext alterLogfileGroupOption(int i) {
			return GetRuleContext<AlterLogfileGroupOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterLogfileGroupOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroupOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroupOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroupOptions(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
		AlterLogfileGroupOptionsContext _localctx = new AlterLogfileGroupOptionsContext(Context, State);
		EnterRule(_localctx, 16, RULE_alterLogfileGroupOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1689;
			alterLogfileGroupOption();
			State = 1696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				{
				State = 1691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 1690;
					Match(COMMA_SYMBOL);
					}
				}

				State = 1693;
				alterLogfileGroupOption();
				}
				}
				State = 1698;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		public AlterLogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroupOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroupOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroupOption(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupOptionContext alterLogfileGroupOption() {
		AlterLogfileGroupOptionContext _localctx = new AlterLogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 18, RULE_alterLogfileGroupOption);
		try {
			State = 1702;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1699;
				tsOptionInitialSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1700;
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1701;
				tsOptionWait();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerRefContext serverRef() {
			return GetRuleContext<ServerRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionsContext serverOptions() {
			return GetRuleContext<ServerOptionsContext>(0);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterServer(this);
		}
	}

	[RuleVersion(0)]
	public AlterServerContext alterServer() {
		AlterServerContext _localctx = new AlterServerContext(Context, State);
		EnterRule(_localctx, 20, RULE_alterServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1704;
			Match(SERVER_SYMBOL);
			State = 1705;
			serverRef();
			State = 1706;
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTableActionsContext alterTableActions() {
			return GetRuleContext<AlterTableActionsContext>(0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTable(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(Context, State);
		EnterRule(_localctx, 22, RULE_alterTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				State = 1708;
				onlineOption();
				}
			}

			State = 1711;
			Match(TABLE_SYMBOL);
			State = 1712;
			tableRef();
			State = 1714;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 1713;
				alterTableActions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableActionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandListContext alterCommandList() {
			return GetRuleContext<AlterCommandListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemovePartitioningContext removePartitioning() {
			return GetRuleContext<RemovePartitioningContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StandaloneAlterCommandsContext standaloneAlterCommands() {
			return GetRuleContext<StandaloneAlterCommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierListContext alterCommandsModifierList() {
			return GetRuleContext<AlterCommandsModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public AlterTableActionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableActions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTableActions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTableActions(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableActionsContext alterTableActions() {
		AlterTableActionsContext _localctx = new AlterTableActionsContext(Context, State);
		EnterRule(_localctx, 24, RULE_alterTableActions);
		try {
			State = 1729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1716;
				alterCommandList();
				State = 1719;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PARTITION_SYMBOL:
					{
					State = 1717;
					partitionClause();
					}
					break;
				case REMOVE_SYMBOL:
					{
					State = 1718;
					removePartitioning();
					}
					break;
				case Eof:
				case SEMICOLON_SYMBOL:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1721;
				partitionClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1722;
				removePartitioning();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1726;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 1723;
					alterCommandsModifierList();
					State = 1724;
					Match(COMMA_SYMBOL);
					}
					break;
				}
				State = 1728;
				standaloneAlterCommands();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierListContext alterCommandsModifierList() {
			return GetRuleContext<AlterCommandsModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterListContext alterList() {
			return GetRuleContext<AlterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public AlterCommandListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandList(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandListContext alterCommandList() {
		AlterCommandListContext _localctx = new AlterCommandListContext(Context, State);
		EnterRule(_localctx, 26, RULE_alterCommandList);
		try {
			State = 1738;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1731;
				alterCommandsModifierList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1735;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 1732;
					alterCommandsModifierList();
					State = 1733;
					Match(COMMA_SYMBOL);
					}
					break;
				}
				State = 1737;
				alterList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandsModifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierContext[] alterCommandsModifier() {
			return GetRuleContexts<AlterCommandsModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return GetRuleContext<AlterCommandsModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterCommandsModifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandsModifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandsModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandsModifierList(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandsModifierListContext alterCommandsModifierList() {
		AlterCommandsModifierListContext _localctx = new AlterCommandsModifierListContext(Context, State);
		EnterRule(_localctx, 28, RULE_alterCommandsModifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1740;
			alterCommandsModifier();
			State = 1745;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1741;
					Match(COMMA_SYMBOL);
					State = 1742;
					alterCommandsModifier();
					}
					} 
				}
				State = 1747;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandaloneAlterCommandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterPartitionContext alterPartition() {
			return GetRuleContext<AlterPartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public StandaloneAlterCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standaloneAlterCommands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStandaloneAlterCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStandaloneAlterCommands(this);
		}
	}

	[RuleVersion(0)]
	public StandaloneAlterCommandsContext standaloneAlterCommands() {
		StandaloneAlterCommandsContext _localctx = new StandaloneAlterCommandsContext(Context, State);
		EnterRule(_localctx, 30, RULE_standaloneAlterCommands);
		int _la;
		try {
			State = 1755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1748;
				Match(DISCARD_SYMBOL);
				State = 1749;
				Match(TABLESPACE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1750;
				Match(IMPORT_SYMBOL);
				State = 1751;
				Match(TABLESPACE_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1752;
				alterPartition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1753;
				if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				State = 1754;
				_la = TokenStream.LA(1);
				if ( !(_la==SECONDARY_LOAD_SYMBOL || _la==SECONDARY_UNLOAD_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterPartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoWriteToBinLogContext[] noWriteToBinLog() {
			return GetRuleContexts<NoWriteToBinLogContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoWriteToBinLogContext noWriteToBinLog(int i) {
			return GetRuleContext<NoWriteToBinLogContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySQLParser.REBUILD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE_SYMBOL() { return GetToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE_SYMBOL() { return GetToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckOptionContext[] checkOption() {
			return GetRuleContexts<CheckOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckOptionContext checkOption(int i) {
			return GetRuleContext<CheckOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySQLParser.REPAIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RepairTypeContext[] repairType() {
			return GetRuleContexts<RepairTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepairTypeContext repairType(int i) {
			return GetRuleContext<RepairTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySQLParser.COALESCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE_SYMBOL() { return GetToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithValidationContext withValidation() {
			return GetRuleContext<WithValidationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterPartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterPartition(this);
		}
	}

	[RuleVersion(0)]
	public AlterPartitionContext alterPartition() {
		AlterPartitionContext _localctx = new AlterPartitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_alterPartition);
		int _la;
		try {
			State = 1851;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1757;
				Match(ADD_SYMBOL);
				State = 1758;
				Match(PARTITION_SYMBOL);
				State = 1760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1759;
					noWriteToBinLog();
					}
				}

				State = 1765;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 1762;
					partitionDefinitions();
					}
					break;
				case PARTITIONS_SYMBOL:
					{
					State = 1763;
					Match(PARTITIONS_SYMBOL);
					State = 1764;
					real_ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1767;
				Match(DROP_SYMBOL);
				State = 1768;
				Match(PARTITION_SYMBOL);
				State = 1769;
				identifierList();
				}
				break;
			case REBUILD_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1770;
				Match(REBUILD_SYMBOL);
				State = 1771;
				Match(PARTITION_SYMBOL);
				State = 1773;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 1772;
					noWriteToBinLog();
					}
					break;
				}
				State = 1775;
				allOrPartitionNameList();
				}
				break;
			case OPTIMIZE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1776;
				Match(OPTIMIZE_SYMBOL);
				State = 1777;
				Match(PARTITION_SYMBOL);
				State = 1779;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 1778;
					noWriteToBinLog();
					}
					break;
				}
				State = 1781;
				allOrPartitionNameList();
				State = 1783;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1782;
					noWriteToBinLog();
					}
				}

				}
				break;
			case ANALYZE_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1785;
				Match(ANALYZE_SYMBOL);
				State = 1786;
				Match(PARTITION_SYMBOL);
				State = 1788;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 1787;
					noWriteToBinLog();
					}
					break;
				}
				State = 1790;
				allOrPartitionNameList();
				}
				break;
			case CHECK_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1791;
				Match(CHECK_SYMBOL);
				State = 1792;
				Match(PARTITION_SYMBOL);
				State = 1793;
				allOrPartitionNameList();
				State = 1797;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CHANGED_SYMBOL || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & 131089L) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) {
					{
					{
					State = 1794;
					checkOption();
					}
					}
					State = 1799;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case REPAIR_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1800;
				Match(REPAIR_SYMBOL);
				State = 1801;
				Match(PARTITION_SYMBOL);
				State = 1803;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 1802;
					noWriteToBinLog();
					}
					break;
				}
				State = 1805;
				allOrPartitionNameList();
				State = 1809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					State = 1806;
					repairType();
					}
					}
					State = 1811;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case COALESCE_SYMBOL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1812;
				Match(COALESCE_SYMBOL);
				State = 1813;
				Match(PARTITION_SYMBOL);
				State = 1815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1814;
					noWriteToBinLog();
					}
				}

				State = 1817;
				real_ulong_number();
				}
				break;
			case TRUNCATE_SYMBOL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1818;
				Match(TRUNCATE_SYMBOL);
				State = 1819;
				Match(PARTITION_SYMBOL);
				State = 1820;
				allOrPartitionNameList();
				}
				break;
			case REORGANIZE_SYMBOL:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1821;
				Match(REORGANIZE_SYMBOL);
				State = 1822;
				Match(PARTITION_SYMBOL);
				State = 1824;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 1823;
					noWriteToBinLog();
					}
					break;
				}
				State = 1830;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 1826;
					identifierList();
					State = 1827;
					Match(INTO_SYMBOL);
					State = 1828;
					partitionDefinitions();
					}
					break;
				}
				}
				break;
			case EXCHANGE_SYMBOL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1832;
				Match(EXCHANGE_SYMBOL);
				State = 1833;
				Match(PARTITION_SYMBOL);
				State = 1834;
				identifier();
				State = 1835;
				Match(WITH_SYMBOL);
				State = 1836;
				Match(TABLE_SYMBOL);
				State = 1837;
				tableRef();
				State = 1839;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL || _la==WITHOUT_SYMBOL) {
					{
					State = 1838;
					withValidation();
					}
				}

				}
				break;
			case DISCARD_SYMBOL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1841;
				Match(DISCARD_SYMBOL);
				State = 1842;
				Match(PARTITION_SYMBOL);
				State = 1843;
				allOrPartitionNameList();
				State = 1844;
				Match(TABLESPACE_SYMBOL);
				}
				break;
			case IMPORT_SYMBOL:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1846;
				Match(IMPORT_SYMBOL);
				State = 1847;
				Match(PARTITION_SYMBOL);
				State = 1848;
				allOrPartitionNameList();
				State = 1849;
				Match(TABLESPACE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterListItemContext[] alterListItem() {
			return GetRuleContexts<AlterListItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterListItemContext alterListItem(int i) {
			return GetRuleContext<AlterListItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionsSpaceSeparatedContext[] createTableOptionsSpaceSeparated() {
			return GetRuleContexts<CreateTableOptionsSpaceSeparatedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated(int i) {
			return GetRuleContext<CreateTableOptionsSpaceSeparatedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierContext[] alterCommandsModifier() {
			return GetRuleContexts<AlterCommandsModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return GetRuleContext<AlterCommandsModifierContext>(i);
		}
		public AlterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterList(this);
		}
	}

	[RuleVersion(0)]
	public AlterListContext alterList() {
		AlterListContext _localctx = new AlterListContext(Context, State);
		EnterRule(_localctx, 34, RULE_alterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1855;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 1853;
				alterListItem();
				}
				break;
			case 2:
				{
				State = 1854;
				createTableOptionsSpaceSeparated();
				}
				break;
			}
			State = 1865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 1857;
				Match(COMMA_SYMBOL);
				State = 1861;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 1858;
					alterListItem();
					}
					break;
				case 2:
					{
					State = 1859;
					alterCommandsModifier();
					}
					break;
				case 3:
					{
					State = 1860;
					createTableOptionsSpaceSeparated();
					}
					break;
				}
				}
				}
				State = 1867;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandsModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return GetRuleContext<AlterAlgorithmOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLockOptionContext alterLockOption() {
			return GetRuleContext<AlterLockOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithValidationContext withValidation() {
			return GetRuleContext<WithValidationContext>(0);
		}
		public AlterCommandsModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandsModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandsModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandsModifier(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandsModifierContext alterCommandsModifier() {
		AlterCommandsModifierContext _localctx = new AlterCommandsModifierContext(Context, State);
		EnterRule(_localctx, 36, RULE_alterCommandsModifier);
		try {
			State = 1871;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALGORITHM_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1868;
				alterAlgorithmOption();
				}
				break;
			case LOCK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1869;
				alterLockOption();
				}
				break;
			case WITH_SYMBOL:
			case WITHOUT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1870;
				withValidation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterListItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableElementListContext tableElementList() {
			return GetRuleContext<TableElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_SYMBOL() { return GetToken(MySQLParser.COLUMN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckOrReferencesContext checkOrReferences() {
			return GetRuleContext<CheckOrReferencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintDefContext tableConstraintDef() {
			return GetRuleContext<TableConstraintDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySQLParser.CHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefContext columnInternalRef() {
			return GetRuleContext<ColumnInternalRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySQLParser.MODIFY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexRefContext indexRef() {
			return GetRuleContext<IndexRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RestrictContext restrict() {
			return GetRuleContext<RestrictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS_SYMBOL() { return GetToken(MySQLParser.KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedLiteralOrNullContext signedLiteralOrNull() {
			return GetRuleContext<SignedLiteralOrNullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySQLParser.CONVERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_SYMBOL() { return GetToken(MySQLParser.FORCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_SYMBOL() { return GetToken(MySQLParser.ORDER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterOrderListContext alterOrderList() {
			return GetRuleContext<AlterOrderListContext>(0);
		}
		public AlterListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterListItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterListItem(this);
		}
	}

	[RuleVersion(0)]
	public AlterListItemContext alterListItem() {
		AlterListItemContext _localctx = new AlterListItemContext(Context, State);
		EnterRule(_localctx, 38, RULE_alterListItem);
		int _la;
		try {
			State = 2008;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1873;
				Match(ADD_SYMBOL);
				State = 1875;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 1874;
					Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1889;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 1877;
					identifier();
					State = 1878;
					fieldDefinition();
					State = 1880;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
					case 1:
						{
						State = 1879;
						checkOrReferences();
						}
						break;
					}
					State = 1883;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
						{
						State = 1882;
						place();
						}
					}

					}
					break;
				case 2:
					{
					State = 1885;
					Match(OPEN_PAR_SYMBOL);
					State = 1886;
					tableElementList();
					State = 1887;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1891;
				Match(ADD_SYMBOL);
				State = 1892;
				tableConstraintDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1893;
				Match(CHANGE_SYMBOL);
				State = 1895;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
				case 1:
					{
					State = 1894;
					Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1897;
				columnInternalRef();
				State = 1898;
				identifier();
				State = 1899;
				fieldDefinition();
				State = 1901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					State = 1900;
					place();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1903;
				Match(MODIFY_SYMBOL);
				State = 1905;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 1904;
					Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1907;
				columnInternalRef();
				State = 1908;
				fieldDefinition();
				State = 1910;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					State = 1909;
					place();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1912;
				Match(DROP_SYMBOL);
				State = 1934;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 1914;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						State = 1913;
						Match(COLUMN_SYMBOL);
						}
						break;
					}
					State = 1916;
					columnInternalRef();
					State = 1918;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
						{
						State = 1917;
						restrict();
						}
					}

					}
					break;
				case 2:
					{
					State = 1920;
					Match(FOREIGN_SYMBOL);
					State = 1921;
					Match(KEY_SYMBOL);
					State = 1922;
					columnInternalRef();
					}
					break;
				case 3:
					{
					State = 1923;
					Match(PRIMARY_SYMBOL);
					State = 1924;
					Match(KEY_SYMBOL);
					}
					break;
				case 4:
					{
					State = 1925;
					keyOrIndex();
					State = 1926;
					indexRef();
					}
					break;
				case 5:
					{
					State = 1928;
					if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
					State = 1929;
					Match(CHECK_SYMBOL);
					State = 1930;
					identifier();
					}
					break;
				case 6:
					{
					State = 1931;
					if (!(this.isServerVersionGe80019())) throw new FailedPredicateException(this, "this.isServerVersionGe80019()");
					State = 1932;
					Match(CONSTRAINT_SYMBOL);
					State = 1933;
					identifier();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1936;
				Match(DISABLE_SYMBOL);
				State = 1937;
				Match(KEYS_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1938;
				Match(ENABLE_SYMBOL);
				State = 1939;
				Match(KEYS_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1940;
				Match(ALTER_SYMBOL);
				State = 1942;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 1941;
					Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1944;
				columnInternalRef();
				State = 1957;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 1945;
					Match(SET_SYMBOL);
					State = 1946;
					Match(DEFAULT_SYMBOL);
					State = 1950;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						State = 1947;
						if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
						State = 1948;
						exprWithParentheses();
						}
						break;
					case 2:
						{
						State = 1949;
						signedLiteralOrNull();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 1952;
					Match(DROP_SYMBOL);
					State = 1953;
					Match(DEFAULT_SYMBOL);
					}
					break;
				case 3:
					{
					State = 1954;
					if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
					State = 1955;
					Match(SET_SYMBOL);
					State = 1956;
					visibility();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1959;
				Match(ALTER_SYMBOL);
				State = 1960;
				Match(INDEX_SYMBOL);
				State = 1961;
				indexRef();
				State = 1962;
				visibility();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1964;
				if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				State = 1965;
				Match(ALTER_SYMBOL);
				State = 1966;
				Match(CHECK_SYMBOL);
				State = 1967;
				identifier();
				State = 1968;
				constraintEnforcement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1970;
				if (!(this.isServerVersionGe80019())) throw new FailedPredicateException(this, "this.isServerVersionGe80019()");
				State = 1971;
				Match(ALTER_SYMBOL);
				State = 1972;
				Match(CONSTRAINT_SYMBOL);
				State = 1973;
				identifier();
				State = 1974;
				constraintEnforcement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1976;
				Match(RENAME_SYMBOL);
				State = 1977;
				Match(COLUMN_SYMBOL);
				State = 1978;
				columnInternalRef();
				State = 1979;
				Match(TO_SYMBOL);
				State = 1980;
				identifier();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1982;
				Match(RENAME_SYMBOL);
				State = 1984;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 1983;
					_la = TokenStream.LA(1);
					if ( !(_la==AS_SYMBOL || _la==TO_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1986;
				tableName();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1987;
				Match(RENAME_SYMBOL);
				State = 1988;
				keyOrIndex();
				State = 1989;
				indexRef();
				State = 1990;
				Match(TO_SYMBOL);
				State = 1991;
				indexName();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1993;
				Match(CONVERT_SYMBOL);
				State = 1994;
				Match(TO_SYMBOL);
				State = 1995;
				charset();
				State = 1999;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 1996;
					if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
					State = 1997;
					Match(DEFAULT_SYMBOL);
					}
					break;
				case 2:
					{
					State = 1998;
					charsetName();
					}
					break;
				}
				State = 2002;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					State = 2001;
					collate();
					}
				}

				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2004;
				Match(FORCE_SYMBOL);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2005;
				Match(ORDER_SYMBOL);
				State = 2006;
				Match(BY_SYMBOL);
				State = 2007;
				alterOrderList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER_SYMBOL() { return GetToken(MySQLParser.AFTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(Context, State);
		EnterRule(_localctx, 40, RULE_place);
		try {
			State = 2013;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AFTER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2010;
				Match(AFTER_SYMBOL);
				State = 2011;
				identifier();
				}
				break;
			case FIRST_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2012;
				Match(FIRST_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestrictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public RestrictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restrict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRestrict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRestrict(this);
		}
	}

	[RuleVersion(0)]
	public RestrictContext restrict() {
		RestrictContext _localctx = new RestrictContext(Context, State);
		EnterRule(_localctx, 42, RULE_restrict);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2015;
			_la = TokenStream.LA(1);
			if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterOrderListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext[] direction() {
			return GetRuleContexts<DirectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction(int i) {
			return GetRuleContext<DirectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterOrderListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterOrderList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterOrderList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterOrderList(this);
		}
	}

	[RuleVersion(0)]
	public AlterOrderListContext alterOrderList() {
		AlterOrderListContext _localctx = new AlterOrderListContext(Context, State);
		EnterRule(_localctx, 44, RULE_alterOrderList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2017;
			identifier();
			State = 2019;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				State = 2018;
				direction();
				}
			}

			State = 2028;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2021;
					Match(COMMA_SYMBOL);
					State = 2022;
					identifier();
					State = 2024;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
						{
						State = 2023;
						direction();
						}
					}

					}
					} 
				}
				State = 2030;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterAlgorithmOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterAlgorithmOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterAlgorithmOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterAlgorithmOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterAlgorithmOption(this);
		}
	}

	[RuleVersion(0)]
	public AlterAlgorithmOptionContext alterAlgorithmOption() {
		AlterAlgorithmOptionContext _localctx = new AlterAlgorithmOptionContext(Context, State);
		EnterRule(_localctx, 46, RULE_alterAlgorithmOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2031;
			Match(ALGORITHM_SYMBOL);
			State = 2033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 2032;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2037;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 2035;
				Match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				State = 2036;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLockOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterLockOption(this);
		}
	}

	[RuleVersion(0)]
	public AlterLockOptionContext alterLockOption() {
		AlterLockOptionContext _localctx = new AlterLockOptionContext(Context, State);
		EnterRule(_localctx, 48, RULE_alterLockOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2039;
			Match(LOCK_SYMBOL);
			State = 2041;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 2040;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2045;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 2043;
				Match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				State = 2044;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexLockAndAlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return GetRuleContext<AlterAlgorithmOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLockOptionContext alterLockOption() {
			return GetRuleContext<AlterLockOptionContext>(0);
		}
		public IndexLockAndAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexLockAndAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexLockAndAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexLockAndAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
		IndexLockAndAlgorithmContext _localctx = new IndexLockAndAlgorithmContext(Context, State);
		EnterRule(_localctx, 50, RULE_indexLockAndAlgorithm);
		int _la;
		try {
			State = 2055;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALGORITHM_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2047;
				alterAlgorithmOption();
				State = 2049;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCK_SYMBOL) {
					{
					State = 2048;
					alterLockOption();
					}
				}

				}
				break;
			case LOCK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2051;
				alterLockOption();
				State = 2053;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					State = 2052;
					alterAlgorithmOption();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithValidationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION_SYMBOL() { return GetToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT_SYMBOL() { return GetToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public WithValidationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withValidation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWithValidation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWithValidation(this);
		}
	}

	[RuleVersion(0)]
	public WithValidationContext withValidation() {
		WithValidationContext _localctx = new WithValidationContext(Context, State);
		EnterRule(_localctx, 52, RULE_withValidation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2057;
			_la = TokenStream.LA(1);
			if ( !(_la==WITH_SYMBOL || _la==WITHOUT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2058;
			Match(VALIDATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemovePartitioningContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySQLParser.REMOVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public RemovePartitioningContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removePartitioning; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRemovePartitioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRemovePartitioning(this);
		}
	}

	[RuleVersion(0)]
	public RemovePartitioningContext removePartitioning() {
		RemovePartitioningContext _localctx = new RemovePartitioningContext(Context, State);
		EnterRule(_localctx, 54, RULE_removePartitioning);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2060;
			Match(REMOVE_SYMBOL);
			State = 2061;
			Match(PARTITIONING_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllOrPartitionNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public AllOrPartitionNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allOrPartitionNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAllOrPartitionNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAllOrPartitionNameList(this);
		}
	}

	[RuleVersion(0)]
	public AllOrPartitionNameListContext allOrPartitionNameList() {
		AllOrPartitionNameListContext _localctx = new AllOrPartitionNameListContext(Context, State);
		EnterRule(_localctx, 56, RULE_allOrPartitionNameList);
		try {
			State = 2065;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2063;
				Match(ALL_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2064;
				identifierList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceOptionsContext alterTablespaceOptions() {
			return GetRuleContext<AlterTablespaceOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespace(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceContext alterTablespace() {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(Context, State);
		EnterRule(_localctx, 58, RULE_alterTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2067;
			Match(TABLESPACE_SYMBOL);
			State = 2068;
			tablespaceRef();
			State = 2080;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 2069;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD_SYMBOL || _la==DROP_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2070;
				Match(DATAFILE_SYMBOL);
				State = 2071;
				textLiteral();
				State = 2073;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 2072;
					alterTablespaceOptions();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2075;
				Match(RENAME_SYMBOL);
				State = 2076;
				Match(TO_SYMBOL);
				State = 2077;
				identifier();
				}
				break;
			case 3:
				{
				State = 2078;
				if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				State = 2079;
				alterTablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUndoTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_SYMBOL() { return GetToken(MySQLParser.UNDO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public AlterUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUndoTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterUndoTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterUndoTablespace(this);
		}
	}

	[RuleVersion(0)]
	public AlterUndoTablespaceContext alterUndoTablespace() {
		AlterUndoTablespaceContext _localctx = new AlterUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 60, RULE_alterUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2082;
			Match(UNDO_SYMBOL);
			State = 2083;
			Match(TABLESPACE_SYMBOL);
			State = 2084;
			tablespaceRef();
			State = 2085;
			Match(SET_SYMBOL);
			State = 2086;
			_la = TokenStream.LA(1);
			if ( !(_la==ACTIVE_SYMBOL || _la==INACTIVE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 2087;
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndoTableSpaceOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionContext[] undoTableSpaceOption() {
			return GetRuleContexts<UndoTableSpaceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionContext undoTableSpaceOption(int i) {
			return GetRuleContext<UndoTableSpaceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UndoTableSpaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undoTableSpaceOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUndoTableSpaceOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUndoTableSpaceOptions(this);
		}
	}

	[RuleVersion(0)]
	public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
		UndoTableSpaceOptionsContext _localctx = new UndoTableSpaceOptionsContext(Context, State);
		EnterRule(_localctx, 62, RULE_undoTableSpaceOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2090;
			undoTableSpaceOption();
			State = 2097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL || _la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				{
				State = 2092;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 2091;
					Match(COMMA_SYMBOL);
					}
				}

				State = 2094;
				undoTableSpaceOption();
				}
				}
				State = 2099;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndoTableSpaceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public UndoTableSpaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undoTableSpaceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUndoTableSpaceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUndoTableSpaceOption(this);
		}
	}

	[RuleVersion(0)]
	public UndoTableSpaceOptionContext undoTableSpaceOption() {
		UndoTableSpaceOptionContext _localctx = new UndoTableSpaceOptionContext(Context, State);
		EnterRule(_localctx, 64, RULE_undoTableSpaceOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2100;
			tsOptionEngine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceOptionContext[] alterTablespaceOption() {
			return GetRuleContexts<AlterTablespaceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceOptionContext alterTablespaceOption(int i) {
			return GetRuleContext<AlterTablespaceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespaceOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespaceOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespaceOptions(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceOptionsContext alterTablespaceOptions() {
		AlterTablespaceOptionsContext _localctx = new AlterTablespaceOptionsContext(Context, State);
		EnterRule(_localctx, 66, RULE_alterTablespaceOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2102;
			alterTablespaceOption();
			State = 2109;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2104;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
					case 1:
						{
						State = 2103;
						Match(COMMA_SYMBOL);
						}
						break;
					}
					State = 2106;
					alterTablespaceOption();
					}
					} 
				}
				State = 2111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEncryptionContext tsOptionEncryption() {
			return GetRuleContext<TsOptionEncryptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineAttributeContext tsOptionEngineAttribute() {
			return GetRuleContext<TsOptionEngineAttributeContext>(0);
		}
		public AlterTablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespaceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespaceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespaceOption(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceOptionContext alterTablespaceOption() {
		AlterTablespaceOptionContext _localctx = new AlterTablespaceOptionContext(Context, State);
		EnterRule(_localctx, 68, RULE_alterTablespaceOption);
		try {
			State = 2124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2112;
				Match(INITIAL_SIZE_SYMBOL);
				State = 2114;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					State = 2113;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 2116;
				sizeNumber();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2117;
				tsOptionAutoextendSize();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2118;
				tsOptionMaxSize();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2119;
				tsOptionEngine();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2120;
				tsOptionWait();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2121;
				tsOptionEncryption();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2122;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 2123;
				tsOptionEngineAttribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeTablespaceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		public ChangeTablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeTablespaceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeTablespaceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeTablespaceOption(this);
		}
	}

	[RuleVersion(0)]
	public ChangeTablespaceOptionContext changeTablespaceOption() {
		ChangeTablespaceOptionContext _localctx = new ChangeTablespaceOptionContext(Context, State);
		EnterRule(_localctx, 70, RULE_changeTablespaceOption);
		try {
			State = 2133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2126;
				Match(INITIAL_SIZE_SYMBOL);
				State = 2128;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
				case 1:
					{
					State = 2127;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 2130;
				sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2131;
				tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2132;
				tsOptionMaxSize();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterViewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefContext viewRef() {
			return GetRuleContext<ViewRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewTailContext viewTail() {
			return GetRuleContext<ViewTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewAlgorithmContext viewAlgorithm() {
			return GetRuleContext<ViewAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewSuidContext viewSuid() {
			return GetRuleContext<ViewSuidContext>(0);
		}
		public AlterViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterView(this);
		}
	}

	[RuleVersion(0)]
	public AlterViewContext alterView() {
		AlterViewContext _localctx = new AlterViewContext(Context, State);
		EnterRule(_localctx, 72, RULE_alterView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL) {
				{
				State = 2135;
				viewAlgorithm();
				}
			}

			State = 2139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2138;
				definerClause();
				}
			}

			State = 2142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				State = 2141;
				viewSuid();
				}
			}

			State = 2144;
			Match(VIEW_SYMBOL);
			State = 2145;
			viewRef();
			State = 2146;
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewQueryBlockContext viewQueryBlock() {
			return GetRuleContext<ViewQueryBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public ViewTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewTail(this);
		}
	}

	[RuleVersion(0)]
	public ViewTailContext viewTail() {
		ViewTailContext _localctx = new ViewTailContext(Context, State);
		EnterRule(_localctx, 74, RULE_viewTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2148;
				columnInternalRefList();
				}
			}

			State = 2151;
			Match(AS_SYMBOL);
			State = 2152;
			viewQueryBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewQueryBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() {
			return GetRuleContext<QueryExpressionWithOptLockingClausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewCheckOptionContext viewCheckOption() {
			return GetRuleContext<ViewCheckOptionContext>(0);
		}
		public ViewQueryBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewQueryBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewQueryBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewQueryBlock(this);
		}
	}

	[RuleVersion(0)]
	public ViewQueryBlockContext viewQueryBlock() {
		ViewQueryBlockContext _localctx = new ViewQueryBlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_viewQueryBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2154;
			queryExpressionWithOptLockingClauses();
			State = 2156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				State = 2155;
				viewCheckOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewCheckOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySQLParser.CASCADED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ViewCheckOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewCheckOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewCheckOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewCheckOption(this);
		}
	}

	[RuleVersion(0)]
	public ViewCheckOptionContext viewCheckOption() {
		ViewCheckOptionContext _localctx = new ViewCheckOptionContext(Context, State);
		EnterRule(_localctx, 78, RULE_viewCheckOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2158;
			Match(WITH_SYMBOL);
			State = 2160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) {
				{
				State = 2159;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2162;
			Match(CHECK_SYMBOL);
			State = 2163;
			Match(OPTION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterInstanceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySQLParser.ROTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySQLParser.RELOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLS_SYMBOL() { return GetToken(MySQLParser.TLS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYRING_SYMBOL() { return GetToken(MySQLParser.KEYRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public AlterInstanceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterInstanceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterInstanceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterInstanceStatement(this);
		}
	}

	[RuleVersion(0)]
	public AlterInstanceStatementContext alterInstanceStatement() {
		AlterInstanceStatementContext _localctx = new AlterInstanceStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_alterInstanceStatement);
		int _la;
		try {
			State = 2197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2165;
				Match(INSTANCE_SYMBOL);
				State = 2166;
				Match(ROTATE_SYMBOL);
				State = 2167;
				textOrIdentifier();
				State = 2168;
				Match(MASTER_SYMBOL);
				State = 2169;
				Match(KEY_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2171;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 2195;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 2172;
					Match(RELOAD_SYMBOL);
					State = 2173;
					Match(TLS_SYMBOL);
					State = 2187;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NO_SYMBOL:
						{
						State = 2174;
						Match(NO_SYMBOL);
						State = 2175;
						Match(ROLLBACK_SYMBOL);
						State = 2176;
						Match(ON_SYMBOL);
						State = 2177;
						Match(ERROR_SYMBOL);
						}
						break;
					case FOR_SYMBOL:
						{
						State = 2178;
						Match(FOR_SYMBOL);
						State = 2179;
						Match(CHANNEL_SYMBOL);
						State = 2180;
						identifier();
						State = 2185;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NO_SYMBOL) {
							{
							State = 2181;
							Match(NO_SYMBOL);
							State = 2182;
							Match(ROLLBACK_SYMBOL);
							State = 2183;
							Match(ON_SYMBOL);
							State = 2184;
							Match(ERROR_SYMBOL);
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 2:
					{
					State = 2189;
					_la = TokenStream.LA(1);
					if ( !(_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2190;
					identifier();
					State = 2191;
					identifier();
					}
					break;
				case 3:
					{
					State = 2193;
					Match(RELOAD_SYMBOL);
					State = 2194;
					Match(KEYRING_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseContext createDatabase() {
			return GetRuleContext<CreateDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUdfContext createUdf() {
			return GetRuleContext<CreateUdfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateLogfileGroupContext createLogfileGroup() {
			return GetRuleContext<CreateLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateViewContext createView() {
			return GetRuleContext<CreateViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTriggerContext createTrigger() {
			return GetRuleContext<CreateTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateServerContext createServer() {
			return GetRuleContext<CreateServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTablespaceContext createTablespace() {
			return GetRuleContext<CreateTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateEventContext createEvent() {
			return GetRuleContext<CreateEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateRoleContext createRole() {
			return GetRuleContext<CreateRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateSpatialReferenceContext createSpatialReference() {
			return GetRuleContext<CreateSpatialReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUndoTablespaceContext createUndoTablespace() {
			return GetRuleContext<CreateUndoTablespaceContext>(0);
		}
		public CreateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateStatement(this);
		}
	}

	[RuleVersion(0)]
	public CreateStatementContext createStatement() {
		CreateStatementContext _localctx = new CreateStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_createStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2199;
			Match(CREATE_SYMBOL);
			State = 2217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 2200;
				createDatabase();
				}
				break;
			case 2:
				{
				State = 2201;
				createTable();
				}
				break;
			case 3:
				{
				State = 2202;
				createFunction();
				}
				break;
			case 4:
				{
				State = 2203;
				createProcedure();
				}
				break;
			case 5:
				{
				State = 2204;
				createUdf();
				}
				break;
			case 6:
				{
				State = 2205;
				createLogfileGroup();
				}
				break;
			case 7:
				{
				State = 2206;
				createView();
				}
				break;
			case 8:
				{
				State = 2207;
				createTrigger();
				}
				break;
			case 9:
				{
				State = 2208;
				createIndex();
				}
				break;
			case 10:
				{
				State = 2209;
				createServer();
				}
				break;
			case 11:
				{
				State = 2210;
				createTablespace();
				}
				break;
			case 12:
				{
				State = 2211;
				createEvent();
				}
				break;
			case 13:
				{
				State = 2212;
				createRole();
				}
				break;
			case 14:
				{
				State = 2213;
				if (!(this.isServerVersionGe80011())) throw new FailedPredicateException(this, "this.isServerVersionGe80011()");
				State = 2214;
				createSpatialReference();
				}
				break;
			case 15:
				{
				State = 2215;
				if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				State = 2216;
				createUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaNameContext schemaName() {
			return GetRuleContext<SchemaNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabase(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseContext createDatabase() {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(Context, State);
		EnterRule(_localctx, 84, RULE_createDatabase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2219;
			Match(DATABASE_SYMBOL);
			State = 2221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 2220;
				ifNotExists();
				}
				break;
			}
			State = 2223;
			schemaName();
			State = 2227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2224;
					createDatabaseOption();
					}
					} 
				}
				State = 2229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCharsetContext defaultCharset() {
			return GetRuleContext<DefaultCharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCollationContext defaultCollation() {
			return GetRuleContext<DefaultCollationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultEncryptionContext defaultEncryption() {
			return GetRuleContext<DefaultEncryptionContext>(0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabaseOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabaseOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabaseOption(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseOptionContext createDatabaseOption() {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(Context, State);
		EnterRule(_localctx, 86, RULE_createDatabaseOption);
		try {
			State = 2234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2230;
				defaultCharset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2231;
				defaultCollation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2232;
				if (!(this.isServerVersionGe80016())) throw new FailedPredicateException(this, "this.isServerVersionGe80016()");
				State = 2233;
				defaultEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_SYMBOL() { return GetToken(MySQLParser.LIKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableElementListContext tableElementList() {
			return GetRuleContext<TableElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionsEtcContext createTableOptionsEtc() {
			return GetRuleContext<CreateTableOptionsEtcContext>(0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTable(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(Context, State);
		EnterRule(_localctx, 88, RULE_createTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				State = 2236;
				Match(TEMPORARY_SYMBOL);
				}
			}

			State = 2239;
			Match(TABLE_SYMBOL);
			State = 2241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 2240;
				ifNotExists();
				}
				break;
			}
			State = 2243;
			tableName();
			State = 2260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 2248;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 2244;
					Match(OPEN_PAR_SYMBOL);
					State = 2245;
					tableElementList();
					State = 2246;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				State = 2251;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
				case 1:
					{
					State = 2250;
					createTableOptionsEtc();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2253;
				Match(LIKE_SYMBOL);
				State = 2254;
				tableRef();
				}
				break;
			case 3:
				{
				State = 2255;
				Match(OPEN_PAR_SYMBOL);
				State = 2256;
				Match(LIKE_SYMBOL);
				State = 2257;
				tableRef();
				State = 2258;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableElementContext[] tableElement() {
			return GetRuleContexts<TableElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableElementContext tableElement(int i) {
			return GetRuleContext<TableElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableElementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableElementList(this);
		}
	}

	[RuleVersion(0)]
	public TableElementListContext tableElementList() {
		TableElementListContext _localctx = new TableElementListContext(Context, State);
		EnterRule(_localctx, 90, RULE_tableElementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2262;
			tableElement();
			State = 2267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2263;
				Match(COMMA_SYMBOL);
				State = 2264;
				tableElement();
				}
				}
				State = 2269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintDefContext tableConstraintDef() {
			return GetRuleContext<TableConstraintDefContext>(0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableElement(this);
		}
	}

	[RuleVersion(0)]
	public TableElementContext tableElement() {
		TableElementContext _localctx = new TableElementContext(Context, State);
		EnterRule(_localctx, 92, RULE_tableElement);
		try {
			State = 2272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2270;
				columnDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2271;
				tableConstraintDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DuplicateAsQeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AsCreateQueryExpressionContext asCreateQueryExpression() {
			return GetRuleContext<AsCreateQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public DuplicateAsQeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duplicateAsQe; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDuplicateAsQe(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDuplicateAsQe(this);
		}
	}

	[RuleVersion(0)]
	public DuplicateAsQeContext duplicateAsQe() {
		DuplicateAsQeContext _localctx = new DuplicateAsQeContext(Context, State);
		EnterRule(_localctx, 94, RULE_duplicateAsQe);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 2274;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2277;
			asCreateQueryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsCreateQueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() {
			return GetRuleContext<QueryExpressionWithOptLockingClausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public AsCreateQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asCreateQueryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAsCreateQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAsCreateQueryExpression(this);
		}
	}

	[RuleVersion(0)]
	public AsCreateQueryExpressionContext asCreateQueryExpression() {
		AsCreateQueryExpressionContext _localctx = new AsCreateQueryExpressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_asCreateQueryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				{
				State = 2279;
				Match(AS_SYMBOL);
				}
				break;
			}
			State = 2282;
			queryExpressionWithOptLockingClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionOrParensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseListContext lockingClauseList() {
			return GetRuleContext<LockingClauseListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public QueryExpressionOrParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionOrParens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionOrParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionOrParens(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionOrParensContext queryExpressionOrParens() {
		QueryExpressionOrParensContext _localctx = new QueryExpressionOrParensContext(Context, State);
		EnterRule(_localctx, 98, RULE_queryExpressionOrParens);
		try {
			State = 2289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2284;
				queryExpression();
				State = 2286;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 2285;
					lockingClauseList();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2288;
				queryExpressionParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionWithOptLockingClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseListContext lockingClauseList() {
			return GetRuleContext<LockingClauseListContext>(0);
		}
		public QueryExpressionWithOptLockingClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionWithOptLockingClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionWithOptLockingClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionWithOptLockingClauses(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() {
		QueryExpressionWithOptLockingClausesContext _localctx = new QueryExpressionWithOptLockingClausesContext(Context, State);
		EnterRule(_localctx, 100, RULE_queryExpressionWithOptLockingClauses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2291;
			queryExpression();
			State = 2293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 2292;
				lockingClauseList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoutineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MySQLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUdfContext createUdf() {
			return GetRuleContext<CreateUdfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON_SYMBOL() { return GetToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
		public CreateRoutineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRoutine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateRoutine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateRoutine(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoutineContext createRoutine() {
		CreateRoutineContext _localctx = new CreateRoutineContext(Context, State);
		EnterRule(_localctx, 102, RULE_createRoutine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2295;
			Match(CREATE_SYMBOL);
			State = 2299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 2296;
				createProcedure();
				}
				break;
			case 2:
				{
				State = 2297;
				createFunction();
				}
				break;
			case 3:
				{
				State = 2298;
				createUdf();
				}
				break;
			}
			State = 2302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON_SYMBOL) {
				{
				State = 2301;
				Match(SEMICOLON_SYMBOL);
				}
			}

			State = 2304;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureNameContext procedureName() {
			return GetRuleContext<ProcedureNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StoredRoutineBodyContext storedRoutineBody() {
			return GetRuleContext<StoredRoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateProcedure(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(Context, State);
		EnterRule(_localctx, 104, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2306;
				definerClause();
				}
			}

			State = 2309;
			Match(PROCEDURE_SYMBOL);
			State = 2311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 2310;
				ifNotExists();
				}
				break;
			}
			State = 2313;
			procedureName();
			State = 2314;
			Match(OPEN_PAR_SYMBOL);
			State = 2323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 2315;
				procedureParameter();
				State = 2320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 2316;
					Match(COMMA_SYMBOL);
					State = 2317;
					procedureParameter();
					}
					}
					State = 2322;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 2325;
			Match(CLOSE_PAR_SYMBOL);
			State = 2329;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2326;
					routineCreateOption();
					}
					} 
				}
				State = 2331;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			}
			State = 2332;
			storedRoutineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR_QUOTED_STRING_TEXT() { return GetToken(MySQLParser.DOLLAR_QUOTED_STRING_TEXT, 0); }
		public RoutineStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoutineString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoutineString(this);
		}
	}

	[RuleVersion(0)]
	public RoutineStringContext routineString() {
		RoutineStringContext _localctx = new RoutineStringContext(Context, State);
		EnterRule(_localctx, 106, RULE_routineString);
		try {
			State = 2336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2334;
				textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2335;
				Match(DOLLAR_QUOTED_STRING_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoredRoutineBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineStringContext routineString() {
			return GetRuleContext<RoutineStringContext>(0);
		}
		public StoredRoutineBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storedRoutineBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStoredRoutineBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStoredRoutineBody(this);
		}
	}

	[RuleVersion(0)]
	public StoredRoutineBodyContext storedRoutineBody() {
		StoredRoutineBodyContext _localctx = new StoredRoutineBodyContext(Context, State);
		EnterRule(_localctx, 108, RULE_storedRoutineBody);
		try {
			State = 2342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2338;
				compoundStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2339;
				if (!(this.isStoredRoutineBody())) throw new FailedPredicateException(this, "this.isStoredRoutineBody()");
				State = 2340;
				Match(AS_SYMBOL);
				State = 2341;
				routineString();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySQLParser.RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeWithOptCollateContext typeWithOptCollate() {
			return GetRuleContext<TypeWithOptCollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoredRoutineBodyContext storedRoutineBody() {
			return GetRuleContext<StoredRoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateFunction(this);
		}
	}

	[RuleVersion(0)]
	public CreateFunctionContext createFunction() {
		CreateFunctionContext _localctx = new CreateFunctionContext(Context, State);
		EnterRule(_localctx, 110, RULE_createFunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2344;
				definerClause();
				}
			}

			State = 2347;
			Match(FUNCTION_SYMBOL);
			State = 2349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				{
				State = 2348;
				ifNotExists();
				}
				break;
			}
			State = 2351;
			functionName();
			State = 2352;
			Match(OPEN_PAR_SYMBOL);
			State = 2361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				State = 2353;
				functionParameter();
				State = 2358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 2354;
					Match(COMMA_SYMBOL);
					State = 2355;
					functionParameter();
					}
					}
					State = 2360;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 2363;
			Match(CLOSE_PAR_SYMBOL);
			State = 2364;
			Match(RETURNS_SYMBOL);
			State = 2365;
			typeWithOptCollate();
			State = 2369;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2366;
					routineCreateOption();
					}
					} 
				}
				State = 2371;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			}
			State = 2372;
			storedRoutineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUdfContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UdfNameContext udfName() {
			return GetRuleContext<UdfNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySQLParser.RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME_SYMBOL() { return GetToken(MySQLParser.SONAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_SYMBOL() { return GetToken(MySQLParser.STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_SYMBOL() { return GetToken(MySQLParser.INT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_SYMBOL() { return GetToken(MySQLParser.REAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateUdfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUdf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUdf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUdf(this);
		}
	}

	[RuleVersion(0)]
	public CreateUdfContext createUdf() {
		CreateUdfContext _localctx = new CreateUdfContext(Context, State);
		EnterRule(_localctx, 112, RULE_createUdf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGGREGATE_SYMBOL) {
				{
				State = 2374;
				Match(AGGREGATE_SYMBOL);
				}
			}

			State = 2377;
			Match(FUNCTION_SYMBOL);
			State = 2379;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				{
				State = 2378;
				ifNotExists();
				}
				break;
			}
			State = 2381;
			udfName();
			State = 2382;
			Match(RETURNS_SYMBOL);
			State = 2383;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DECIMAL_SYMBOL || _la==INT_SYMBOL || _la==REAL_SYMBOL || _la==STRING_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2384;
			Match(SONAME_SYMBOL);
			State = 2385;
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineCreateOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption() {
			return GetRuleContext<RoutineOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC_SYMBOL() { return GetToken(MySQLParser.DETERMINISTIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public RoutineCreateOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineCreateOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoutineCreateOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoutineCreateOption(this);
		}
	}

	[RuleVersion(0)]
	public RoutineCreateOptionContext routineCreateOption() {
		RoutineCreateOptionContext _localctx = new RoutineCreateOptionContext(Context, State);
		EnterRule(_localctx, 114, RULE_routineCreateOption);
		int _la;
		try {
			State = 2392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT_SYMBOL:
			case CONTAINS_SYMBOL:
			case LANGUAGE_SYMBOL:
			case MODIFIES_SYMBOL:
			case NO_SYMBOL:
			case READS_SYMBOL:
			case SQL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2387;
				routineOption();
				}
				break;
			case DETERMINISTIC_SYMBOL:
			case NOT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 2388;
					Match(NOT_SYMBOL);
					}
				}

				State = 2391;
				Match(DETERMINISTIC_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineAlterOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		public RoutineAlterOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineAlterOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoutineAlterOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoutineAlterOptions(this);
		}
	}

	[RuleVersion(0)]
	public RoutineAlterOptionsContext routineAlterOptions() {
		RoutineAlterOptionsContext _localctx = new RoutineAlterOptionsContext(Context, State);
		EnterRule(_localctx, 116, RULE_routineAlterOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2394;
				routineCreateOption();
				}
				}
				State = 2397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 72057594037960705L) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 370)) & ~0x3f) == 0 && ((1L << (_la - 370)) & 5242881L) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineOptionContext : ParserRuleContext {
		public IToken option;
		public IToken security;
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_SYMBOL() { return GetToken(MySQLParser.SQL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READS_SYMBOL() { return GetToken(MySQLParser.READS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFIES_SYMBOL() { return GetToken(MySQLParser.MODIFIES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySQLParser.SECURITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public RoutineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoutineOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoutineOption(this);
		}
	}

	[RuleVersion(0)]
	public RoutineOptionContext routineOption() {
		RoutineOptionContext _localctx = new RoutineOptionContext(Context, State);
		EnterRule(_localctx, 118, RULE_routineOption);
		int _la;
		try {
			State = 2420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2399;
				_localctx.option = Match(COMMENT_SYMBOL);
				State = 2400;
				textLiteral();
				}
				break;
			case LANGUAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2401;
				_localctx.option = Match(LANGUAGE_SYMBOL);
				State = 2405;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
				case 1:
					{
					State = 2402;
					Match(SQL_SYMBOL);
					}
					break;
				case 2:
					{
					State = 2403;
					if (!(this.isServerVersionGe80032())) throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
					State = 2404;
					identifier();
					}
					break;
				}
				}
				break;
			case NO_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2407;
				_localctx.option = Match(NO_SYMBOL);
				State = 2408;
				Match(SQL_SYMBOL);
				}
				break;
			case CONTAINS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2409;
				_localctx.option = Match(CONTAINS_SYMBOL);
				State = 2410;
				Match(SQL_SYMBOL);
				}
				break;
			case READS_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2411;
				_localctx.option = Match(READS_SYMBOL);
				State = 2412;
				Match(SQL_SYMBOL);
				State = 2413;
				Match(DATA_SYMBOL);
				}
				break;
			case MODIFIES_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2414;
				_localctx.option = Match(MODIFIES_SYMBOL);
				State = 2415;
				Match(SQL_SYMBOL);
				State = 2416;
				Match(DATA_SYMBOL);
				}
				break;
			case SQL_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2417;
				_localctx.option = Match(SQL_SYMBOL);
				State = 2418;
				Match(SECURITY_SYMBOL);
				State = 2419;
				_localctx.security = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
					_localctx.security = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexTargetContext createIndexTarget() {
			return GetRuleContext<CreateIndexTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT_SYMBOL() { return GetToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return GetRuleContext<IndexLockAndAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeClauseContext indexTypeClause() {
			return GetRuleContext<IndexTypeClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FulltextIndexOptionContext[] fulltextIndexOption() {
			return GetRuleContexts<FulltextIndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return GetRuleContext<FulltextIndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpatialIndexOptionContext[] spatialIndexOption() {
			return GetRuleContexts<SpatialIndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpatialIndexOptionContext spatialIndexOption(int i) {
			return GetRuleContext<SpatialIndexOptionContext>(i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(Context, State);
		EnterRule(_localctx, 120, RULE_createIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				State = 2422;
				onlineOption();
				}
			}

			State = 2460;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX_SYMBOL:
			case UNIQUE_SYMBOL:
				{
				State = 2426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNIQUE_SYMBOL) {
					{
					State = 2425;
					Match(UNIQUE_SYMBOL);
					}
				}

				State = 2428;
				_localctx.type = Match(INDEX_SYMBOL);
				State = 2429;
				indexName();
				State = 2431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TYPE_SYMBOL || _la==USING_SYMBOL) {
					{
					State = 2430;
					indexTypeClause();
					}
				}

				State = 2433;
				createIndexTarget();
				State = 2437;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2434;
						indexOption();
						}
						} 
					}
					State = 2439;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				{
				State = 2440;
				_localctx.type = Match(FULLTEXT_SYMBOL);
				State = 2441;
				Match(INDEX_SYMBOL);
				State = 2442;
				indexName();
				State = 2443;
				createIndexTarget();
				State = 2447;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2444;
						fulltextIndexOption();
						}
						} 
					}
					State = 2449;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				{
				State = 2450;
				_localctx.type = Match(SPATIAL_SYMBOL);
				State = 2451;
				Match(INDEX_SYMBOL);
				State = 2452;
				indexName();
				State = 2453;
				createIndexTarget();
				State = 2457;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2454;
						spatialIndexOption();
						}
						} 
					}
					State = 2459;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==LOCK_SYMBOL) {
				{
				State = 2462;
				indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexNameAndTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		public IndexNameAndTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexNameAndType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexNameAndType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexNameAndType(this);
		}
	}

	[RuleVersion(0)]
	public IndexNameAndTypeContext indexNameAndType() {
		IndexNameAndTypeContext _localctx = new IndexNameAndTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_indexNameAndType);
		try {
			State = 2475;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2465;
				indexName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2467;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
				case 1:
					{
					State = 2466;
					indexName();
					}
					break;
				}
				State = 2469;
				Match(USING_SYMBOL);
				State = 2470;
				indexType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2471;
				indexName();
				State = 2472;
				Match(TYPE_SYMBOL);
				State = 2473;
				indexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexTargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyListWithExpressionContext keyListWithExpression() {
			return GetRuleContext<KeyListWithExpressionContext>(0);
		}
		public CreateIndexTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateIndexTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateIndexTarget(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexTargetContext createIndexTarget() {
		CreateIndexTargetContext _localctx = new CreateIndexTargetContext(Context, State);
		EnterRule(_localctx, 124, RULE_createIndexTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2477;
			Match(ON_SYMBOL);
			State = 2478;
			tableRef();
			State = 2479;
			keyListWithExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupNameContext logfileGroupName() {
			return GetRuleContext<LogfileGroupNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupOptionsContext logfileGroupOptions() {
			return GetRuleContext<LogfileGroupOptionsContext>(0);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateLogfileGroup(this);
		}
	}

	[RuleVersion(0)]
	public CreateLogfileGroupContext createLogfileGroup() {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(Context, State);
		EnterRule(_localctx, 126, RULE_createLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2481;
			Match(LOGFILE_SYMBOL);
			State = 2482;
			Match(GROUP_SYMBOL);
			State = 2483;
			logfileGroupName();
			State = 2484;
			Match(ADD_SYMBOL);
			State = 2485;
			Match(UNDOFILE_SYMBOL);
			State = 2486;
			textLiteral();
			State = 2488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NODEGROUP_SYMBOL || _la==NO_WAIT_SYMBOL || _la==REDO_BUFFER_SIZE_SYMBOL || _la==STORAGE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 2487;
				logfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupOptionContext[] logfileGroupOption() {
			return GetRuleContexts<LogfileGroupOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupOptionContext logfileGroupOption(int i) {
			return GetRuleContext<LogfileGroupOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public LogfileGroupOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupOptions(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupOptionsContext logfileGroupOptions() {
		LogfileGroupOptionsContext _localctx = new LogfileGroupOptionsContext(Context, State);
		EnterRule(_localctx, 128, RULE_logfileGroupOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2490;
			logfileGroupOption();
			State = 2497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL || _la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NODEGROUP_SYMBOL || _la==NO_WAIT_SYMBOL || _la==REDO_BUFFER_SIZE_SYMBOL || _la==STORAGE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				{
				State = 2492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 2491;
					Match(COMMA_SYMBOL);
					}
				}

				State = 2494;
				logfileGroupOption();
				}
				}
				State = 2499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() {
			return GetRuleContext<TsOptionUndoRedoBufferSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionNodegroupContext tsOptionNodegroup() {
			return GetRuleContext<TsOptionNodegroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionCommentContext tsOptionComment() {
			return GetRuleContext<TsOptionCommentContext>(0);
		}
		public LogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupOption(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupOptionContext logfileGroupOption() {
		LogfileGroupOptionContext _localctx = new LogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 130, RULE_logfileGroupOption);
		try {
			State = 2506;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2500;
				tsOptionInitialSize();
				}
				break;
			case REDO_BUFFER_SIZE_SYMBOL:
			case UNDO_BUFFER_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2501;
				tsOptionUndoRedoBufferSize();
				}
				break;
			case NODEGROUP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2502;
				tsOptionNodegroup();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2503;
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2504;
				tsOptionWait();
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2505;
				tsOptionComment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerNameContext serverName() {
			return GetRuleContext<ServerNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionsContext serverOptions() {
			return GetRuleContext<ServerOptionsContext>(0);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateServer(this);
		}
	}

	[RuleVersion(0)]
	public CreateServerContext createServer() {
		CreateServerContext _localctx = new CreateServerContext(Context, State);
		EnterRule(_localctx, 132, RULE_createServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2508;
			Match(SERVER_SYMBOL);
			State = 2509;
			serverName();
			State = 2510;
			Match(FOREIGN_SYMBOL);
			State = 2511;
			Match(DATA_SYMBOL);
			State = 2512;
			Match(WRAPPER_SYMBOL);
			State = 2513;
			textOrIdentifier();
			State = 2514;
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ServerOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerOptions(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionsContext serverOptions() {
		ServerOptionsContext _localctx = new ServerOptionsContext(Context, State);
		EnterRule(_localctx, 134, RULE_serverOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2516;
			Match(OPTIONS_SYMBOL);
			State = 2517;
			Match(OPEN_PAR_SYMBOL);
			State = 2518;
			serverOption();
			State = 2523;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2519;
				Match(COMMA_SYMBOL);
				State = 2520;
				serverOption();
				}
				}
				State = 2525;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2526;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST_SYMBOL() { return GetToken(MySQLParser.HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySQLParser.SOCKET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER_SYMBOL() { return GetToken(MySQLParser.OWNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT_SYMBOL() { return GetToken(MySQLParser.PORT_SYMBOL, 0); }
		public ServerOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerOption(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionContext serverOption() {
		ServerOptionContext _localctx = new ServerOptionContext(Context, State);
		EnterRule(_localctx, 136, RULE_serverOption);
		try {
			State = 2542;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HOST_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2528;
				_localctx.option = Match(HOST_SYMBOL);
				State = 2529;
				textLiteral();
				}
				break;
			case DATABASE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2530;
				_localctx.option = Match(DATABASE_SYMBOL);
				State = 2531;
				textLiteral();
				}
				break;
			case USER_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2532;
				_localctx.option = Match(USER_SYMBOL);
				State = 2533;
				textLiteral();
				}
				break;
			case PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2534;
				_localctx.option = Match(PASSWORD_SYMBOL);
				State = 2535;
				textLiteral();
				}
				break;
			case SOCKET_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2536;
				_localctx.option = Match(SOCKET_SYMBOL);
				State = 2537;
				textLiteral();
				}
				break;
			case OWNER_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2538;
				_localctx.option = Match(OWNER_SYMBOL);
				State = 2539;
				textLiteral();
				}
				break;
			case PORT_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2540;
				_localctx.option = Match(PORT_SYMBOL);
				State = 2541;
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceNameContext tablespaceName() {
			return GetRuleContext<TablespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsDataFileNameContext tsDataFileName() {
			return GetRuleContext<TsDataFileNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_SYMBOL() { return GetToken(MySQLParser.USE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceOptionsContext tablespaceOptions() {
			return GetRuleContext<TablespaceOptionsContext>(0);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTablespace(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceContext createTablespace() {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(Context, State);
		EnterRule(_localctx, 138, RULE_createTablespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2544;
			Match(TABLESPACE_SYMBOL);
			State = 2545;
			tablespaceName();
			State = 2546;
			tsDataFileName();
			State = 2551;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				{
				State = 2547;
				Match(USE_SYMBOL);
				State = 2548;
				Match(LOGFILE_SYMBOL);
				State = 2549;
				Match(GROUP_SYMBOL);
				State = 2550;
				logfileGroupRef();
				}
				break;
			}
			State = 2554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				{
				State = 2553;
				tablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUndoTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_SYMBOL() { return GetToken(MySQLParser.UNDO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceNameContext tablespaceName() {
			return GetRuleContext<TablespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TsDataFileContext tsDataFile() {
			return GetRuleContext<TsDataFileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public CreateUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUndoTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUndoTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUndoTablespace(this);
		}
	}

	[RuleVersion(0)]
	public CreateUndoTablespaceContext createUndoTablespace() {
		CreateUndoTablespaceContext _localctx = new CreateUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 140, RULE_createUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2556;
			Match(UNDO_SYMBOL);
			State = 2557;
			Match(TABLESPACE_SYMBOL);
			State = 2558;
			tablespaceName();
			State = 2559;
			Match(ADD_SYMBOL);
			State = 2560;
			tsDataFile();
			State = 2562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 2561;
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsDataFileNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TsDataFileContext tsDataFile() {
			return GetRuleContext<TsDataFileContext>(0);
		}
		public TsDataFileNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsDataFileName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsDataFileName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsDataFileName(this);
		}
	}

	[RuleVersion(0)]
	public TsDataFileNameContext tsDataFileName() {
		TsDataFileNameContext _localctx = new TsDataFileNameContext(Context, State);
		EnterRule(_localctx, 142, RULE_tsDataFileName);
		try {
			State = 2571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2564;
				Match(ADD_SYMBOL);
				State = 2565;
				tsDataFile();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2566;
				if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				State = 2569;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
				case 1:
					{
					State = 2567;
					Match(ADD_SYMBOL);
					State = 2568;
					tsDataFile();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsDataFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public TsDataFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsDataFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsDataFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsDataFile(this);
		}
	}

	[RuleVersion(0)]
	public TsDataFileContext tsDataFile() {
		TsDataFileContext _localctx = new TsDataFileContext(Context, State);
		EnterRule(_localctx, 144, RULE_tsDataFile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2573;
			Match(DATAFILE_SYMBOL);
			State = 2574;
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceOptionContext[] tablespaceOption() {
			return GetRuleContexts<TablespaceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceOptionContext tablespaceOption(int i) {
			return GetRuleContext<TablespaceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TablespaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablespaceOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablespaceOptions(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceOptionsContext tablespaceOptions() {
		TablespaceOptionsContext _localctx = new TablespaceOptionsContext(Context, State);
		EnterRule(_localctx, 146, RULE_tablespaceOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2576;
			tablespaceOption();
			State = 2583;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2578;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
					case 1:
						{
						State = 2577;
						Match(COMMA_SYMBOL);
						}
						break;
					}
					State = 2580;
					tablespaceOption();
					}
					} 
				}
				State = 2585;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionExtentSizeContext tsOptionExtentSize() {
			return GetRuleContext<TsOptionExtentSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionNodegroupContext tsOptionNodegroup() {
			return GetRuleContext<TsOptionNodegroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionCommentContext tsOptionComment() {
			return GetRuleContext<TsOptionCommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionFileblockSizeContext tsOptionFileblockSize() {
			return GetRuleContext<TsOptionFileblockSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEncryptionContext tsOptionEncryption() {
			return GetRuleContext<TsOptionEncryptionContext>(0);
		}
		public TablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablespaceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablespaceOption(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceOptionContext tablespaceOption() {
		TablespaceOptionContext _localctx = new TablespaceOptionContext(Context, State);
		EnterRule(_localctx, 148, RULE_tablespaceOption);
		try {
			State = 2597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2586;
				tsOptionInitialSize();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2587;
				tsOptionAutoextendSize();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2588;
				tsOptionMaxSize();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2589;
				tsOptionExtentSize();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2590;
				tsOptionNodegroup();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2591;
				tsOptionEngine();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2592;
				tsOptionWait();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2593;
				tsOptionComment();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2594;
				tsOptionFileblockSize();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2595;
				if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				State = 2596;
				tsOptionEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionInitialSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionInitialSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionInitialSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionInitialSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionInitialSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionInitialSizeContext tsOptionInitialSize() {
		TsOptionInitialSizeContext _localctx = new TsOptionInitialSizeContext(Context, State);
		EnterRule(_localctx, 150, RULE_tsOptionInitialSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2599;
			Match(INITIAL_SIZE_SYMBOL);
			State = 2601;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				{
				State = 2600;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2603;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionUndoRedoBufferSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionUndoRedoBufferSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionUndoRedoBufferSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionUndoRedoBufferSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionUndoRedoBufferSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() {
		TsOptionUndoRedoBufferSizeContext _localctx = new TsOptionUndoRedoBufferSizeContext(Context, State);
		EnterRule(_localctx, 152, RULE_tsOptionUndoRedoBufferSize);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2605;
			_la = TokenStream.LA(1);
			if ( !(_la==REDO_BUFFER_SIZE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 2606;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2609;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionAutoextendSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionAutoextendSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionAutoextendSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionAutoextendSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
		TsOptionAutoextendSizeContext _localctx = new TsOptionAutoextendSizeContext(Context, State);
		EnterRule(_localctx, 154, RULE_tsOptionAutoextendSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2611;
			Match(AUTOEXTEND_SIZE_SYMBOL);
			State = 2613;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 2612;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2615;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionMaxSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionMaxSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionMaxSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionMaxSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionMaxSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionMaxSizeContext tsOptionMaxSize() {
		TsOptionMaxSizeContext _localctx = new TsOptionMaxSizeContext(Context, State);
		EnterRule(_localctx, 156, RULE_tsOptionMaxSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2617;
			Match(MAX_SIZE_SYMBOL);
			State = 2619;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				{
				State = 2618;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2621;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionExtentSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionExtentSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionExtentSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionExtentSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionExtentSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionExtentSizeContext tsOptionExtentSize() {
		TsOptionExtentSizeContext _localctx = new TsOptionExtentSizeContext(Context, State);
		EnterRule(_localctx, 158, RULE_tsOptionExtentSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2623;
			Match(EXTENT_SIZE_SYMBOL);
			State = 2625;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 2624;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2627;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionNodegroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionNodegroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionNodegroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionNodegroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionNodegroup(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionNodegroupContext tsOptionNodegroup() {
		TsOptionNodegroupContext _localctx = new TsOptionNodegroupContext(Context, State);
		EnterRule(_localctx, 160, RULE_tsOptionNodegroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2629;
			Match(NODEGROUP_SYMBOL);
			State = 2631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR) {
				{
				State = 2630;
				Match(EQUAL_OPERATOR);
				}
			}

			State = 2633;
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionEngineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEngineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionEngine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionEngine(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionEngineContext tsOptionEngine() {
		TsOptionEngineContext _localctx = new TsOptionEngineContext(Context, State);
		EnterRule(_localctx, 162, RULE_tsOptionEngine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORAGE_SYMBOL) {
				{
				State = 2635;
				Match(STORAGE_SYMBOL);
				}
			}

			State = 2638;
			Match(ENGINE_SYMBOL);
			State = 2640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				{
				State = 2639;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2642;
			engineRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionWaitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_SYMBOL() { return GetToken(MySQLParser.WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TsOptionWaitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionWait; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionWait(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionWait(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionWaitContext tsOptionWait() {
		TsOptionWaitContext _localctx = new TsOptionWaitContext(Context, State);
		EnterRule(_localctx, 164, RULE_tsOptionWait);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2644;
			_la = TokenStream.LA(1);
			if ( !(_la==NO_WAIT_SYMBOL || _la==WAIT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionCommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionComment(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionCommentContext tsOptionComment() {
		TsOptionCommentContext _localctx = new TsOptionCommentContext(Context, State);
		EnterRule(_localctx, 166, RULE_tsOptionComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2646;
			Match(COMMENT_SYMBOL);
			State = 2648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				{
				State = 2647;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2650;
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionFileblockSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionFileblockSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionFileblockSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionFileblockSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionFileblockSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionFileblockSizeContext tsOptionFileblockSize() {
		TsOptionFileblockSizeContext _localctx = new TsOptionFileblockSizeContext(Context, State);
		EnterRule(_localctx, 168, RULE_tsOptionFileblockSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2652;
			Match(FILE_BLOCK_SIZE_SYMBOL);
			State = 2654;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				{
				State = 2653;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2656;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionEncryptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEncryptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionEncryption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionEncryption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionEncryption(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionEncryptionContext tsOptionEncryption() {
		TsOptionEncryptionContext _localctx = new TsOptionEncryptionContext(Context, State);
		EnterRule(_localctx, 170, RULE_tsOptionEncryption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2658;
			Match(ENCRYPTION_SYMBOL);
			State = 2660;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				{
				State = 2659;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2662;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionEngineAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonAttributeContext jsonAttribute() {
			return GetRuleContext<JsonAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEngineAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionEngineAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionEngineAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionEngineAttribute(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionEngineAttributeContext tsOptionEngineAttribute() {
		TsOptionEngineAttributeContext _localctx = new TsOptionEngineAttributeContext(Context, State);
		EnterRule(_localctx, 172, RULE_tsOptionEngineAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2664;
			Match(ENGINE_SYMBOL);
			State = 2666;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				{
				State = 2665;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2668;
			jsonAttribute();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateViewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewNameContext viewName() {
			return GetRuleContext<ViewNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewTailContext viewTail() {
			return GetRuleContext<ViewTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
			return GetRuleContext<ViewReplaceOrAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewSuidContext viewSuid() {
			return GetRuleContext<ViewSuidContext>(0);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateView(this);
		}
	}

	[RuleVersion(0)]
	public CreateViewContext createView() {
		CreateViewContext _localctx = new CreateViewContext(Context, State);
		EnterRule(_localctx, 174, RULE_createView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==OR_SYMBOL) {
				{
				State = 2670;
				viewReplaceOrAlgorithm();
				}
			}

			State = 2674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2673;
				definerClause();
				}
			}

			State = 2677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				State = 2676;
				viewSuid();
				}
			}

			State = 2679;
			Match(VIEW_SYMBOL);
			State = 2680;
			viewName();
			State = 2681;
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewReplaceOrAlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_SYMBOL() { return GetToken(MySQLParser.OR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewAlgorithmContext viewAlgorithm() {
			return GetRuleContext<ViewAlgorithmContext>(0);
		}
		public ViewReplaceOrAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewReplaceOrAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewReplaceOrAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewReplaceOrAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
		ViewReplaceOrAlgorithmContext _localctx = new ViewReplaceOrAlgorithmContext(Context, State);
		EnterRule(_localctx, 176, RULE_viewReplaceOrAlgorithm);
		int _la;
		try {
			State = 2689;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2683;
				Match(OR_SYMBOL);
				State = 2684;
				Match(REPLACE_SYMBOL);
				State = 2686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					State = 2685;
					viewAlgorithm();
					}
				}

				}
				break;
			case ALGORITHM_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2688;
				viewAlgorithm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewAlgorithmContext : ParserRuleContext {
		public IToken algorithm;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE_SYMBOL() { return GetToken(MySQLParser.MERGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public ViewAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public ViewAlgorithmContext viewAlgorithm() {
		ViewAlgorithmContext _localctx = new ViewAlgorithmContext(Context, State);
		EnterRule(_localctx, 178, RULE_viewAlgorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2691;
			Match(ALGORITHM_SYMBOL);
			State = 2692;
			Match(EQUAL_OPERATOR);
			State = 2693;
			_localctx.algorithm = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==MERGE_SYMBOL || _la==TEMPTABLE_SYMBOL || _la==UNDEFINED_SYMBOL) ) {
				_localctx.algorithm = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewSuidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_SYMBOL() { return GetToken(MySQLParser.SQL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySQLParser.SECURITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public ViewSuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewSuid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewSuid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewSuid(this);
		}
	}

	[RuleVersion(0)]
	public ViewSuidContext viewSuid() {
		ViewSuidContext _localctx = new ViewSuidContext(Context, State);
		EnterRule(_localctx, 180, RULE_viewSuid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2695;
			Match(SQL_SYMBOL);
			State = 2696;
			Match(SECURITY_SYMBOL);
			State = 2697;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTriggerContext : ParserRuleContext {
		public IToken timing;
		public IToken @event;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerNameContext triggerName() {
			return GetRuleContext<TriggerNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH_SYMBOL() { return GetToken(MySQLParser.EACH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE_SYMBOL() { return GetToken(MySQLParser.BEFORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER_SYMBOL() { return GetToken(MySQLParser.AFTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_SYMBOL() { return GetToken(MySQLParser.INSERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_SYMBOL() { return GetToken(MySQLParser.DELETE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
			return GetRuleContext<TriggerFollowsPrecedesClauseContext>(0);
		}
		public CreateTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTrigger(this);
		}
	}

	[RuleVersion(0)]
	public CreateTriggerContext createTrigger() {
		CreateTriggerContext _localctx = new CreateTriggerContext(Context, State);
		EnterRule(_localctx, 182, RULE_createTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2699;
				definerClause();
				}
			}

			State = 2702;
			Match(TRIGGER_SYMBOL);
			State = 2704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				{
				State = 2703;
				ifNotExists();
				}
				break;
			}
			State = 2706;
			triggerName();
			State = 2707;
			_localctx.timing = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==AFTER_SYMBOL || _la==BEFORE_SYMBOL) ) {
				_localctx.timing = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2708;
			_localctx.@event = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE_SYMBOL || _la==INSERT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				_localctx.@event = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2709;
			Match(ON_SYMBOL);
			State = 2710;
			tableRef();
			State = 2711;
			Match(FOR_SYMBOL);
			State = 2712;
			Match(EACH_SYMBOL);
			State = 2713;
			Match(ROW_SYMBOL);
			State = 2715;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 2714;
				triggerFollowsPrecedesClause();
				}
				break;
			}
			State = 2717;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerFollowsPrecedesClauseContext : ParserRuleContext {
		public IToken ordering;
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public TriggerFollowsPrecedesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerFollowsPrecedesClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerFollowsPrecedesClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerFollowsPrecedesClause(this);
		}
	}

	[RuleVersion(0)]
	public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
		TriggerFollowsPrecedesClauseContext _localctx = new TriggerFollowsPrecedesClauseContext(Context, State);
		EnterRule(_localctx, 184, RULE_triggerFollowsPrecedesClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2719;
			_localctx.ordering = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FOLLOWS_SYMBOL || _la==PRECEDES_SYMBOL) ) {
				_localctx.ordering = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2720;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventNameContext eventName() {
			return GetRuleContext<EventNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySQLParser.ON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySQLParser.ON_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleContext schedule() {
			return GetRuleContext<ScheduleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		public CreateEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateEvent(this);
		}
	}

	[RuleVersion(0)]
	public CreateEventContext createEvent() {
		CreateEventContext _localctx = new CreateEventContext(Context, State);
		EnterRule(_localctx, 186, RULE_createEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2722;
				definerClause();
				}
			}

			State = 2725;
			Match(EVENT_SYMBOL);
			State = 2727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 2726;
				ifNotExists();
				}
				break;
			}
			State = 2729;
			eventName();
			State = 2730;
			Match(ON_SYMBOL);
			State = 2731;
			Match(SCHEDULE_SYMBOL);
			State = 2732;
			schedule();
			State = 2739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 2733;
				Match(ON_SYMBOL);
				State = 2734;
				Match(COMPLETION_SYMBOL);
				State = 2736;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 2735;
					Match(NOT_SYMBOL);
					}
				}

				State = 2738;
				Match(PRESERVE_SYMBOL);
				}
			}

			State = 2747;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENABLE_SYMBOL:
				{
				State = 2741;
				Match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				State = 2742;
				Match(DISABLE_SYMBOL);
				State = 2745;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 2743;
					Match(ON_SYMBOL);
					State = 2744;
					replica();
					}
				}

				}
				break;
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
				break;
			default:
				break;
			}
			State = 2751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				State = 2749;
				Match(COMMENT_SYMBOL);
				State = 2750;
				textLiteral();
				}
			}

			State = 2753;
			Match(DO_SYMBOL);
			State = 2754;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateRole(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoleContext createRole() {
		CreateRoleContext _localctx = new CreateRoleContext(Context, State);
		EnterRule(_localctx, 188, RULE_createRole);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2756;
			Match(ROLE_SYMBOL);
			State = 2758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				{
				State = 2757;
				ifNotExists();
				}
				break;
			}
			State = 2760;
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSpatialReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_SYMBOL() { return GetToken(MySQLParser.OR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SrsAttributeContext[] srsAttribute() {
			return GetRuleContexts<SrsAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SrsAttributeContext srsAttribute(int i) {
			return GetRuleContext<SrsAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateSpatialReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSpatialReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateSpatialReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateSpatialReference(this);
		}
	}

	[RuleVersion(0)]
	public CreateSpatialReferenceContext createSpatialReference() {
		CreateSpatialReferenceContext _localctx = new CreateSpatialReferenceContext(Context, State);
		EnterRule(_localctx, 190, RULE_createSpatialReference);
		int _la;
		try {
			State = 2787;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2762;
				Match(OR_SYMBOL);
				State = 2763;
				Match(REPLACE_SYMBOL);
				State = 2764;
				Match(SPATIAL_SYMBOL);
				State = 2765;
				Match(REFERENCE_SYMBOL);
				State = 2766;
				Match(SYSTEM_SYMBOL);
				State = 2767;
				real_ulonglong_number();
				State = 2771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & 7L) != 0)) {
					{
					{
					State = 2768;
					srsAttribute();
					}
					}
					State = 2773;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2774;
				Match(SPATIAL_SYMBOL);
				State = 2775;
				Match(REFERENCE_SYMBOL);
				State = 2776;
				Match(SYSTEM_SYMBOL);
				State = 2778;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
				case 1:
					{
					State = 2777;
					ifNotExists();
					}
					break;
				}
				State = 2780;
				real_ulonglong_number();
				State = 2784;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & 7L) != 0)) {
					{
					{
					State = 2781;
					srsAttribute();
					}
					}
					State = 2786;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SrsAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_SYMBOL() { return GetToken(MySQLParser.NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_SYMBOL() { return GetToken(MySQLParser.TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINITION_SYMBOL() { return GetToken(MySQLParser.DEFINITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public SrsAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_srsAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSrsAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSrsAttribute(this);
		}
	}

	[RuleVersion(0)]
	public SrsAttributeContext srsAttribute() {
		SrsAttributeContext _localctx = new SrsAttributeContext(Context, State);
		EnterRule(_localctx, 192, RULE_srsAttribute);
		try {
			State = 2804;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2789;
				Match(NAME_SYMBOL);
				State = 2790;
				Match(TEXT_SYMBOL);
				State = 2791;
				textStringNoLinebreak();
				}
				break;
			case DEFINITION_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2792;
				Match(DEFINITION_SYMBOL);
				State = 2793;
				Match(TEXT_SYMBOL);
				State = 2794;
				textStringNoLinebreak();
				}
				break;
			case ORGANIZATION_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2795;
				Match(ORGANIZATION_SYMBOL);
				State = 2796;
				textStringNoLinebreak();
				State = 2797;
				Match(IDENTIFIED_SYMBOL);
				State = 2798;
				Match(BY_SYMBOL);
				State = 2799;
				real_ulonglong_number();
				}
				break;
			case DESCRIPTION_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2801;
				Match(DESCRIPTION_SYMBOL);
				State = 2802;
				Match(TEXT_SYMBOL);
				State = 2803;
				textStringNoLinebreak();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DropDatabaseContext dropDatabase() {
			return GetRuleContext<DropDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropEventContext dropEvent() {
			return GetRuleContext<DropEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropFunctionContext dropFunction() {
			return GetRuleContext<DropFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupContext dropLogfileGroup() {
			return GetRuleContext<DropLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropServerContext dropServer() {
			return GetRuleContext<DropServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTableSpaceContext dropTableSpace() {
			return GetRuleContext<DropTableSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTriggerContext dropTrigger() {
			return GetRuleContext<DropTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropViewContext dropView() {
			return GetRuleContext<DropViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropRoleContext dropRole() {
			return GetRuleContext<DropRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropSpatialReferenceContext dropSpatialReference() {
			return GetRuleContext<DropSpatialReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropUndoTablespaceContext dropUndoTablespace() {
			return GetRuleContext<DropUndoTablespaceContext>(0);
		}
		public DropStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropStatement(this);
		}
	}

	[RuleVersion(0)]
	public DropStatementContext dropStatement() {
		DropStatementContext _localctx = new DropStatementContext(Context, State);
		EnterRule(_localctx, 194, RULE_dropStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2806;
			Match(DROP_SYMBOL);
			State = 2823;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				{
				State = 2807;
				dropDatabase();
				}
				break;
			case 2:
				{
				State = 2808;
				dropEvent();
				}
				break;
			case 3:
				{
				State = 2809;
				dropFunction();
				}
				break;
			case 4:
				{
				State = 2810;
				dropProcedure();
				}
				break;
			case 5:
				{
				State = 2811;
				dropIndex();
				}
				break;
			case 6:
				{
				State = 2812;
				dropLogfileGroup();
				}
				break;
			case 7:
				{
				State = 2813;
				dropServer();
				}
				break;
			case 8:
				{
				State = 2814;
				dropTable();
				}
				break;
			case 9:
				{
				State = 2815;
				dropTableSpace();
				}
				break;
			case 10:
				{
				State = 2816;
				dropTrigger();
				}
				break;
			case 11:
				{
				State = 2817;
				dropView();
				}
				break;
			case 12:
				{
				State = 2818;
				dropRole();
				}
				break;
			case 13:
				{
				State = 2819;
				if (!(this.isServerVersionGe80011())) throw new FailedPredicateException(this, "this.isServerVersionGe80011()");
				State = 2820;
				dropSpatialReference();
				}
				break;
			case 14:
				{
				State = 2821;
				if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				State = 2822;
				dropUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropDatabaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropDatabase(this);
		}
	}

	[RuleVersion(0)]
	public DropDatabaseContext dropDatabase() {
		DropDatabaseContext _localctx = new DropDatabaseContext(Context, State);
		EnterRule(_localctx, 196, RULE_dropDatabase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2825;
			Match(DATABASE_SYMBOL);
			State = 2827;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				{
				State = 2826;
				ifExists();
				}
				break;
			}
			State = 2829;
			schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropEvent(this);
		}
	}

	[RuleVersion(0)]
	public DropEventContext dropEvent() {
		DropEventContext _localctx = new DropEventContext(Context, State);
		EnterRule(_localctx, 198, RULE_dropEvent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2831;
			Match(EVENT_SYMBOL);
			State = 2833;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				{
				State = 2832;
				ifExists();
				}
				break;
			}
			State = 2835;
			eventRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropFunction(this);
		}
	}

	[RuleVersion(0)]
	public DropFunctionContext dropFunction() {
		DropFunctionContext _localctx = new DropFunctionContext(Context, State);
		EnterRule(_localctx, 200, RULE_dropFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2837;
			Match(FUNCTION_SYMBOL);
			State = 2839;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				{
				State = 2838;
				ifExists();
				}
				break;
			}
			State = 2841;
			functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropProcedure(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(Context, State);
		EnterRule(_localctx, 202, RULE_dropProcedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2843;
			Match(PROCEDURE_SYMBOL);
			State = 2845;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				{
				State = 2844;
				ifExists();
				}
				break;
			}
			State = 2847;
			procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public IndexRefContext indexRef() {
			return GetRuleContext<IndexRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return GetRuleContext<IndexLockAndAlgorithmContext>(0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropIndex(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(Context, State);
		EnterRule(_localctx, 204, RULE_dropIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				State = 2849;
				onlineOption();
				}
			}

			State = 2852;
			_localctx.type = Match(INDEX_SYMBOL);
			State = 2853;
			indexRef();
			State = 2854;
			Match(ON_SYMBOL);
			State = 2855;
			tableRef();
			State = 2857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==LOCK_SYMBOL) {
				{
				State = 2856;
				indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupOptionContext[] dropLogfileGroupOption() {
			return GetRuleContexts<DropLogfileGroupOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return GetRuleContext<DropLogfileGroupOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropLogfileGroup(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupContext dropLogfileGroup() {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(Context, State);
		EnterRule(_localctx, 206, RULE_dropLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2859;
			Match(LOGFILE_SYMBOL);
			State = 2860;
			Match(GROUP_SYMBOL);
			State = 2861;
			logfileGroupRef();
			State = 2872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 2862;
				dropLogfileGroupOption();
				State = 2869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL || _la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
					{
					{
					State = 2864;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						State = 2863;
						Match(COMMA_SYMBOL);
						}
					}

					State = 2866;
					dropLogfileGroupOption();
					}
					}
					State = 2871;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public DropLogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroupOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropLogfileGroupOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropLogfileGroupOption(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupOptionContext dropLogfileGroupOption() {
		DropLogfileGroupOptionContext _localctx = new DropLogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 208, RULE_dropLogfileGroupOption);
		try {
			State = 2876;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2874;
				tsOptionWait();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2875;
				tsOptionEngine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerRefContext serverRef() {
			return GetRuleContext<ServerRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropServer(this);
		}
	}

	[RuleVersion(0)]
	public DropServerContext dropServer() {
		DropServerContext _localctx = new DropServerContext(Context, State);
		EnterRule(_localctx, 210, RULE_dropServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2878;
			Match(SERVER_SYMBOL);
			State = 2880;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				{
				State = 2879;
				ifExists();
				}
				break;
			}
			State = 2882;
			serverRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropTable(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(Context, State);
		EnterRule(_localctx, 212, RULE_dropTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2885;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				State = 2884;
				Match(TEMPORARY_SYMBOL);
				}
			}

			State = 2887;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2889;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				{
				State = 2888;
				ifExists();
				}
				break;
			}
			State = 2891;
			tableRefList();
			State = 2893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				State = 2892;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableSpaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupOptionContext[] dropLogfileGroupOption() {
			return GetRuleContexts<DropLogfileGroupOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return GetRuleContext<DropLogfileGroupOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public DropTableSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTableSpace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropTableSpace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropTableSpace(this);
		}
	}

	[RuleVersion(0)]
	public DropTableSpaceContext dropTableSpace() {
		DropTableSpaceContext _localctx = new DropTableSpaceContext(Context, State);
		EnterRule(_localctx, 214, RULE_dropTableSpace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2895;
			Match(TABLESPACE_SYMBOL);
			State = 2896;
			tablespaceRef();
			State = 2907;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 2897;
				dropLogfileGroupOption();
				State = 2904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL || _la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
					{
					{
					State = 2899;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						State = 2898;
						Match(COMMA_SYMBOL);
						}
					}

					State = 2901;
					dropLogfileGroupOption();
					}
					}
					State = 2906;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerRefContext triggerRef() {
			return GetRuleContext<TriggerRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropTrigger(this);
		}
	}

	[RuleVersion(0)]
	public DropTriggerContext dropTrigger() {
		DropTriggerContext _localctx = new DropTriggerContext(Context, State);
		EnterRule(_localctx, 216, RULE_dropTrigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2909;
			Match(TRIGGER_SYMBOL);
			State = 2911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
			case 1:
				{
				State = 2910;
				ifExists();
				}
				break;
			}
			State = 2913;
			triggerRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropViewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefListContext viewRefList() {
			return GetRuleContext<ViewRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropView(this);
		}
	}

	[RuleVersion(0)]
	public DropViewContext dropView() {
		DropViewContext _localctx = new DropViewContext(Context, State);
		EnterRule(_localctx, 218, RULE_dropView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2915;
			Match(VIEW_SYMBOL);
			State = 2917;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				{
				State = 2916;
				ifExists();
				}
				break;
			}
			State = 2919;
			viewRefList();
			State = 2921;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				State = 2920;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropRole(this);
		}
	}

	[RuleVersion(0)]
	public DropRoleContext dropRole() {
		DropRoleContext _localctx = new DropRoleContext(Context, State);
		EnterRule(_localctx, 220, RULE_dropRole);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2923;
			Match(ROLE_SYMBOL);
			State = 2925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
			case 1:
				{
				State = 2924;
				ifExists();
				}
				break;
			}
			State = 2927;
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropSpatialReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropSpatialReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropSpatialReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropSpatialReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropSpatialReference(this);
		}
	}

	[RuleVersion(0)]
	public DropSpatialReferenceContext dropSpatialReference() {
		DropSpatialReferenceContext _localctx = new DropSpatialReferenceContext(Context, State);
		EnterRule(_localctx, 222, RULE_dropSpatialReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2929;
			Match(SPATIAL_SYMBOL);
			State = 2930;
			Match(REFERENCE_SYMBOL);
			State = 2931;
			Match(SYSTEM_SYMBOL);
			State = 2933;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				{
				State = 2932;
				ifExists();
				}
				break;
			}
			State = 2935;
			real_ulonglong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUndoTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_SYMBOL() { return GetToken(MySQLParser.UNDO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public DropUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUndoTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropUndoTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropUndoTablespace(this);
		}
	}

	[RuleVersion(0)]
	public DropUndoTablespaceContext dropUndoTablespace() {
		DropUndoTablespaceContext _localctx = new DropUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 224, RULE_dropUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2937;
			Match(UNDO_SYMBOL);
			State = 2938;
			Match(TABLESPACE_SYMBOL);
			State = 2939;
			tablespaceRef();
			State = 2941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 2940;
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RenamePairContext[] renamePair() {
			return GetRuleContexts<RenamePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenamePairContext renamePair(int i) {
			return GetRuleContext<RenamePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RenameTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRenameTableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRenameTableStatement(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableStatementContext renameTableStatement() {
		RenameTableStatementContext _localctx = new RenameTableStatementContext(Context, State);
		EnterRule(_localctx, 226, RULE_renameTableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2943;
			Match(RENAME_SYMBOL);
			State = 2944;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2945;
			renamePair();
			State = 2950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2946;
				Match(COMMA_SYMBOL);
				State = 2947;
				renamePair();
				}
				}
				State = 2952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenamePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public RenamePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renamePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRenamePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRenamePair(this);
		}
	}

	[RuleVersion(0)]
	public RenamePairContext renamePair() {
		RenamePairContext _localctx = new RenamePairContext(Context, State);
		EnterRule(_localctx, 228, RULE_renamePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2953;
			tableRef();
			State = 2954;
			Match(TO_SYMBOL);
			State = 2955;
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TruncateTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTruncateTableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTruncateTableStatement(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableStatementContext truncateTableStatement() {
		TruncateTableStatementContext _localctx = new TruncateTableStatementContext(Context, State);
		EnterRule(_localctx, 230, RULE_truncateTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2957;
			Match(TRUNCATE_SYMBOL);
			State = 2959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				{
				State = 2958;
				Match(TABLE_SYMBOL);
				}
				break;
			}
			State = 2961;
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralListContext textStringLiteralList() {
			return GetRuleContext<TextStringLiteralListContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 232, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2963;
			Match(IMPORT_SYMBOL);
			State = 2964;
			Match(TABLE_SYMBOL);
			State = 2965;
			Match(FROM_SYMBOL);
			State = 2966;
			textStringLiteralList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL_SYMBOL() { return GetToken(MySQLParser.CALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 234, RULE_callStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2968;
			Match(CALL_SYMBOL);
			State = 2969;
			procedureRef();
			State = 2975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2970;
				Match(OPEN_PAR_SYMBOL);
				State = 2972;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
				case 1:
					{
					State = 2971;
					exprList();
					}
					break;
				}
				State = 2974;
				Match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_SYMBOL() { return GetToken(MySQLParser.DELETE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasRefListContext tableAliasRefList() {
			return GetRuleContext<TableAliasRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementOptionContext[] deleteStatementOption() {
			return GetRuleContexts<DeleteStatementOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementOptionContext deleteStatementOption(int i) {
			return GetRuleContext<DeleteStatementOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDeleteContext partitionDelete() {
			return GetRuleContext<PartitionDeleteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLimitClauseContext simpleLimitClause() {
			return GetRuleContext<SimpleLimitClauseContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 236, RULE_deleteStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				State = 2977;
				withClause();
				}
			}

			State = 2980;
			Match(DELETE_SYMBOL);
			State = 2984;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,223,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2981;
					deleteStatementOption();
					}
					} 
				}
				State = 2986;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,223,Context);
			}
			State = 3019;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				{
				State = 2987;
				Match(FROM_SYMBOL);
				State = 3011;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
				case 1:
					{
					State = 2988;
					tableAliasRefList();
					State = 2989;
					Match(USING_SYMBOL);
					State = 2990;
					tableReferenceList();
					State = 2992;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 2991;
						whereClause();
						}
					}

					}
					break;
				case 2:
					{
					State = 2994;
					tableRef();
					State = 2997;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
					case 1:
						{
						State = 2995;
						if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
						State = 2996;
						tableAlias();
						}
						break;
					}
					State = 3000;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PARTITION_SYMBOL) {
						{
						State = 2999;
						partitionDelete();
						}
					}

					State = 3003;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 3002;
						whereClause();
						}
					}

					State = 3006;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ORDER_SYMBOL) {
						{
						State = 3005;
						orderClause();
						}
					}

					State = 3009;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						State = 3008;
						simpleLimitClause();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3013;
				tableAliasRefList();
				State = 3014;
				Match(FROM_SYMBOL);
				State = 3015;
				tableReferenceList();
				State = 3017;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					State = 3016;
					whereClause();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDeleteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionDeleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDelete; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDelete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDelete(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDeleteContext partitionDelete() {
		PartitionDeleteContext _localctx = new PartitionDeleteContext(Context, State);
		EnterRule(_localctx, 238, RULE_partitionDelete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3021;
			Match(PARTITION_SYMBOL);
			State = 3022;
			Match(OPEN_PAR_SYMBOL);
			State = 3023;
			identifierList();
			State = 3024;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public DeleteStatementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatementOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatementOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatementOption(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementOptionContext deleteStatementOption() {
		DeleteStatementOptionContext _localctx = new DeleteStatementOptionContext(Context, State);
		EnterRule(_localctx, 240, RULE_deleteStatementOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3026;
			_la = TokenStream.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==LOW_PRIORITY_SYMBOL || _la==QUICK_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemListContext selectItemList() {
			return GetRuleContext<SelectItemListContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 242, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3028;
			Match(DO_SYMBOL);
			State = 3029;
			selectItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySQLParser.HANDLER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySQLParser.CLOSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HandlerReadOrScanContext handlerReadOrScan() {
			return GetRuleContext<HandlerReadOrScanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHandlerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHandlerStatement(this);
		}
	}

	[RuleVersion(0)]
	public HandlerStatementContext handlerStatement() {
		HandlerStatementContext _localctx = new HandlerStatementContext(Context, State);
		EnterRule(_localctx, 244, RULE_handlerStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3031;
			Match(HANDLER_SYMBOL);
			State = 3049;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				{
				State = 3032;
				tableRef();
				State = 3033;
				Match(OPEN_SYMBOL);
				State = 3035;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
				case 1:
					{
					State = 3034;
					tableAlias();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3037;
				identifier();
				State = 3047;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLOSE_SYMBOL:
					{
					State = 3038;
					Match(CLOSE_SYMBOL);
					}
					break;
				case READ_SYMBOL:
					{
					State = 3039;
					Match(READ_SYMBOL);
					State = 3040;
					handlerReadOrScan();
					State = 3042;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 3041;
						whereClause();
						}
					}

					State = 3045;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						State = 3044;
						limitClause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadOrScanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT_SYMBOL() { return GetToken(MySQLParser.NEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValuesContext @values() {
			return GetRuleContext<ValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV_SYMBOL() { return GetToken(MySQLParser.PREV_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_OPERATOR() { return GetToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_OPERATOR() { return GetToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUAL_OPERATOR() { return GetToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUAL_OPERATOR() { return GetToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public HandlerReadOrScanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadOrScan; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHandlerReadOrScan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHandlerReadOrScan(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadOrScanContext handlerReadOrScan() {
		HandlerReadOrScanContext _localctx = new HandlerReadOrScanContext(Context, State);
		EnterRule(_localctx, 246, RULE_handlerReadOrScan);
		int _la;
		try {
			State = 3061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3051;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==NEXT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3052;
				identifier();
				State = 3059;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST_SYMBOL:
				case LAST_SYMBOL:
				case NEXT_SYMBOL:
				case PREV_SYMBOL:
					{
					State = 3053;
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NEXT_SYMBOL || _la==PREV_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case EQUAL_OPERATOR:
				case GREATER_OR_EQUAL_OPERATOR:
				case GREATER_THAN_OPERATOR:
				case LESS_OR_EQUAL_OPERATOR:
				case LESS_THAN_OPERATOR:
					{
					State = 3054;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7744L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3055;
					Match(OPEN_PAR_SYMBOL);
					State = 3056;
					@values();
					State = 3057;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_SYMBOL() { return GetToken(MySQLParser.INSERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertFromConstructorContext insertFromConstructor() {
			return GetRuleContext<InsertFromConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertQueryExpressionContext insertQueryExpression() {
			return GetRuleContext<InsertQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertLockOptionContext insertLockOption() {
			return GetRuleContext<InsertLockOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertUpdateListContext insertUpdateList() {
			return GetRuleContext<InsertUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesReferenceContext valuesReference() {
			return GetRuleContext<ValuesReferenceContext>(0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertStatement(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 248, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3063;
			Match(INSERT_SYMBOL);
			State = 3065;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
			case 1:
				{
				State = 3064;
				insertLockOption();
				}
				break;
			}
			State = 3068;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				{
				State = 3067;
				Match(IGNORE_SYMBOL);
				}
				break;
			}
			State = 3071;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				{
				State = 3070;
				Match(INTO_SYMBOL);
				}
				break;
			}
			State = 3073;
			tableRef();
			State = 3075;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				{
				State = 3074;
				usePartition();
				}
				break;
			}
			State = 3087;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
			case 1:
				{
				State = 3077;
				insertFromConstructor();
				State = 3079;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
				case 1:
					{
					State = 3078;
					valuesReference();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3081;
				Match(SET_SYMBOL);
				State = 3082;
				updateList();
				State = 3084;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
				case 1:
					{
					State = 3083;
					valuesReference();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 3086;
				insertQueryExpression();
				}
				break;
			}
			State = 3090;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 3089;
				insertUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertLockOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED_SYMBOL() { return GetToken(MySQLParser.DELAYED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY_SYMBOL() { return GetToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public InsertLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertLockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertLockOption(this);
		}
	}

	[RuleVersion(0)]
	public InsertLockOptionContext insertLockOption() {
		InsertLockOptionContext _localctx = new InsertLockOptionContext(Context, State);
		EnterRule(_localctx, 250, RULE_insertLockOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3092;
			_la = TokenStream.LA(1);
			if ( !(_la==DELAYED_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertFromConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InsertValuesContext insertValues() {
			return GetRuleContext<InsertValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public InsertFromConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertFromConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertFromConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertFromConstructor(this);
		}
	}

	[RuleVersion(0)]
	public InsertFromConstructorContext insertFromConstructor() {
		InsertFromConstructorContext _localctx = new InsertFromConstructorContext(Context, State);
		EnterRule(_localctx, 252, RULE_insertFromConstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3099;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 3094;
				Match(OPEN_PAR_SYMBOL);
				State = 3096;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
				case 1:
					{
					State = 3095;
					fields();
					}
					break;
				}
				State = 3098;
				Match(CLOSE_PAR_SYMBOL);
				}
			}

			State = 3101;
			insertValues();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InsertIdentifierContext[] insertIdentifier() {
			return GetRuleContexts<InsertIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertIdentifierContext insertIdentifier(int i) {
			return GetRuleContext<InsertIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 254, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3103;
			insertIdentifier();
			State = 3108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3104;
				Match(COMMA_SYMBOL);
				State = 3105;
				insertIdentifier();
				}
				}
				State = 3110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueListContext valueList() {
			return GetRuleContext<ValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySQLParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		public InsertValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertValues(this);
		}
	}

	[RuleVersion(0)]
	public InsertValuesContext insertValues() {
		InsertValuesContext _localctx = new InsertValuesContext(Context, State);
		EnterRule(_localctx, 256, RULE_insertValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3111;
			_la = TokenStream.LA(1);
			if ( !(_la==VALUES_SYMBOL || _la==VALUE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3112;
			valueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertQueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() {
			return GetRuleContext<QueryExpressionWithOptLockingClausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public InsertQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertQueryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertQueryExpression(this);
		}
	}

	[RuleVersion(0)]
	public InsertQueryExpressionContext insertQueryExpression() {
		InsertQueryExpressionContext _localctx = new InsertQueryExpressionContext(Context, State);
		EnterRule(_localctx, 258, RULE_insertQueryExpression);
		try {
			State = 3124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3114;
				queryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3115;
				queryExpressionParens();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3121;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
				case 1:
					{
					State = 3116;
					Match(OPEN_PAR_SYMBOL);
					State = 3118;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
					case 1:
						{
						State = 3117;
						fields();
						}
						break;
					}
					State = 3120;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				State = 3123;
				queryExpressionWithOptLockingClauses();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAR_SYMBOL() { return GetTokens(MySQLParser.OPEN_PAR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL(int i) {
			return GetToken(MySQLParser.OPEN_PAR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAR_SYMBOL() { return GetTokens(MySQLParser.CLOSE_PAR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL(int i) {
			return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesContext[] @values() {
			return GetRuleContexts<ValuesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesContext @values(int i) {
			return GetRuleContext<ValuesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitValueList(this);
		}
	}

	[RuleVersion(0)]
	public ValueListContext valueList() {
		ValueListContext _localctx = new ValueListContext(Context, State);
		EnterRule(_localctx, 260, RULE_valueList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3126;
			Match(OPEN_PAR_SYMBOL);
			State = 3128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
			case 1:
				{
				State = 3127;
				@values();
				}
				break;
			}
			State = 3130;
			Match(CLOSE_PAR_SYMBOL);
			State = 3139;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3131;
					Match(COMMA_SYMBOL);
					State = 3132;
					Match(OPEN_PAR_SYMBOL);
					State = 3134;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
					case 1:
						{
						State = 3133;
						@values();
						}
						break;
					}
					State = 3136;
					Match(CLOSE_PAR_SYMBOL);
					}
					} 
				}
				State = 3141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT_SYMBOL() { return GetTokens(MySQLParser.DEFAULT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL(int i) {
			return GetToken(MySQLParser.DEFAULT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitValues(this);
		}
	}

	[RuleVersion(0)]
	public ValuesContext @values() {
		ValuesContext _localctx = new ValuesContext(Context, State);
		EnterRule(_localctx, 262, RULE_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				{
				State = 3142;
				expr(0);
				}
				break;
			case 2:
				{
				State = 3143;
				Match(DEFAULT_SYMBOL);
				}
				break;
			}
			State = 3153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3146;
				Match(COMMA_SYMBOL);
				State = 3149;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
				case 1:
					{
					State = 3147;
					expr(0);
					}
					break;
				case 2:
					{
					State = 3148;
					Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				}
				State = 3155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public ValuesReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuesReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterValuesReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitValuesReference(this);
		}
	}

	[RuleVersion(0)]
	public ValuesReferenceContext valuesReference() {
		ValuesReferenceContext _localctx = new ValuesReferenceContext(Context, State);
		EnterRule(_localctx, 264, RULE_valuesReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3156;
			if (!(this.isServerVersionGe80018())) throw new FailedPredicateException(this, "this.isServerVersionGe80018()");
			State = 3157;
			Match(AS_SYMBOL);
			State = 3158;
			identifier();
			State = 3160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 3159;
				columnInternalRefList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		public InsertUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertUpdateList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertUpdateList(this);
		}
	}

	[RuleVersion(0)]
	public InsertUpdateListContext insertUpdateList() {
		InsertUpdateListContext _localctx = new InsertUpdateListContext(Context, State);
		EnterRule(_localctx, 266, RULE_insertUpdateList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3162;
			Match(ON_SYMBOL);
			State = 3163;
			Match(DUPLICATE_SYMBOL);
			State = 3164;
			Match(KEY_SYMBOL);
			State = 3165;
			Match(UPDATE_SYMBOL);
			State = 3166;
			updateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD_SYMBOL() { return GetToken(MySQLParser.LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataOrXmlContext dataOrXml() {
			return GetRuleContext<DataOrXmlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadDataFileTailContext loadDataFileTail() {
			return GetRuleContext<LoadDataFileTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadDataLockContext loadDataLock() {
			return GetRuleContext<LoadDataLockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadFromContext loadFrom() {
			return GetRuleContext<LoadFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoadSourceTypeContext loadSourceType() {
			return GetRuleContext<LoadSourceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceCountContext sourceCount() {
			return GetRuleContext<SourceCountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceOrderContext sourceOrder() {
			return GetRuleContext<SourceOrderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
			return GetRuleContext<XmlRowsIdentifiedByContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsClauseContext fieldsClause() {
			return GetRuleContext<FieldsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinesClauseContext linesClause() {
			return GetRuleContext<LinesClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadParallelContext loadParallel() {
			return GetRuleContext<LoadParallelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadMemoryContext loadMemory() {
			return GetRuleContext<LoadMemoryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadAlgorithmContext loadAlgorithm() {
			return GetRuleContext<LoadAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public LoadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadStatement(this);
		}
	}

	[RuleVersion(0)]
	public LoadStatementContext loadStatement() {
		LoadStatementContext _localctx = new LoadStatementContext(Context, State);
		EnterRule(_localctx, 268, RULE_loadStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3168;
			Match(LOAD_SYMBOL);
			State = 3169;
			dataOrXml();
			State = 3171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
			case 1:
				{
				State = 3170;
				loadDataLock();
				}
				break;
			}
			State = 3174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				{
				State = 3173;
				loadFrom();
				}
				break;
			}
			State = 3177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
			case 1:
				{
				State = 3176;
				Match(LOCAL_SYMBOL);
				}
				break;
			}
			State = 3180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				{
				State = 3179;
				loadSourceType();
				}
				break;
			}
			State = 3182;
			textStringLiteral();
			State = 3184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				{
				State = 3183;
				sourceCount();
				}
				break;
			}
			State = 3187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
			case 1:
				{
				State = 3186;
				sourceOrder();
				}
				break;
			}
			State = 3190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) {
				{
				State = 3189;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3192;
			Match(INTO_SYMBOL);
			State = 3193;
			Match(TABLE_SYMBOL);
			State = 3194;
			tableRef();
			State = 3196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
			case 1:
				{
				State = 3195;
				usePartition();
				}
				break;
			}
			State = 3199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				{
				State = 3198;
				charsetClause();
				}
				break;
			}
			State = 3202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				{
				State = 3201;
				xmlRowsIdentifiedBy();
				}
				break;
			}
			State = 3205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
			case 1:
				{
				State = 3204;
				fieldsClause();
				}
				break;
			}
			State = 3208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
			case 1:
				{
				State = 3207;
				linesClause();
				}
				break;
			}
			State = 3210;
			loadDataFileTail();
			State = 3212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				{
				State = 3211;
				loadParallel();
				}
				break;
			}
			State = 3215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				{
				State = 3214;
				loadMemory();
				}
				break;
			}
			State = 3218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				{
				State = 3217;
				loadAlgorithm();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataOrXmlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_SYMBOL() { return GetToken(MySQLParser.XML_SYMBOL, 0); }
		public DataOrXmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataOrXml; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDataOrXml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDataOrXml(this);
		}
	}

	[RuleVersion(0)]
	public DataOrXmlContext dataOrXml() {
		DataOrXmlContext _localctx = new DataOrXmlContext(Context, State);
		EnterRule(_localctx, 270, RULE_dataOrXml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3220;
			_la = TokenStream.LA(1);
			if ( !(_la==DATA_SYMBOL || _la==XML_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataLockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public LoadDataLockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataLock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadDataLock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadDataLock(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataLockContext loadDataLock() {
		LoadDataLockContext _localctx = new LoadDataLockContext(Context, State);
		EnterRule(_localctx, 272, RULE_loadDataLock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3222;
			_la = TokenStream.LA(1);
			if ( !(_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public LoadFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadFrom(this);
		}
	}

	[RuleVersion(0)]
	public LoadFromContext loadFrom() {
		LoadFromContext _localctx = new LoadFromContext(Context, State);
		EnterRule(_localctx, 274, RULE_loadFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3224;
			if (!(this.isServerVersionGe80200())) throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			State = 3225;
			Match(FROM_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadSourceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFILE_SYMBOL() { return GetToken(MySQLParser.INFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode URL_SYMBOL() { return GetToken(MySQLParser.URL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S3_SYMBOL() { return GetToken(MySQLParser.S3_SYMBOL, 0); }
		public LoadSourceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadSourceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadSourceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadSourceType(this);
		}
	}

	[RuleVersion(0)]
	public LoadSourceTypeContext loadSourceType() {
		LoadSourceTypeContext _localctx = new LoadSourceTypeContext(Context, State);
		EnterRule(_localctx, 276, RULE_loadSourceType);
		int _la;
		try {
			State = 3230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3227;
				Match(INFILE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3228;
				if (!(this.isServerVersionGe80200())) throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
				State = 3229;
				_la = TokenStream.LA(1);
				if ( !(_la==URL_SYMBOL || _la==S3_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceCountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_SYMBOL() { return GetToken(MySQLParser.COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public SourceCountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceCount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSourceCount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSourceCount(this);
		}
	}

	[RuleVersion(0)]
	public SourceCountContext sourceCount() {
		SourceCountContext _localctx = new SourceCountContext(Context, State);
		EnterRule(_localctx, 278, RULE_sourceCount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3232;
			if (!(this.isServerVersionGe80200())) throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			State = 3238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				{
				State = 3233;
				Match(COUNT_SYMBOL);
				State = 3234;
				Match(INT_NUMBER);
				}
				break;
			case 2:
				{
				State = 3235;
				pureIdentifier();
				State = 3236;
				Match(INT_NUMBER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceOrderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_SYMBOL() { return GetToken(MySQLParser.ORDER_SYMBOL, 0); }
		public SourceOrderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceOrder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSourceOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSourceOrder(this);
		}
	}

	[RuleVersion(0)]
	public SourceOrderContext sourceOrder() {
		SourceOrderContext _localctx = new SourceOrderContext(Context, State);
		EnterRule(_localctx, 280, RULE_sourceOrder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3240;
			if (!(this.isServerVersionGe80200())) throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			State = 3241;
			Match(IN_SYMBOL);
			State = 3242;
			Match(PRIMARY_SYMBOL);
			State = 3243;
			Match(KEY_SYMBOL);
			State = 3244;
			Match(ORDER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlRowsIdentifiedByContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS_SYMBOL() { return GetToken(MySQLParser.ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public XmlRowsIdentifiedByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlRowsIdentifiedBy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterXmlRowsIdentifiedBy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitXmlRowsIdentifiedBy(this);
		}
	}

	[RuleVersion(0)]
	public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
		XmlRowsIdentifiedByContext _localctx = new XmlRowsIdentifiedByContext(Context, State);
		EnterRule(_localctx, 282, RULE_xmlRowsIdentifiedBy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3246;
			Match(ROWS_SYMBOL);
			State = 3247;
			Match(IDENTIFIED_SYMBOL);
			State = 3248;
			Match(BY_SYMBOL);
			State = 3249;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataFileTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoadDataFileTargetListContext loadDataFileTargetList() {
			return GetRuleContext<LoadDataFileTargetListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES_SYMBOL() { return GetToken(MySQLParser.LINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS_SYMBOL() { return GetToken(MySQLParser.ROWS_SYMBOL, 0); }
		public LoadDataFileTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataFileTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadDataFileTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadDataFileTail(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataFileTailContext loadDataFileTail() {
		LoadDataFileTailContext _localctx = new LoadDataFileTailContext(Context, State);
		EnterRule(_localctx, 284, RULE_loadDataFileTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				{
				State = 3251;
				Match(IGNORE_SYMBOL);
				State = 3252;
				Match(INT_NUMBER);
				State = 3253;
				_la = TokenStream.LA(1);
				if ( !(_la==LINES_SYMBOL || _la==ROWS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 3257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
			case 1:
				{
				State = 3256;
				loadDataFileTargetList();
				}
				break;
			}
			State = 3261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
			case 1:
				{
				State = 3259;
				Match(SET_SYMBOL);
				State = 3260;
				updateList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataFileTargetListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldOrVariableListContext fieldOrVariableList() {
			return GetRuleContext<FieldOrVariableListContext>(0);
		}
		public LoadDataFileTargetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataFileTargetList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadDataFileTargetList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadDataFileTargetList(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataFileTargetListContext loadDataFileTargetList() {
		LoadDataFileTargetListContext _localctx = new LoadDataFileTargetListContext(Context, State);
		EnterRule(_localctx, 286, RULE_loadDataFileTargetList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3263;
			Match(OPEN_PAR_SYMBOL);
			State = 3265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
			case 1:
				{
				State = 3264;
				fieldOrVariableList();
				}
				break;
			}
			State = 3267;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOrVariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext[] columnRef() {
			return GetRuleContexts<ColumnRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef(int i) {
			return GetRuleContext<ColumnRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT_SIGN_SYMBOL() { return GetTokens(MySQLParser.AT_SIGN_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL(int i) {
			return GetToken(MySQLParser.AT_SIGN_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext[] textOrIdentifier() {
			return GetRuleContexts<TextOrIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier(int i) {
			return GetRuleContext<TextOrIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT_AT_SIGN_SYMBOL() { return GetTokens(MySQLParser.AT_AT_SIGN_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_AT_SIGN_SYMBOL(int i) {
			return GetToken(MySQLParser.AT_AT_SIGN_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT_TEXT_SUFFIX() { return GetTokens(MySQLParser.AT_TEXT_SUFFIX); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_TEXT_SUFFIX(int i) {
			return GetToken(MySQLParser.AT_TEXT_SUFFIX, i);
		}
		public FieldOrVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOrVariableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldOrVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldOrVariableList(this);
		}
	}

	[RuleVersion(0)]
	public FieldOrVariableListContext fieldOrVariableList() {
		FieldOrVariableListContext _localctx = new FieldOrVariableListContext(Context, State);
		EnterRule(_localctx, 288, RULE_fieldOrVariableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
			case 1:
				{
				State = 3269;
				columnRef();
				}
				break;
			case 2:
				{
				State = 3270;
				Match(AT_SIGN_SYMBOL);
				State = 3271;
				textOrIdentifier();
				}
				break;
			case 3:
				{
				State = 3272;
				Match(AT_AT_SIGN_SYMBOL);
				}
				break;
			}
			State = 3285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3275;
				Match(COMMA_SYMBOL);
				State = 3281;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
				case 1:
					{
					State = 3276;
					columnRef();
					}
					break;
				case 2:
					{
					State = 3277;
					Match(AT_SIGN_SYMBOL);
					State = 3278;
					textOrIdentifier();
					}
					break;
				case 3:
					{
					State = 3279;
					Match(AT_TEXT_SUFFIX);
					}
					break;
				case 4:
					{
					State = 3280;
					Match(AT_AT_SIGN_SYMBOL);
					}
					break;
				}
				}
				}
				State = 3287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadAlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BULK_SYMBOL() { return GetToken(MySQLParser.BULK_SYMBOL, 0); }
		public LoadAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public LoadAlgorithmContext loadAlgorithm() {
		LoadAlgorithmContext _localctx = new LoadAlgorithmContext(Context, State);
		EnterRule(_localctx, 290, RULE_loadAlgorithm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3288;
			if (!(this.isServerVersionGe80200())) throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			State = 3289;
			Match(ALGORITHM_SYMBOL);
			State = 3290;
			Match(EQUAL_OPERATOR);
			State = 3291;
			Match(BULK_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadParallelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL_SYMBOL() { return GetToken(MySQLParser.PARALLEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public LoadParallelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadParallel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadParallel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadParallel(this);
		}
	}

	[RuleVersion(0)]
	public LoadParallelContext loadParallel() {
		LoadParallelContext _localctx = new LoadParallelContext(Context, State);
		EnterRule(_localctx, 292, RULE_loadParallel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3293;
			if (!(this.isServerVersionGe80200())) throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			State = 3294;
			Match(PARALLEL_SYMBOL);
			State = 3295;
			Match(EQUAL_OPERATOR);
			State = 3296;
			Match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadMemoryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public LoadMemoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadMemory; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadMemory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadMemory(this);
		}
	}

	[RuleVersion(0)]
	public LoadMemoryContext loadMemory() {
		LoadMemoryContext _localctx = new LoadMemoryContext(Context, State);
		EnterRule(_localctx, 294, RULE_loadMemory);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3298;
			if (!(this.isServerVersionGe80200())) throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			State = 3299;
			Match(MEMORY_SYMBOL);
			State = 3300;
			Match(EQUAL_OPERATOR);
			State = 3301;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertFromConstructorContext insertFromConstructor() {
			return GetRuleContext<InsertFromConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertQueryExpressionContext insertQueryExpression() {
			return GetRuleContext<InsertQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED_SYMBOL() { return GetToken(MySQLParser.DELAYED_SYMBOL, 0); }
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplaceStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReplaceStatementContext replaceStatement() {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(Context, State);
		EnterRule(_localctx, 296, RULE_replaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3303;
			Match(REPLACE_SYMBOL);
			State = 3305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
			case 1:
				{
				State = 3304;
				_la = TokenStream.LA(1);
				if ( !(_la==DELAYED_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 3308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				{
				State = 3307;
				Match(INTO_SYMBOL);
				}
				break;
			}
			State = 3310;
			tableRef();
			State = 3312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				{
				State = 3311;
				usePartition();
				}
				break;
			}
			State = 3318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				{
				State = 3314;
				insertFromConstructor();
				}
				break;
			case 2:
				{
				State = 3315;
				Match(SET_SYMBOL);
				State = 3316;
				updateList();
				}
				break;
			case 3:
				{
				State = 3317;
				insertQueryExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseListContext lockingClauseList() {
			return GetRuleContext<LockingClauseListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementWithIntoContext selectStatementWithInto() {
			return GetRuleContext<SelectStatementWithIntoContext>(0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 298, RULE_selectStatement);
		try {
			State = 3325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3320;
				queryExpression();
				State = 3322;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
				case 1:
					{
					State = 3321;
					lockingClauseList();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3324;
				selectStatementWithInto();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementWithIntoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementWithIntoContext selectStatementWithInto() {
			return GetRuleContext<SelectStatementWithIntoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntoClauseContext intoClause() {
			return GetRuleContext<IntoClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseListContext lockingClauseList() {
			return GetRuleContext<LockingClauseListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public SelectStatementWithIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatementWithInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectStatementWithInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectStatementWithInto(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementWithIntoContext selectStatementWithInto() {
		SelectStatementWithIntoContext _localctx = new SelectStatementWithIntoContext(Context, State);
		EnterRule(_localctx, 300, RULE_selectStatementWithInto);
		try {
			State = 3344;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,292,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3327;
				Match(OPEN_PAR_SYMBOL);
				State = 3328;
				selectStatementWithInto();
				State = 3329;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3331;
				queryExpression();
				State = 3332;
				intoClause();
				State = 3334;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
				case 1:
					{
					State = 3333;
					lockingClauseList();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3336;
				queryExpression();
				State = 3337;
				lockingClauseList();
				State = 3338;
				intoClause();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3340;
				if (!(this.isSelectStatementWithInto())) throw new FailedPredicateException(this, "this.isSelectStatementWithInto()");
				State = 3341;
				queryExpressionParens();
				State = 3342;
				intoClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionBodyContext queryExpressionBody() {
			return GetRuleContext<QueryExpressionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionContext queryExpression() {
		QueryExpressionContext _localctx = new QueryExpressionContext(Context, State);
		EnterRule(_localctx, 302, RULE_queryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
			case 1:
				{
				State = 3346;
				withClause();
				}
				break;
			}
			State = 3349;
			queryExpressionBody();
			State = 3351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
			case 1:
				{
				State = 3350;
				orderClause();
				}
				break;
			}
			State = 3354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				{
				State = 3353;
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryPrimaryContext queryPrimary() {
			return GetRuleContext<QueryPrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionBodyContext[] queryExpressionBody() {
			return GetRuleContexts<QueryExpressionBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionBodyContext queryExpressionBody(int i) {
			return GetRuleContext<QueryExpressionBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNION_SYMBOL() { return GetTokens(MySQLParser.UNION_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION_SYMBOL(int i) {
			return GetToken(MySQLParser.UNION_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCEPT_SYMBOL() { return GetTokens(MySQLParser.EXCEPT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT_SYMBOL(int i) {
			return GetToken(MySQLParser.EXCEPT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERSECT_SYMBOL() { return GetTokens(MySQLParser.INTERSECT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT_SYMBOL(int i) {
			return GetToken(MySQLParser.INTERSECT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionOptionContext[] unionOption() {
			return GetRuleContexts<UnionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionOptionContext unionOption(int i) {
			return GetRuleContext<UnionOptionContext>(i);
		}
		public QueryExpressionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionBody(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionBodyContext queryExpressionBody() {
		QueryExpressionBodyContext _localctx = new QueryExpressionBodyContext(Context, State);
		EnterRule(_localctx, 304, RULE_queryExpressionBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				{
				State = 3356;
				queryPrimary();
				}
				break;
			case 2:
				{
				State = 3357;
				queryExpressionParens();
				}
				break;
			}
			State = 3371;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,299,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3363;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
					case 1:
						{
						State = 3360;
						Match(UNION_SYMBOL);
						}
						break;
					case 2:
						{
						State = 3361;
						if (!(this.isServerVersionGe80031())) throw new FailedPredicateException(this, "this.isServerVersionGe80031()");
						State = 3362;
						_la = TokenStream.LA(1);
						if ( !(_la==EXCEPT_SYMBOL || _la==INTERSECT_SYMBOL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					State = 3366;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
					case 1:
						{
						State = 3365;
						unionOption();
						}
						break;
					}
					State = 3368;
					queryExpressionBody();
					}
					} 
				}
				State = 3373;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,299,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionParensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() {
			return GetRuleContext<QueryExpressionWithOptLockingClausesContext>(0);
		}
		public QueryExpressionParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionParens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionParens(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionParensContext queryExpressionParens() {
		QueryExpressionParensContext _localctx = new QueryExpressionParensContext(Context, State);
		EnterRule(_localctx, 306, RULE_queryExpressionParens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3374;
			Match(OPEN_PAR_SYMBOL);
			State = 3377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
			case 1:
				{
				State = 3375;
				queryExpressionParens();
				}
				break;
			case 2:
				{
				State = 3376;
				queryExpressionWithOptLockingClauses();
				}
				break;
			}
			State = 3379;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryPrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableValueConstructorContext tableValueConstructor() {
			return GetRuleContext<TableValueConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitTableContext explicitTable() {
			return GetRuleContext<ExplicitTableContext>(0);
		}
		public QueryPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryPrimary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryPrimary(this);
		}
	}

	[RuleVersion(0)]
	public QueryPrimaryContext queryPrimary() {
		QueryPrimaryContext _localctx = new QueryPrimaryContext(Context, State);
		EnterRule(_localctx, 308, RULE_queryPrimary);
		try {
			State = 3386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3381;
				querySpecification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3382;
				if (!(this.isServerVersionGe80019())) throw new FailedPredicateException(this, "this.isServerVersionGe80019()");
				State = 3383;
				tableValueConstructor();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3384;
				if (!(this.isServerVersionGe80019())) throw new FailedPredicateException(this, "this.isServerVersionGe80019()");
				State = 3385;
				explicitTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT_SYMBOL() { return GetToken(MySQLParser.SELECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemListContext selectItemList() {
			return GetRuleContext<SelectItemListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOptionContext[] selectOption() {
			return GetRuleContexts<SelectOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOptionContext selectOption(int i) {
			return GetRuleContext<SelectOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntoClauseContext intoClause() {
			return GetRuleContext<IntoClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifyClauseContext qualifyClause() {
			return GetRuleContext<QualifyClauseContext>(0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecification(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 310, RULE_querySpecification);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3388;
			Match(SELECT_SYMBOL);
			State = 3392;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,302,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3389;
					selectOption();
					}
					} 
				}
				State = 3394;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,302,Context);
			}
			State = 3395;
			selectItemList();
			State = 3397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				{
				State = 3396;
				intoClause();
				}
				break;
			}
			State = 3400;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
			case 1:
				{
				State = 3399;
				fromClause();
				}
				break;
			}
			State = 3403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				{
				State = 3402;
				whereClause();
				}
				break;
			}
			State = 3406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
			case 1:
				{
				State = 3405;
				groupByClause();
				}
				break;
			}
			State = 3409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
			case 1:
				{
				State = 3408;
				havingClause();
				}
				break;
			}
			State = 3412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,308,Context) ) {
			case 1:
				{
				State = 3411;
				windowClause();
				}
				break;
			}
			State = 3415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,309,Context) ) {
			case 1:
				{
				State = 3414;
				qualifyClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 312, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3417;
			queryExpressionParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN_SYMBOL() { return GetToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY_SYMBOL() { return GetToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_SMALL_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BIG_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CALC_FOUND_ROWS_SYMBOL() { return GetToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0); }
		public QuerySpecOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecOption(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecOptionContext querySpecOption() {
		QuerySpecOptionContext _localctx = new QuerySpecOptionContext(Context, State);
		EnterRule(_localctx, 314, RULE_querySpecOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3419;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & 8388631L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT_SYMBOL() { return GetToken(MySQLParser.LIMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitOptionsContext limitOptions() {
			return GetRuleContext<LimitOptionsContext>(0);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLimitClause(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(Context, State);
		EnterRule(_localctx, 316, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3421;
			Match(LIMIT_SYMBOL);
			State = 3422;
			limitOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleLimitClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT_SYMBOL() { return GetToken(MySQLParser.LIMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitOptionContext limitOption() {
			return GetRuleContext<LimitOptionContext>(0);
		}
		public SimpleLimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLimitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleLimitClause(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLimitClauseContext simpleLimitClause() {
		SimpleLimitClauseContext _localctx = new SimpleLimitClauseContext(Context, State);
		EnterRule(_localctx, 318, RULE_simpleLimitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3424;
			Match(LIMIT_SYMBOL);
			State = 3425;
			limitOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LimitOptionContext[] limitOption() {
			return GetRuleContexts<LimitOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitOptionContext limitOption(int i) {
			return GetRuleContext<LimitOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public LimitOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLimitOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLimitOptions(this);
		}
	}

	[RuleVersion(0)]
	public LimitOptionsContext limitOptions() {
		LimitOptionsContext _localctx = new LimitOptionsContext(Context, State);
		EnterRule(_localctx, 320, RULE_limitOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3427;
			limitOption();
			State = 3430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
			case 1:
				{
				State = 3428;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMA_SYMBOL || _la==OFFSET_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3429;
				limitOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public LimitOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLimitOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLimitOption(this);
		}
	}

	[RuleVersion(0)]
	public LimitOptionContext limitOption() {
		LimitOptionContext _localctx = new LimitOptionContext(Context, State);
		EnterRule(_localctx, 322, RULE_limitOption);
		int _la;
		try {
			State = 3434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,311,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3432;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3433;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8796093022264L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntoClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTFILE_SYMBOL() { return GetToken(MySQLParser.OUTFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext[] textOrIdentifier() {
			return GetRuleContexts<TextOrIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier(int i) {
			return GetRuleContext<TextOrIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext[] userVariable() {
			return GetRuleContexts<UserVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable(int i) {
			return GetRuleContext<UserVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsClauseContext fieldsClause() {
			return GetRuleContext<FieldsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinesClauseContext linesClause() {
			return GetRuleContext<LinesClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intoClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIntoClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIntoClause(this);
		}
	}

	[RuleVersion(0)]
	public IntoClauseContext intoClause() {
		IntoClauseContext _localctx = new IntoClauseContext(Context, State);
		EnterRule(_localctx, 324, RULE_intoClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3436;
			Match(INTO_SYMBOL);
			State = 3464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,318,Context) ) {
			case 1:
				{
				State = 3437;
				Match(OUTFILE_SYMBOL);
				State = 3438;
				textStringLiteral();
				State = 3440;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,312,Context) ) {
				case 1:
					{
					State = 3439;
					charsetClause();
					}
					break;
				}
				State = 3443;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
				case 1:
					{
					State = 3442;
					fieldsClause();
					}
					break;
				}
				State = 3446;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,314,Context) ) {
				case 1:
					{
					State = 3445;
					linesClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3448;
				Match(DUMPFILE_SYMBOL);
				State = 3449;
				textStringLiteral();
				}
				break;
			case 3:
				{
				State = 3452;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
				case 1:
					{
					State = 3450;
					textOrIdentifier();
					}
					break;
				case 2:
					{
					State = 3451;
					userVariable();
					}
					break;
				}
				State = 3461;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,317,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3454;
						Match(COMMA_SYMBOL);
						State = 3457;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,316,Context) ) {
						case 1:
							{
							State = 3455;
							textOrIdentifier();
							}
							break;
						case 2:
							{
							State = 3456;
							userVariable();
							}
							break;
						}
						}
						} 
					}
					State = 3463;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,317,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureAnalyseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT_NUMBER() { return GetTokens(MySQLParser.INT_NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySQLParser.INT_NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ProcedureAnalyseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureAnalyseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProcedureAnalyseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProcedureAnalyseClause(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureAnalyseClauseContext procedureAnalyseClause() {
		ProcedureAnalyseClauseContext _localctx = new ProcedureAnalyseClauseContext(Context, State);
		EnterRule(_localctx, 326, RULE_procedureAnalyseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3466;
			Match(PROCEDURE_SYMBOL);
			State = 3467;
			Match(OPEN_PAR_SYMBOL);
			State = 3473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT_NUMBER) {
				{
				State = 3468;
				Match(INT_NUMBER);
				State = 3471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 3469;
					Match(COMMA_SYMBOL);
					State = 3470;
					Match(INT_NUMBER);
					}
				}

				}
			}

			State = 3475;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING_SYMBOL() { return GetToken(MySQLParser.HAVING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 328, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3477;
			Match(HAVING_SYMBOL);
			State = 3478;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifyClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUALIFY_SYMBOL() { return GetToken(MySQLParser.QUALIFY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public QualifyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifyClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQualifyClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQualifyClause(this);
		}
	}

	[RuleVersion(0)]
	public QualifyClauseContext qualifyClause() {
		QualifyClauseContext _localctx = new QualifyClauseContext(Context, State);
		EnterRule(_localctx, 330, RULE_qualifyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3480;
			if (!(this.isServerVersionGe80200())) throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			State = 3481;
			Match(QUALIFY_SYMBOL);
			State = 3482;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW_SYMBOL() { return GetToken(MySQLParser.WINDOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowDefinitionContext[] windowDefinition() {
			return GetRuleContexts<WindowDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowDefinitionContext windowDefinition(int i) {
			return GetRuleContext<WindowDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowClause(this);
		}
	}

	[RuleVersion(0)]
	public WindowClauseContext windowClause() {
		WindowClauseContext _localctx = new WindowClauseContext(Context, State);
		EnterRule(_localctx, 332, RULE_windowClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3484;
			Match(WINDOW_SYMBOL);
			State = 3485;
			windowDefinition();
			State = 3490;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3486;
					Match(COMMA_SYMBOL);
					State = 3487;
					windowDefinition();
					}
					} 
				}
				State = 3492;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowDefinition(this);
		}
	}

	[RuleVersion(0)]
	public WindowDefinitionContext windowDefinition() {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(Context, State);
		EnterRule(_localctx, 334, RULE_windowDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3493;
			windowName();
			State = 3494;
			Match(AS_SYMBOL);
			State = 3495;
			windowSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecDetailsContext windowSpecDetails() {
			return GetRuleContext<WindowSpecDetailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowSpec(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecContext windowSpec() {
		WindowSpecContext _localctx = new WindowSpecContext(Context, State);
		EnterRule(_localctx, 336, RULE_windowSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3497;
			Match(OPEN_PAR_SYMBOL);
			State = 3498;
			windowSpecDetails();
			State = 3499;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameClauseContext windowFrameClause() {
			return GetRuleContext<WindowFrameClauseContext>(0);
		}
		public WindowSpecDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpecDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowSpecDetails(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowSpecDetails(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecDetailsContext windowSpecDetails() {
		WindowSpecDetailsContext _localctx = new WindowSpecDetailsContext(Context, State);
		EnterRule(_localctx, 338, RULE_windowSpecDetails);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3502;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,322,Context) ) {
			case 1:
				{
				State = 3501;
				windowName();
				}
				break;
			}
			State = 3507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION_SYMBOL) {
				{
				State = 3504;
				Match(PARTITION_SYMBOL);
				State = 3505;
				Match(BY_SYMBOL);
				State = 3506;
				orderList();
				}
			}

			State = 3510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				State = 3509;
				orderClause();
				}
			}

			State = 3513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE_SYMBOL || _la==ROWS_SYMBOL || _la==GROUPS_SYMBOL) {
				{
				State = 3512;
				windowFrameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameUnitsContext windowFrameUnits() {
			return GetRuleContext<WindowFrameUnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameExtentContext windowFrameExtent() {
			return GetRuleContext<WindowFrameExtentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameExclusionContext windowFrameExclusion() {
			return GetRuleContext<WindowFrameExclusionContext>(0);
		}
		public WindowFrameClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameClause(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameClauseContext windowFrameClause() {
		WindowFrameClauseContext _localctx = new WindowFrameClauseContext(Context, State);
		EnterRule(_localctx, 340, RULE_windowFrameClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3515;
			windowFrameUnits();
			State = 3516;
			windowFrameExtent();
			State = 3518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCLUDE_SYMBOL) {
				{
				State = 3517;
				windowFrameExclusion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameUnitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS_SYMBOL() { return GetToken(MySQLParser.ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_SYMBOL() { return GetToken(MySQLParser.RANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS_SYMBOL() { return GetToken(MySQLParser.GROUPS_SYMBOL, 0); }
		public WindowFrameUnitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameUnits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameUnits(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameUnitsContext windowFrameUnits() {
		WindowFrameUnitsContext _localctx = new WindowFrameUnitsContext(Context, State);
		EnterRule(_localctx, 342, RULE_windowFrameUnits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3520;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE_SYMBOL || _la==ROWS_SYMBOL || _la==GROUPS_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameExtentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameStartContext windowFrameStart() {
			return GetRuleContext<WindowFrameStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameBetweenContext windowFrameBetween() {
			return GetRuleContext<WindowFrameBetweenContext>(0);
		}
		public WindowFrameExtentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameExtent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameExtent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameExtent(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameExtentContext windowFrameExtent() {
		WindowFrameExtentContext _localctx = new WindowFrameExtentContext(Context, State);
		EnterRule(_localctx, 344, RULE_windowFrameExtent);
		try {
			State = 3524;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case PARAM_MARKER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
			case CURRENT_SYMBOL:
			case INTERVAL_SYMBOL:
			case UNBOUNDED_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3522;
				windowFrameStart();
				}
				break;
			case BETWEEN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3523;
				windowFrameBetween();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public WindowFrameStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameStart(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameStartContext windowFrameStart() {
		WindowFrameStartContext _localctx = new WindowFrameStartContext(Context, State);
		EnterRule(_localctx, 346, RULE_windowFrameStart);
		try {
			State = 3540;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNBOUNDED_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3526;
				Match(UNBOUNDED_SYMBOL);
				State = 3527;
				Match(PRECEDING_SYMBOL);
				}
				break;
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3528;
				ulonglongNumber();
				State = 3529;
				Match(PRECEDING_SYMBOL);
				}
				break;
			case PARAM_MARKER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3531;
				Match(PARAM_MARKER);
				State = 3532;
				Match(PRECEDING_SYMBOL);
				}
				break;
			case INTERVAL_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3533;
				Match(INTERVAL_SYMBOL);
				State = 3534;
				expr(0);
				State = 3535;
				interval();
				State = 3536;
				Match(PRECEDING_SYMBOL);
				}
				break;
			case CURRENT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3538;
				Match(CURRENT_SYMBOL);
				State = 3539;
				Match(ROW_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameBetweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN_SYMBOL() { return GetToken(MySQLParser.BETWEEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameBoundContext[] windowFrameBound() {
			return GetRuleContexts<WindowFrameBoundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameBoundContext windowFrameBound(int i) {
			return GetRuleContext<WindowFrameBoundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		public WindowFrameBetweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameBetween; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameBetween(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameBetween(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameBetweenContext windowFrameBetween() {
		WindowFrameBetweenContext _localctx = new WindowFrameBetweenContext(Context, State);
		EnterRule(_localctx, 348, RULE_windowFrameBetween);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3542;
			Match(BETWEEN_SYMBOL);
			State = 3543;
			windowFrameBound();
			State = 3544;
			Match(AND_SYMBOL);
			State = 3545;
			windowFrameBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameStartContext windowFrameStart() {
			return GetRuleContext<WindowFrameStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public WindowFrameBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameBound(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameBoundContext windowFrameBound() {
		WindowFrameBoundContext _localctx = new WindowFrameBoundContext(Context, State);
		EnterRule(_localctx, 350, RULE_windowFrameBound);
		try {
			State = 3560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,329,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3547;
				windowFrameStart();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3548;
				Match(UNBOUNDED_SYMBOL);
				State = 3549;
				Match(FOLLOWING_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3550;
				ulonglongNumber();
				State = 3551;
				Match(FOLLOWING_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3553;
				Match(PARAM_MARKER);
				State = 3554;
				Match(FOLLOWING_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3555;
				Match(INTERVAL_SYMBOL);
				State = 3556;
				expr(0);
				State = 3557;
				interval();
				State = 3558;
				Match(FOLLOWING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameExclusionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES_SYMBOL() { return GetToken(MySQLParser.TIES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public WindowFrameExclusionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameExclusion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameExclusion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameExclusion(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameExclusionContext windowFrameExclusion() {
		WindowFrameExclusionContext _localctx = new WindowFrameExclusionContext(Context, State);
		EnterRule(_localctx, 352, RULE_windowFrameExclusion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3562;
			Match(EXCLUDE_SYMBOL);
			State = 3569;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_SYMBOL:
				{
				State = 3563;
				Match(CURRENT_SYMBOL);
				State = 3564;
				Match(ROW_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				State = 3565;
				Match(GROUP_SYMBOL);
				}
				break;
			case TIES_SYMBOL:
				{
				State = 3566;
				Match(TIES_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				{
				State = 3567;
				Match(NO_SYMBOL);
				State = 3568;
				Match(OTHERS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommonTableExpressionContext[] commonTableExpression() {
			return GetRuleContexts<CommonTableExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommonTableExpressionContext commonTableExpression(int i) {
			return GetRuleContext<CommonTableExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE_SYMBOL() { return GetToken(MySQLParser.RECURSIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWithClause(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 354, RULE_withClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3571;
			Match(WITH_SYMBOL);
			State = 3573;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,331,Context) ) {
			case 1:
				{
				State = 3572;
				Match(RECURSIVE_SYMBOL);
				}
				break;
			}
			State = 3575;
			commonTableExpression();
			State = 3580;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,332,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3576;
					Match(COMMA_SYMBOL);
					State = 3577;
					commonTableExpression();
					}
					} 
				}
				State = 3582;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,332,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCommonTableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCommonTableExpression(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionContext commonTableExpression() {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(Context, State);
		EnterRule(_localctx, 356, RULE_commonTableExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3583;
			identifier();
			State = 3585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 3584;
				columnInternalRefList();
				}
			}

			State = 3587;
			Match(AS_SYMBOL);
			State = 3588;
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OlapOptionContext olapOption() {
			return GetRuleContext<OlapOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupListContext groupList() {
			return GetRuleContext<GroupListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE_SYMBOL() { return GetToken(MySQLParser.CUBE_SYMBOL, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupByClause(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(Context, State);
		EnterRule(_localctx, 358, RULE_groupByClause);
		int _la;
		try {
			State = 3604;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3590;
				Match(GROUP_SYMBOL);
				State = 3591;
				Match(BY_SYMBOL);
				State = 3592;
				orderList();
				State = 3594;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,334,Context) ) {
				case 1:
					{
					State = 3593;
					olapOption();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3596;
				if (!(this.isServerVersionGe80032())) throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
				State = 3597;
				Match(GROUP_SYMBOL);
				State = 3598;
				Match(BY_SYMBOL);
				State = 3599;
				_la = TokenStream.LA(1);
				if ( !(_la==CUBE_SYMBOL || _la==ROLLUP_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3600;
				Match(OPEN_PAR_SYMBOL);
				State = 3601;
				groupList();
				State = 3602;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OlapOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public OlapOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_olapOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOlapOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOlapOption(this);
		}
	}

	[RuleVersion(0)]
	public OlapOptionContext olapOption() {
		OlapOptionContext _localctx = new OlapOptionContext(Context, State);
		EnterRule(_localctx, 360, RULE_olapOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3606;
			Match(WITH_SYMBOL);
			State = 3607;
			Match(ROLLUP_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_SYMBOL() { return GetToken(MySQLParser.ORDER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOrderClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOrderClause(this);
		}
	}

	[RuleVersion(0)]
	public OrderClauseContext orderClause() {
		OrderClauseContext _localctx = new OrderClauseContext(Context, State);
		EnterRule(_localctx, 362, RULE_orderClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3609;
			Match(ORDER_SYMBOL);
			State = 3610;
			Match(BY_SYMBOL);
			State = 3611;
			orderList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC_SYMBOL() { return GetToken(MySQLParser.ASC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_SYMBOL() { return GetToken(MySQLParser.DESC_SYMBOL, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 364, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3613;
			_la = TokenStream.LA(1);
			if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUAL_SYMBOL() { return GetToken(MySQLParser.DUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 366, RULE_fromClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3615;
			Match(FROM_SYMBOL);
			State = 3618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,336,Context) ) {
			case 1:
				{
				State = 3616;
				Match(DUAL_SYMBOL);
				}
				break;
			case 2:
				{
				State = 3617;
				tableReferenceList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceContext[] tableReference() {
			return GetRuleContexts<TableReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceContext tableReference(int i) {
			return GetRuleContext<TableReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReferenceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableReferenceList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableReferenceList(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceListContext tableReferenceList() {
		TableReferenceListContext _localctx = new TableReferenceListContext(Context, State);
		EnterRule(_localctx, 368, RULE_tableReferenceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3620;
			tableReference();
			State = 3625;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,337,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3621;
					Match(COMMA_SYMBOL);
					State = 3622;
					tableReference();
					}
					} 
				}
				State = 3627;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,337,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableValueConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySQLParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RowValueExplicitContext[] rowValueExplicit() {
			return GetRuleContexts<RowValueExplicitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowValueExplicitContext rowValueExplicit(int i) {
			return GetRuleContext<RowValueExplicitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableValueConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableValueConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableValueConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableValueConstructor(this);
		}
	}

	[RuleVersion(0)]
	public TableValueConstructorContext tableValueConstructor() {
		TableValueConstructorContext _localctx = new TableValueConstructorContext(Context, State);
		EnterRule(_localctx, 370, RULE_tableValueConstructor);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3628;
			Match(VALUES_SYMBOL);
			State = 3629;
			rowValueExplicit();
			State = 3634;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3630;
					Match(COMMA_SYMBOL);
					State = 3631;
					rowValueExplicit();
					}
					} 
				}
				State = 3636;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ExplicitTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExplicitTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExplicitTable(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitTableContext explicitTable() {
		ExplicitTableContext _localctx = new ExplicitTableContext(Context, State);
		EnterRule(_localctx, 372, RULE_explicitTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3637;
			Match(TABLE_SYMBOL);
			State = 3638;
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowValueExplicitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValuesContext @values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public RowValueExplicitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowValueExplicit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRowValueExplicit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRowValueExplicit(this);
		}
	}

	[RuleVersion(0)]
	public RowValueExplicitContext rowValueExplicit() {
		RowValueExplicitContext _localctx = new RowValueExplicitContext(Context, State);
		EnterRule(_localctx, 374, RULE_rowValueExplicit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3640;
			Match(ROW_SYMBOL);
			State = 3641;
			Match(OPEN_PAR_SYMBOL);
			State = 3643;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,339,Context) ) {
			case 1:
				{
				State = 3642;
				@values();
				}
				break;
			}
			State = 3645;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecOptionContext querySpecOption() {
			return GetRuleContext<QuerySpecOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public SelectOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectOption(this);
		}
	}

	[RuleVersion(0)]
	public SelectOptionContext selectOption() {
		SelectOptionContext _localctx = new SelectOptionContext(Context, State);
		EnterRule(_localctx, 376, RULE_selectOption);
		try {
			State = 3649;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL_SYMBOL:
			case DISTINCT_SYMBOL:
			case HIGH_PRIORITY_SYMBOL:
			case SQL_BIG_RESULT_SYMBOL:
			case SQL_BUFFER_RESULT_SYMBOL:
			case SQL_CALC_FOUND_ROWS_SYMBOL:
			case SQL_SMALL_RESULT_SYMBOL:
			case STRAIGHT_JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3647;
				querySpecOption();
				}
				break;
			case SQL_NO_CACHE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3648;
				Match(SQL_NO_CACHE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockingClauseListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseContext[] lockingClause() {
			return GetRuleContexts<LockingClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseContext lockingClause(int i) {
			return GetRuleContext<LockingClauseContext>(i);
		}
		public LockingClauseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockingClauseList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockingClauseList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockingClauseList(this);
		}
	}

	[RuleVersion(0)]
	public LockingClauseListContext lockingClauseList() {
		LockingClauseListContext _localctx = new LockingClauseListContext(Context, State);
		EnterRule(_localctx, 378, RULE_lockingClauseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3651;
			if (!(this.isServerVersionGe80031())) throw new FailedPredicateException(this, "this.isServerVersionGe80031()");
			State = 3653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3652;
				lockingClause();
				}
				}
				State = 3655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FOR_SYMBOL || _la==LOCK_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockStrenghContext lockStrengh() {
			return GetRuleContext<LockStrenghContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF_SYMBOL() { return GetToken(MySQLParser.OF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasRefListContext tableAliasRefList() {
			return GetRuleContext<TableAliasRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockedRowActionContext lockedRowAction() {
			return GetRuleContext<LockedRowActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE_SYMBOL() { return GetToken(MySQLParser.SHARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE_SYMBOL() { return GetToken(MySQLParser.MODE_SYMBOL, 0); }
		public LockingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockingClause(this);
		}
	}

	[RuleVersion(0)]
	public LockingClauseContext lockingClause() {
		LockingClauseContext _localctx = new LockingClauseContext(Context, State);
		EnterRule(_localctx, 380, RULE_lockingClause);
		int _la;
		try {
			State = 3670;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3657;
				Match(FOR_SYMBOL);
				State = 3658;
				lockStrengh();
				State = 3661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OF_SYMBOL) {
					{
					State = 3659;
					Match(OF_SYMBOL);
					State = 3660;
					tableAliasRefList();
					}
				}

				State = 3664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SKIP_SYMBOL || _la==NOWAIT_SYMBOL) {
					{
					State = 3663;
					lockedRowAction();
					}
				}

				}
				break;
			case LOCK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3666;
				Match(LOCK_SYMBOL);
				State = 3667;
				Match(IN_SYMBOL);
				State = 3668;
				Match(SHARE_SYMBOL);
				State = 3669;
				Match(MODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStrenghContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE_SYMBOL() { return GetToken(MySQLParser.SHARE_SYMBOL, 0); }
		public LockStrenghContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStrengh; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockStrengh(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockStrengh(this);
		}
	}

	[RuleVersion(0)]
	public LockStrenghContext lockStrengh() {
		LockStrenghContext _localctx = new LockStrenghContext(Context, State);
		EnterRule(_localctx, 382, RULE_lockStrengh);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3672;
			_la = TokenStream.LA(1);
			if ( !(_la==SHARE_SYMBOL || _la==UPDATE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockedRowActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_SYMBOL() { return GetToken(MySQLParser.SKIP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySQLParser.LOCKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public LockedRowActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockedRowAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockedRowAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockedRowAction(this);
		}
	}

	[RuleVersion(0)]
	public LockedRowActionContext lockedRowAction() {
		LockedRowActionContext _localctx = new LockedRowActionContext(Context, State);
		EnterRule(_localctx, 384, RULE_lockedRowAction);
		try {
			State = 3677;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SKIP_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3674;
				Match(SKIP_SYMBOL);
				State = 3675;
				Match(LOCKED_SYMBOL);
				}
				break;
			case NOWAIT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3676;
				Match(NOWAIT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext[] selectItem() {
			return GetRuleContexts<SelectItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext selectItem(int i) {
			return GetRuleContext<SelectItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SelectItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItemList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectItemList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectItemList(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemListContext selectItemList() {
		SelectItemListContext _localctx = new SelectItemListContext(Context, State);
		EnterRule(_localctx, 386, RULE_selectItemList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
			case 1:
				{
				State = 3679;
				selectItem();
				}
				break;
			case 2:
				{
				State = 3680;
				Match(MULT_OPERATOR);
				}
				break;
			}
			State = 3687;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,347,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3683;
					Match(COMMA_SYMBOL);
					State = 3684;
					selectItem();
					}
					} 
				}
				State = 3689;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,347,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableWildContext tableWild() {
			return GetRuleContext<TableWildContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectItem(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemContext selectItem() {
		SelectItemContext _localctx = new SelectItemContext(Context, State);
		EnterRule(_localctx, 388, RULE_selectItem);
		try {
			State = 3695;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,349,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3690;
				tableWild();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3691;
				expr(0);
				State = 3693;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,348,Context) ) {
				case 1:
					{
					State = 3692;
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectAlias(this);
		}
	}

	[RuleVersion(0)]
	public SelectAliasContext selectAlias() {
		SelectAliasContext _localctx = new SelectAliasContext(Context, State);
		EnterRule(_localctx, 390, RULE_selectAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3698;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,350,Context) ) {
			case 1:
				{
				State = 3697;
				Match(AS_SYMBOL);
				}
				break;
			}
			State = 3702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,351,Context) ) {
			case 1:
				{
				State = 3700;
				identifier();
				}
				break;
			case 2:
				{
				State = 3701;
				textStringLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_SYMBOL() { return GetToken(MySQLParser.WHERE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 392, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3704;
			Match(WHERE_SYMBOL);
			State = 3705;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_CURLY_SYMBOL() { return GetToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EscapedTableReferenceContext escapedTableReference() {
			return GetRuleContext<EscapedTableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_CURLY_SYMBOL() { return GetToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JoinedTableContext[] joinedTable() {
			return GetRuleContexts<JoinedTableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinedTableContext joinedTable(int i) {
			return GetRuleContext<JoinedTableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OJ_SYMBOL() { return GetToken(MySQLParser.OJ_SYMBOL, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableReference(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceContext tableReference() {
		TableReferenceContext _localctx = new TableReferenceContext(Context, State);
		EnterRule(_localctx, 394, RULE_tableReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3717;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,353,Context) ) {
			case 1:
				{
				State = 3707;
				tableFactor();
				}
				break;
			case 2:
				{
				State = 3708;
				Match(OPEN_CURLY_SYMBOL);
				State = 3712;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
				case 1:
					{
					State = 3709;
					if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
					State = 3710;
					identifier();
					}
					break;
				case 2:
					{
					State = 3711;
					Match(OJ_SYMBOL);
					}
					break;
				}
				State = 3714;
				escapedTableReference();
				State = 3715;
				Match(CLOSE_CURLY_SYMBOL);
				}
				break;
			}
			State = 3722;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,354,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3719;
					joinedTable();
					}
					} 
				}
				State = 3724;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,354,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapedTableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinedTableContext[] joinedTable() {
			return GetRuleContexts<JoinedTableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinedTableContext joinedTable(int i) {
			return GetRuleContext<JoinedTableContext>(i);
		}
		public EscapedTableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapedTableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEscapedTableReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEscapedTableReference(this);
		}
	}

	[RuleVersion(0)]
	public EscapedTableReferenceContext escapedTableReference() {
		EscapedTableReferenceContext _localctx = new EscapedTableReferenceContext(Context, State);
		EnterRule(_localctx, 396, RULE_escapedTableReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3725;
			tableFactor();
			State = 3729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CROSS_SYMBOL || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & 2148532225L) != 0) || _la==NATURAL_SYMBOL || _la==RIGHT_SYMBOL || _la==STRAIGHT_JOIN_SYMBOL) {
				{
				{
				State = 3726;
				joinedTable();
				}
				}
				State = 3731;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinedTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InnerJoinTypeContext innerJoinType() {
			return GetRuleContext<InnerJoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceContext tableReference() {
			return GetRuleContext<TableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterJoinTypeContext outerJoinType() {
			return GetRuleContext<OuterJoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NaturalJoinTypeContext naturalJoinType() {
			return GetRuleContext<NaturalJoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		public JoinedTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinedTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJoinedTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJoinedTable(this);
		}
	}

	[RuleVersion(0)]
	public JoinedTableContext joinedTable() {
		JoinedTableContext _localctx = new JoinedTableContext(Context, State);
		EnterRule(_localctx, 398, RULE_joinedTable);
		try {
			State = 3751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
			case STRAIGHT_JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3732;
				innerJoinType();
				State = 3733;
				tableReference();
				State = 3738;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,356,Context) ) {
				case 1:
					{
					State = 3734;
					Match(ON_SYMBOL);
					State = 3735;
					expr(0);
					}
					break;
				case 2:
					{
					State = 3736;
					Match(USING_SYMBOL);
					State = 3737;
					identifierListWithParentheses();
					}
					break;
				}
				}
				break;
			case LEFT_SYMBOL:
			case RIGHT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3740;
				outerJoinType();
				State = 3741;
				tableReference();
				State = 3746;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON_SYMBOL:
					{
					State = 3742;
					Match(ON_SYMBOL);
					State = 3743;
					expr(0);
					}
					break;
				case USING_SYMBOL:
					{
					State = 3744;
					Match(USING_SYMBOL);
					State = 3745;
					identifierListWithParentheses();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3748;
				naturalJoinType();
				State = 3749;
				tableFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NaturalJoinTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL_SYMBOL() { return GetToken(MySQLParser.NATURAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_SYMBOL() { return GetToken(MySQLParser.INNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SYMBOL() { return GetToken(MySQLParser.LEFT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySQLParser.RIGHT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_SYMBOL() { return GetToken(MySQLParser.OUTER_SYMBOL, 0); }
		public NaturalJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naturalJoinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNaturalJoinType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNaturalJoinType(this);
		}
	}

	[RuleVersion(0)]
	public NaturalJoinTypeContext naturalJoinType() {
		NaturalJoinTypeContext _localctx = new NaturalJoinTypeContext(Context, State);
		EnterRule(_localctx, 400, RULE_naturalJoinType);
		int _la;
		try {
			State = 3764;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,361,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3753;
				Match(NATURAL_SYMBOL);
				State = 3755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INNER_SYMBOL) {
					{
					State = 3754;
					Match(INNER_SYMBOL);
					}
				}

				State = 3757;
				Match(JOIN_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3758;
				Match(NATURAL_SYMBOL);
				State = 3759;
				_la = TokenStream.LA(1);
				if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER_SYMBOL) {
					{
					State = 3760;
					Match(OUTER_SYMBOL);
					}
				}

				State = 3763;
				Match(JOIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerJoinTypeContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_SYMBOL() { return GetToken(MySQLParser.INNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS_SYMBOL() { return GetToken(MySQLParser.CROSS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN_SYMBOL() { return GetToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public InnerJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerJoinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInnerJoinType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInnerJoinType(this);
		}
	}

	[RuleVersion(0)]
	public InnerJoinTypeContext innerJoinType() {
		InnerJoinTypeContext _localctx = new InnerJoinTypeContext(Context, State);
		EnterRule(_localctx, 402, RULE_innerJoinType);
		int _la;
		try {
			State = 3771;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CROSS_SYMBOL || _la==INNER_SYMBOL) {
					{
					State = 3766;
					_localctx.type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CROSS_SYMBOL || _la==INNER_SYMBOL) ) {
						_localctx.type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3769;
				Match(JOIN_SYMBOL);
				}
				break;
			case STRAIGHT_JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3770;
				_localctx.type = Match(STRAIGHT_JOIN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OuterJoinTypeContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SYMBOL() { return GetToken(MySQLParser.LEFT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySQLParser.RIGHT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_SYMBOL() { return GetToken(MySQLParser.OUTER_SYMBOL, 0); }
		public OuterJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outerJoinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOuterJoinType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOuterJoinType(this);
		}
	}

	[RuleVersion(0)]
	public OuterJoinTypeContext outerJoinType() {
		OuterJoinTypeContext _localctx = new OuterJoinTypeContext(Context, State);
		EnterRule(_localctx, 404, RULE_outerJoinType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3773;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3775;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTER_SYMBOL) {
				{
				State = 3774;
				Match(OUTER_SYMBOL);
				}
			}

			State = 3777;
			Match(JOIN_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleTableContext singleTable() {
			return GetRuleContext<SingleTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleTableParensContext singleTableParens() {
			return GetRuleContext<SingleTableParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTableContext derivedTable() {
			return GetRuleContext<DerivedTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListParensContext tableReferenceListParens() {
			return GetRuleContext<TableReferenceListParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableFunctionContext tableFunction() {
			return GetRuleContext<TableFunctionContext>(0);
		}
		public TableFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableFactor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableFactor(this);
		}
	}

	[RuleVersion(0)]
	public TableFactorContext tableFactor() {
		TableFactorContext _localctx = new TableFactorContext(Context, State);
		EnterRule(_localctx, 406, RULE_tableFactor);
		try {
			State = 3785;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,365,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3779;
				singleTable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3780;
				singleTableParens();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3781;
				derivedTable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3782;
				tableReferenceListParens();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3783;
				if (!(this.isServerVersionGe80004())) throw new FailedPredicateException(this, "this.isServerVersionGe80004()");
				State = 3784;
				tableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintListContext indexHintList() {
			return GetRuleContext<IndexHintListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablesampleClauseContext tablesampleClause() {
			return GetRuleContext<TablesampleClauseContext>(0);
		}
		public SingleTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSingleTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSingleTable(this);
		}
	}

	[RuleVersion(0)]
	public SingleTableContext singleTable() {
		SingleTableContext _localctx = new SingleTableContext(Context, State);
		EnterRule(_localctx, 408, RULE_singleTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3787;
			tableRef();
			State = 3789;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,366,Context) ) {
			case 1:
				{
				State = 3788;
				usePartition();
				}
				break;
			}
			State = 3792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,367,Context) ) {
			case 1:
				{
				State = 3791;
				tableAlias();
				}
				break;
			}
			State = 3795;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
			case 1:
				{
				State = 3794;
				indexHintList();
				}
				break;
			}
			State = 3798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
			case 1:
				{
				State = 3797;
				tablesampleClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTableParensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleTableContext singleTable() {
			return GetRuleContext<SingleTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleTableParensContext singleTableParens() {
			return GetRuleContext<SingleTableParensContext>(0);
		}
		public SingleTableParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTableParens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSingleTableParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSingleTableParens(this);
		}
	}

	[RuleVersion(0)]
	public SingleTableParensContext singleTableParens() {
		SingleTableParensContext _localctx = new SingleTableParensContext(Context, State);
		EnterRule(_localctx, 410, RULE_singleTableParens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3800;
			Match(OPEN_PAR_SYMBOL);
			State = 3803;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
			case 1:
				{
				State = 3801;
				singleTable();
				}
				break;
			case 2:
				{
				State = 3802;
				singleTableParens();
				}
				break;
			}
			State = 3805;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL_SYMBOL() { return GetToken(MySQLParser.LATERAL_SYMBOL, 0); }
		public DerivedTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDerivedTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDerivedTable(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTableContext derivedTable() {
		DerivedTableContext _localctx = new DerivedTableContext(Context, State);
		EnterRule(_localctx, 412, RULE_derivedTable);
		try {
			State = 3823;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,375,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3807;
				subquery();
				State = 3809;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
				case 1:
					{
					State = 3808;
					tableAlias();
					}
					break;
				}
				State = 3812;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
				case 1:
					{
					State = 3811;
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3814;
				if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				State = 3815;
				Match(LATERAL_SYMBOL);
				State = 3816;
				subquery();
				State = 3818;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,373,Context) ) {
				case 1:
					{
					State = 3817;
					tableAlias();
					}
					break;
				}
				State = 3821;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,374,Context) ) {
				case 1:
					{
					State = 3820;
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceListParensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListParensContext tableReferenceListParens() {
			return GetRuleContext<TableReferenceListParensContext>(0);
		}
		public TableReferenceListParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReferenceListParens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableReferenceListParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableReferenceListParens(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceListParensContext tableReferenceListParens() {
		TableReferenceListParensContext _localctx = new TableReferenceListParensContext(Context, State);
		EnterRule(_localctx, 414, RULE_tableReferenceListParens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3825;
			Match(OPEN_PAR_SYMBOL);
			State = 3828;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,376,Context) ) {
			case 1:
				{
				State = 3826;
				tableReferenceList();
				}
				break;
			case 2:
				{
				State = 3827;
				tableReferenceListParens();
				}
				break;
			}
			State = 3830;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TABLE_SYMBOL() { return GetToken(MySQLParser.JSON_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsClauseContext columnsClause() {
			return GetRuleContext<ColumnsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public TableFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableFunction(this);
		}
	}

	[RuleVersion(0)]
	public TableFunctionContext tableFunction() {
		TableFunctionContext _localctx = new TableFunctionContext(Context, State);
		EnterRule(_localctx, 416, RULE_tableFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3832;
			Match(JSON_TABLE_SYMBOL);
			State = 3833;
			Match(OPEN_PAR_SYMBOL);
			State = 3834;
			expr(0);
			State = 3835;
			Match(COMMA_SYMBOL);
			State = 3836;
			textStringLiteral();
			State = 3837;
			columnsClause();
			State = 3838;
			Match(CLOSE_PAR_SYMBOL);
			State = 3840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,377,Context) ) {
			case 1:
				{
				State = 3839;
				tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JtColumnContext[] jtColumn() {
			return GetRuleContexts<JtColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JtColumnContext jtColumn(int i) {
			return GetRuleContext<JtColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnsClause(this);
		}
	}

	[RuleVersion(0)]
	public ColumnsClauseContext columnsClause() {
		ColumnsClauseContext _localctx = new ColumnsClauseContext(Context, State);
		EnterRule(_localctx, 418, RULE_columnsClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3842;
			Match(COLUMNS_SYMBOL);
			State = 3843;
			Match(OPEN_PAR_SYMBOL);
			State = 3844;
			jtColumn();
			State = 3849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3845;
				Match(COMMA_SYMBOL);
				State = 3846;
				jtColumn();
				}
				}
				State = 3851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3852;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JtColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH_SYMBOL() { return GetToken(MySQLParser.PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySQLParser.EXISTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnEmptyOrErrorJsonTableContext onEmptyOrErrorJsonTable() {
			return GetRuleContext<OnEmptyOrErrorJsonTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_SYMBOL() { return GetToken(MySQLParser.NESTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsClauseContext columnsClause() {
			return GetRuleContext<ColumnsClauseContext>(0);
		}
		public JtColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jtColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJtColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJtColumn(this);
		}
	}

	[RuleVersion(0)]
	public JtColumnContext jtColumn() {
		JtColumnContext _localctx = new JtColumnContext(Context, State);
		EnterRule(_localctx, 420, RULE_jtColumn);
		int _la;
		try {
			State = 3877;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,382,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3854;
				identifier();
				State = 3855;
				Match(FOR_SYMBOL);
				State = 3856;
				Match(ORDINALITY_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3858;
				identifier();
				State = 3859;
				dataType();
				State = 3862;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,379,Context) ) {
				case 1:
					{
					State = 3860;
					if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
					State = 3861;
					collate();
					}
					break;
				}
				State = 3865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					State = 3864;
					Match(EXISTS_SYMBOL);
					}
				}

				State = 3867;
				Match(PATH_SYMBOL);
				State = 3868;
				textStringLiteral();
				State = 3870;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					State = 3869;
					onEmptyOrErrorJsonTable();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3872;
				Match(NESTED_SYMBOL);
				State = 3873;
				Match(PATH_SYMBOL);
				State = 3874;
				textStringLiteral();
				State = 3875;
				columnsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnEmptyOrErrorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OnEmptyContext onEmpty() {
			return GetRuleContext<OnEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnErrorContext onError() {
			return GetRuleContext<OnErrorContext>(0);
		}
		public OnEmptyOrErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onEmptyOrError; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnEmptyOrError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnEmptyOrError(this);
		}
	}

	[RuleVersion(0)]
	public OnEmptyOrErrorContext onEmptyOrError() {
		OnEmptyOrErrorContext _localctx = new OnEmptyOrErrorContext(Context, State);
		EnterRule(_localctx, 422, RULE_onEmptyOrError);
		int _la;
		try {
			State = 3884;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3879;
				onEmpty();
				State = 3881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					State = 3880;
					onError();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3883;
				onError();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnEmptyOrErrorJsonTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OnEmptyOrErrorContext onEmptyOrError() {
			return GetRuleContext<OnEmptyOrErrorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnErrorContext onError() {
			return GetRuleContext<OnErrorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnEmptyContext onEmpty() {
			return GetRuleContext<OnEmptyContext>(0);
		}
		public OnEmptyOrErrorJsonTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onEmptyOrErrorJsonTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnEmptyOrErrorJsonTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnEmptyOrErrorJsonTable(this);
		}
	}

	[RuleVersion(0)]
	public OnEmptyOrErrorJsonTableContext onEmptyOrErrorJsonTable() {
		OnEmptyOrErrorJsonTableContext _localctx = new OnEmptyOrErrorJsonTableContext(Context, State);
		EnterRule(_localctx, 424, RULE_onEmptyOrErrorJsonTable);
		try {
			State = 3890;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,385,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3886;
				onEmptyOrError();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3887;
				onError();
				State = 3888;
				onEmpty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonOnResponseContext jsonOnResponse() {
			return GetRuleContext<JsonOnResponseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_SYMBOL() { return GetToken(MySQLParser.EMPTY_SYMBOL, 0); }
		public OnEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnEmpty(this);
		}
	}

	[RuleVersion(0)]
	public OnEmptyContext onEmpty() {
		OnEmptyContext _localctx = new OnEmptyContext(Context, State);
		EnterRule(_localctx, 426, RULE_onEmpty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3892;
			jsonOnResponse();
			State = 3893;
			Match(ON_SYMBOL);
			State = 3894;
			Match(EMPTY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonOnResponseContext jsonOnResponse() {
			return GetRuleContext<JsonOnResponseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		public OnErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onError; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnError(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorContext onError() {
		OnErrorContext _localctx = new OnErrorContext(Context, State);
		EnterRule(_localctx, 428, RULE_onError);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3896;
			jsonOnResponse();
			State = 3897;
			Match(ON_SYMBOL);
			State = 3898;
			Match(ERROR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOnResponseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public JsonOnResponseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOnResponse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJsonOnResponse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJsonOnResponse(this);
		}
	}

	[RuleVersion(0)]
	public JsonOnResponseContext jsonOnResponse() {
		JsonOnResponseContext _localctx = new JsonOnResponseContext(Context, State);
		EnterRule(_localctx, 430, RULE_jsonOnResponse);
		try {
			State = 3904;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ERROR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3900;
				Match(ERROR_SYMBOL);
				}
				break;
			case NULL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3901;
				Match(NULL_SYMBOL);
				}
				break;
			case DEFAULT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3902;
				Match(DEFAULT_SYMBOL);
				State = 3903;
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public UnionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUnionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUnionOption(this);
		}
	}

	[RuleVersion(0)]
	public UnionOptionContext unionOption() {
		UnionOptionContext _localctx = new UnionOptionContext(Context, State);
		EnterRule(_localctx, 432, RULE_unionOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3906;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableAlias(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasContext tableAlias() {
		TableAliasContext _localctx = new TableAliasContext(Context, State);
		EnterRule(_localctx, 434, RULE_tableAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,387,Context) ) {
			case 1:
				{
				State = 3908;
				Match(AS_SYMBOL);
				}
				break;
			case 2:
				{
				State = 3909;
				if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				State = 3910;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 3913;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext[] indexHint() {
			return GetRuleContexts<IndexHintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext indexHint(int i) {
			return GetRuleContext<IndexHintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IndexHintListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexHintList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexHintList(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintListContext indexHintList() {
		IndexHintListContext _localctx = new IndexHintListContext(Context, State);
		EnterRule(_localctx, 436, RULE_indexHintList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3915;
			indexHint();
			State = 3920;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,388,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3916;
					Match(COMMA_SYMBOL);
					State = 3917;
					indexHint();
					}
					} 
				}
				State = 3922;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,388,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintTypeContext indexHintType() {
			return GetRuleContext<IndexHintTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexListContext indexList() {
			return GetRuleContext<IndexListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintClauseContext indexHintClause() {
			return GetRuleContext<IndexHintClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_SYMBOL() { return GetToken(MySQLParser.USE_SYMBOL, 0); }
		public IndexHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexHint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexHint(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintContext indexHint() {
		IndexHintContext _localctx = new IndexHintContext(Context, State);
		EnterRule(_localctx, 438, RULE_indexHint);
		int _la;
		try {
			State = 3943;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCE_SYMBOL:
			case IGNORE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3923;
				indexHintType();
				State = 3924;
				keyOrIndex();
				State = 3926;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 3925;
					indexHintClause();
					}
				}

				State = 3928;
				Match(OPEN_PAR_SYMBOL);
				State = 3929;
				indexList();
				State = 3930;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case USE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3932;
				Match(USE_SYMBOL);
				State = 3933;
				keyOrIndex();
				State = 3935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 3934;
					indexHintClause();
					}
				}

				State = 3937;
				Match(OPEN_PAR_SYMBOL);
				State = 3939;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,391,Context) ) {
				case 1:
					{
					State = 3938;
					indexList();
					}
					break;
				}
				State = 3941;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_SYMBOL() { return GetToken(MySQLParser.FORCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexHintType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexHintType(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintTypeContext indexHintType() {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(Context, State);
		EnterRule(_localctx, 440, RULE_indexHintType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3945;
			_la = TokenStream.LA(1);
			if ( !(_la==FORCE_SYMBOL || _la==IGNORE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyOrIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public KeyOrIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyOrIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyOrIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyOrIndex(this);
		}
	}

	[RuleVersion(0)]
	public KeyOrIndexContext keyOrIndex() {
		KeyOrIndexContext _localctx = new KeyOrIndexContext(Context, State);
		EnterRule(_localctx, 442, RULE_keyOrIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3947;
			_la = TokenStream.LA(1);
			if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintKeyTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		public ConstraintKeyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintKeyType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintKeyType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintKeyType(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintKeyTypeContext constraintKeyType() {
		ConstraintKeyTypeContext _localctx = new ConstraintKeyTypeContext(Context, State);
		EnterRule(_localctx, 444, RULE_constraintKeyType);
		int _la;
		try {
			State = 3955;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3949;
				Match(PRIMARY_SYMBOL);
				State = 3950;
				Match(KEY_SYMBOL);
				}
				break;
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3951;
				Match(UNIQUE_SYMBOL);
				State = 3953;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					State = 3952;
					keyOrIndex();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_SYMBOL() { return GetToken(MySQLParser.ORDER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IndexHintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexHintClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexHintClause(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintClauseContext indexHintClause() {
		IndexHintClauseContext _localctx = new IndexHintClauseContext(Context, State);
		EnterRule(_localctx, 446, RULE_indexHintClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3957;
			Match(FOR_SYMBOL);
			State = 3963;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JOIN_SYMBOL:
				{
				State = 3958;
				Match(JOIN_SYMBOL);
				}
				break;
			case ORDER_SYMBOL:
				{
				State = 3959;
				Match(ORDER_SYMBOL);
				State = 3960;
				Match(BY_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				State = 3961;
				Match(GROUP_SYMBOL);
				State = 3962;
				Match(BY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexListElementContext[] indexListElement() {
			return GetRuleContexts<IndexListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexListElementContext indexListElement(int i) {
			return GetRuleContext<IndexListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IndexListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexList(this);
		}
	}

	[RuleVersion(0)]
	public IndexListContext indexList() {
		IndexListContext _localctx = new IndexListContext(Context, State);
		EnterRule(_localctx, 448, RULE_indexList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3965;
			indexListElement();
			State = 3970;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3966;
				Match(COMMA_SYMBOL);
				State = 3967;
				indexListElement();
				}
				}
				State = 3972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexListElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public IndexListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexListElement(this);
		}
	}

	[RuleVersion(0)]
	public IndexListElementContext indexListElement() {
		IndexListElementContext _localctx = new IndexListElementContext(Context, State);
		EnterRule(_localctx, 450, RULE_indexListElement);
		try {
			State = 3975;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,397,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3973;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3974;
				Match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLimitClauseContext simpleLimitClause() {
			return GetRuleContext<SimpleLimitClauseContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUpdateStatement(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 452, RULE_updateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				State = 3977;
				withClause();
				}
			}

			State = 3980;
			Match(UPDATE_SYMBOL);
			State = 3982;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,399,Context) ) {
			case 1:
				{
				State = 3981;
				Match(LOW_PRIORITY_SYMBOL);
				}
				break;
			}
			State = 3985;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,400,Context) ) {
			case 1:
				{
				State = 3984;
				Match(IGNORE_SYMBOL);
				}
				break;
			}
			State = 3987;
			tableReferenceList();
			State = 3988;
			Match(SET_SYMBOL);
			State = 3989;
			updateList();
			State = 3991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_SYMBOL) {
				{
				State = 3990;
				whereClause();
				}
			}

			State = 3994;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				State = 3993;
				orderClause();
				}
			}

			State = 3997;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 3996;
				simpleLimitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionOrLockingStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TransactionStatementContext transactionStatement() {
			return GetRuleContext<TransactionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SavepointStatementContext savepointStatement() {
			return GetRuleContext<SavepointStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockStatementContext lockStatement() {
			return GetRuleContext<LockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaStatementContext xaStatement() {
			return GetRuleContext<XaStatementContext>(0);
		}
		public TransactionOrLockingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionOrLockingStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionOrLockingStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionOrLockingStatement(this);
		}
	}

	[RuleVersion(0)]
	public TransactionOrLockingStatementContext transactionOrLockingStatement() {
		TransactionOrLockingStatementContext _localctx = new TransactionOrLockingStatementContext(Context, State);
		EnterRule(_localctx, 454, RULE_transactionOrLockingStatement);
		try {
			State = 4003;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMIT_SYMBOL:
			case START_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3999;
				transactionStatement();
				}
				break;
			case RELEASE_SYMBOL:
			case ROLLBACK_SYMBOL:
			case SAVEPOINT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4000;
				savepointStatement();
				}
				break;
			case LOCK_SYMBOL:
			case UNLOCK_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4001;
				lockStatement();
				}
				break;
			case XA_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4002;
				xaStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StartTransactionOptionListContext[] startTransactionOptionList() {
			return GetRuleContexts<StartTransactionOptionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartTransactionOptionListContext startTransactionOptionList(int i) {
			return GetRuleContext<StartTransactionOptionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySQLParser.COMMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySQLParser.CHAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE_SYMBOL() { return GetToken(MySQLParser.RELEASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO_SYMBOL() { return GetTokens(MySQLParser.NO_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL(int i) {
			return GetToken(MySQLParser.NO_SYMBOL, i);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionStatement(this);
		}
	}

	[RuleVersion(0)]
	public TransactionStatementContext transactionStatement() {
		TransactionStatementContext _localctx = new TransactionStatementContext(Context, State);
		EnterRule(_localctx, 456, RULE_transactionStatement);
		int _la;
		try {
			State = 4030;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case START_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4005;
				Match(START_SYMBOL);
				State = 4006;
				Match(TRANSACTION_SYMBOL);
				State = 4010;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==READ_SYMBOL || _la==WITH_SYMBOL) {
					{
					{
					State = 4007;
					startTransactionOptionList();
					}
					}
					State = 4012;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case COMMIT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4013;
				Match(COMMIT_SYMBOL);
				State = 4015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					State = 4014;
					Match(WORK_SYMBOL);
					}
				}

				State = 4022;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND_SYMBOL) {
					{
					State = 4017;
					Match(AND_SYMBOL);
					State = 4019;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL) {
						{
						State = 4018;
						Match(NO_SYMBOL);
						}
					}

					State = 4021;
					Match(CHAIN_SYMBOL);
					}
				}

				State = 4028;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
					{
					State = 4025;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL) {
						{
						State = 4024;
						Match(NO_SYMBOL);
						}
					}

					State = 4027;
					Match(RELEASE_SYMBOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterBeginWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitBeginWork(this);
		}
	}

	[RuleVersion(0)]
	public BeginWorkContext beginWork() {
		BeginWorkContext _localctx = new BeginWorkContext(Context, State);
		EnterRule(_localctx, 458, RULE_beginWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4032;
			Match(BEGIN_SYMBOL);
			State = 4034;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK_SYMBOL) {
				{
				State = 4033;
				Match(WORK_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartTransactionOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE_SYMBOL() { return GetToken(MySQLParser.WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY_SYMBOL() { return GetToken(MySQLParser.ONLY_SYMBOL, 0); }
		public StartTransactionOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startTransactionOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStartTransactionOptionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStartTransactionOptionList(this);
		}
	}

	[RuleVersion(0)]
	public StartTransactionOptionListContext startTransactionOptionList() {
		StartTransactionOptionListContext _localctx = new StartTransactionOptionListContext(Context, State);
		EnterRule(_localctx, 460, RULE_startTransactionOptionList);
		int _la;
		try {
			State = 4041;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4036;
				Match(WITH_SYMBOL);
				State = 4037;
				Match(CONSISTENT_SYMBOL);
				State = 4038;
				Match(SNAPSHOT_SYMBOL);
				}
				break;
			case READ_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4039;
				Match(READ_SYMBOL);
				State = 4040;
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepointStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySQLParser.CHAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE_SYMBOL() { return GetToken(MySQLParser.RELEASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO_SYMBOL() { return GetTokens(MySQLParser.NO_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL(int i) {
			return GetToken(MySQLParser.NO_SYMBOL, i);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepointStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSavepointStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSavepointStatement(this);
		}
	}

	[RuleVersion(0)]
	public SavepointStatementContext savepointStatement() {
		SavepointStatementContext _localctx = new SavepointStatementContext(Context, State);
		EnterRule(_localctx, 462, RULE_savepointStatement);
		int _la;
		try {
			State = 4072;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SAVEPOINT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4043;
				Match(SAVEPOINT_SYMBOL);
				State = 4044;
				identifier();
				}
				break;
			case ROLLBACK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4045;
				Match(ROLLBACK_SYMBOL);
				State = 4047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					State = 4046;
					Match(WORK_SYMBOL);
					}
				}

				State = 4067;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TO_SYMBOL:
					{
					State = 4049;
					Match(TO_SYMBOL);
					State = 4051;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,415,Context) ) {
					case 1:
						{
						State = 4050;
						Match(SAVEPOINT_SYMBOL);
						}
						break;
					}
					State = 4053;
					identifier();
					}
					break;
				case Eof:
				case SEMICOLON_SYMBOL:
				case AND_SYMBOL:
				case NO_SYMBOL:
				case RELEASE_SYMBOL:
					{
					State = 4059;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND_SYMBOL) {
						{
						State = 4054;
						Match(AND_SYMBOL);
						State = 4056;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NO_SYMBOL) {
							{
							State = 4055;
							Match(NO_SYMBOL);
							}
						}

						State = 4058;
						Match(CHAIN_SYMBOL);
						}
					}

					State = 4065;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
						{
						State = 4062;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NO_SYMBOL) {
							{
							State = 4061;
							Match(NO_SYMBOL);
							}
						}

						State = 4064;
						Match(RELEASE_SYMBOL);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RELEASE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4069;
				Match(RELEASE_SYMBOL);
				State = 4070;
				Match(SAVEPOINT_SYMBOL);
				State = 4071;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockItemContext[] lockItem() {
			return GetRuleContexts<LockItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockItemContext lockItem(int i) {
			return GetRuleContext<LockItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySQLParser.BACKUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK_SYMBOL() { return GetToken(MySQLParser.UNLOCK_SYMBOL, 0); }
		public LockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockStatement(this);
		}
	}

	[RuleVersion(0)]
	public LockStatementContext lockStatement() {
		LockStatementContext _localctx = new LockStatementContext(Context, State);
		EnterRule(_localctx, 464, RULE_lockStatement);
		int _la;
		try {
			State = 4090;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,423,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4074;
				Match(LOCK_SYMBOL);
				State = 4075;
				_la = TokenStream.LA(1);
				if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4076;
				lockItem();
				State = 4081;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 4077;
					Match(COMMA_SYMBOL);
					State = 4078;
					lockItem();
					}
					}
					State = 4083;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4084;
				Match(LOCK_SYMBOL);
				State = 4085;
				Match(INSTANCE_SYMBOL);
				State = 4086;
				Match(FOR_SYMBOL);
				State = 4087;
				Match(BACKUP_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4088;
				Match(UNLOCK_SYMBOL);
				State = 4089;
				_la = TokenStream.LA(1);
				if ( !(_la==INSTANCE_SYMBOL || _la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockOptionContext lockOption() {
			return GetRuleContext<LockOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public LockItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockItem(this);
		}
	}

	[RuleVersion(0)]
	public LockItemContext lockItem() {
		LockItemContext _localctx = new LockItemContext(Context, State);
		EnterRule(_localctx, 466, RULE_lockItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4092;
			tableRef();
			State = 4094;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,424,Context) ) {
			case 1:
				{
				State = 4093;
				tableAlias();
				}
				break;
			}
			State = 4096;
			lockOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE_SYMBOL() { return GetToken(MySQLParser.WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public LockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockOption(this);
		}
	}

	[RuleVersion(0)]
	public LockOptionContext lockOption() {
		LockOptionContext _localctx = new LockOptionContext(Context, State);
		EnterRule(_localctx, 468, RULE_lockOption);
		int _la;
		try {
			State = 4106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4098;
				Match(READ_SYMBOL);
				State = 4100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL) {
					{
					State = 4099;
					Match(LOCAL_SYMBOL);
					}
				}

				}
				break;
			case LOW_PRIORITY_SYMBOL:
			case WRITE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOW_PRIORITY_SYMBOL) {
					{
					State = 4102;
					Match(LOW_PRIORITY_SYMBOL);
					}
				}

				State = 4105;
				Match(WRITE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_SYMBOL() { return GetToken(MySQLParser.XA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySQLParser.PREPARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySQLParser.COMMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySQLParser.RECOVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_SYMBOL() { return GetToken(MySQLParser.ONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE_SYMBOL() { return GetToken(MySQLParser.PHASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XaConvertContext xaConvert() {
			return GetRuleContext<XaConvertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME_SYMBOL() { return GetToken(MySQLParser.RESUME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public XaStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterXaStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitXaStatement(this);
		}
	}

	[RuleVersion(0)]
	public XaStatementContext xaStatement() {
		XaStatementContext _localctx = new XaStatementContext(Context, State);
		EnterRule(_localctx, 470, RULE_xaStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4108;
			Match(XA_SYMBOL);
			State = 4137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN_SYMBOL:
			case START_SYMBOL:
				{
				State = 4109;
				_la = TokenStream.LA(1);
				if ( !(_la==BEGIN_SYMBOL || _la==START_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4110;
				xid();
				State = 4112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==JOIN_SYMBOL || _la==RESUME_SYMBOL) {
					{
					State = 4111;
					_la = TokenStream.LA(1);
					if ( !(_la==JOIN_SYMBOL || _la==RESUME_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case END_SYMBOL:
				{
				State = 4114;
				Match(END_SYMBOL);
				State = 4115;
				xid();
				State = 4121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUSPEND_SYMBOL) {
					{
					State = 4116;
					Match(SUSPEND_SYMBOL);
					State = 4119;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FOR_SYMBOL) {
						{
						State = 4117;
						Match(FOR_SYMBOL);
						State = 4118;
						Match(MIGRATE_SYMBOL);
						}
					}

					}
				}

				}
				break;
			case PREPARE_SYMBOL:
				{
				State = 4123;
				Match(PREPARE_SYMBOL);
				State = 4124;
				xid();
				}
				break;
			case COMMIT_SYMBOL:
				{
				State = 4125;
				Match(COMMIT_SYMBOL);
				State = 4126;
				xid();
				State = 4129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ONE_SYMBOL) {
					{
					State = 4127;
					Match(ONE_SYMBOL);
					State = 4128;
					Match(PHASE_SYMBOL);
					}
				}

				}
				break;
			case ROLLBACK_SYMBOL:
				{
				State = 4131;
				Match(ROLLBACK_SYMBOL);
				State = 4132;
				xid();
				}
				break;
			case RECOVER_SYMBOL:
				{
				State = 4133;
				Match(RECOVER_SYMBOL);
				State = 4135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONVERT_SYMBOL) {
					{
					State = 4134;
					xaConvert();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaConvertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySQLParser.CONVERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XID_SYMBOL() { return GetToken(MySQLParser.XID_SYMBOL, 0); }
		public XaConvertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaConvert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterXaConvert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitXaConvert(this);
		}
	}

	[RuleVersion(0)]
	public XaConvertContext xaConvert() {
		XaConvertContext _localctx = new XaConvertContext(Context, State);
		EnterRule(_localctx, 472, RULE_xaConvert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4139;
			Match(CONVERT_SYMBOL);
			State = 4140;
			Match(XID_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public XidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterXid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitXid(this);
		}
	}

	[RuleVersion(0)]
	public XidContext xid() {
		XidContext _localctx = new XidContext(Context, State);
		EnterRule(_localctx, 474, RULE_xid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4142;
			textString();
			State = 4149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				State = 4143;
				Match(COMMA_SYMBOL);
				State = 4144;
				textString();
				State = 4147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 4145;
					Match(COMMA_SYMBOL);
					State = 4146;
					ulong_number();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURGE_SYMBOL() { return GetToken(MySQLParser.PURGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PurgeOptionsContext purgeOptions() {
			return GetRuleContext<PurgeOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeSourceContext changeSource() {
			return GetRuleContext<ChangeSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET_SYMBOL() { return GetToken(MySQLParser.RESET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResetOptionContext[] resetOption() {
			return GetRuleContexts<ResetOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetOptionContext resetOption(int i) {
			return GetRuleContext<ResetOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySQLParser.PERSIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsIdentifierContext ifExistsIdentifier() {
			return GetRuleContext<IfExistsIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartReplicaStatementContext startReplicaStatement() {
			return GetRuleContext<StartReplicaStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopReplicaStatementContext stopReplicaStatement() {
			return GetRuleContext<StopReplicaStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationContext changeReplication() {
			return GetRuleContext<ChangeReplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationLoadContext replicationLoad() {
			return GetRuleContext<ReplicationLoadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationContext groupReplication() {
			return GetRuleContext<GroupReplicationContext>(0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplicationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplicationStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationStatementContext replicationStatement() {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(Context, State);
		EnterRule(_localctx, 476, RULE_replicationStatement);
		int _la;
		try {
			State = 4173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,438,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4151;
				Match(PURGE_SYMBOL);
				State = 4152;
				purgeOptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4153;
				changeSource();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4154;
				Match(RESET_SYMBOL);
				State = 4155;
				resetOption();
				State = 4160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 4156;
					Match(COMMA_SYMBOL);
					State = 4157;
					resetOption();
					}
					}
					State = 4162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4163;
				Match(RESET_SYMBOL);
				State = 4164;
				Match(PERSIST_SYMBOL);
				State = 4166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF_SYMBOL) {
					{
					State = 4165;
					ifExistsIdentifier();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4168;
				startReplicaStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4169;
				stopReplicaStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4170;
				changeReplication();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4171;
				replicationLoad();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4172;
				groupReplication();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurgeOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE_SYMBOL() { return GetToken(MySQLParser.BEFORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PurgeOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purgeOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPurgeOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPurgeOptions(this);
		}
	}

	[RuleVersion(0)]
	public PurgeOptionsContext purgeOptions() {
		PurgeOptionsContext _localctx = new PurgeOptionsContext(Context, State);
		EnterRule(_localctx, 478, RULE_purgeOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4175;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY_SYMBOL || _la==MASTER_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4176;
			Match(LOGS_SYMBOL);
			State = 4181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO_SYMBOL:
				{
				State = 4177;
				Match(TO_SYMBOL);
				State = 4178;
				textLiteral();
				}
				break;
			case BEFORE_SYMBOL:
				{
				State = 4179;
				Match(BEFORE_SYMBOL);
				State = 4180;
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MasterOrBinaryLogsAndGtidsContext masterOrBinaryLogsAndGtids() {
			return GetRuleContext<MasterOrBinaryLogsAndGtidsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceResetOptionsContext sourceResetOptions() {
			return GetRuleContext<SourceResetOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ResetOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResetOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResetOption(this);
		}
	}

	[RuleVersion(0)]
	public ResetOptionContext resetOption() {
		ResetOptionContext _localctx = new ResetOptionContext(Context, State);
		EnterRule(_localctx, 480, RULE_resetOption);
		int _la;
		try {
			State = 4194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4183;
				masterOrBinaryLogsAndGtids();
				State = 4185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO_SYMBOL) {
					{
					State = 4184;
					sourceResetOptions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4187;
				replica();
				State = 4189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_SYMBOL) {
					{
					State = 4188;
					Match(ALL_SYMBOL);
					}
				}

				State = 4192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 4191;
					channel();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterOrBinaryLogsAndGtidsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTIDS_SYMBOL() { return GetToken(MySQLParser.GTIDS_SYMBOL, 0); }
		public MasterOrBinaryLogsAndGtidsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterOrBinaryLogsAndGtids; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterMasterOrBinaryLogsAndGtids(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitMasterOrBinaryLogsAndGtids(this);
		}
	}

	[RuleVersion(0)]
	public MasterOrBinaryLogsAndGtidsContext masterOrBinaryLogsAndGtids() {
		MasterOrBinaryLogsAndGtidsContext _localctx = new MasterOrBinaryLogsAndGtidsContext(Context, State);
		EnterRule(_localctx, 482, RULE_masterOrBinaryLogsAndGtids);
		try {
			State = 4202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,444,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4196;
				Match(MASTER_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4197;
				if (!(this.isServerVersionGe80032())) throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
				State = 4198;
				Match(BINARY_SYMBOL);
				State = 4199;
				Match(LOGS_SYMBOL);
				State = 4200;
				Match(AND_SYMBOL);
				State = 4201;
				Match(GTIDS_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceResetOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public SourceResetOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceResetOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSourceResetOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSourceResetOptions(this);
		}
	}

	[RuleVersion(0)]
	public SourceResetOptionsContext sourceResetOptions() {
		SourceResetOptionsContext _localctx = new SourceResetOptionsContext(Context, State);
		EnterRule(_localctx, 484, RULE_sourceResetOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4204;
			Match(TO_SYMBOL);
			State = 4205;
			real_ulonglong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationLoadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD_SYMBOL() { return GetToken(MySQLParser.LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ReplicationLoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationLoad; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplicationLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplicationLoad(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationLoadContext replicationLoad() {
		ReplicationLoadContext _localctx = new ReplicationLoadContext(Context, State);
		EnterRule(_localctx, 486, RULE_replicationLoad);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4207;
			Match(LOAD_SYMBOL);
			State = 4211;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATA_SYMBOL:
				{
				State = 4208;
				Match(DATA_SYMBOL);
				}
				break;
			case TABLE_SYMBOL:
				{
				State = 4209;
				Match(TABLE_SYMBOL);
				State = 4210;
				tableRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4213;
			Match(FROM_SYMBOL);
			State = 4214;
			Match(MASTER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public ChangeReplicationSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSource(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceContext changeReplicationSource() {
		ChangeReplicationSourceContext _localctx = new ChangeReplicationSourceContext(Context, State);
		EnterRule(_localctx, 488, RULE_changeReplicationSource);
		try {
			State = 4220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,446,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4216;
				Match(MASTER_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4217;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 4218;
				Match(REPLICATION_SYMBOL);
				State = 4219;
				Match(SOURCE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySQLParser.CHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceContext changeReplicationSource() {
			return GetRuleContext<ChangeReplicationSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceDefinitionsContext sourceDefinitions() {
			return GetRuleContext<SourceDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ChangeSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeSource(this);
		}
	}

	[RuleVersion(0)]
	public ChangeSourceContext changeSource() {
		ChangeSourceContext _localctx = new ChangeSourceContext(Context, State);
		EnterRule(_localctx, 490, RULE_changeSource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4222;
			Match(CHANGE_SYMBOL);
			State = 4223;
			changeReplicationSource();
			State = 4224;
			Match(TO_SYMBOL);
			State = 4225;
			sourceDefinitions();
			State = 4227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 4226;
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceDefinitionContext[] sourceDefinition() {
			return GetRuleContexts<SourceDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceDefinitionContext sourceDefinition(int i) {
			return GetRuleContext<SourceDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SourceDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSourceDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSourceDefinitions(this);
		}
	}

	[RuleVersion(0)]
	public SourceDefinitionsContext sourceDefinitions() {
		SourceDefinitionsContext _localctx = new SourceDefinitionsContext(Context, State);
		EnterRule(_localctx, 492, RULE_sourceDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4229;
			sourceDefinition();
			State = 4234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4230;
				Match(COMMA_SYMBOL);
				State = 4231;
				sourceDefinition();
				}
				}
				State = 4236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceHostContext changeReplicationSourceHost() {
			return GetRuleContext<ChangeReplicationSourceHostContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NETWORK_NAMESPACE_SYMBOL() { return GetToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceBindContext changeReplicationSourceBind() {
			return GetRuleContext<ChangeReplicationSourceBindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceUserContext changeReplicationSourceUser() {
			return GetRuleContext<ChangeReplicationSourceUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourcePasswordContext changeReplicationSourcePassword() {
			return GetRuleContext<ChangeReplicationSourcePasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourcePortContext changeReplicationSourcePort() {
			return GetRuleContext<ChangeReplicationSourcePortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceConnectRetryContext changeReplicationSourceConnectRetry() {
			return GetRuleContext<ChangeReplicationSourceConnectRetryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceRetryCountContext changeReplicationSourceRetryCount() {
			return GetRuleContext<ChangeReplicationSourceRetryCountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceDelayContext changeReplicationSourceDelay() {
			return GetRuleContext<ChangeReplicationSourceDelayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLContext changeReplicationSourceSSL() {
			return GetRuleContext<ChangeReplicationSourceSSLContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLCAContext changeReplicationSourceSSLCA() {
			return GetRuleContext<ChangeReplicationSourceSSLCAContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLCApathContext changeReplicationSourceSSLCApath() {
			return GetRuleContext<ChangeReplicationSourceSSLCApathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceTLSVersionContext changeReplicationSourceTLSVersion() {
			return GetRuleContext<ChangeReplicationSourceTLSVersionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLCertContext changeReplicationSourceSSLCert() {
			return GetRuleContext<ChangeReplicationSourceSSLCertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceTLSCiphersuitesContext changeReplicationSourceTLSCiphersuites() {
			return GetRuleContext<ChangeReplicationSourceTLSCiphersuitesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceTlsCiphersuitesDefContext sourceTlsCiphersuitesDef() {
			return GetRuleContext<SourceTlsCiphersuitesDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLCipherContext changeReplicationSourceSSLCipher() {
			return GetRuleContext<ChangeReplicationSourceSSLCipherContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLKeyContext changeReplicationSourceSSLKey() {
			return GetRuleContext<ChangeReplicationSourceSSLKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLVerifyServerCertContext changeReplicationSourceSSLVerifyServerCert() {
			return GetRuleContext<ChangeReplicationSourceSSLVerifyServerCertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLCLRContext changeReplicationSourceSSLCLR() {
			return GetRuleContext<ChangeReplicationSourceSSLCLRContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLCLRpathContext changeReplicationSourceSSLCLRpath() {
			return GetRuleContext<ChangeReplicationSourceSSLCLRpathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourcePublicKeyContext changeReplicationSourcePublicKey() {
			return GetRuleContext<ChangeReplicationSourcePublicKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceGetSourcePublicKeyContext changeReplicationSourceGetSourcePublicKey() {
			return GetRuleContext<ChangeReplicationSourceGetSourcePublicKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceHeartbeatPeriodContext changeReplicationSourceHeartbeatPeriod() {
			return GetRuleContext<ChangeReplicationSourceHeartbeatPeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerIdListContext serverIdList() {
			return GetRuleContext<ServerIdListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceCompressionAlgorithmContext changeReplicationSourceCompressionAlgorithm() {
			return GetRuleContext<ChangeReplicationSourceCompressionAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceZstdCompressionLevelContext changeReplicationSourceZstdCompressionLevel() {
			return GetRuleContext<ChangeReplicationSourceZstdCompressionLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceAutoPositionContext changeReplicationSourceAutoPosition() {
			return GetRuleContext<ChangeReplicationSourceAutoPositionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return GetToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeCheckDefContext privilegeCheckDef() {
			return GetRuleContext<PrivilegeCheckDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_ROW_FORMAT_SYMBOL() { return GetToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() { return GetToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePrimaryKeyCheckDefContext tablePrimaryKeyCheckDef() {
			return GetRuleContext<TablePrimaryKeyCheckDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL() { return GetToken(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL() { return GetToken(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignGtidsToAnonymousTransactionsDefinitionContext assignGtidsToAnonymousTransactionsDefinition() {
			return GetRuleContext<AssignGtidsToAnonymousTransactionsDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTID_ONLY_SYMBOL() { return GetToken(MySQLParser.GTID_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceFileDefContext sourceFileDef() {
			return GetRuleContext<SourceFileDefContext>(0);
		}
		public SourceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSourceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSourceDefinition(this);
		}
	}

	[RuleVersion(0)]
	public SourceDefinitionContext sourceDefinition() {
		SourceDefinitionContext _localctx = new SourceDefinitionContext(Context, State);
		EnterRule(_localctx, 494, RULE_sourceDefinition);
		try {
			State = 4365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,449,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4237;
				changeReplicationSourceHost();
				State = 4238;
				Match(EQUAL_OPERATOR);
				State = 4239;
				textStringNoLinebreak();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4241;
				Match(NETWORK_NAMESPACE_SYMBOL);
				State = 4242;
				Match(EQUAL_OPERATOR);
				State = 4243;
				textStringNoLinebreak();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4244;
				changeReplicationSourceBind();
				State = 4245;
				Match(EQUAL_OPERATOR);
				State = 4246;
				textStringNoLinebreak();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4248;
				changeReplicationSourceUser();
				State = 4249;
				Match(EQUAL_OPERATOR);
				State = 4250;
				textStringNoLinebreak();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4252;
				changeReplicationSourcePassword();
				State = 4253;
				Match(EQUAL_OPERATOR);
				State = 4254;
				textStringNoLinebreak();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4256;
				changeReplicationSourcePort();
				State = 4257;
				Match(EQUAL_OPERATOR);
				State = 4258;
				ulong_number();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4260;
				changeReplicationSourceConnectRetry();
				State = 4261;
				Match(EQUAL_OPERATOR);
				State = 4262;
				ulong_number();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4264;
				changeReplicationSourceRetryCount();
				State = 4265;
				Match(EQUAL_OPERATOR);
				State = 4266;
				ulong_number();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4268;
				changeReplicationSourceDelay();
				State = 4269;
				Match(EQUAL_OPERATOR);
				State = 4270;
				ulong_number();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4272;
				changeReplicationSourceSSL();
				State = 4273;
				Match(EQUAL_OPERATOR);
				State = 4274;
				ulong_number();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4276;
				changeReplicationSourceSSLCA();
				State = 4277;
				Match(EQUAL_OPERATOR);
				State = 4278;
				textStringNoLinebreak();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4280;
				changeReplicationSourceSSLCApath();
				State = 4281;
				Match(EQUAL_OPERATOR);
				State = 4282;
				textStringNoLinebreak();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4284;
				changeReplicationSourceTLSVersion();
				State = 4285;
				Match(EQUAL_OPERATOR);
				State = 4286;
				textStringNoLinebreak();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4288;
				changeReplicationSourceSSLCert();
				State = 4289;
				Match(EQUAL_OPERATOR);
				State = 4290;
				textStringNoLinebreak();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4292;
				changeReplicationSourceTLSCiphersuites();
				State = 4293;
				Match(EQUAL_OPERATOR);
				State = 4294;
				sourceTlsCiphersuitesDef();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4296;
				changeReplicationSourceSSLCipher();
				State = 4297;
				Match(EQUAL_OPERATOR);
				State = 4298;
				textStringNoLinebreak();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 4300;
				changeReplicationSourceSSLKey();
				State = 4301;
				Match(EQUAL_OPERATOR);
				State = 4302;
				textStringNoLinebreak();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 4304;
				changeReplicationSourceSSLVerifyServerCert();
				State = 4305;
				Match(EQUAL_OPERATOR);
				State = 4306;
				ulong_number();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 4308;
				changeReplicationSourceSSLCLR();
				State = 4309;
				Match(EQUAL_OPERATOR);
				State = 4310;
				textLiteral();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 4312;
				changeReplicationSourceSSLCLRpath();
				State = 4313;
				Match(EQUAL_OPERATOR);
				State = 4314;
				textStringNoLinebreak();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 4316;
				changeReplicationSourcePublicKey();
				State = 4317;
				Match(EQUAL_OPERATOR);
				State = 4318;
				textStringNoLinebreak();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 4320;
				changeReplicationSourceGetSourcePublicKey();
				State = 4321;
				Match(EQUAL_OPERATOR);
				State = 4322;
				ulong_number();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 4324;
				changeReplicationSourceHeartbeatPeriod();
				State = 4325;
				Match(EQUAL_OPERATOR);
				State = 4326;
				ulong_number();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 4328;
				Match(IGNORE_SERVER_IDS_SYMBOL);
				State = 4329;
				Match(EQUAL_OPERATOR);
				State = 4330;
				serverIdList();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 4331;
				changeReplicationSourceCompressionAlgorithm();
				State = 4332;
				Match(EQUAL_OPERATOR);
				State = 4333;
				textStringLiteral();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 4335;
				changeReplicationSourceZstdCompressionLevel();
				State = 4336;
				Match(EQUAL_OPERATOR);
				State = 4337;
				ulong_number();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 4339;
				changeReplicationSourceAutoPosition();
				State = 4340;
				Match(EQUAL_OPERATOR);
				State = 4341;
				ulong_number();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 4343;
				Match(PRIVILEGE_CHECKS_USER_SYMBOL);
				State = 4344;
				Match(EQUAL_OPERATOR);
				State = 4345;
				privilegeCheckDef();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 4346;
				Match(REQUIRE_ROW_FORMAT_SYMBOL);
				State = 4347;
				Match(EQUAL_OPERATOR);
				State = 4348;
				ulong_number();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 4349;
				Match(REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL);
				State = 4350;
				Match(EQUAL_OPERATOR);
				State = 4351;
				tablePrimaryKeyCheckDef();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 4352;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 4353;
				Match(SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL);
				State = 4354;
				Match(EQUAL_OPERATOR);
				State = 4355;
				real_ulong_number();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 4356;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 4357;
				Match(ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL);
				State = 4358;
				Match(EQUAL_OPERATOR);
				State = 4359;
				assignGtidsToAnonymousTransactionsDefinition();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 4360;
				if (!(this.isServerVersionGe80027())) throw new FailedPredicateException(this, "this.isServerVersionGe80027()");
				State = 4361;
				Match(GTID_ONLY_SYMBOL);
				State = 4362;
				Match(EQUAL_OPERATOR);
				State = 4363;
				real_ulong_number();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 4364;
				sourceFileDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceAutoPositionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_AUTO_POSITION_SYMBOL() { return GetToken(MySQLParser.SOURCE_AUTO_POSITION_SYMBOL, 0); }
		public ChangeReplicationSourceAutoPositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceAutoPosition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceAutoPosition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceAutoPosition(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceAutoPositionContext changeReplicationSourceAutoPosition() {
		ChangeReplicationSourceAutoPositionContext _localctx = new ChangeReplicationSourceAutoPositionContext(Context, State);
		EnterRule(_localctx, 496, RULE_changeReplicationSourceAutoPosition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4367;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_AUTO_POSITION_SYMBOL || _la==SOURCE_AUTO_POSITION_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceHostContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_HOST_SYMBOL() { return GetToken(MySQLParser.SOURCE_HOST_SYMBOL, 0); }
		public ChangeReplicationSourceHostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceHost; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceHost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceHost(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceHostContext changeReplicationSourceHost() {
		ChangeReplicationSourceHostContext _localctx = new ChangeReplicationSourceHostContext(Context, State);
		EnterRule(_localctx, 498, RULE_changeReplicationSourceHost);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4369;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_HOST_SYMBOL || _la==SOURCE_HOST_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceBindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_BIND_SYMBOL() { return GetToken(MySQLParser.MASTER_BIND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_BIND_SYMBOL() { return GetToken(MySQLParser.SOURCE_BIND_SYMBOL, 0); }
		public ChangeReplicationSourceBindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceBind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceBind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceBind(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceBindContext changeReplicationSourceBind() {
		ChangeReplicationSourceBindContext _localctx = new ChangeReplicationSourceBindContext(Context, State);
		EnterRule(_localctx, 500, RULE_changeReplicationSourceBind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4371;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_BIND_SYMBOL || _la==SOURCE_BIND_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_USER_SYMBOL() { return GetToken(MySQLParser.SOURCE_USER_SYMBOL, 0); }
		public ChangeReplicationSourceUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceUser(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceUserContext changeReplicationSourceUser() {
		ChangeReplicationSourceUserContext _localctx = new ChangeReplicationSourceUserContext(Context, State);
		EnterRule(_localctx, 502, RULE_changeReplicationSourceUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4373;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_USER_SYMBOL || _la==SOURCE_USER_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourcePasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_PASSWORD_SYMBOL() { return GetToken(MySQLParser.SOURCE_PASSWORD_SYMBOL, 0); }
		public ChangeReplicationSourcePasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourcePassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourcePassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourcePassword(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourcePasswordContext changeReplicationSourcePassword() {
		ChangeReplicationSourcePasswordContext _localctx = new ChangeReplicationSourcePasswordContext(Context, State);
		EnterRule(_localctx, 504, RULE_changeReplicationSourcePassword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4375;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_PASSWORD_SYMBOL || _la==SOURCE_PASSWORD_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourcePortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_PORT_SYMBOL() { return GetToken(MySQLParser.SOURCE_PORT_SYMBOL, 0); }
		public ChangeReplicationSourcePortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourcePort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourcePort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourcePort(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourcePortContext changeReplicationSourcePort() {
		ChangeReplicationSourcePortContext _localctx = new ChangeReplicationSourcePortContext(Context, State);
		EnterRule(_localctx, 506, RULE_changeReplicationSourcePort);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4377;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_PORT_SYMBOL || _la==SOURCE_PORT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceConnectRetryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_CONNECT_RETRY_SYMBOL() { return GetToken(MySQLParser.SOURCE_CONNECT_RETRY_SYMBOL, 0); }
		public ChangeReplicationSourceConnectRetryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceConnectRetry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceConnectRetry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceConnectRetry(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceConnectRetryContext changeReplicationSourceConnectRetry() {
		ChangeReplicationSourceConnectRetryContext _localctx = new ChangeReplicationSourceConnectRetryContext(Context, State);
		EnterRule(_localctx, 508, RULE_changeReplicationSourceConnectRetry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4379;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_CONNECT_RETRY_SYMBOL || _la==SOURCE_CONNECT_RETRY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceRetryCountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_RETRY_COUNT_SYMBOL() { return GetToken(MySQLParser.SOURCE_RETRY_COUNT_SYMBOL, 0); }
		public ChangeReplicationSourceRetryCountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceRetryCount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceRetryCount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceRetryCount(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceRetryCountContext changeReplicationSourceRetryCount() {
		ChangeReplicationSourceRetryCountContext _localctx = new ChangeReplicationSourceRetryCountContext(Context, State);
		EnterRule(_localctx, 510, RULE_changeReplicationSourceRetryCount);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4381;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_RETRY_COUNT_SYMBOL || _la==SOURCE_RETRY_COUNT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceDelayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_DELAY_SYMBOL() { return GetToken(MySQLParser.SOURCE_DELAY_SYMBOL, 0); }
		public ChangeReplicationSourceDelayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceDelay; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceDelay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceDelay(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceDelayContext changeReplicationSourceDelay() {
		ChangeReplicationSourceDelayContext _localctx = new ChangeReplicationSourceDelayContext(Context, State);
		EnterRule(_localctx, 512, RULE_changeReplicationSourceDelay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4383;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_DELAY_SYMBOL || _la==SOURCE_DELAY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_SYMBOL, 0); }
		public ChangeReplicationSourceSSLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSL; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSL(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLContext changeReplicationSourceSSL() {
		ChangeReplicationSourceSSLContext _localctx = new ChangeReplicationSourceSSLContext(Context, State);
		EnterRule(_localctx, 514, RULE_changeReplicationSourceSSL);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4385;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_SYMBOL || _la==SOURCE_SSL_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLCAContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CA_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_CA_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLCA; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLCA(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLCA(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLCAContext changeReplicationSourceSSLCA() {
		ChangeReplicationSourceSSLCAContext _localctx = new ChangeReplicationSourceSSLCAContext(Context, State);
		EnterRule(_localctx, 516, RULE_changeReplicationSourceSSLCA);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4387;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_CA_SYMBOL || _la==SOURCE_SSL_CA_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLCApathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CAPATH_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_CAPATH_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCApathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLCApath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLCApath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLCApath(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLCApathContext changeReplicationSourceSSLCApath() {
		ChangeReplicationSourceSSLCApathContext _localctx = new ChangeReplicationSourceSSLCApathContext(Context, State);
		EnterRule(_localctx, 518, RULE_changeReplicationSourceSSLCApath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4389;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_CAPATH_SYMBOL || _la==SOURCE_SSL_CAPATH_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLCipherContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CIPHER_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_CIPHER_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCipherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLCipher; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLCipher(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLCipher(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLCipherContext changeReplicationSourceSSLCipher() {
		ChangeReplicationSourceSSLCipherContext _localctx = new ChangeReplicationSourceSSLCipherContext(Context, State);
		EnterRule(_localctx, 520, RULE_changeReplicationSourceSSLCipher);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4391;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_CIPHER_SYMBOL || _la==SOURCE_SSL_CIPHER_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLCLRContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CRL_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_CRL_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCLRContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLCLR; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLCLR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLCLR(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLCLRContext changeReplicationSourceSSLCLR() {
		ChangeReplicationSourceSSLCLRContext _localctx = new ChangeReplicationSourceSSLCLRContext(Context, State);
		EnterRule(_localctx, 522, RULE_changeReplicationSourceSSLCLR);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4393;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_CRL_SYMBOL || _la==SOURCE_SSL_CRL_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLCLRpathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CRLPATH_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_CRLPATH_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCLRpathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLCLRpath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLCLRpath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLCLRpath(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLCLRpathContext changeReplicationSourceSSLCLRpath() {
		ChangeReplicationSourceSSLCLRpathContext _localctx = new ChangeReplicationSourceSSLCLRpathContext(Context, State);
		EnterRule(_localctx, 524, RULE_changeReplicationSourceSSLCLRpath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4395;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_CRLPATH_SYMBOL || _la==SOURCE_SSL_CRLPATH_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_KEY_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_KEY_SYMBOL, 0); }
		public ChangeReplicationSourceSSLKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLKey(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLKeyContext changeReplicationSourceSSLKey() {
		ChangeReplicationSourceSSLKeyContext _localctx = new ChangeReplicationSourceSSLKeyContext(Context, State);
		EnterRule(_localctx, 526, RULE_changeReplicationSourceSSLKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4397;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_KEY_SYMBOL || _la==SOURCE_SSL_KEY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLVerifyServerCertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		public ChangeReplicationSourceSSLVerifyServerCertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLVerifyServerCert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLVerifyServerCert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLVerifyServerCert(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLVerifyServerCertContext changeReplicationSourceSSLVerifyServerCert() {
		ChangeReplicationSourceSSLVerifyServerCertContext _localctx = new ChangeReplicationSourceSSLVerifyServerCertContext(Context, State);
		EnterRule(_localctx, 528, RULE_changeReplicationSourceSSLVerifyServerCert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4399;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL || _la==SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceTLSVersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_TLS_VERSION_SYMBOL() { return GetToken(MySQLParser.SOURCE_TLS_VERSION_SYMBOL, 0); }
		public ChangeReplicationSourceTLSVersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceTLSVersion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceTLSVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceTLSVersion(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceTLSVersionContext changeReplicationSourceTLSVersion() {
		ChangeReplicationSourceTLSVersionContext _localctx = new ChangeReplicationSourceTLSVersionContext(Context, State);
		EnterRule(_localctx, 530, RULE_changeReplicationSourceTLSVersion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4401;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_TLS_VERSION_SYMBOL || _la==SOURCE_TLS_VERSION_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceTLSCiphersuitesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return GetToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_TLS_CIPHERSUITES_SYMBOL() { return GetToken(MySQLParser.SOURCE_TLS_CIPHERSUITES_SYMBOL, 0); }
		public ChangeReplicationSourceTLSCiphersuitesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceTLSCiphersuites; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceTLSCiphersuites(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceTLSCiphersuites(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceTLSCiphersuitesContext changeReplicationSourceTLSCiphersuites() {
		ChangeReplicationSourceTLSCiphersuitesContext _localctx = new ChangeReplicationSourceTLSCiphersuitesContext(Context, State);
		EnterRule(_localctx, 532, RULE_changeReplicationSourceTLSCiphersuites);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4403;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_TLS_CIPHERSUITES_SYMBOL || _la==SOURCE_TLS_CIPHERSUITES_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLCertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CERT_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_CERT_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLCert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLCert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLCert(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLCertContext changeReplicationSourceSSLCert() {
		ChangeReplicationSourceSSLCertContext _localctx = new ChangeReplicationSourceSSLCertContext(Context, State);
		EnterRule(_localctx, 534, RULE_changeReplicationSourceSSLCert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4405;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_CERT_SYMBOL || _la==SOURCE_SSL_CERT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourcePublicKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySQLParser.SOURCE_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public ChangeReplicationSourcePublicKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourcePublicKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourcePublicKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourcePublicKey(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourcePublicKeyContext changeReplicationSourcePublicKey() {
		ChangeReplicationSourcePublicKeyContext _localctx = new ChangeReplicationSourcePublicKeyContext(Context, State);
		EnterRule(_localctx, 536, RULE_changeReplicationSourcePublicKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4407;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_PUBLIC_KEY_PATH_SYMBOL || _la==SOURCE_PUBLIC_KEY_PATH_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceGetSourcePublicKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return GetToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_SOURCE_PUBLIC_KEY_SYMBOL() { return GetToken(MySQLParser.GET_SOURCE_PUBLIC_KEY_SYMBOL, 0); }
		public ChangeReplicationSourceGetSourcePublicKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceGetSourcePublicKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceGetSourcePublicKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceGetSourcePublicKey(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceGetSourcePublicKeyContext changeReplicationSourceGetSourcePublicKey() {
		ChangeReplicationSourceGetSourcePublicKeyContext _localctx = new ChangeReplicationSourceGetSourcePublicKeyContext(Context, State);
		EnterRule(_localctx, 538, RULE_changeReplicationSourceGetSourcePublicKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4409;
			_la = TokenStream.LA(1);
			if ( !(_la==GET_MASTER_PUBLIC_KEY_SYMBOL || _la==GET_SOURCE_PUBLIC_KEY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceHeartbeatPeriodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySQLParser.SOURCE_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public ChangeReplicationSourceHeartbeatPeriodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceHeartbeatPeriod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceHeartbeatPeriod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceHeartbeatPeriod(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceHeartbeatPeriodContext changeReplicationSourceHeartbeatPeriod() {
		ChangeReplicationSourceHeartbeatPeriodContext _localctx = new ChangeReplicationSourceHeartbeatPeriodContext(Context, State);
		EnterRule(_localctx, 540, RULE_changeReplicationSourceHeartbeatPeriod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4411;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_HEARTBEAT_PERIOD_SYMBOL || _la==SOURCE_HEARTBEAT_PERIOD_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceCompressionAlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return GetToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_COMPRESSION_ALGORITHM_SYMBOL() { return GetToken(MySQLParser.SOURCE_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		public ChangeReplicationSourceCompressionAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceCompressionAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceCompressionAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceCompressionAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceCompressionAlgorithmContext changeReplicationSourceCompressionAlgorithm() {
		ChangeReplicationSourceCompressionAlgorithmContext _localctx = new ChangeReplicationSourceCompressionAlgorithmContext(Context, State);
		EnterRule(_localctx, 542, RULE_changeReplicationSourceCompressionAlgorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4413;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_COMPRESSION_ALGORITHM_SYMBOL || _la==SOURCE_COMPRESSION_ALGORITHM_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceZstdCompressionLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return GetToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return GetToken(MySQLParser.SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		public ChangeReplicationSourceZstdCompressionLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceZstdCompressionLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceZstdCompressionLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceZstdCompressionLevel(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceZstdCompressionLevelContext changeReplicationSourceZstdCompressionLevel() {
		ChangeReplicationSourceZstdCompressionLevelContext _localctx = new ChangeReplicationSourceZstdCompressionLevelContext(Context, State);
		EnterRule(_localctx, 544, RULE_changeReplicationSourceZstdCompressionLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4415;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL || _la==SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeCheckDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserIdentifierOrTextContext userIdentifierOrText() {
			return GetRuleContext<UserIdentifierOrTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public PrivilegeCheckDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegeCheckDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrivilegeCheckDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrivilegeCheckDef(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeCheckDefContext privilegeCheckDef() {
		PrivilegeCheckDefContext _localctx = new PrivilegeCheckDefContext(Context, State);
		EnterRule(_localctx, 546, RULE_privilegeCheckDef);
		try {
			State = 4419;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,450,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4417;
				userIdentifierOrText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4418;
				Match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePrimaryKeyCheckDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM_SYMBOL() { return GetToken(MySQLParser.STREAM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF_SYMBOL() { return GetToken(MySQLParser.OFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATE_SYMBOL() { return GetToken(MySQLParser.GENERATE_SYMBOL, 0); }
		public TablePrimaryKeyCheckDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablePrimaryKeyCheckDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablePrimaryKeyCheckDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablePrimaryKeyCheckDef(this);
		}
	}

	[RuleVersion(0)]
	public TablePrimaryKeyCheckDefContext tablePrimaryKeyCheckDef() {
		TablePrimaryKeyCheckDefContext _localctx = new TablePrimaryKeyCheckDefContext(Context, State);
		EnterRule(_localctx, 548, RULE_tablePrimaryKeyCheckDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4421;
			_la = TokenStream.LA(1);
			if ( !(_la==ON_SYMBOL || ((((_la - 751)) & ~0x3f) == 0 && ((1L << (_la - 751)) & 36028797018963971L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignGtidsToAnonymousTransactionsDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF_SYMBOL() { return GetToken(MySQLParser.OFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public AssignGtidsToAnonymousTransactionsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignGtidsToAnonymousTransactionsDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAssignGtidsToAnonymousTransactionsDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAssignGtidsToAnonymousTransactionsDefinition(this);
		}
	}

	[RuleVersion(0)]
	public AssignGtidsToAnonymousTransactionsDefinitionContext assignGtidsToAnonymousTransactionsDefinition() {
		AssignGtidsToAnonymousTransactionsDefinitionContext _localctx = new AssignGtidsToAnonymousTransactionsDefinitionContext(Context, State);
		EnterRule(_localctx, 550, RULE_assignGtidsToAnonymousTransactionsDefinition);
		try {
			State = 4426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,451,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4423;
				Match(OFF_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4424;
				Match(LOCAL_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4425;
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceTlsCiphersuitesDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public SourceTlsCiphersuitesDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceTlsCiphersuitesDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSourceTlsCiphersuitesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSourceTlsCiphersuitesDef(this);
		}
	}

	[RuleVersion(0)]
	public SourceTlsCiphersuitesDefContext sourceTlsCiphersuitesDef() {
		SourceTlsCiphersuitesDefContext _localctx = new SourceTlsCiphersuitesDefContext(Context, State);
		EnterRule(_localctx, 552, RULE_sourceTlsCiphersuitesDef);
		try {
			State = 4430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,452,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4428;
				textStringNoLinebreak();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4429;
				Match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceFileDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceLogFileContext sourceLogFile() {
			return GetRuleContext<SourceLogFileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceLogPosContext sourceLogPos() {
			return GetRuleContext<SourceLogPosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public SourceFileDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFileDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSourceFileDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSourceFileDef(this);
		}
	}

	[RuleVersion(0)]
	public SourceFileDefContext sourceFileDef() {
		SourceFileDefContext _localctx = new SourceFileDefContext(Context, State);
		EnterRule(_localctx, 554, RULE_sourceFileDef);
		try {
			State = 4446;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_LOG_FILE_SYMBOL:
			case SOURCE_LOG_FILE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4432;
				sourceLogFile();
				State = 4433;
				Match(EQUAL_OPERATOR);
				State = 4434;
				textStringNoLinebreak();
				}
				break;
			case MASTER_LOG_POS_SYMBOL:
			case SOURCE_LOG_POS_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4436;
				sourceLogPos();
				State = 4437;
				Match(EQUAL_OPERATOR);
				State = 4438;
				ulonglongNumber();
				}
				break;
			case RELAY_LOG_FILE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4440;
				Match(RELAY_LOG_FILE_SYMBOL);
				State = 4441;
				Match(EQUAL_OPERATOR);
				State = 4442;
				textStringNoLinebreak();
				}
				break;
			case RELAY_LOG_POS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4443;
				Match(RELAY_LOG_POS_SYMBOL);
				State = 4444;
				Match(EQUAL_OPERATOR);
				State = 4445;
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceLogFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.SOURCE_LOG_FILE_SYMBOL, 0); }
		public SourceLogFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceLogFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSourceLogFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSourceLogFile(this);
		}
	}

	[RuleVersion(0)]
	public SourceLogFileContext sourceLogFile() {
		SourceLogFileContext _localctx = new SourceLogFileContext(Context, State);
		EnterRule(_localctx, 556, RULE_sourceLogFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4448;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_LOG_FILE_SYMBOL || _la==SOURCE_LOG_FILE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceLogPosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_LOG_POS_SYMBOL() { return GetToken(MySQLParser.SOURCE_LOG_POS_SYMBOL, 0); }
		public SourceLogPosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceLogPos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSourceLogPos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSourceLogPos(this);
		}
	}

	[RuleVersion(0)]
	public SourceLogPosContext sourceLogPos() {
		SourceLogPosContext _localctx = new SourceLogPosContext(Context, State);
		EnterRule(_localctx, 558, RULE_sourceLogPos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4450;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_LOG_POS_SYMBOL || _la==SOURCE_LOG_POS_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerIdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ServerIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverIdList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerIdList(this);
		}
	}

	[RuleVersion(0)]
	public ServerIdListContext serverIdList() {
		ServerIdListContext _localctx = new ServerIdListContext(Context, State);
		EnterRule(_localctx, 560, RULE_serverIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4452;
			Match(OPEN_PAR_SYMBOL);
			State = 4461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 228698418577464L) != 0)) {
				{
				State = 4453;
				ulong_number();
				State = 4458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 4454;
					Match(COMMA_SYMBOL);
					State = 4455;
					ulong_number();
					}
					}
					State = 4460;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 4463;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySQLParser.CHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_SYMBOL() { return GetToken(MySQLParser.FILTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterDefinitionContext[] filterDefinition() {
			return GetRuleContexts<FilterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterDefinitionContext filterDefinition(int i) {
			return GetRuleContext<FilterDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ChangeReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplication(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationContext changeReplication() {
		ChangeReplicationContext _localctx = new ChangeReplicationContext(Context, State);
		EnterRule(_localctx, 562, RULE_changeReplication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4465;
			Match(CHANGE_SYMBOL);
			State = 4466;
			Match(REPLICATION_SYMBOL);
			State = 4467;
			Match(FILTER_SYMBOL);
			State = 4468;
			filterDefinition();
			State = 4473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4469;
				Match(COMMA_SYMBOL);
				State = 4470;
				filterDefinition();
				}
				}
				State = 4475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 4476;
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterDbListContext filterDbList() {
			return GetRuleContext<FilterDbListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterTableListContext filterTableList() {
			return GetRuleContext<FilterTableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterStringListContext filterStringList() {
			return GetRuleContext<FilterStringListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterDbPairListContext filterDbPairList() {
			return GetRuleContext<FilterDbPairListContext>(0);
		}
		public FilterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FilterDefinitionContext filterDefinition() {
		FilterDefinitionContext _localctx = new FilterDefinitionContext(Context, State);
		EnterRule(_localctx, 564, RULE_filterDefinition);
		int _la;
		try {
			State = 4528;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPLICATE_DO_DB_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4479;
				Match(REPLICATE_DO_DB_SYMBOL);
				State = 4480;
				Match(EQUAL_OPERATOR);
				State = 4481;
				Match(OPEN_PAR_SYMBOL);
				State = 4483;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,458,Context) ) {
				case 1:
					{
					State = 4482;
					filterDbList();
					}
					break;
				}
				State = 4485;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_DB_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4486;
				Match(REPLICATE_IGNORE_DB_SYMBOL);
				State = 4487;
				Match(EQUAL_OPERATOR);
				State = 4488;
				Match(OPEN_PAR_SYMBOL);
				State = 4490;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,459,Context) ) {
				case 1:
					{
					State = 4489;
					filterDbList();
					}
					break;
				}
				State = 4492;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_DO_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4493;
				Match(REPLICATE_DO_TABLE_SYMBOL);
				State = 4494;
				Match(EQUAL_OPERATOR);
				State = 4495;
				Match(OPEN_PAR_SYMBOL);
				State = 4497;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,460,Context) ) {
				case 1:
					{
					State = 4496;
					filterTableList();
					}
					break;
				}
				State = 4499;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4500;
				Match(REPLICATE_IGNORE_TABLE_SYMBOL);
				State = 4501;
				Match(EQUAL_OPERATOR);
				State = 4502;
				Match(OPEN_PAR_SYMBOL);
				State = 4504;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,461,Context) ) {
				case 1:
					{
					State = 4503;
					filterTableList();
					}
					break;
				}
				State = 4506;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_DO_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4507;
				Match(REPLICATE_WILD_DO_TABLE_SYMBOL);
				State = 4508;
				Match(EQUAL_OPERATOR);
				State = 4509;
				Match(OPEN_PAR_SYMBOL);
				State = 4511;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,462,Context) ) {
				case 1:
					{
					State = 4510;
					filterStringList();
					}
					break;
				}
				State = 4513;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4514;
				Match(REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
				State = 4515;
				Match(EQUAL_OPERATOR);
				State = 4516;
				Match(OPEN_PAR_SYMBOL);
				State = 4518;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,463,Context) ) {
				case 1:
					{
					State = 4517;
					filterStringList();
					}
					break;
				}
				State = 4520;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_REWRITE_DB_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4521;
				Match(REPLICATE_REWRITE_DB_SYMBOL);
				State = 4522;
				Match(EQUAL_OPERATOR);
				State = 4523;
				Match(OPEN_PAR_SYMBOL);
				State = 4525;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					State = 4524;
					filterDbPairList();
					}
				}

				State = 4527;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDbListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext[] schemaRef() {
			return GetRuleContexts<SchemaRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef(int i) {
			return GetRuleContext<SchemaRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDbList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterDbList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterDbList(this);
		}
	}

	[RuleVersion(0)]
	public FilterDbListContext filterDbList() {
		FilterDbListContext _localctx = new FilterDbListContext(Context, State);
		EnterRule(_localctx, 566, RULE_filterDbList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4530;
			schemaRef();
			State = 4535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4531;
				Match(COMMA_SYMBOL);
				State = 4532;
				schemaRef();
				}
				}
				State = 4537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterTableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilterTableRefContext[] filterTableRef() {
			return GetRuleContexts<FilterTableRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterTableRefContext filterTableRef(int i) {
			return GetRuleContext<FilterTableRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterTableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterTableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterTableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterTableList(this);
		}
	}

	[RuleVersion(0)]
	public FilterTableListContext filterTableList() {
		FilterTableListContext _localctx = new FilterTableListContext(Context, State);
		EnterRule(_localctx, 568, RULE_filterTableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4538;
			filterTableRef();
			State = 4543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4539;
				Match(COMMA_SYMBOL);
				State = 4540;
				filterTableRef();
				}
				}
				State = 4545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterStringListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilterWildDbTableStringContext[] filterWildDbTableString() {
			return GetRuleContexts<FilterWildDbTableStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterWildDbTableStringContext filterWildDbTableString(int i) {
			return GetRuleContext<FilterWildDbTableStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterStringListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterStringList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterStringList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterStringList(this);
		}
	}

	[RuleVersion(0)]
	public FilterStringListContext filterStringList() {
		FilterStringListContext _localctx = new FilterStringListContext(Context, State);
		EnterRule(_localctx, 570, RULE_filterStringList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4546;
			filterWildDbTableString();
			State = 4551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4547;
				Match(COMMA_SYMBOL);
				State = 4548;
				filterWildDbTableString();
				}
				}
				State = 4553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterWildDbTableStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public FilterWildDbTableStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterWildDbTableString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterWildDbTableString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterWildDbTableString(this);
		}
	}

	[RuleVersion(0)]
	public FilterWildDbTableStringContext filterWildDbTableString() {
		FilterWildDbTableStringContext _localctx = new FilterWildDbTableStringContext(Context, State);
		EnterRule(_localctx, 572, RULE_filterWildDbTableString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4554;
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDbPairListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaIdentifierPairContext[] schemaIdentifierPair() {
			return GetRuleContexts<SchemaIdentifierPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaIdentifierPairContext schemaIdentifierPair(int i) {
			return GetRuleContext<SchemaIdentifierPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbPairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDbPairList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterDbPairList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterDbPairList(this);
		}
	}

	[RuleVersion(0)]
	public FilterDbPairListContext filterDbPairList() {
		FilterDbPairListContext _localctx = new FilterDbPairListContext(Context, State);
		EnterRule(_localctx, 574, RULE_filterDbPairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4556;
			schemaIdentifierPair();
			State = 4561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4557;
				Match(COMMA_SYMBOL);
				State = 4558;
				schemaIdentifierPair();
				}
				}
				State = 4563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartReplicaStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaThreadOptionsContext replicaThreadOptions() {
			return GetRuleContext<ReplicaThreadOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySQLParser.UNTIL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaUntilContext replicaUntil() {
			return GetRuleContext<ReplicaUntilContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserOptionContext userOption() {
			return GetRuleContext<UserOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PasswordOptionContext passwordOption() {
			return GetRuleContext<PasswordOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultAuthOptionContext defaultAuthOption() {
			return GetRuleContext<DefaultAuthOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PluginDirOptionContext pluginDirOption() {
			return GetRuleContext<PluginDirOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public StartReplicaStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startReplicaStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStartReplicaStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStartReplicaStatement(this);
		}
	}

	[RuleVersion(0)]
	public StartReplicaStatementContext startReplicaStatement() {
		StartReplicaStatementContext _localctx = new StartReplicaStatementContext(Context, State);
		EnterRule(_localctx, 576, RULE_startReplicaStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4564;
			Match(START_SYMBOL);
			State = 4565;
			replica();
			State = 4567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) {
				{
				State = 4566;
				replicaThreadOptions();
				}
			}

			State = 4571;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNTIL_SYMBOL) {
				{
				State = 4569;
				Match(UNTIL_SYMBOL);
				State = 4570;
				replicaUntil();
				}
			}

			State = 4574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USER_SYMBOL) {
				{
				State = 4573;
				userOption();
				}
			}

			State = 4577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PASSWORD_SYMBOL) {
				{
				State = 4576;
				passwordOption();
				}
			}

			State = 4580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_AUTH_SYMBOL) {
				{
				State = 4579;
				defaultAuthOption();
				}
			}

			State = 4583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUGIN_DIR_SYMBOL) {
				{
				State = 4582;
				pluginDirOption();
				}
			}

			State = 4586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 4585;
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopReplicaStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_SYMBOL() { return GetToken(MySQLParser.STOP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaThreadOptionsContext replicaThreadOptions() {
			return GetRuleContext<ReplicaThreadOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public StopReplicaStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopReplicaStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStopReplicaStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStopReplicaStatement(this);
		}
	}

	[RuleVersion(0)]
	public StopReplicaStatementContext stopReplicaStatement() {
		StopReplicaStatementContext _localctx = new StopReplicaStatementContext(Context, State);
		EnterRule(_localctx, 578, RULE_stopReplicaStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4588;
			Match(STOP_SYMBOL);
			State = 4589;
			replica();
			State = 4591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) {
				{
				State = 4590;
				replicaThreadOptions();
				}
			}

			State = 4594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 4593;
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicaUntilContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceFileDefContext[] sourceFileDef() {
			return GetRuleContexts<SourceFileDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceFileDefContext sourceFileDef(int i) {
			return GetRuleContext<SourceFileDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ReplicaUntilContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicaUntil; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplicaUntil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplicaUntil(this);
		}
	}

	[RuleVersion(0)]
	public ReplicaUntilContext replicaUntil() {
		ReplicaUntilContext _localctx = new ReplicaUntilContext(Context, State);
		EnterRule(_localctx, 580, RULE_replicaUntil);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4601;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_LOG_FILE_SYMBOL:
			case MASTER_LOG_POS_SYMBOL:
			case RELAY_LOG_FILE_SYMBOL:
			case RELAY_LOG_POS_SYMBOL:
			case SOURCE_LOG_FILE_SYMBOL:
			case SOURCE_LOG_POS_SYMBOL:
				{
				State = 4596;
				sourceFileDef();
				}
				break;
			case SQL_AFTER_GTIDS_SYMBOL:
			case SQL_BEFORE_GTIDS_SYMBOL:
				{
				State = 4597;
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS_SYMBOL || _la==SQL_BEFORE_GTIDS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4598;
				Match(EQUAL_OPERATOR);
				State = 4599;
				textString();
				}
				break;
			case SQL_AFTER_MTS_GAPS_SYMBOL:
				{
				State = 4600;
				Match(SQL_AFTER_MTS_GAPS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4603;
				Match(COMMA_SYMBOL);
				State = 4604;
				sourceFileDef();
				}
				}
				State = 4609;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public UserOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUserOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUserOption(this);
		}
	}

	[RuleVersion(0)]
	public UserOptionContext userOption() {
		UserOptionContext _localctx = new UserOptionContext(Context, State);
		EnterRule(_localctx, 582, RULE_userOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4610;
			Match(USER_SYMBOL);
			State = 4611;
			Match(EQUAL_OPERATOR);
			State = 4612;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PasswordOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public PasswordOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passwordOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPasswordOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPasswordOption(this);
		}
	}

	[RuleVersion(0)]
	public PasswordOptionContext passwordOption() {
		PasswordOptionContext _localctx = new PasswordOptionContext(Context, State);
		EnterRule(_localctx, 584, RULE_passwordOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4614;
			Match(PASSWORD_SYMBOL);
			State = 4615;
			Match(EQUAL_OPERATOR);
			State = 4616;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultAuthOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public DefaultAuthOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultAuthOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefaultAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefaultAuthOption(this);
		}
	}

	[RuleVersion(0)]
	public DefaultAuthOptionContext defaultAuthOption() {
		DefaultAuthOptionContext _localctx = new DefaultAuthOptionContext(Context, State);
		EnterRule(_localctx, 586, RULE_defaultAuthOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4618;
			Match(DEFAULT_AUTH_SYMBOL);
			State = 4619;
			Match(EQUAL_OPERATOR);
			State = 4620;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluginDirOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public PluginDirOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pluginDirOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPluginDirOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPluginDirOption(this);
		}
	}

	[RuleVersion(0)]
	public PluginDirOptionContext pluginDirOption() {
		PluginDirOptionContext _localctx = new PluginDirOptionContext(Context, State);
		EnterRule(_localctx, 588, RULE_pluginDirOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4622;
			Match(PLUGIN_DIR_SYMBOL);
			State = 4623;
			Match(EQUAL_OPERATOR);
			State = 4624;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicaThreadOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaThreadOptionContext[] replicaThreadOption() {
			return GetRuleContexts<ReplicaThreadOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaThreadOptionContext replicaThreadOption(int i) {
			return GetRuleContext<ReplicaThreadOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ReplicaThreadOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicaThreadOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplicaThreadOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplicaThreadOptions(this);
		}
	}

	[RuleVersion(0)]
	public ReplicaThreadOptionsContext replicaThreadOptions() {
		ReplicaThreadOptionsContext _localctx = new ReplicaThreadOptionsContext(Context, State);
		EnterRule(_localctx, 590, RULE_replicaThreadOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4626;
			replicaThreadOption();
			State = 4631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4627;
				Match(COMMA_SYMBOL);
				State = 4628;
				replicaThreadOption();
				}
				}
				State = 4633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicaThreadOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public ReplicaThreadOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicaThreadOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplicaThreadOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplicaThreadOption(this);
		}
	}

	[RuleVersion(0)]
	public ReplicaThreadOptionContext replicaThreadOption() {
		ReplicaThreadOptionContext _localctx = new ReplicaThreadOptionContext(Context, State);
		EnterRule(_localctx, 592, RULE_replicaThreadOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4634;
			_la = TokenStream.LA(1);
			if ( !(_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_SYMBOL() { return GetToken(MySQLParser.STOP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationStartOptionsContext groupReplicationStartOptions() {
			return GetRuleContext<GroupReplicationStartOptionsContext>(0);
		}
		public GroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupReplication(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationContext groupReplication() {
		GroupReplicationContext _localctx = new GroupReplicationContext(Context, State);
		EnterRule(_localctx, 594, RULE_groupReplication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4641;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case START_SYMBOL:
				{
				State = 4636;
				Match(START_SYMBOL);
				State = 4638;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT_AUTH_SYMBOL || _la==PASSWORD_SYMBOL || _la==USER_SYMBOL) {
					{
					State = 4637;
					groupReplicationStartOptions();
					}
				}

				}
				break;
			case STOP_SYMBOL:
				{
				State = 4640;
				Match(STOP_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4643;
			Match(GROUP_REPLICATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationStartOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationStartOptionContext[] groupReplicationStartOption() {
			return GetRuleContexts<GroupReplicationStartOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationStartOptionContext groupReplicationStartOption(int i) {
			return GetRuleContext<GroupReplicationStartOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GroupReplicationStartOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplicationStartOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupReplicationStartOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupReplicationStartOptions(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationStartOptionsContext groupReplicationStartOptions() {
		GroupReplicationStartOptionsContext _localctx = new GroupReplicationStartOptionsContext(Context, State);
		EnterRule(_localctx, 596, RULE_groupReplicationStartOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4645;
			groupReplicationStartOption();
			State = 4650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4646;
				Match(COMMA_SYMBOL);
				State = 4647;
				groupReplicationStartOption();
				}
				}
				State = 4652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationStartOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationUserContext groupReplicationUser() {
			return GetRuleContext<GroupReplicationUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationPasswordContext groupReplicationPassword() {
			return GetRuleContext<GroupReplicationPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationPluginAuthContext groupReplicationPluginAuth() {
			return GetRuleContext<GroupReplicationPluginAuthContext>(0);
		}
		public GroupReplicationStartOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplicationStartOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupReplicationStartOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupReplicationStartOption(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationStartOptionContext groupReplicationStartOption() {
		GroupReplicationStartOptionContext _localctx = new GroupReplicationStartOptionContext(Context, State);
		EnterRule(_localctx, 598, RULE_groupReplicationStartOption);
		try {
			State = 4656;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4653;
				groupReplicationUser();
				}
				break;
			case PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4654;
				groupReplicationPassword();
				}
				break;
			case DEFAULT_AUTH_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4655;
				groupReplicationPluginAuth();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public GroupReplicationUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplicationUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupReplicationUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupReplicationUser(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationUserContext groupReplicationUser() {
		GroupReplicationUserContext _localctx = new GroupReplicationUserContext(Context, State);
		EnterRule(_localctx, 600, RULE_groupReplicationUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4658;
			Match(USER_SYMBOL);
			State = 4659;
			Match(EQUAL_OPERATOR);
			State = 4660;
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public GroupReplicationPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplicationPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupReplicationPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupReplicationPassword(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationPasswordContext groupReplicationPassword() {
		GroupReplicationPasswordContext _localctx = new GroupReplicationPasswordContext(Context, State);
		EnterRule(_localctx, 602, RULE_groupReplicationPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4662;
			Match(PASSWORD_SYMBOL);
			State = 4663;
			Match(EQUAL_OPERATOR);
			State = 4664;
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationPluginAuthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public GroupReplicationPluginAuthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplicationPluginAuth; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupReplicationPluginAuth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupReplicationPluginAuth(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationPluginAuthContext groupReplicationPluginAuth() {
		GroupReplicationPluginAuthContext _localctx = new GroupReplicationPluginAuthContext(Context, State);
		EnterRule(_localctx, 604, RULE_groupReplicationPluginAuth);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4666;
			Match(DEFAULT_AUTH_SYMBOL);
			State = 4667;
			Match(EQUAL_OPERATOR);
			State = 4668;
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA_SYMBOL() { return GetToken(MySQLParser.REPLICA_SYMBOL, 0); }
		public ReplicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplica(this);
		}
	}

	[RuleVersion(0)]
	public ReplicaContext replica() {
		ReplicaContext _localctx = new ReplicaContext(Context, State);
		EnterRule(_localctx, 606, RULE_replica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4670;
			_la = TokenStream.LA(1);
			if ( !(_la==SLAVE_SYMBOL || _la==REPLICA_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparedStatementContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySQLParser.PREPARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public PreparedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPreparedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPreparedStatement(this);
		}
	}

	[RuleVersion(0)]
	public PreparedStatementContext preparedStatement() {
		PreparedStatementContext _localctx = new PreparedStatementContext(Context, State);
		EnterRule(_localctx, 608, RULE_preparedStatement);
		int _la;
		try {
			State = 4683;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREPARE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4672;
				_localctx.type = Match(PREPARE_SYMBOL);
				State = 4673;
				identifier();
				State = 4674;
				Match(FROM_SYMBOL);
				State = 4677;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,486,Context) ) {
				case 1:
					{
					State = 4675;
					textLiteral();
					}
					break;
				case 2:
					{
					State = 4676;
					userVariable();
					}
					break;
				}
				}
				break;
			case EXECUTE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4679;
				executeStatement();
				}
				break;
			case DEALLOCATE_SYMBOL:
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4680;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEALLOCATE_SYMBOL || _la==DROP_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4681;
				Match(PREPARE_SYMBOL);
				State = 4682;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExecuteVarListContext executeVarList() {
			return GetRuleContext<ExecuteVarListContext>(0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExecuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExecuteStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(Context, State);
		EnterRule(_localctx, 610, RULE_executeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4685;
			Match(EXECUTE_SYMBOL);
			State = 4686;
			identifier();
			State = 4689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING_SYMBOL) {
				{
				State = 4687;
				Match(USING_SYMBOL);
				State = 4688;
				executeVarList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteVarListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext[] userVariable() {
			return GetRuleContexts<UserVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable(int i) {
			return GetRuleContext<UserVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExecuteVarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeVarList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExecuteVarList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExecuteVarList(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteVarListContext executeVarList() {
		ExecuteVarListContext _localctx = new ExecuteVarListContext(Context, State);
		EnterRule(_localctx, 612, RULE_executeVarList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4691;
			userVariable();
			State = 4696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4692;
				Match(COMMA_SYMBOL);
				State = 4693;
				userVariable();
				}
				}
				State = 4698;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloneStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_SYMBOL() { return GetToken(MySQLParser.CLONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE_SYMBOL() { return GetToken(MySQLParser.REMOTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMBOL() { return GetToken(MySQLParser.COLON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataDirSSLContext dataDirSSL() {
			return GetRuleContext<DataDirSSLContext>(0);
		}
		public CloneStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cloneStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCloneStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCloneStatement(this);
		}
	}

	[RuleVersion(0)]
	public CloneStatementContext cloneStatement() {
		CloneStatementContext _localctx = new CloneStatementContext(Context, State);
		EnterRule(_localctx, 614, RULE_cloneStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4699;
			Match(CLONE_SYMBOL);
			State = 4724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,493,Context) ) {
			case 1:
				{
				State = 4700;
				Match(LOCAL_SYMBOL);
				State = 4701;
				Match(DATA_SYMBOL);
				State = 4702;
				Match(DIRECTORY_SYMBOL);
				State = 4704;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,490,Context) ) {
				case 1:
					{
					State = 4703;
					equal();
					}
					break;
				}
				State = 4706;
				textStringLiteral();
				}
				break;
			case 2:
				{
				State = 4707;
				Match(REMOTE_SYMBOL);
				State = 4710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 4708;
					Match(FOR_SYMBOL);
					State = 4709;
					Match(REPLICATION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				{
				State = 4712;
				if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				State = 4713;
				Match(INSTANCE_SYMBOL);
				State = 4714;
				Match(FROM_SYMBOL);
				State = 4715;
				user();
				State = 4716;
				Match(COLON_SYMBOL);
				State = 4717;
				ulong_number();
				State = 4718;
				Match(IDENTIFIED_SYMBOL);
				State = 4719;
				Match(BY_SYMBOL);
				State = 4720;
				textStringLiteral();
				State = 4722;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATA_SYMBOL || _la==REQUIRE_SYMBOL) {
					{
					State = 4721;
					dataDirSSL();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataDirSSLContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SslContext ssl() {
			return GetRuleContext<SslContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public DataDirSSLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataDirSSL; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDataDirSSL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDataDirSSL(this);
		}
	}

	[RuleVersion(0)]
	public DataDirSSLContext dataDirSSL() {
		DataDirSSLContext _localctx = new DataDirSSLContext(Context, State);
		EnterRule(_localctx, 616, RULE_dataDirSSL);
		int _la;
		try {
			State = 4736;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REQUIRE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4726;
				ssl();
				}
				break;
			case DATA_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4727;
				Match(DATA_SYMBOL);
				State = 4728;
				Match(DIRECTORY_SYMBOL);
				State = 4730;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,494,Context) ) {
				case 1:
					{
					State = 4729;
					equal();
					}
					break;
				}
				State = 4732;
				textStringLiteral();
				State = 4734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE_SYMBOL) {
					{
					State = 4733;
					ssl();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SslContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SSL_SYMBOL() { return GetToken(MySQLParser.SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public SslContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ssl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSsl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSsl(this);
		}
	}

	[RuleVersion(0)]
	public SslContext ssl() {
		SslContext _localctx = new SslContext(Context, State);
		EnterRule(_localctx, 618, RULE_ssl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4738;
			Match(REQUIRE_SYMBOL);
			State = 4740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_SYMBOL) {
				{
				State = 4739;
				Match(NO_SYMBOL);
				}
			}

			State = 4742;
			Match(SSL_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountManagementStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserStatementContext alterUserStatement() {
			return GetRuleContext<AlterUserStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserStatementContext createUserStatement() {
			return GetRuleContext<CreateUserStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropUserStatementContext dropUserStatement() {
			return GetRuleContext<DropUserStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantStatementContext grantStatement() {
			return GetRuleContext<GrantStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserStatementContext renameUserStatement() {
			return GetRuleContext<RenameUserStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokeStatementContext revokeStatement() {
			return GetRuleContext<RevokeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetRoleStatementContext setRoleStatement() {
			return GetRuleContext<SetRoleStatementContext>(0);
		}
		public AccountManagementStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountManagementStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAccountManagementStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAccountManagementStatement(this);
		}
	}

	[RuleVersion(0)]
	public AccountManagementStatementContext accountManagementStatement() {
		AccountManagementStatementContext _localctx = new AccountManagementStatementContext(Context, State);
		EnterRule(_localctx, 620, RULE_accountManagementStatement);
		try {
			State = 4751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4744;
				alterUserStatement();
				}
				break;
			case CREATE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4745;
				createUserStatement();
				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4746;
				dropUserStatement();
				}
				break;
			case GRANT_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4747;
				grantStatement();
				}
				break;
			case RENAME_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4748;
				renameUserStatement();
				}
				break;
			case REVOKE_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4749;
				revokeStatement();
				}
				break;
			case SET_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4750;
				setRoleStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserTailContext createUserTail() {
			return GetRuleContext<CreateUserTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserFunctionContext userFunction() {
			return GetRuleContext<UserFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserListContext alterUserList() {
			return GetRuleContext<AlterUserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_SYMBOL() { return GetToken(MySQLParser.OLD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByRandomPasswordContext identifiedByRandomPassword() {
			return GetRuleContext<IdentifiedByRandomPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByPasswordContext identifiedByPassword() {
			return GetRuleContext<IdentifiedByPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplacePasswordContext replacePassword() {
			return GetRuleContext<ReplacePasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserRegistrationContext userRegistration() {
			return GetRuleContext<UserRegistrationContext>(0);
		}
		public AlterUserStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUserStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterUserStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterUserStatement(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserStatementContext alterUserStatement() {
		AlterUserStatementContext _localctx = new AlterUserStatementContext(Context, State);
		EnterRule(_localctx, 622, RULE_alterUserStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4753;
			Match(ALTER_SYMBOL);
			State = 4754;
			Match(USER_SYMBOL);
			State = 4756;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,499,Context) ) {
			case 1:
				{
				State = 4755;
				ifExists();
				}
				break;
			}
			State = 4798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,509,Context) ) {
			case 1:
				{
				State = 4762;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,500,Context) ) {
				case 1:
					{
					State = 4758;
					if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
					State = 4759;
					createUserList();
					}
					break;
				case 2:
					{
					State = 4760;
					if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
					State = 4761;
					alterUserList();
					}
					break;
				}
				State = 4764;
				createUserTail();
				}
				break;
			case 2:
				{
				State = 4766;
				userFunction();
				State = 4783;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIED_SYMBOL:
					{
					State = 4769;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,501,Context) ) {
					case 1:
						{
						State = 4767;
						identifiedByRandomPassword();
						}
						break;
					case 2:
						{
						State = 4768;
						identifiedByPassword();
						}
						break;
					}
					State = 4772;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						State = 4771;
						replacePassword();
						}
					}

					State = 4775;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						State = 4774;
						retainCurrentPassword();
						}
					}

					}
					break;
				case DISCARD_SYMBOL:
					{
					State = 4777;
					Match(DISCARD_SYMBOL);
					State = 4778;
					Match(OLD_SYMBOL);
					State = 4779;
					Match(PASSWORD_SYMBOL);
					}
					break;
				case Eof:
				case INT_NUMBER:
				case LONG_NUMBER:
				case ULONGLONG_NUMBER:
				case SEMICOLON_SYMBOL:
				case DECIMAL_NUMBER:
				case FLOAT_NUMBER:
					{
					State = 4781;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 211106232533048L) != 0)) {
						{
						State = 4780;
						userRegistration();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				State = 4785;
				user();
				State = 4796;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT_SYMBOL:
					{
					State = 4786;
					Match(DEFAULT_SYMBOL);
					State = 4787;
					Match(ROLE_SYMBOL);
					State = 4791;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,506,Context) ) {
					case 1:
						{
						State = 4788;
						Match(ALL_SYMBOL);
						}
						break;
					case 2:
						{
						State = 4789;
						Match(NONE_SYMBOL);
						}
						break;
					case 3:
						{
						State = 4790;
						roleList();
						}
						break;
					}
					}
					break;
				case Eof:
				case INT_NUMBER:
				case LONG_NUMBER:
				case ULONGLONG_NUMBER:
				case SEMICOLON_SYMBOL:
				case DECIMAL_NUMBER:
				case FLOAT_NUMBER:
					{
					State = 4794;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 211106232533048L) != 0)) {
						{
						State = 4793;
						userRegistration();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserContext[] alterUser() {
			return GetRuleContexts<AlterUserContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserContext alterUser(int i) {
			return GetRuleContext<AlterUserContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterUserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUserList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterUserList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterUserList(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserListContext alterUserList() {
		AlterUserListContext _localctx = new AlterUserListContext(Context, State);
		EnterRule(_localctx, 624, RULE_alterUserList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4800;
			alterUser();
			State = 4805;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,510,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4801;
					Match(COMMA_SYMBOL);
					State = 4802;
					alterUser();
					}
					} 
				}
				State = 4807;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,510,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OldAlterUserContext oldAlterUser() {
			return GetRuleContext<OldAlterUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByPasswordContext identifiedByPassword() {
			return GetRuleContext<IdentifiedByPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByRandomPasswordContext identifiedByRandomPassword() {
			return GetRuleContext<IdentifiedByRandomPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginContext identifiedWithPlugin() {
			return GetRuleContext<IdentifiedWithPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginAsAuthContext identifiedWithPluginAsAuth() {
			return GetRuleContext<IdentifiedWithPluginAsAuthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginByPasswordContext identifiedWithPluginByPassword() {
			return GetRuleContext<IdentifiedWithPluginByPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginByRandomPasswordContext identifiedWithPluginByRandomPassword() {
			return GetRuleContext<IdentifiedWithPluginByRandomPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD_SYMBOL() { return GetTokens(MySQLParser.ADD_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL(int i) {
			return GetToken(MySQLParser.ADD_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentificationContext[] identification() {
			return GetRuleContexts<IdentificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentificationContext identification(int i) {
			return GetRuleContext<IdentificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MODIFY_SYMBOL() { return GetTokens(MySQLParser.MODIFY_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY_SYMBOL(int i) {
			return GetToken(MySQLParser.MODIFY_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DROP_SYMBOL() { return GetTokens(MySQLParser.DROP_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL(int i) {
			return GetToken(MySQLParser.DROP_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardOldPasswordContext discardOldPassword() {
			return GetRuleContext<DiscardOldPasswordContext>(0);
		}
		public AlterUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterUser(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserContext alterUser() {
		AlterUserContext _localctx = new AlterUserContext(Context, State);
		EnterRule(_localctx, 626, RULE_alterUser);
		try {
			State = 4883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,527,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4808;
				if (!(this.isServerVersionLt80025())) throw new FailedPredicateException(this, "this.isServerVersionLt80025()");
				State = 4809;
				oldAlterUser();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4810;
				if (!(this.isServerVersionGe80025())) throw new FailedPredicateException(this, "this.isServerVersionGe80025()");
				{
				State = 4811;
				user();
				State = 4881;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,526,Context) ) {
				case 1:
					{
					State = 4812;
					identifiedByPassword();
					State = 4821;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,513,Context) ) {
					case 1:
						{
						State = 4813;
						Match(REPLACE_SYMBOL);
						State = 4814;
						textStringLiteral();
						State = 4816;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,511,Context) ) {
						case 1:
							{
							State = 4815;
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					case 2:
						{
						State = 4819;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,512,Context) ) {
						case 1:
							{
							State = 4818;
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 4823;
					identifiedByRandomPassword();
					State = 4832;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,516,Context) ) {
					case 1:
						{
						State = 4825;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,514,Context) ) {
						case 1:
							{
							State = 4824;
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					case 2:
						{
						State = 4827;
						Match(REPLACE_SYMBOL);
						State = 4828;
						textStringLiteral();
						State = 4830;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,515,Context) ) {
						case 1:
							{
							State = 4829;
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 4834;
					identifiedWithPlugin();
					}
					break;
				case 4:
					{
					State = 4835;
					identifiedWithPluginAsAuth();
					State = 4837;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,517,Context) ) {
					case 1:
						{
						State = 4836;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 5:
					{
					State = 4839;
					identifiedWithPluginByPassword();
					State = 4848;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,520,Context) ) {
					case 1:
						{
						State = 4840;
						Match(REPLACE_SYMBOL);
						State = 4841;
						textStringLiteral();
						State = 4843;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,518,Context) ) {
						case 1:
							{
							State = 4842;
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					case 2:
						{
						State = 4846;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,519,Context) ) {
						case 1:
							{
							State = 4845;
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 6:
					{
					State = 4850;
					identifiedWithPluginByRandomPassword();
					State = 4852;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,521,Context) ) {
					case 1:
						{
						State = 4851;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 7:
					{
					State = 4855;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,522,Context) ) {
					case 1:
						{
						State = 4854;
						discardOldPassword();
						}
						break;
					}
					}
					break;
				case 8:
					{
					State = 4857;
					Match(ADD_SYMBOL);
					State = 4858;
					factor();
					State = 4859;
					identification();
					State = 4864;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,523,Context) ) {
					case 1:
						{
						State = 4860;
						Match(ADD_SYMBOL);
						State = 4861;
						factor();
						State = 4862;
						identification();
						}
						break;
					}
					}
					break;
				case 9:
					{
					State = 4866;
					Match(MODIFY_SYMBOL);
					State = 4867;
					factor();
					State = 4868;
					identification();
					State = 4873;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,524,Context) ) {
					case 1:
						{
						State = 4869;
						Match(MODIFY_SYMBOL);
						State = 4870;
						factor();
						State = 4871;
						identification();
						}
						break;
					}
					}
					break;
				case 10:
					{
					State = 4875;
					Match(DROP_SYMBOL);
					State = 4876;
					factor();
					State = 4879;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,525,Context) ) {
					case 1:
						{
						State = 4877;
						Match(DROP_SYMBOL);
						State = 4878;
						factor();
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OldAlterUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySQLParser.RANDOM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringHashContext textStringHash() {
			return GetRuleContext<TextStringHashContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardOldPasswordContext discardOldPassword() {
			return GetRuleContext<DiscardOldPasswordContext>(0);
		}
		public OldAlterUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oldAlterUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOldAlterUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOldAlterUser(this);
		}
	}

	[RuleVersion(0)]
	public OldAlterUserContext oldAlterUser() {
		OldAlterUserContext _localctx = new OldAlterUserContext(Context, State);
		EnterRule(_localctx, 628, RULE_oldAlterUser);
		try {
			State = 4942;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,539,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4885;
				user();
				State = 4886;
				Match(IDENTIFIED_SYMBOL);
				State = 4887;
				Match(BY_SYMBOL);
				State = 4907;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,532,Context) ) {
				case 1:
					{
					State = 4888;
					textString();
					State = 4889;
					Match(REPLACE_SYMBOL);
					State = 4890;
					textString();
					State = 4892;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,528,Context) ) {
					case 1:
						{
						State = 4891;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 4894;
					textString();
					State = 4896;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,529,Context) ) {
					case 1:
						{
						State = 4895;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 4898;
					Match(RANDOM_SYMBOL);
					State = 4899;
					Match(PASSWORD_SYMBOL);
					State = 4902;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,530,Context) ) {
					case 1:
						{
						State = 4900;
						Match(REPLACE_SYMBOL);
						State = 4901;
						textString();
						}
						break;
					}
					State = 4905;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,531,Context) ) {
					case 1:
						{
						State = 4904;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4909;
				user();
				State = 4910;
				Match(IDENTIFIED_SYMBOL);
				State = 4911;
				Match(WITH_SYMBOL);
				{
				State = 4912;
				textOrIdentifier();
				State = 4936;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,537,Context) ) {
				case 1:
					{
					State = 4913;
					Match(BY_SYMBOL);
					State = 4914;
					textString();
					State = 4915;
					Match(REPLACE_SYMBOL);
					State = 4916;
					textString();
					State = 4918;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,533,Context) ) {
					case 1:
						{
						State = 4917;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 4920;
					Match(AS_SYMBOL);
					State = 4921;
					textStringHash();
					State = 4923;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,534,Context) ) {
					case 1:
						{
						State = 4922;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 4925;
					Match(BY_SYMBOL);
					State = 4926;
					textString();
					State = 4928;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,535,Context) ) {
					case 1:
						{
						State = 4927;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 4:
					{
					State = 4930;
					Match(BY_SYMBOL);
					State = 4931;
					Match(RANDOM_SYMBOL);
					State = 4932;
					Match(PASSWORD_SYMBOL);
					State = 4934;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,536,Context) ) {
					case 1:
						{
						State = 4933;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4938;
				user();
				State = 4940;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,538,Context) ) {
				case 1:
					{
					State = 4939;
					discardOldPassword();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public UserFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUserFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUserFunction(this);
		}
	}

	[RuleVersion(0)]
	public UserFunctionContext userFunction() {
		UserFunctionContext _localctx = new UserFunctionContext(Context, State);
		EnterRule(_localctx, 630, RULE_userFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4944;
			Match(USER_SYMBOL);
			State = 4945;
			parentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserTailContext createUserTail() {
			return GetRuleContext<CreateUserTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultRoleClauseContext defaultRoleClause() {
			return GetRuleContext<DefaultRoleClauseContext>(0);
		}
		public CreateUserStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUserStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUserStatement(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserStatementContext createUserStatement() {
		CreateUserStatementContext _localctx = new CreateUserStatementContext(Context, State);
		EnterRule(_localctx, 632, RULE_createUserStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4947;
			Match(CREATE_SYMBOL);
			State = 4948;
			Match(USER_SYMBOL);
			State = 4950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,540,Context) ) {
			case 1:
				{
				State = 4949;
				ifNotExists();
				}
				break;
			}
			State = 4952;
			createUserList();
			State = 4954;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,541,Context) ) {
			case 1:
				{
				State = 4953;
				defaultRoleClause();
				}
				break;
			}
			State = 4956;
			createUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequireClauseContext requireClause() {
			return GetRuleContext<RequireClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectOptionsContext connectOptions() {
			return GetRuleContext<ConnectOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountLockPasswordExpireOptionsContext[] accountLockPasswordExpireOptions() {
			return GetRuleContexts<AccountLockPasswordExpireOptionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions(int i) {
			return GetRuleContext<AccountLockPasswordExpireOptionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAttributesContext userAttributes() {
			return GetRuleContext<UserAttributesContext>(0);
		}
		public CreateUserTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUserTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUserTail(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserTailContext createUserTail() {
		CreateUserTailContext _localctx = new CreateUserTailContext(Context, State);
		EnterRule(_localctx, 634, RULE_createUserTail);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,542,Context) ) {
			case 1:
				{
				State = 4958;
				requireClause();
				}
				break;
			}
			State = 4962;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,543,Context) ) {
			case 1:
				{
				State = 4961;
				connectOptions();
				}
				break;
			}
			State = 4967;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,544,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4964;
					accountLockPasswordExpireOptions();
					}
					} 
				}
				State = 4969;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,544,Context);
			}
			State = 4972;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,545,Context) ) {
			case 1:
				{
				State = 4970;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 4971;
				userAttributes();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_SYMBOL() { return GetToken(MySQLParser.ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public UserAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userAttributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUserAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUserAttributes(this);
		}
	}

	[RuleVersion(0)]
	public UserAttributesContext userAttributes() {
		UserAttributesContext _localctx = new UserAttributesContext(Context, State);
		EnterRule(_localctx, 636, RULE_userAttributes);
		try {
			State = 4978;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTRIBUTE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4974;
				Match(ATTRIBUTE_SYMBOL);
				State = 4975;
				textStringLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4976;
				Match(COMMENT_SYMBOL);
				State = 4977;
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultRoleClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public DefaultRoleClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultRoleClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefaultRoleClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefaultRoleClause(this);
		}
	}

	[RuleVersion(0)]
	public DefaultRoleClauseContext defaultRoleClause() {
		DefaultRoleClauseContext _localctx = new DefaultRoleClauseContext(Context, State);
		EnterRule(_localctx, 638, RULE_defaultRoleClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4980;
			Match(DEFAULT_SYMBOL);
			State = 4981;
			Match(ROLE_SYMBOL);
			State = 4982;
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireClauseContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequireListContext requireList() {
			return GetRuleContext<RequireListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SSL_SYMBOL() { return GetToken(MySQLParser.SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509_SYMBOL() { return GetToken(MySQLParser.X509_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		public RequireClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRequireClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRequireClause(this);
		}
	}

	[RuleVersion(0)]
	public RequireClauseContext requireClause() {
		RequireClauseContext _localctx = new RequireClauseContext(Context, State);
		EnterRule(_localctx, 640, RULE_requireClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4984;
			Match(REQUIRE_SYMBOL);
			State = 4987;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CIPHER_SYMBOL:
			case ISSUER_SYMBOL:
			case SUBJECT_SYMBOL:
				{
				State = 4985;
				requireList();
				}
				break;
			case NONE_SYMBOL:
			case SSL_SYMBOL:
			case X509_SYMBOL:
				{
				State = 4986;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NONE_SYMBOL || _la==SSL_SYMBOL || _la==X509_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_QUERIES_PER_HOUR_SYMBOL() { return GetTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_UPDATES_PER_HOUR_SYMBOL() { return GetTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_USER_CONNECTIONS_SYMBOL() { return GetTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL(int i) {
			return GetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
		}
		public ConnectOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConnectOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConnectOptions(this);
		}
	}

	[RuleVersion(0)]
	public ConnectOptionsContext connectOptions() {
		ConnectOptionsContext _localctx = new ConnectOptionsContext(Context, State);
		EnterRule(_localctx, 642, RULE_connectOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4989;
			Match(WITH_SYMBOL);
			State = 4998;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 4998;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case MAX_QUERIES_PER_HOUR_SYMBOL:
						{
						State = 4990;
						Match(MAX_QUERIES_PER_HOUR_SYMBOL);
						State = 4991;
						ulong_number();
						}
						break;
					case MAX_UPDATES_PER_HOUR_SYMBOL:
						{
						State = 4992;
						Match(MAX_UPDATES_PER_HOUR_SYMBOL);
						State = 4993;
						ulong_number();
						}
						break;
					case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
						{
						State = 4994;
						Match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
						State = 4995;
						ulong_number();
						}
						break;
					case MAX_USER_CONNECTIONS_SYMBOL:
						{
						State = 4996;
						Match(MAX_USER_CONNECTIONS_SYMBOL);
						State = 4997;
						ulong_number();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5000;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,549,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountLockPasswordExpireOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK_SYMBOL() { return GetToken(MySQLParser.UNLOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE_SYMBOL() { return GetToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySQLParser.HISTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REUSE_SYMBOL() { return GetToken(MySQLParser.REUSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER_SYMBOL() { return GetToken(MySQLParser.NEVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILED_LOGIN_ATTEMPTS_SYMBOL() { return GetToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_LOCK_TIME_SYMBOL() { return GetToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public AccountLockPasswordExpireOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountLockPasswordExpireOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAccountLockPasswordExpireOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAccountLockPasswordExpireOptions(this);
		}
	}

	[RuleVersion(0)]
	public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions() {
		AccountLockPasswordExpireOptionsContext _localctx = new AccountLockPasswordExpireOptionsContext(Context, State);
		EnterRule(_localctx, 644, RULE_accountLockPasswordExpireOptions);
		int _la;
		try {
			State = 5042;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5002;
				Match(ACCOUNT_SYMBOL);
				State = 5003;
				_la = TokenStream.LA(1);
				if ( !(_la==LOCK_SYMBOL || _la==UNLOCK_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5004;
				Match(PASSWORD_SYMBOL);
				State = 5033;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,554,Context) ) {
				case 1:
					{
					State = 5005;
					Match(EXPIRE_SYMBOL);
					State = 5012;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,550,Context) ) {
					case 1:
						{
						State = 5006;
						Match(INTERVAL_SYMBOL);
						State = 5007;
						real_ulong_number();
						State = 5008;
						Match(DAY_SYMBOL);
						}
						break;
					case 2:
						{
						State = 5010;
						Match(NEVER_SYMBOL);
						}
						break;
					case 3:
						{
						State = 5011;
						Match(DEFAULT_SYMBOL);
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 5014;
					Match(HISTORY_SYMBOL);
					State = 5017;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						State = 5015;
						real_ulong_number();
						}
						break;
					case DEFAULT_SYMBOL:
						{
						State = 5016;
						Match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 3:
					{
					State = 5019;
					Match(REUSE_SYMBOL);
					State = 5020;
					Match(INTERVAL_SYMBOL);
					State = 5025;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						State = 5021;
						real_ulong_number();
						State = 5022;
						Match(DAY_SYMBOL);
						}
						break;
					case DEFAULT_SYMBOL:
						{
						State = 5024;
						Match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 4:
					{
					State = 5027;
					if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
					State = 5028;
					Match(REQUIRE_SYMBOL);
					State = 5029;
					Match(CURRENT_SYMBOL);
					State = 5031;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,553,Context) ) {
					case 1:
						{
						State = 5030;
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT_SYMBOL || _la==OPTIONAL_SYMBOL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case FAILED_LOGIN_ATTEMPTS_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5035;
				Match(FAILED_LOGIN_ATTEMPTS_SYMBOL);
				State = 5036;
				real_ulong_number();
				}
				break;
			case PASSWORD_LOCK_TIME_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5037;
				Match(PASSWORD_LOCK_TIME_SYMBOL);
				State = 5040;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT_NUMBER:
				case LONG_NUMBER:
				case ULONGLONG_NUMBER:
				case HEX_NUMBER:
					{
					State = 5038;
					real_ulong_number();
					}
					break;
				case UNBOUNDED_SYMBOL:
					{
					State = 5039;
					Match(UNBOUNDED_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_SYMBOL() { return GetToken(MySQLParser.ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public UserAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUserAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUserAttribute(this);
		}
	}

	[RuleVersion(0)]
	public UserAttributeContext userAttribute() {
		UserAttributeContext _localctx = new UserAttributeContext(Context, State);
		EnterRule(_localctx, 646, RULE_userAttribute);
		try {
			State = 5049;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ATTRIBUTE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5045;
				Match(ATTRIBUTE_SYMBOL);
				State = 5046;
				textStringLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5047;
				Match(COMMENT_SYMBOL);
				State = 5048;
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUserStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropUserStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUserStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropUserStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropUserStatement(this);
		}
	}

	[RuleVersion(0)]
	public DropUserStatementContext dropUserStatement() {
		DropUserStatementContext _localctx = new DropUserStatementContext(Context, State);
		EnterRule(_localctx, 648, RULE_dropUserStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5051;
			Match(DROP_SYMBOL);
			State = 5052;
			Match(USER_SYMBOL);
			State = 5054;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,558,Context) ) {
			case 1:
				{
				State = 5053;
				ifExists();
				}
				break;
			}
			State = 5056;
			userList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT_SYMBOL() { return GetTokens(MySQLParser.GRANT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_SYMBOL(int i) {
			return GetToken(MySQLParser.GRANT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return GetRuleContext<RoleOrPrivilegesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantIdentifierContext grantIdentifier() {
			return GetRuleContext<GrantIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantTargetListContext grantTargetList() {
			return GetRuleContext<GrantTargetListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySQLParser.ADMIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AclTypeContext aclType() {
			return GetRuleContext<AclTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionedRequireClauseContext versionedRequireClause() {
			return GetRuleContext<VersionedRequireClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantOptionsContext grantOptions() {
			return GetRuleContext<GrantOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantAsContext grantAs() {
			return GetRuleContext<GrantAsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public GrantStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantStatement(this);
		}
	}

	[RuleVersion(0)]
	public GrantStatementContext grantStatement() {
		GrantStatementContext _localctx = new GrantStatementContext(Context, State);
		EnterRule(_localctx, 650, RULE_grantStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5058;
			Match(GRANT_SYMBOL);
			State = 5100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,567,Context) ) {
			case 1:
				{
				State = 5059;
				roleOrPrivilegesList();
				State = 5060;
				Match(TO_SYMBOL);
				State = 5061;
				userList();
				State = 5065;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 5062;
					Match(WITH_SYMBOL);
					State = 5063;
					Match(ADMIN_SYMBOL);
					State = 5064;
					Match(OPTION_SYMBOL);
					}
				}

				}
				break;
			case 2:
				{
				State = 5072;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,561,Context) ) {
				case 1:
					{
					State = 5067;
					roleOrPrivilegesList();
					}
					break;
				case 2:
					{
					State = 5068;
					Match(ALL_SYMBOL);
					State = 5070;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PRIVILEGES_SYMBOL) {
						{
						State = 5069;
						Match(PRIVILEGES_SYMBOL);
						}
					}

					}
					break;
				}
				State = 5074;
				Match(ON_SYMBOL);
				State = 5076;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,562,Context) ) {
				case 1:
					{
					State = 5075;
					aclType();
					}
					break;
				}
				State = 5078;
				grantIdentifier();
				State = 5079;
				Match(TO_SYMBOL);
				State = 5080;
				grantTargetList();
				State = 5082;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,563,Context) ) {
				case 1:
					{
					State = 5081;
					versionedRequireClause();
					}
					break;
				}
				State = 5085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 5084;
					grantOptions();
					}
				}

				State = 5088;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS_SYMBOL) {
					{
					State = 5087;
					grantAs();
					}
				}

				}
				break;
			case 3:
				{
				State = 5090;
				Match(PROXY_SYMBOL);
				State = 5091;
				Match(ON_SYMBOL);
				State = 5092;
				user();
				State = 5093;
				Match(TO_SYMBOL);
				State = 5094;
				grantTargetList();
				State = 5098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 5095;
					Match(WITH_SYMBOL);
					State = 5096;
					Match(GRANT_SYMBOL);
					State = 5097;
					Match(OPTION_SYMBOL);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantTargetListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public GrantTargetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantTargetList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantTargetList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantTargetList(this);
		}
	}

	[RuleVersion(0)]
	public GrantTargetListContext grantTargetList() {
		GrantTargetListContext _localctx = new GrantTargetListContext(Context, State);
		EnterRule(_localctx, 652, RULE_grantTargetList);
		try {
			State = 5106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,568,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5102;
				if (!(this.isServerVersionLt80011())) throw new FailedPredicateException(this, "this.isServerVersionLt80011()");
				State = 5103;
				createUserList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5104;
				if (!(this.isServerVersionGe80011())) throw new FailedPredicateException(this, "this.isServerVersionGe80011()");
				State = 5105;
				userList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantOptionContext grantOption() {
			return GetRuleContext<GrantOptionContext>(0);
		}
		public GrantOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantOptions(this);
		}
	}

	[RuleVersion(0)]
	public GrantOptionsContext grantOptions() {
		GrantOptionsContext _localctx = new GrantOptionsContext(Context, State);
		EnterRule(_localctx, 654, RULE_grantOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5108;
			Match(WITH_SYMBOL);
			State = 5109;
			grantOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptRoleListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT_SYMBOL() { return GetToken(MySQLParser.EXCEPT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public ExceptRoleListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptRoleList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExceptRoleList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExceptRoleList(this);
		}
	}

	[RuleVersion(0)]
	public ExceptRoleListContext exceptRoleList() {
		ExceptRoleListContext _localctx = new ExceptRoleListContext(Context, State);
		EnterRule(_localctx, 656, RULE_exceptRoleList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5111;
			Match(EXCEPT_SYMBOL);
			State = 5112;
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithRolesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptRoleListContext exceptRoleList() {
			return GetRuleContext<ExceptRoleListContext>(0);
		}
		public WithRolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withRoles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWithRoles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWithRoles(this);
		}
	}

	[RuleVersion(0)]
	public WithRolesContext withRoles() {
		WithRolesContext _localctx = new WithRolesContext(Context, State);
		EnterRule(_localctx, 658, RULE_withRoles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5114;
			Match(WITH_SYMBOL);
			State = 5115;
			Match(ROLE_SYMBOL);
			State = 5123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,570,Context) ) {
			case 1:
				{
				State = 5116;
				roleList();
				}
				break;
			case 2:
				{
				State = 5117;
				Match(ALL_SYMBOL);
				State = 5119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					State = 5118;
					exceptRoleList();
					}
				}

				}
				break;
			case 3:
				{
				State = 5121;
				Match(NONE_SYMBOL);
				}
				break;
			case 4:
				{
				State = 5122;
				Match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantAsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithRolesContext withRoles() {
			return GetRuleContext<WithRolesContext>(0);
		}
		public GrantAsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantAs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantAs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantAs(this);
		}
	}

	[RuleVersion(0)]
	public GrantAsContext grantAs() {
		GrantAsContext _localctx = new GrantAsContext(Context, State);
		EnterRule(_localctx, 660, RULE_grantAs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5125;
			Match(AS_SYMBOL);
			State = 5126;
			Match(USER_SYMBOL);
			State = 5128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				State = 5127;
				withRoles();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionedRequireClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequireClauseContext requireClause() {
			return GetRuleContext<RequireClauseContext>(0);
		}
		public VersionedRequireClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionedRequireClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVersionedRequireClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVersionedRequireClause(this);
		}
	}

	[RuleVersion(0)]
	public VersionedRequireClauseContext versionedRequireClause() {
		VersionedRequireClauseContext _localctx = new VersionedRequireClauseContext(Context, State);
		EnterRule(_localctx, 662, RULE_versionedRequireClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5130;
			if (!(this.isServerVersionLt80011())) throw new FailedPredicateException(this, "this.isServerVersionLt80011()");
			State = 5131;
			requireClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext[] user() {
			return GetRuleContexts<UserContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user(int i) {
			return GetRuleContext<UserContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO_SYMBOL() { return GetTokens(MySQLParser.TO_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL(int i) {
			return GetToken(MySQLParser.TO_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RenameUserStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUserStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRenameUserStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRenameUserStatement(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserStatementContext renameUserStatement() {
		RenameUserStatementContext _localctx = new RenameUserStatementContext(Context, State);
		EnterRule(_localctx, 664, RULE_renameUserStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5133;
			Match(RENAME_SYMBOL);
			State = 5134;
			Match(USER_SYMBOL);
			State = 5135;
			user();
			State = 5136;
			Match(TO_SYMBOL);
			State = 5137;
			user();
			State = 5145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5138;
				Match(COMMA_SYMBOL);
				State = 5139;
				user();
				State = 5140;
				Match(TO_SYMBOL);
				State = 5141;
				user();
				}
				}
				State = 5147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE_SYMBOL() { return GetToken(MySQLParser.REVOKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return GetRuleContext<RoleOrPrivilegesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantIdentifierContext grantIdentifier() {
			return GetRuleContext<GrantIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IgnoreUnknownUserContext ignoreUnknownUser() {
			return GetRuleContext<IgnoreUnknownUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_SYMBOL() { return GetToken(MySQLParser.GRANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AclTypeContext aclType() {
			return GetRuleContext<AclTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public RevokeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRevokeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRevokeStatement(this);
		}
	}

	[RuleVersion(0)]
	public RevokeStatementContext revokeStatement() {
		RevokeStatementContext _localctx = new RevokeStatementContext(Context, State);
		EnterRule(_localctx, 666, RULE_revokeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5148;
			Match(REVOKE_SYMBOL);
			State = 5151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,573,Context) ) {
			case 1:
				{
				State = 5149;
				if (!(this.isServerVersionGe80031())) throw new FailedPredicateException(this, "this.isServerVersionGe80031()");
				State = 5150;
				ifExists();
				}
				break;
			}
			State = 5188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,578,Context) ) {
			case 1:
				{
				State = 5153;
				roleOrPrivilegesList();
				State = 5154;
				Match(FROM_SYMBOL);
				State = 5155;
				userList();
				}
				break;
			case 2:
				{
				State = 5157;
				roleOrPrivilegesList();
				State = 5158;
				Match(ON_SYMBOL);
				State = 5160;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,574,Context) ) {
				case 1:
					{
					State = 5159;
					aclType();
					}
					break;
				}
				State = 5162;
				grantIdentifier();
				State = 5163;
				Match(FROM_SYMBOL);
				State = 5164;
				userList();
				}
				break;
			case 3:
				{
				State = 5166;
				Match(ALL_SYMBOL);
				State = 5168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES_SYMBOL) {
					{
					State = 5167;
					Match(PRIVILEGES_SYMBOL);
					}
				}

				State = 5178;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON_SYMBOL:
					{
					State = 5170;
					Match(ON_SYMBOL);
					State = 5172;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,576,Context) ) {
					case 1:
						{
						State = 5171;
						aclType();
						}
						break;
					}
					State = 5174;
					grantIdentifier();
					}
					break;
				case COMMA_SYMBOL:
					{
					State = 5175;
					Match(COMMA_SYMBOL);
					State = 5176;
					Match(GRANT_SYMBOL);
					State = 5177;
					Match(OPTION_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5180;
				Match(FROM_SYMBOL);
				State = 5181;
				userList();
				}
				break;
			case 4:
				{
				State = 5182;
				Match(PROXY_SYMBOL);
				State = 5183;
				Match(ON_SYMBOL);
				State = 5184;
				user();
				State = 5185;
				Match(FROM_SYMBOL);
				State = 5186;
				userList();
				}
				break;
			}
			State = 5192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,579,Context) ) {
			case 1:
				{
				State = 5190;
				if (!(this.isServerVersionGe80031())) throw new FailedPredicateException(this, "this.isServerVersionGe80031()");
				State = 5191;
				ignoreUnknownUser();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AclTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public AclTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aclType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAclType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAclType(this);
		}
	}

	[RuleVersion(0)]
	public AclTypeContext aclType() {
		AclTypeContext _localctx = new AclTypeContext(Context, State);
		EnterRule(_localctx, 668, RULE_aclType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5194;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION_SYMBOL || _la==PROCEDURE_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrPrivilegesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrPrivilegeContext[] roleOrPrivilege() {
			return GetRuleContexts<RoleOrPrivilegeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrPrivilegeContext roleOrPrivilege(int i) {
			return GetRuleContext<RoleOrPrivilegeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrPrivilegesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleOrPrivilegesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleOrPrivilegesList(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrPrivilegesListContext roleOrPrivilegesList() {
		RoleOrPrivilegesListContext _localctx = new RoleOrPrivilegesListContext(Context, State);
		EnterRule(_localctx, 670, RULE_roleOrPrivilegesList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5196;
			roleOrPrivilege();
			State = 5201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5197;
				Match(COMMA_SYMBOL);
				State = 5198;
				roleOrPrivilege();
				}
				}
				State = 5203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrPrivilegeContext : ParserRuleContext {
		public IToken @object;
		[System.Diagnostics.DebuggerNonUserCode] public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return GetRuleContext<RoleIdentifierOrTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT_SYMBOL() { return GetToken(MySQLParser.SELECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_SYMBOL() { return GetToken(MySQLParser.INSERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES_SYMBOL() { return GetToken(MySQLParser.REFERENCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_SYMBOL() { return GetToken(MySQLParser.DELETE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAGE_SYMBOL() { return GetToken(MySQLParser.USAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySQLParser.RELOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySQLParser.PROCESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_SYMBOL() { return GetToken(MySQLParser.FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER_SYMBOL() { return GetToken(MySQLParser.SUPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_SYMBOL() { return GetToken(MySQLParser.GRANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES_SYMBOL() { return GetToken(MySQLParser.DATABASES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySQLParser.CLIENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleOrPrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrPrivilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleOrPrivilege(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleOrPrivilege(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrPrivilegeContext roleOrPrivilege() {
		RoleOrPrivilegeContext _localctx = new RoleOrPrivilegeContext(Context, State);
		EnterRule(_localctx, 672, RULE_roleOrPrivilege);
		int _la;
		try {
			State = 5246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,588,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5214;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,583,Context) ) {
				case 1:
					{
					State = 5204;
					roleIdentifierOrText();
					State = 5206;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OPEN_PAR_SYMBOL) {
						{
						State = 5205;
						columnInternalRefList();
						}
					}

					}
					break;
				case 2:
					{
					State = 5208;
					roleIdentifierOrText();
					State = 5212;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AT_TEXT_SUFFIX:
						{
						State = 5209;
						Match(AT_TEXT_SUFFIX);
						}
						break;
					case AT_SIGN_SYMBOL:
						{
						State = 5210;
						Match(AT_SIGN_SYMBOL);
						State = 5211;
						textOrIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5216;
				_la = TokenStream.LA(1);
				if ( !(_la==INSERT_SYMBOL || _la==REFERENCES_SYMBOL || _la==SELECT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					State = 5217;
					columnInternalRefList();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5220;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & 2251954432516097L) != 0) || _la==INDEX_SYMBOL || ((((_la - 441)) & ~0x3f) == 0 && ((1L << (_la - 441)) & 134217745L) != 0) || _la==SHUTDOWN_SYMBOL || _la==SUPER_SYMBOL || _la==TRIGGER_SYMBOL || _la==USAGE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5221;
				Match(GRANT_SYMBOL);
				State = 5222;
				Match(OPTION_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5223;
				Match(SHOW_SYMBOL);
				State = 5224;
				Match(DATABASES_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5225;
				Match(CREATE_SYMBOL);
				State = 5229;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEMPORARY_SYMBOL:
					{
					State = 5226;
					Match(TEMPORARY_SYMBOL);
					State = 5227;
					_localctx.@object = Match(TABLES_SYMBOL);
					}
					break;
				case ROUTINE_SYMBOL:
				case TABLESPACE_SYMBOL:
				case USER_SYMBOL:
				case VIEW_SYMBOL:
					{
					State = 5228;
					_localctx.@object = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ROUTINE_SYMBOL || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & 4611721202799476737L) != 0)) ) {
						_localctx.@object = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case COMMA_SYMBOL:
				case FROM_SYMBOL:
				case ON_SYMBOL:
				case TO_SYMBOL:
					break;
				default:
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5231;
				Match(LOCK_SYMBOL);
				State = 5232;
				Match(TABLES_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5233;
				Match(REPLICATION_SYMBOL);
				State = 5236;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLIENT_SYMBOL:
					{
					State = 5234;
					Match(CLIENT_SYMBOL);
					}
					break;
				case SLAVE_SYMBOL:
				case REPLICA_SYMBOL:
					{
					State = 5235;
					replica();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5238;
				Match(SHOW_SYMBOL);
				State = 5239;
				Match(VIEW_SYMBOL);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5240;
				Match(ALTER_SYMBOL);
				State = 5242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROUTINE_SYMBOL) {
					{
					State = 5241;
					Match(ROUTINE_SYMBOL);
					}
				}

				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5244;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE_SYMBOL || _la==DROP_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5245;
				Match(ROLE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT_OPERATOR() { return GetTokens(MySQLParser.MULT_OPERATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR(int i) {
			return GetToken(MySQLParser.MULT_OPERATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public GrantIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public GrantIdentifierContext grantIdentifier() {
		GrantIdentifierContext _localctx = new GrantIdentifierContext(Context, State);
		EnterRule(_localctx, 674, RULE_grantIdentifier);
		int _la;
		try {
			State = 5264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,591,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5248;
				Match(MULT_OPERATOR);
				State = 5251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 5249;
					Match(DOT_SYMBOL);
					State = 5250;
					Match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5253;
				schemaRef();
				State = 5256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 5254;
					Match(DOT_SYMBOL);
					State = 5255;
					Match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5258;
				tableRef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5259;
				if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				State = 5260;
				schemaRef();
				State = 5261;
				Match(DOT_SYMBOL);
				State = 5262;
				tableRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequireListElementContext[] requireListElement() {
			return GetRuleContexts<RequireListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequireListElementContext requireListElement(int i) {
			return GetRuleContext<RequireListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND_SYMBOL() { return GetTokens(MySQLParser.AND_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL(int i) {
			return GetToken(MySQLParser.AND_SYMBOL, i);
		}
		public RequireListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRequireList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRequireList(this);
		}
	}

	[RuleVersion(0)]
	public RequireListContext requireList() {
		RequireListContext _localctx = new RequireListContext(Context, State);
		EnterRule(_localctx, 676, RULE_requireList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5266;
			requireListElement();
			State = 5273;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,593,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5268;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND_SYMBOL) {
						{
						State = 5267;
						Match(AND_SYMBOL);
						}
					}

					State = 5270;
					requireListElement();
					}
					} 
				}
				State = 5275;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,593,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireListElementContext : ParserRuleContext {
		public IToken element;
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySQLParser.CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySQLParser.ISSUER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public RequireListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRequireListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRequireListElement(this);
		}
	}

	[RuleVersion(0)]
	public RequireListElementContext requireListElement() {
		RequireListElementContext _localctx = new RequireListElementContext(Context, State);
		EnterRule(_localctx, 678, RULE_requireListElement);
		try {
			State = 5282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CIPHER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5276;
				_localctx.element = Match(CIPHER_SYMBOL);
				State = 5277;
				textString();
				}
				break;
			case ISSUER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5278;
				_localctx.element = Match(ISSUER_SYMBOL);
				State = 5279;
				textString();
				}
				break;
			case SUBJECT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5280;
				_localctx.element = Match(SUBJECT_SYMBOL);
				State = 5281;
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantOptionContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_SYMBOL() { return GetToken(MySQLParser.GRANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public GrantOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantOption(this);
		}
	}

	[RuleVersion(0)]
	public GrantOptionContext grantOption() {
		GrantOptionContext _localctx = new GrantOptionContext(Context, State);
		EnterRule(_localctx, 680, RULE_grantOption);
		try {
			State = 5297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,596,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5284;
				_localctx.option = Match(GRANT_SYMBOL);
				State = 5285;
				Match(OPTION_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5286;
				if (!(this.isServerVersionLt80011())) throw new FailedPredicateException(this, "this.isServerVersionLt80011()");
				State = 5295;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MAX_QUERIES_PER_HOUR_SYMBOL:
					{
					State = 5287;
					_localctx.option = Match(MAX_QUERIES_PER_HOUR_SYMBOL);
					State = 5288;
					ulong_number();
					}
					break;
				case MAX_UPDATES_PER_HOUR_SYMBOL:
					{
					State = 5289;
					_localctx.option = Match(MAX_UPDATES_PER_HOUR_SYMBOL);
					State = 5290;
					ulong_number();
					}
					break;
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
					{
					State = 5291;
					_localctx.option = Match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
					State = 5292;
					ulong_number();
					}
					break;
				case MAX_USER_CONNECTIONS_SYMBOL:
					{
					State = 5293;
					_localctx.option = Match(MAX_USER_CONNECTIONS_SYMBOL);
					State = 5294;
					ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetRoleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext[] roleList() {
			return GetRuleContexts<RoleListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList(int i) {
			return GetRuleContext<RoleListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT_SYMBOL() { return GetToken(MySQLParser.EXCEPT_SYMBOL, 0); }
		public SetRoleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setRoleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetRoleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetRoleStatement(this);
		}
	}

	[RuleVersion(0)]
	public SetRoleStatementContext setRoleStatement() {
		SetRoleStatementContext _localctx = new SetRoleStatementContext(Context, State);
		EnterRule(_localctx, 682, RULE_setRoleStatement);
		int _la;
		try {
			State = 5322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,599,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5299;
				Match(SET_SYMBOL);
				State = 5300;
				Match(ROLE_SYMBOL);
				State = 5301;
				roleList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5302;
				Match(SET_SYMBOL);
				State = 5303;
				Match(ROLE_SYMBOL);
				State = 5304;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT_SYMBOL || _la==NONE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5305;
				Match(SET_SYMBOL);
				State = 5306;
				Match(DEFAULT_SYMBOL);
				State = 5307;
				Match(ROLE_SYMBOL);
				State = 5311;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,597,Context) ) {
				case 1:
					{
					State = 5308;
					roleList();
					}
					break;
				case 2:
					{
					State = 5309;
					Match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					State = 5310;
					Match(ALL_SYMBOL);
					}
					break;
				}
				State = 5313;
				Match(TO_SYMBOL);
				State = 5314;
				roleList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5315;
				Match(SET_SYMBOL);
				State = 5316;
				Match(ROLE_SYMBOL);
				State = 5317;
				Match(ALL_SYMBOL);
				State = 5320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					State = 5318;
					Match(EXCEPT_SYMBOL);
					State = 5319;
					roleList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleContext[] role() {
			return GetRuleContexts<RoleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleContext role(int i) {
			return GetRuleContext<RoleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleList(this);
		}
	}

	[RuleVersion(0)]
	public RoleListContext roleList() {
		RoleListContext _localctx = new RoleListContext(Context, State);
		EnterRule(_localctx, 684, RULE_roleList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5324;
			role();
			State = 5329;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,600,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5325;
					Match(COMMA_SYMBOL);
					State = 5326;
					role();
					}
					} 
				}
				State = 5331;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,600,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return GetRuleContext<RoleIdentifierOrTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		public RoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRole(this);
		}
	}

	[RuleVersion(0)]
	public RoleContext role() {
		RoleContext _localctx = new RoleContext(Context, State);
		EnterRule(_localctx, 686, RULE_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5332;
			roleIdentifierOrText();
			State = 5334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,601,Context) ) {
			case 1:
				{
				State = 5333;
				userVariable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAdministrationStatementContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE_SYMBOL() { return GetToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoWriteToBinLogContext noWriteToBinLog() {
			return GetRuleContext<NoWriteToBinLogContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HistogramContext histogram() {
			return GetRuleContext<HistogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckOptionContext[] checkOption() {
			return GetRuleContexts<CheckOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckOptionContext checkOption(int i) {
			return GetRuleContext<CheckOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE_SYMBOL() { return GetToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySQLParser.REPAIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RepairTypeContext[] repairType() {
			return GetRuleContexts<RepairTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepairTypeContext repairType(int i) {
			return GetRuleContext<RepairTypeContext>(i);
		}
		public TableAdministrationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAdministrationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableAdministrationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableAdministrationStatement(this);
		}
	}

	[RuleVersion(0)]
	public TableAdministrationStatementContext tableAdministrationStatement() {
		TableAdministrationStatementContext _localctx = new TableAdministrationStatementContext(Context, State);
		EnterRule(_localctx, 688, RULE_tableAdministrationStatement);
		int _la;
		try {
			State = 5378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANALYZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5336;
				_localctx.type = Match(ANALYZE_SYMBOL);
				State = 5338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 5337;
					noWriteToBinLog();
					}
				}

				State = 5340;
				Match(TABLE_SYMBOL);
				State = 5341;
				tableRefList();
				State = 5343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DROP_SYMBOL || _la==UPDATE_SYMBOL) {
					{
					State = 5342;
					histogram();
					}
				}

				}
				break;
			case CHECK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5345;
				_localctx.type = Match(CHECK_SYMBOL);
				State = 5346;
				Match(TABLE_SYMBOL);
				State = 5347;
				tableRefList();
				State = 5351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CHANGED_SYMBOL || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & 131089L) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) {
					{
					{
					State = 5348;
					checkOption();
					}
					}
					State = 5353;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case CHECKSUM_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5354;
				_localctx.type = Match(CHECKSUM_SYMBOL);
				State = 5355;
				Match(TABLE_SYMBOL);
				State = 5356;
				tableRefList();
				State = 5358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) {
					{
					State = 5357;
					_la = TokenStream.LA(1);
					if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case OPTIMIZE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5360;
				_localctx.type = Match(OPTIMIZE_SYMBOL);
				State = 5362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 5361;
					noWriteToBinLog();
					}
				}

				State = 5364;
				Match(TABLE_SYMBOL);
				State = 5365;
				tableRefList();
				}
				break;
			case REPAIR_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5366;
				_localctx.type = Match(REPAIR_SYMBOL);
				State = 5368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 5367;
					noWriteToBinLog();
					}
				}

				State = 5370;
				Match(TABLE_SYMBOL);
				State = 5371;
				tableRefList();
				State = 5375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					State = 5372;
					repairType();
					}
					}
					State = 5377;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HistogramAutoUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANUAL_SYMBOL() { return GetToken(MySQLParser.MANUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_SYMBOL() { return GetToken(MySQLParser.AUTO_SYMBOL, 0); }
		public HistogramAutoUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_histogramAutoUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHistogramAutoUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHistogramAutoUpdate(this);
		}
	}

	[RuleVersion(0)]
	public HistogramAutoUpdateContext histogramAutoUpdate() {
		HistogramAutoUpdateContext _localctx = new HistogramAutoUpdateContext(Context, State);
		EnterRule(_localctx, 690, RULE_histogramAutoUpdate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5380;
			if (!(this.isServerVersionGe80200())) throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			State = 5381;
			_la = TokenStream.LA(1);
			if ( !(_la==AUTO_SYMBOL || _la==MANUAL_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5382;
			Match(UPDATE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HistogramUpdateParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HistogramNumBucketsContext histogramNumBuckets() {
			return GetRuleContext<HistogramNumBucketsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HistogramAutoUpdateContext histogramAutoUpdate() {
			return GetRuleContext<HistogramAutoUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public HistogramUpdateParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_histogramUpdateParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHistogramUpdateParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHistogramUpdateParam(this);
		}
	}

	[RuleVersion(0)]
	public HistogramUpdateParamContext histogramUpdateParam() {
		HistogramUpdateParamContext _localctx = new HistogramUpdateParamContext(Context, State);
		EnterRule(_localctx, 692, RULE_histogramUpdateParam);
		try {
			State = 5394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,612,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5385;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,610,Context) ) {
				case 1:
					{
					State = 5384;
					histogramNumBuckets();
					}
					break;
				}
				State = 5388;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,611,Context) ) {
				case 1:
					{
					State = 5387;
					histogramAutoUpdate();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5390;
				if (!(this.isServerVersionGe80031())) throw new FailedPredicateException(this, "this.isServerVersionGe80031()");
				State = 5391;
				Match(USING_SYMBOL);
				State = 5392;
				Match(DATA_SYMBOL);
				State = 5393;
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HistogramNumBucketsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public HistogramNumBucketsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_histogramNumBuckets; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHistogramNumBuckets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHistogramNumBuckets(this);
		}
	}

	[RuleVersion(0)]
	public HistogramNumBucketsContext histogramNumBuckets() {
		HistogramNumBucketsContext _localctx = new HistogramNumBucketsContext(Context, State);
		EnterRule(_localctx, 694, RULE_histogramNumBuckets);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5396;
			if (!(this.isServerVersionGe80200())) throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			State = 5397;
			Match(WITH_SYMBOL);
			State = 5398;
			Match(INT_NUMBER);
			State = 5399;
			Match(BUCKETS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HistogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HistogramUpdateParamContext histogramUpdateParam() {
			return GetRuleContext<HistogramUpdateParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public HistogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_histogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHistogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHistogram(this);
		}
	}

	[RuleVersion(0)]
	public HistogramContext histogram() {
		HistogramContext _localctx = new HistogramContext(Context, State);
		EnterRule(_localctx, 696, RULE_histogram);
		try {
			State = 5411;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPDATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5401;
				Match(UPDATE_SYMBOL);
				State = 5402;
				Match(HISTOGRAM_SYMBOL);
				State = 5403;
				Match(ON_SYMBOL);
				State = 5404;
				identifierList();
				State = 5405;
				histogramUpdateParam();
				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5407;
				Match(DROP_SYMBOL);
				State = 5408;
				Match(HISTOGRAM_SYMBOL);
				State = 5409;
				Match(ON_SYMBOL);
				State = 5410;
				identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST_SYMBOL() { return GetToken(MySQLParser.FAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public CheckOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCheckOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCheckOption(this);
		}
	}

	[RuleVersion(0)]
	public CheckOptionContext checkOption() {
		CheckOptionContext _localctx = new CheckOptionContext(Context, State);
		EnterRule(_localctx, 698, RULE_checkOption);
		int _la;
		try {
			State = 5416;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5413;
				Match(FOR_SYMBOL);
				State = 5414;
				Match(UPGRADE_SYMBOL);
				}
				break;
			case CHANGED_SYMBOL:
			case EXTENDED_SYMBOL:
			case FAST_SYMBOL:
			case MEDIUM_SYMBOL:
			case QUICK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5415;
				_la = TokenStream.LA(1);
				if ( !(_la==CHANGED_SYMBOL || _la==EXTENDED_SYMBOL || _la==FAST_SYMBOL || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepairTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public RepairTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repairType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRepairType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRepairType(this);
		}
	}

	[RuleVersion(0)]
	public RepairTypeContext repairType() {
		RepairTypeContext _localctx = new RepairTypeContext(Context, State);
		EnterRule(_localctx, 700, RULE_repairType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5418;
			_la = TokenStream.LA(1);
			if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UninstallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PluginRefContext pluginRef() {
			return GetRuleContext<PluginRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComponentRefContext[] componentRef() {
			return GetRuleContexts<ComponentRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComponentRefContext componentRef(int i) {
			return GetRuleContext<ComponentRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UninstallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uninstallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUninstallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUninstallStatement(this);
		}
	}

	[RuleVersion(0)]
	public UninstallStatementContext uninstallStatement() {
		UninstallStatementContext _localctx = new UninstallStatementContext(Context, State);
		EnterRule(_localctx, 702, RULE_uninstallStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5420;
			Match(UNINSTALL_SYMBOL);
			State = 5432;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUGIN_SYMBOL:
				{
				State = 5421;
				Match(PLUGIN_SYMBOL);
				State = 5422;
				pluginRef();
				}
				break;
			case COMPONENT_SYMBOL:
				{
				State = 5423;
				Match(COMPONENT_SYMBOL);
				State = 5424;
				componentRef();
				State = 5429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 5425;
					Match(COMMA_SYMBOL);
					State = 5426;
					componentRef();
					}
					}
					State = 5431;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySQLParser.INSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME_SYMBOL() { return GetToken(MySQLParser.SONAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralListContext textStringLiteralList() {
			return GetRuleContext<TextStringLiteralListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstallSetValueListContext installSetValueList() {
			return GetRuleContext<InstallSetValueListContext>(0);
		}
		public InstallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInstallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInstallStatement(this);
		}
	}

	[RuleVersion(0)]
	public InstallStatementContext installStatement() {
		InstallStatementContext _localctx = new InstallStatementContext(Context, State);
		EnterRule(_localctx, 704, RULE_installStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5434;
			Match(INSTALL_SYMBOL);
			State = 5445;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUGIN_SYMBOL:
				{
				State = 5435;
				Match(PLUGIN_SYMBOL);
				State = 5436;
				identifier();
				State = 5437;
				Match(SONAME_SYMBOL);
				State = 5438;
				textStringLiteral();
				}
				break;
			case COMPONENT_SYMBOL:
				{
				State = 5440;
				Match(COMPONENT_SYMBOL);
				State = 5441;
				textStringLiteralList();
				State = 5443;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,617,Context) ) {
				case 1:
					{
					State = 5442;
					installSetValueList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallOptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public InstallOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installOptionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInstallOptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInstallOptionType(this);
		}
	}

	[RuleVersion(0)]
	public InstallOptionTypeContext installOptionType() {
		InstallOptionTypeContext _localctx = new InstallOptionTypeContext(Context, State);
		EnterRule(_localctx, 706, RULE_installOptionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5447;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==PERSIST_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallSetRvalueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public InstallSetRvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installSetRvalue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInstallSetRvalue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInstallSetRvalue(this);
		}
	}

	[RuleVersion(0)]
	public InstallSetRvalueContext installSetRvalue() {
		InstallSetRvalueContext _localctx = new InstallSetRvalueContext(Context, State);
		EnterRule(_localctx, 708, RULE_installSetRvalue);
		try {
			State = 5451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,619,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5449;
				expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5450;
				Match(ON_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallSetValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstallOptionTypeContext installOptionType() {
			return GetRuleContext<InstallOptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LvalueVariableContext lvalueVariable() {
			return GetRuleContext<LvalueVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstallSetRvalueContext installSetRvalue() {
			return GetRuleContext<InstallSetRvalueContext>(0);
		}
		public InstallSetValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installSetValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInstallSetValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInstallSetValue(this);
		}
	}

	[RuleVersion(0)]
	public InstallSetValueContext installSetValue() {
		InstallSetValueContext _localctx = new InstallSetValueContext(Context, State);
		EnterRule(_localctx, 710, RULE_installSetValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5453;
			installOptionType();
			State = 5454;
			lvalueVariable();
			State = 5455;
			equal();
			State = 5456;
			installSetRvalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallSetValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstallSetValueContext[] installSetValue() {
			return GetRuleContexts<InstallSetValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstallSetValueContext installSetValue(int i) {
			return GetRuleContext<InstallSetValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public InstallSetValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installSetValueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInstallSetValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInstallSetValueList(this);
		}
	}

	[RuleVersion(0)]
	public InstallSetValueListContext installSetValueList() {
		InstallSetValueListContext _localctx = new InstallSetValueListContext(Context, State);
		EnterRule(_localctx, 712, RULE_installSetValueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5458;
			if (!(this.isServerVersionGe80032())) throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
			State = 5459;
			Match(SET_SYMBOL);
			State = 5460;
			installSetValue();
			State = 5465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5461;
				Match(COMMA_SYMBOL);
				State = 5462;
				installSetValue();
				}
				}
				State = 5467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StartOptionValueListContext startOptionValueList() {
			return GetRuleContext<StartOptionValueListContext>(0);
		}
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetStatement(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(Context, State);
		EnterRule(_localctx, 714, RULE_setStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5468;
			Match(SET_SYMBOL);
			State = 5469;
			startOptionValueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartOptionValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return GetRuleContext<OptionValueNoOptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueListContinuedContext optionValueListContinued() {
			return GetRuleContext<OptionValueListContinuedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionCharacteristicsContext transactionCharacteristics() {
			return GetRuleContext<TransactionCharacteristicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() {
			return GetRuleContext<StartOptionValueListFollowingOptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PASSWORD_SYMBOL() { return GetTokens(MySQLParser.PASSWORD_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL(int i) {
			return GetToken(MySQLParser.PASSWORD_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplacePasswordContext replacePassword() {
			return GetRuleContext<ReplacePasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public StartOptionValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startOptionValueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStartOptionValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStartOptionValueList(this);
		}
	}

	[RuleVersion(0)]
	public StartOptionValueListContext startOptionValueList() {
		StartOptionValueListContext _localctx = new StartOptionValueListContext(Context, State);
		EnterRule(_localctx, 716, RULE_startOptionValueList);
		int _la;
		try {
			State = 5521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,630,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5471;
				optionValueNoOptionType();
				State = 5472;
				optionValueListContinued();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5474;
				Match(TRANSACTION_SYMBOL);
				State = 5475;
				transactionCharacteristics();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5476;
				optionType();
				State = 5477;
				startOptionValueListFollowingOptionType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5479;
				Match(PASSWORD_SYMBOL);
				State = 5482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 5480;
					Match(FOR_SYMBOL);
					State = 5481;
					user();
					}
				}

				State = 5484;
				equal();
				State = 5505;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,626,Context) ) {
				case 1:
					{
					State = 5485;
					textString();
					State = 5487;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						State = 5486;
						replacePassword();
						}
					}

					State = 5490;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						State = 5489;
						retainCurrentPassword();
						}
					}

					}
					break;
				case 2:
					{
					State = 5492;
					textString();
					State = 5494;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						State = 5493;
						replacePassword();
						}
					}

					State = 5497;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						State = 5496;
						retainCurrentPassword();
						}
					}

					}
					break;
				case 3:
					{
					State = 5499;
					if (!(this.isServerVersionLt80014())) throw new FailedPredicateException(this, "this.isServerVersionLt80014()");
					State = 5500;
					Match(PASSWORD_SYMBOL);
					State = 5501;
					Match(OPEN_PAR_SYMBOL);
					State = 5502;
					textString();
					State = 5503;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5507;
				if (!(this.isServerVersionGe80018())) throw new FailedPredicateException(this, "this.isServerVersionGe80018()");
				State = 5508;
				Match(PASSWORD_SYMBOL);
				State = 5511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 5509;
					Match(FOR_SYMBOL);
					State = 5510;
					user();
					}
				}

				State = 5513;
				Match(TO_SYMBOL);
				State = 5514;
				Match(RANDOM_SYMBOL);
				State = 5516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REPLACE_SYMBOL) {
					{
					State = 5515;
					replacePassword();
					}
				}

				State = 5519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETAIN_SYMBOL) {
					{
					State = 5518;
					retainCurrentPassword();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionCharacteristicsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TransactionAccessModeContext transactionAccessMode() {
			return GetRuleContext<TransactionAccessModeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsolationLevelContext isolationLevel() {
			return GetRuleContext<IsolationLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TransactionCharacteristicsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionCharacteristics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionCharacteristics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionCharacteristics(this);
		}
	}

	[RuleVersion(0)]
	public TransactionCharacteristicsContext transactionCharacteristics() {
		TransactionCharacteristicsContext _localctx = new TransactionCharacteristicsContext(Context, State);
		EnterRule(_localctx, 718, RULE_transactionCharacteristics);
		int _la;
		try {
			State = 5532;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5523;
				transactionAccessMode();
				State = 5525;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ISOLATION_SYMBOL) {
					{
					State = 5524;
					isolationLevel();
					}
				}

				}
				break;
			case ISOLATION_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5527;
				isolationLevel();
				State = 5530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 5528;
					Match(COMMA_SYMBOL);
					State = 5529;
					transactionAccessMode();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionAccessModeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE_SYMBOL() { return GetToken(MySQLParser.WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY_SYMBOL() { return GetToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TransactionAccessModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionAccessMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionAccessMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionAccessMode(this);
		}
	}

	[RuleVersion(0)]
	public TransactionAccessModeContext transactionAccessMode() {
		TransactionAccessModeContext _localctx = new TransactionAccessModeContext(Context, State);
		EnterRule(_localctx, 720, RULE_transactionAccessMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5534;
			Match(READ_SYMBOL);
			State = 5535;
			_la = TokenStream.LA(1);
			if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsolationLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySQLParser.LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isolationLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIsolationLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIsolationLevel(this);
		}
	}

	[RuleVersion(0)]
	public IsolationLevelContext isolationLevel() {
		IsolationLevelContext _localctx = new IsolationLevelContext(Context, State);
		EnterRule(_localctx, 722, RULE_isolationLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5537;
			Match(ISOLATION_SYMBOL);
			State = 5538;
			Match(LEVEL_SYMBOL);
			State = 5544;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPEATABLE_SYMBOL:
				{
				State = 5539;
				Match(REPEATABLE_SYMBOL);
				State = 5540;
				Match(READ_SYMBOL);
				}
				break;
			case READ_SYMBOL:
				{
				State = 5541;
				Match(READ_SYMBOL);
				State = 5542;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMITTED_SYMBOL || _la==UNCOMMITTED_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SERIALIZABLE_SYMBOL:
				{
				State = 5543;
				Match(SERIALIZABLE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueListContinuedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext[] optionValue() {
			return GetRuleContexts<OptionValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue(int i) {
			return GetRuleContext<OptionValueContext>(i);
		}
		public OptionValueListContinuedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueListContinued; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionValueListContinued(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionValueListContinued(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueListContinuedContext optionValueListContinued() {
		OptionValueListContinuedContext _localctx = new OptionValueListContinuedContext(Context, State);
		EnterRule(_localctx, 724, RULE_optionValueListContinued);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5550;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5546;
				Match(COMMA_SYMBOL);
				State = 5547;
				optionValue();
				}
				}
				State = 5552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueNoOptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueVariableContext lvalueVariable() {
			return GetRuleContext<LvalueVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetVarIdentTypeContext setVarIdentType() {
			return GetRuleContext<SetVarIdentTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES_SYMBOL() { return GetToken(MySQLParser.NAMES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public OptionValueNoOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueNoOptionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionValueNoOptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionValueNoOptionType(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueNoOptionTypeContext optionValueNoOptionType() {
		OptionValueNoOptionTypeContext _localctx = new OptionValueNoOptionTypeContext(Context, State);
		EnterRule(_localctx, 726, RULE_optionValueNoOptionType);
		int _la;
		try {
			State = 5582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,639,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5553;
				lvalueVariable();
				State = 5554;
				equal();
				State = 5555;
				setExprOrDefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5557;
				charsetClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5558;
				userVariable();
				State = 5559;
				equal();
				State = 5560;
				expr(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5562;
				Match(AT_AT_SIGN_SYMBOL);
				State = 5564;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,636,Context) ) {
				case 1:
					{
					State = 5563;
					setVarIdentType();
					}
					break;
				}
				State = 5566;
				lvalueVariable();
				State = 5567;
				equal();
				State = 5568;
				setExprOrDefault();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5570;
				Match(NAMES_SYMBOL);
				State = 5580;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,638,Context) ) {
				case 1:
					{
					State = 5571;
					equal();
					State = 5572;
					expr(0);
					}
					break;
				case 2:
					{
					State = 5574;
					charsetName();
					State = 5576;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLLATE_SYMBOL) {
						{
						State = 5575;
						collate();
						}
					}

					}
					break;
				case 3:
					{
					State = 5578;
					if (!(this.isServerVersionGe80011())) throw new FailedPredicateException(this, "this.isServerVersionGe80011()");
					State = 5579;
					Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LvalueVariableContext lvalueVariable() {
			return GetRuleContext<LvalueVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return GetRuleContext<OptionValueNoOptionTypeContext>(0);
		}
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 728, RULE_optionValue);
		try {
			State = 5590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,640,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5584;
				optionType();
				State = 5585;
				lvalueVariable();
				State = 5586;
				equal();
				State = 5587;
				setExprOrDefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5589;
				optionValueNoOptionType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetSystemVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LvalueVariableContext lvalueVariable() {
			return GetRuleContext<LvalueVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetVarIdentTypeContext setVarIdentType() {
			return GetRuleContext<SetVarIdentTypeContext>(0);
		}
		public SetSystemVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setSystemVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetSystemVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetSystemVariable(this);
		}
	}

	[RuleVersion(0)]
	public SetSystemVariableContext setSystemVariable() {
		SetSystemVariableContext _localctx = new SetSystemVariableContext(Context, State);
		EnterRule(_localctx, 730, RULE_setSystemVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5592;
			Match(AT_AT_SIGN_SYMBOL);
			State = 5594;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,641,Context) ) {
			case 1:
				{
				State = 5593;
				setVarIdentType();
				}
				break;
			}
			State = 5596;
			lvalueVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartOptionValueListFollowingOptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
			return GetRuleContext<OptionValueFollowingOptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueListContinuedContext optionValueListContinued() {
			return GetRuleContext<OptionValueListContinuedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionCharacteristicsContext transactionCharacteristics() {
			return GetRuleContext<TransactionCharacteristicsContext>(0);
		}
		public StartOptionValueListFollowingOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startOptionValueListFollowingOptionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStartOptionValueListFollowingOptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStartOptionValueListFollowingOptionType(this);
		}
	}

	[RuleVersion(0)]
	public StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() {
		StartOptionValueListFollowingOptionTypeContext _localctx = new StartOptionValueListFollowingOptionTypeContext(Context, State);
		EnterRule(_localctx, 732, RULE_startOptionValueListFollowingOptionType);
		try {
			State = 5603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,642,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5598;
				optionValueFollowingOptionType();
				State = 5599;
				optionValueListContinued();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5601;
				Match(TRANSACTION_SYMBOL);
				State = 5602;
				transactionCharacteristics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueFollowingOptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueVariableContext lvalueVariable() {
			return GetRuleContext<LvalueVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		public OptionValueFollowingOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueFollowingOptionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionValueFollowingOptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionValueFollowingOptionType(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
		OptionValueFollowingOptionTypeContext _localctx = new OptionValueFollowingOptionTypeContext(Context, State);
		EnterRule(_localctx, 734, RULE_optionValueFollowingOptionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5605;
			lvalueVariable();
			State = 5606;
			equal();
			State = 5607;
			setExprOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetExprOrDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public SetExprOrDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setExprOrDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetExprOrDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetExprOrDefault(this);
		}
	}

	[RuleVersion(0)]
	public SetExprOrDefaultContext setExprOrDefault() {
		SetExprOrDefaultContext _localctx = new SetExprOrDefaultContext(Context, State);
		EnterRule(_localctx, 736, RULE_setExprOrDefault);
		try {
			State = 5616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,643,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5609;
				expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5610;
				Match(DEFAULT_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5611;
				Match(ON_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5612;
				Match(ALL_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5613;
				Match(BINARY_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5614;
				Match(ROW_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5615;
				Match(SYSTEM_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowDatabasesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES_SYMBOL() { return GetToken(MySQLParser.DATABASES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowDatabasesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showDatabasesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowDatabasesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowDatabasesStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowDatabasesStatementContext showDatabasesStatement() {
		ShowDatabasesStatementContext _localctx = new ShowDatabasesStatementContext(Context, State);
		EnterRule(_localctx, 738, RULE_showDatabasesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5618;
			Match(SHOW_SYMBOL);
			State = 5619;
			Match(DATABASES_SYMBOL);
			State = 5621;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5620;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowTablesStatementContext : ParserRuleContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowCommandTypeContext showCommandType() {
			return GetRuleContext<ShowCommandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowTablesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showTablesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowTablesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowTablesStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowTablesStatementContext showTablesStatement() {
		ShowTablesStatementContext _localctx = new ShowTablesStatementContext(Context, State);
		EnterRule(_localctx, 740, RULE_showTablesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5623;
			Match(SHOW_SYMBOL);
			State = 5625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED_SYMBOL || _la==FULL_SYMBOL) {
				{
				State = 5624;
				showCommandType();
				}
			}

			State = 5627;
			_localctx.value = Match(TABLES_SYMBOL);
			State = 5629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				State = 5628;
				inDb();
				}
			}

			State = 5632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5631;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowTriggersStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowTriggersStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showTriggersStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowTriggersStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowTriggersStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowTriggersStatementContext showTriggersStatement() {
		ShowTriggersStatementContext _localctx = new ShowTriggersStatementContext(Context, State);
		EnterRule(_localctx, 742, RULE_showTriggersStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5634;
			Match(SHOW_SYMBOL);
			State = 5636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FULL_SYMBOL) {
				{
				State = 5635;
				Match(FULL_SYMBOL);
				}
			}

			State = 5638;
			Match(TRIGGERS_SYMBOL);
			State = 5640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				State = 5639;
				inDb();
				}
			}

			State = 5643;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5642;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowEventsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySQLParser.EVENTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowEventsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showEventsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowEventsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowEventsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowEventsStatementContext showEventsStatement() {
		ShowEventsStatementContext _localctx = new ShowEventsStatementContext(Context, State);
		EnterRule(_localctx, 744, RULE_showEventsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5645;
			Match(SHOW_SYMBOL);
			State = 5646;
			Match(EVENTS_SYMBOL);
			State = 5648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				State = 5647;
				inDb();
				}
			}

			State = 5651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5650;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowTableStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowTableStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showTableStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowTableStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowTableStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowTableStatusStatementContext showTableStatusStatement() {
		ShowTableStatusStatementContext _localctx = new ShowTableStatusStatementContext(Context, State);
		EnterRule(_localctx, 746, RULE_showTableStatusStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5653;
			Match(SHOW_SYMBOL);
			State = 5654;
			Match(TABLE_SYMBOL);
			State = 5655;
			Match(STATUS_SYMBOL);
			State = 5657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				State = 5656;
				inDb();
				}
			}

			State = 5660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5659;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowOpenTablesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowOpenTablesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showOpenTablesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowOpenTablesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowOpenTablesStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowOpenTablesStatementContext showOpenTablesStatement() {
		ShowOpenTablesStatementContext _localctx = new ShowOpenTablesStatementContext(Context, State);
		EnterRule(_localctx, 748, RULE_showOpenTablesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5662;
			Match(SHOW_SYMBOL);
			State = 5663;
			Match(OPEN_SYMBOL);
			State = 5664;
			Match(TABLES_SYMBOL);
			State = 5666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				State = 5665;
				inDb();
				}
			}

			State = 5669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5668;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowParseTreeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSE_TREE_SYMBOL() { return GetToken(MySQLParser.PARSE_TREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public ShowParseTreeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showParseTreeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowParseTreeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowParseTreeStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowParseTreeStatementContext showParseTreeStatement() {
		ShowParseTreeStatementContext _localctx = new ShowParseTreeStatementContext(Context, State);
		EnterRule(_localctx, 750, RULE_showParseTreeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5671;
			if (!(this.isServerVersionGe80100())) throw new FailedPredicateException(this, "this.isServerVersionGe80100()");
			State = 5672;
			Match(SHOW_SYMBOL);
			State = 5673;
			Match(PARSE_TREE_SYMBOL);
			State = 5674;
			simpleStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowPluginsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public ShowPluginsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showPluginsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowPluginsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowPluginsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowPluginsStatementContext showPluginsStatement() {
		ShowPluginsStatementContext _localctx = new ShowPluginsStatementContext(Context, State);
		EnterRule(_localctx, 752, RULE_showPluginsStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5676;
			Match(SHOW_SYMBOL);
			State = 5677;
			Match(PLUGINS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowEngineLogsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineOrAllContext engineOrAll() {
			return GetRuleContext<EngineOrAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		public ShowEngineLogsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showEngineLogsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowEngineLogsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowEngineLogsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowEngineLogsStatementContext showEngineLogsStatement() {
		ShowEngineLogsStatementContext _localctx = new ShowEngineLogsStatementContext(Context, State);
		EnterRule(_localctx, 754, RULE_showEngineLogsStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5679;
			Match(SHOW_SYMBOL);
			State = 5680;
			Match(ENGINE_SYMBOL);
			State = 5681;
			engineOrAll();
			State = 5682;
			Match(LOGS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowEngineMutexStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineOrAllContext engineOrAll() {
			return GetRuleContext<EngineOrAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public ShowEngineMutexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showEngineMutexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowEngineMutexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowEngineMutexStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowEngineMutexStatementContext showEngineMutexStatement() {
		ShowEngineMutexStatementContext _localctx = new ShowEngineMutexStatementContext(Context, State);
		EnterRule(_localctx, 756, RULE_showEngineMutexStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5684;
			Match(SHOW_SYMBOL);
			State = 5685;
			Match(ENGINE_SYMBOL);
			State = 5686;
			engineOrAll();
			State = 5687;
			Match(MUTEX_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowEngineStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineOrAllContext engineOrAll() {
			return GetRuleContext<EngineOrAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ShowEngineStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showEngineStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowEngineStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowEngineStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowEngineStatusStatementContext showEngineStatusStatement() {
		ShowEngineStatusStatementContext _localctx = new ShowEngineStatusStatementContext(Context, State);
		EnterRule(_localctx, 758, RULE_showEngineStatusStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5689;
			Match(SHOW_SYMBOL);
			State = 5690;
			Match(ENGINE_SYMBOL);
			State = 5691;
			engineOrAll();
			State = 5692;
			Match(STATUS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowColumnsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowCommandTypeContext showCommandType() {
			return GetRuleContext<ShowCommandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowColumnsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showColumnsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowColumnsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowColumnsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowColumnsStatementContext showColumnsStatement() {
		ShowColumnsStatementContext _localctx = new ShowColumnsStatementContext(Context, State);
		EnterRule(_localctx, 760, RULE_showColumnsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5694;
			Match(SHOW_SYMBOL);
			State = 5696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED_SYMBOL || _la==FULL_SYMBOL) {
				{
				State = 5695;
				showCommandType();
				}
			}

			State = 5698;
			Match(COLUMNS_SYMBOL);
			State = 5699;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5700;
			tableRef();
			State = 5702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				State = 5701;
				inDb();
				}
			}

			State = 5705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5704;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowBinaryLogsStatementContext : ParserRuleContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		public ShowBinaryLogsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showBinaryLogsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowBinaryLogsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowBinaryLogsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowBinaryLogsStatementContext showBinaryLogsStatement() {
		ShowBinaryLogsStatementContext _localctx = new ShowBinaryLogsStatementContext(Context, State);
		EnterRule(_localctx, 762, RULE_showBinaryLogsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5707;
			Match(SHOW_SYMBOL);
			State = 5708;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY_SYMBOL || _la==MASTER_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5709;
			_localctx.value = Match(LOGS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowBinaryLogStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG_SYMBOL() { return GetToken(MySQLParser.LOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ShowBinaryLogStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showBinaryLogStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowBinaryLogStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowBinaryLogStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowBinaryLogStatusStatementContext showBinaryLogStatusStatement() {
		ShowBinaryLogStatusStatementContext _localctx = new ShowBinaryLogStatusStatementContext(Context, State);
		EnterRule(_localctx, 764, RULE_showBinaryLogStatusStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5711;
			Match(SHOW_SYMBOL);
			State = 5712;
			Match(BINARY_SYMBOL);
			State = 5713;
			Match(LOG_SYMBOL);
			State = 5714;
			Match(STATUS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowReplicasStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySQLParser.HOSTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICAS_SYMBOL() { return GetToken(MySQLParser.REPLICAS_SYMBOL, 0); }
		public ShowReplicasStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showReplicasStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowReplicasStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowReplicasStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowReplicasStatementContext showReplicasStatement() {
		ShowReplicasStatementContext _localctx = new ShowReplicasStatementContext(Context, State);
		EnterRule(_localctx, 766, RULE_showReplicasStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5716;
			Match(SHOW_SYMBOL);
			State = 5721;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SLAVE_SYMBOL:
			case REPLICA_SYMBOL:
				{
				State = 5717;
				replica();
				State = 5718;
				Match(HOSTS_SYMBOL);
				}
				break;
			case REPLICAS_SYMBOL:
				{
				State = 5720;
				Match(REPLICAS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowBinlogEventsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySQLParser.BINLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySQLParser.EVENTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ShowBinlogEventsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showBinlogEventsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowBinlogEventsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowBinlogEventsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowBinlogEventsStatementContext showBinlogEventsStatement() {
		ShowBinlogEventsStatementContext _localctx = new ShowBinlogEventsStatementContext(Context, State);
		EnterRule(_localctx, 768, RULE_showBinlogEventsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5723;
			Match(SHOW_SYMBOL);
			State = 5724;
			Match(BINLOG_SYMBOL);
			State = 5725;
			Match(EVENTS_SYMBOL);
			State = 5728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN_SYMBOL) {
				{
				State = 5726;
				Match(IN_SYMBOL);
				State = 5727;
				textString();
				}
			}

			State = 5732;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL) {
				{
				State = 5730;
				Match(FROM_SYMBOL);
				State = 5731;
				ulonglongNumber();
				}
			}

			State = 5735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 5734;
				limitClause();
				}
			}

			State = 5738;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 5737;
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowRelaylogEventsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySQLParser.EVENTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ShowRelaylogEventsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showRelaylogEventsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowRelaylogEventsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowRelaylogEventsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowRelaylogEventsStatementContext showRelaylogEventsStatement() {
		ShowRelaylogEventsStatementContext _localctx = new ShowRelaylogEventsStatementContext(Context, State);
		EnterRule(_localctx, 770, RULE_showRelaylogEventsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5740;
			Match(SHOW_SYMBOL);
			State = 5741;
			Match(RELAYLOG_SYMBOL);
			State = 5742;
			Match(EVENTS_SYMBOL);
			State = 5745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN_SYMBOL) {
				{
				State = 5743;
				Match(IN_SYMBOL);
				State = 5744;
				textString();
				}
			}

			State = 5749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL) {
				{
				State = 5747;
				Match(FROM_SYMBOL);
				State = 5748;
				ulonglongNumber();
				}
			}

			State = 5752;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 5751;
				limitClause();
				}
			}

			State = 5755;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 5754;
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowKeysStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromOrInContext fromOrIn() {
			return GetRuleContext<FromOrInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySQLParser.INDEXES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS_SYMBOL() { return GetToken(MySQLParser.KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public ShowKeysStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showKeysStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowKeysStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowKeysStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowKeysStatementContext showKeysStatement() {
		ShowKeysStatementContext _localctx = new ShowKeysStatementContext(Context, State);
		EnterRule(_localctx, 772, RULE_showKeysStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5757;
			Match(SHOW_SYMBOL);
			State = 5759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED_SYMBOL) {
				{
				State = 5758;
				Match(EXTENDED_SYMBOL);
				}
			}

			State = 5761;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & 67108867L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5762;
			fromOrIn();
			State = 5763;
			tableRef();
			State = 5765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				State = 5764;
				inDb();
				}
			}

			State = 5768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_SYMBOL) {
				{
				State = 5767;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowEnginesStatementContext : ParserRuleContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySQLParser.ENGINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public ShowEnginesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showEnginesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowEnginesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowEnginesStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowEnginesStatementContext showEnginesStatement() {
		ShowEnginesStatementContext _localctx = new ShowEnginesStatementContext(Context, State);
		EnterRule(_localctx, 774, RULE_showEnginesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5770;
			Match(SHOW_SYMBOL);
			State = 5772;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORAGE_SYMBOL) {
				{
				State = 5771;
				Match(STORAGE_SYMBOL);
				}
			}

			State = 5774;
			_localctx.value = Match(ENGINES_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCountWarningsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_SYMBOL() { return GetToken(MySQLParser.COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public ShowCountWarningsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCountWarningsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCountWarningsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCountWarningsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCountWarningsStatementContext showCountWarningsStatement() {
		ShowCountWarningsStatementContext _localctx = new ShowCountWarningsStatementContext(Context, State);
		EnterRule(_localctx, 776, RULE_showCountWarningsStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5776;
			Match(SHOW_SYMBOL);
			State = 5777;
			Match(COUNT_SYMBOL);
			State = 5778;
			Match(OPEN_PAR_SYMBOL);
			State = 5779;
			Match(MULT_OPERATOR);
			State = 5780;
			Match(CLOSE_PAR_SYMBOL);
			State = 5781;
			Match(WARNINGS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCountErrorsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_SYMBOL() { return GetToken(MySQLParser.COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public ShowCountErrorsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCountErrorsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCountErrorsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCountErrorsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCountErrorsStatementContext showCountErrorsStatement() {
		ShowCountErrorsStatementContext _localctx = new ShowCountErrorsStatementContext(Context, State);
		EnterRule(_localctx, 778, RULE_showCountErrorsStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5783;
			Match(SHOW_SYMBOL);
			State = 5784;
			Match(COUNT_SYMBOL);
			State = 5785;
			Match(OPEN_PAR_SYMBOL);
			State = 5786;
			Match(MULT_OPERATOR);
			State = 5787;
			Match(CLOSE_PAR_SYMBOL);
			State = 5788;
			Match(ERRORS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowWarningsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public ShowWarningsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showWarningsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowWarningsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowWarningsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowWarningsStatementContext showWarningsStatement() {
		ShowWarningsStatementContext _localctx = new ShowWarningsStatementContext(Context, State);
		EnterRule(_localctx, 780, RULE_showWarningsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5790;
			Match(SHOW_SYMBOL);
			State = 5791;
			Match(WARNINGS_SYMBOL);
			State = 5793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 5792;
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowErrorsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySQLParser.ERRORS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public ShowErrorsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showErrorsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowErrorsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowErrorsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowErrorsStatementContext showErrorsStatement() {
		ShowErrorsStatementContext _localctx = new ShowErrorsStatementContext(Context, State);
		EnterRule(_localctx, 782, RULE_showErrorsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5795;
			Match(SHOW_SYMBOL);
			State = 5796;
			Match(ERRORS_SYMBOL);
			State = 5798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 5797;
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowProfilesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public ShowProfilesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showProfilesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowProfilesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowProfilesStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowProfilesStatementContext showProfilesStatement() {
		ShowProfilesStatementContext _localctx = new ShowProfilesStatementContext(Context, State);
		EnterRule(_localctx, 784, RULE_showProfilesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5800;
			Match(SHOW_SYMBOL);
			State = 5801;
			Match(PROFILES_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowProfileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySQLParser.PROFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProfileDefinitionsContext profileDefinitions() {
			return GetRuleContext<ProfileDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public ShowProfileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showProfileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowProfileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowProfileStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowProfileStatementContext showProfileStatement() {
		ShowProfileStatementContext _localctx = new ShowProfileStatementContext(Context, State);
		EnterRule(_localctx, 786, RULE_showProfileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5803;
			Match(SHOW_SYMBOL);
			State = 5804;
			Match(PROFILE_SYMBOL);
			State = 5806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL_SYMBOL || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 19140298416324609L) != 0) || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==PAGE_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL) {
				{
				State = 5805;
				profileDefinitions();
				}
			}

			State = 5811;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 5808;
				Match(FOR_SYMBOL);
				State = 5809;
				Match(QUERY_SYMBOL);
				State = 5810;
				Match(INT_NUMBER);
				}
			}

			State = 5814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 5813;
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowStatusStatementContext showStatusStatement() {
		ShowStatusStatementContext _localctx = new ShowStatusStatementContext(Context, State);
		EnterRule(_localctx, 788, RULE_showStatusStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5816;
			Match(SHOW_SYMBOL);
			State = 5818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) {
				{
				State = 5817;
				optionType();
				}
			}

			State = 5820;
			Match(STATUS_SYMBOL);
			State = 5822;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5821;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowProcessListStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		public ShowProcessListStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showProcessListStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowProcessListStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowProcessListStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowProcessListStatementContext showProcessListStatement() {
		ShowProcessListStatementContext _localctx = new ShowProcessListStatementContext(Context, State);
		EnterRule(_localctx, 790, RULE_showProcessListStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5824;
			Match(SHOW_SYMBOL);
			State = 5826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FULL_SYMBOL) {
				{
				State = 5825;
				Match(FULL_SYMBOL);
				}
			}

			State = 5828;
			Match(PROCESSLIST_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowVariablesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowVariablesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showVariablesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowVariablesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowVariablesStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowVariablesStatementContext showVariablesStatement() {
		ShowVariablesStatementContext _localctx = new ShowVariablesStatementContext(Context, State);
		EnterRule(_localctx, 792, RULE_showVariablesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5830;
			Match(SHOW_SYMBOL);
			State = 5832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) {
				{
				State = 5831;
				optionType();
				}
			}

			State = 5834;
			Match(VARIABLES_SYMBOL);
			State = 5836;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5835;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCharacterSetStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowCharacterSetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCharacterSetStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCharacterSetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCharacterSetStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCharacterSetStatementContext showCharacterSetStatement() {
		ShowCharacterSetStatementContext _localctx = new ShowCharacterSetStatementContext(Context, State);
		EnterRule(_localctx, 794, RULE_showCharacterSetStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5838;
			Match(SHOW_SYMBOL);
			State = 5839;
			charset();
			State = 5841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5840;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCollationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySQLParser.COLLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowCollationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCollationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCollationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCollationStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCollationStatementContext showCollationStatement() {
		ShowCollationStatementContext _localctx = new ShowCollationStatementContext(Context, State);
		EnterRule(_localctx, 796, RULE_showCollationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5843;
			Match(SHOW_SYMBOL);
			State = 5844;
			Match(COLLATION_SYMBOL);
			State = 5846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5845;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowPrivilegesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public ShowPrivilegesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showPrivilegesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowPrivilegesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowPrivilegesStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowPrivilegesStatementContext showPrivilegesStatement() {
		ShowPrivilegesStatementContext _localctx = new ShowPrivilegesStatementContext(Context, State);
		EnterRule(_localctx, 798, RULE_showPrivilegesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5848;
			Match(SHOW_SYMBOL);
			State = 5849;
			Match(PRIVILEGES_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowGrantsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySQLParser.GRANTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public ShowGrantsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showGrantsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowGrantsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowGrantsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowGrantsStatementContext showGrantsStatement() {
		ShowGrantsStatementContext _localctx = new ShowGrantsStatementContext(Context, State);
		EnterRule(_localctx, 800, RULE_showGrantsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5851;
			Match(SHOW_SYMBOL);
			State = 5852;
			Match(GRANTS_SYMBOL);
			State = 5859;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 5853;
				Match(FOR_SYMBOL);
				State = 5854;
				user();
				State = 5857;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING_SYMBOL) {
					{
					State = 5855;
					Match(USING_SYMBOL);
					State = 5856;
					userList();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateDatabaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public ShowCreateDatabaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateDatabaseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCreateDatabaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCreateDatabaseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateDatabaseStatementContext showCreateDatabaseStatement() {
		ShowCreateDatabaseStatementContext _localctx = new ShowCreateDatabaseStatementContext(Context, State);
		EnterRule(_localctx, 802, RULE_showCreateDatabaseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5861;
			Match(SHOW_SYMBOL);
			State = 5862;
			Match(CREATE_SYMBOL);
			State = 5863;
			Match(DATABASE_SYMBOL);
			State = 5865;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,687,Context) ) {
			case 1:
				{
				State = 5864;
				ifNotExists();
				}
				break;
			}
			State = 5867;
			schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateTableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ShowCreateTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCreateTableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCreateTableStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateTableStatementContext showCreateTableStatement() {
		ShowCreateTableStatementContext _localctx = new ShowCreateTableStatementContext(Context, State);
		EnterRule(_localctx, 804, RULE_showCreateTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5869;
			Match(SHOW_SYMBOL);
			State = 5870;
			Match(CREATE_SYMBOL);
			State = 5871;
			Match(TABLE_SYMBOL);
			State = 5872;
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateViewStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefContext viewRef() {
			return GetRuleContext<ViewRefContext>(0);
		}
		public ShowCreateViewStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateViewStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCreateViewStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCreateViewStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateViewStatementContext showCreateViewStatement() {
		ShowCreateViewStatementContext _localctx = new ShowCreateViewStatementContext(Context, State);
		EnterRule(_localctx, 806, RULE_showCreateViewStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5874;
			Match(SHOW_SYMBOL);
			State = 5875;
			Match(CREATE_SYMBOL);
			State = 5876;
			Match(VIEW_SYMBOL);
			State = 5877;
			viewRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowMasterStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ShowMasterStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showMasterStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowMasterStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowMasterStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowMasterStatusStatementContext showMasterStatusStatement() {
		ShowMasterStatusStatementContext _localctx = new ShowMasterStatusStatementContext(Context, State);
		EnterRule(_localctx, 808, RULE_showMasterStatusStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5879;
			Match(SHOW_SYMBOL);
			State = 5880;
			Match(MASTER_SYMBOL);
			State = 5881;
			Match(STATUS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowReplicaStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ShowReplicaStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showReplicaStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowReplicaStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowReplicaStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowReplicaStatusStatementContext showReplicaStatusStatement() {
		ShowReplicaStatusStatementContext _localctx = new ShowReplicaStatusStatementContext(Context, State);
		EnterRule(_localctx, 810, RULE_showReplicaStatusStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5883;
			Match(SHOW_SYMBOL);
			State = 5884;
			replica();
			State = 5885;
			Match(STATUS_SYMBOL);
			State = 5887;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 5886;
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateProcedureStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		public ShowCreateProcedureStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateProcedureStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCreateProcedureStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCreateProcedureStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateProcedureStatementContext showCreateProcedureStatement() {
		ShowCreateProcedureStatementContext _localctx = new ShowCreateProcedureStatementContext(Context, State);
		EnterRule(_localctx, 812, RULE_showCreateProcedureStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5889;
			Match(SHOW_SYMBOL);
			State = 5890;
			Match(CREATE_SYMBOL);
			State = 5891;
			Match(PROCEDURE_SYMBOL);
			State = 5892;
			procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateFunctionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		public ShowCreateFunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateFunctionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCreateFunctionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCreateFunctionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateFunctionStatementContext showCreateFunctionStatement() {
		ShowCreateFunctionStatementContext _localctx = new ShowCreateFunctionStatementContext(Context, State);
		EnterRule(_localctx, 814, RULE_showCreateFunctionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5894;
			Match(SHOW_SYMBOL);
			State = 5895;
			Match(CREATE_SYMBOL);
			State = 5896;
			Match(FUNCTION_SYMBOL);
			State = 5897;
			functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateTriggerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerRefContext triggerRef() {
			return GetRuleContext<TriggerRefContext>(0);
		}
		public ShowCreateTriggerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateTriggerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCreateTriggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCreateTriggerStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateTriggerStatementContext showCreateTriggerStatement() {
		ShowCreateTriggerStatementContext _localctx = new ShowCreateTriggerStatementContext(Context, State);
		EnterRule(_localctx, 816, RULE_showCreateTriggerStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5899;
			Match(SHOW_SYMBOL);
			State = 5900;
			Match(CREATE_SYMBOL);
			State = 5901;
			Match(TRIGGER_SYMBOL);
			State = 5902;
			triggerRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateProcedureStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowCreateProcedureStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateProcedureStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCreateProcedureStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCreateProcedureStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateProcedureStatusStatementContext showCreateProcedureStatusStatement() {
		ShowCreateProcedureStatusStatementContext _localctx = new ShowCreateProcedureStatusStatementContext(Context, State);
		EnterRule(_localctx, 818, RULE_showCreateProcedureStatusStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5904;
			Match(SHOW_SYMBOL);
			State = 5905;
			Match(CREATE_SYMBOL);
			State = 5906;
			Match(PROCEDURE_SYMBOL);
			State = 5907;
			Match(STATUS_SYMBOL);
			State = 5909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5908;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateFunctionStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowCreateFunctionStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateFunctionStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCreateFunctionStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCreateFunctionStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateFunctionStatusStatementContext showCreateFunctionStatusStatement() {
		ShowCreateFunctionStatusStatementContext _localctx = new ShowCreateFunctionStatusStatementContext(Context, State);
		EnterRule(_localctx, 820, RULE_showCreateFunctionStatusStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5911;
			Match(SHOW_SYMBOL);
			State = 5912;
			Match(CREATE_SYMBOL);
			State = 5913;
			Match(FUNCTION_SYMBOL);
			State = 5914;
			Match(STATUS_SYMBOL);
			State = 5916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5915;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateProcedureCodeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_SYMBOL() { return GetToken(MySQLParser.CODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		public ShowCreateProcedureCodeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateProcedureCodeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCreateProcedureCodeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCreateProcedureCodeStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateProcedureCodeStatementContext showCreateProcedureCodeStatement() {
		ShowCreateProcedureCodeStatementContext _localctx = new ShowCreateProcedureCodeStatementContext(Context, State);
		EnterRule(_localctx, 822, RULE_showCreateProcedureCodeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5918;
			Match(SHOW_SYMBOL);
			State = 5919;
			Match(CREATE_SYMBOL);
			State = 5920;
			Match(PROCEDURE_SYMBOL);
			State = 5921;
			Match(CODE_SYMBOL);
			State = 5922;
			procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateFunctionCodeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_SYMBOL() { return GetToken(MySQLParser.CODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		public ShowCreateFunctionCodeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateFunctionCodeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCreateFunctionCodeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCreateFunctionCodeStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateFunctionCodeStatementContext showCreateFunctionCodeStatement() {
		ShowCreateFunctionCodeStatementContext _localctx = new ShowCreateFunctionCodeStatementContext(Context, State);
		EnterRule(_localctx, 824, RULE_showCreateFunctionCodeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5924;
			Match(SHOW_SYMBOL);
			State = 5925;
			Match(CREATE_SYMBOL);
			State = 5926;
			Match(FUNCTION_SYMBOL);
			State = 5927;
			Match(CODE_SYMBOL);
			State = 5928;
			functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateEventStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		public ShowCreateEventStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateEventStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCreateEventStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCreateEventStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateEventStatementContext showCreateEventStatement() {
		ShowCreateEventStatementContext _localctx = new ShowCreateEventStatementContext(Context, State);
		EnterRule(_localctx, 826, RULE_showCreateEventStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5930;
			Match(SHOW_SYMBOL);
			State = 5931;
			Match(CREATE_SYMBOL);
			State = 5932;
			Match(EVENT_SYMBOL);
			State = 5933;
			eventRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateUserStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ShowCreateUserStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateUserStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCreateUserStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCreateUserStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateUserStatementContext showCreateUserStatement() {
		ShowCreateUserStatementContext _localctx = new ShowCreateUserStatementContext(Context, State);
		EnterRule(_localctx, 828, RULE_showCreateUserStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5935;
			Match(SHOW_SYMBOL);
			State = 5936;
			Match(CREATE_SYMBOL);
			State = 5937;
			Match(USER_SYMBOL);
			State = 5938;
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommandTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ShowCommandTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommandType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCommandType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCommandType(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommandTypeContext showCommandType() {
		ShowCommandTypeContext _localctx = new ShowCommandTypeContext(Context, State);
		EnterRule(_localctx, 830, RULE_showCommandType);
		int _la;
		try {
			State = 5945;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FULL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5940;
				Match(FULL_SYMBOL);
				}
				break;
			case EXTENDED_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5941;
				Match(EXTENDED_SYMBOL);
				State = 5943;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					State = 5942;
					Match(FULL_SYMBOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EngineOrAllContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public EngineOrAllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engineOrAll; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEngineOrAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEngineOrAll(this);
		}
	}

	[RuleVersion(0)]
	public EngineOrAllContext engineOrAll() {
		EngineOrAllContext _localctx = new EngineOrAllContext(Context, State);
		EnterRule(_localctx, 832, RULE_engineOrAll);
		try {
			State = 5949;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,693,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5947;
				engineRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5948;
				Match(ALL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromOrInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public FromOrInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromOrIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFromOrIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFromOrIn(this);
		}
	}

	[RuleVersion(0)]
	public FromOrInContext fromOrIn() {
		FromOrInContext _localctx = new FromOrInContext(Context, State);
		EnterRule(_localctx, 834, RULE_fromOrIn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5951;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InDbContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FromOrInContext fromOrIn() {
			return GetRuleContext<FromOrInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public InDbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inDb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInDb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInDb(this);
		}
	}

	[RuleVersion(0)]
	public InDbContext inDb() {
		InDbContext _localctx = new InDbContext(Context, State);
		EnterRule(_localctx, 836, RULE_inDb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5953;
			fromOrIn();
			State = 5954;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProfileDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProfileDefinitionContext[] profileDefinition() {
			return GetRuleContexts<ProfileDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProfileDefinitionContext profileDefinition(int i) {
			return GetRuleContext<ProfileDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ProfileDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_profileDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProfileDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProfileDefinitions(this);
		}
	}

	[RuleVersion(0)]
	public ProfileDefinitionsContext profileDefinitions() {
		ProfileDefinitionsContext _localctx = new ProfileDefinitionsContext(Context, State);
		EnterRule(_localctx, 838, RULE_profileDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5956;
			profileDefinition();
			State = 5961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5957;
				Match(COMMA_SYMBOL);
				State = 5958;
				profileDefinition();
				}
				}
				State = 5963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProfileDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySQLParser.BLOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_SYMBOL() { return GetToken(MySQLParser.IO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_SYMBOL() { return GetToken(MySQLParser.PAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySQLParser.FAULTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU_SYMBOL() { return GetToken(MySQLParser.CPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC_SYMBOL() { return GetToken(MySQLParser.IPC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySQLParser.SOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public ProfileDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_profileDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProfileDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProfileDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ProfileDefinitionContext profileDefinition() {
		ProfileDefinitionContext _localctx = new ProfileDefinitionContext(Context, State);
		EnterRule(_localctx, 840, RULE_profileDefinition);
		int _la;
		try {
			State = 5971;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BLOCK_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5964;
				Match(BLOCK_SYMBOL);
				State = 5965;
				Match(IO_SYMBOL);
				}
				break;
			case CONTEXT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5966;
				Match(CONTEXT_SYMBOL);
				State = 5967;
				Match(SWITCHES_SYMBOL);
				}
				break;
			case PAGE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5968;
				Match(PAGE_SYMBOL);
				State = 5969;
				Match(FAULTS_SYMBOL);
				}
				break;
			case ALL_SYMBOL:
			case CPU_SYMBOL:
			case IPC_SYMBOL:
			case MEMORY_SYMBOL:
			case SOURCE_SYMBOL:
			case SWAPS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5970;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL_SYMBOL || _la==CPU_SYMBOL || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherAdministrativeStatementContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySQLParser.BINLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyCacheListOrPartsContext keyCacheListOrParts() {
			return GetRuleContext<KeyCacheListOrPartsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE_SYMBOL() { return GetToken(MySQLParser.CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySQLParser.FLUSH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlushTablesContext flushTables() {
			return GetRuleContext<FlushTablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext[] flushOption() {
			return GetRuleContexts<FlushOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext flushOption(int i) {
			return GetRuleContext<FlushOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoWriteToBinLogContext noWriteToBinLog() {
			return GetRuleContext<NoWriteToBinLogContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KILL_SYMBOL() { return GetToken(MySQLParser.KILL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreloadTailContext preloadTail() {
			return GetRuleContext<PreloadTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD_SYMBOL() { return GetToken(MySQLParser.LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public OtherAdministrativeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherAdministrativeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOtherAdministrativeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOtherAdministrativeStatement(this);
		}
	}

	[RuleVersion(0)]
	public OtherAdministrativeStatementContext otherAdministrativeStatement() {
		OtherAdministrativeStatementContext _localctx = new OtherAdministrativeStatementContext(Context, State);
		EnterRule(_localctx, 842, RULE_otherAdministrativeStatement);
		int _la;
		try {
			State = 6009;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINLOG_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5973;
				_localctx.type = Match(BINLOG_SYMBOL);
				State = 5974;
				textLiteral();
				}
				break;
			case CACHE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5975;
				_localctx.type = Match(CACHE_SYMBOL);
				State = 5976;
				Match(INDEX_SYMBOL);
				State = 5977;
				keyCacheListOrParts();
				State = 5978;
				Match(IN_SYMBOL);
				State = 5981;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,696,Context) ) {
				case 1:
					{
					State = 5979;
					identifier();
					}
					break;
				case 2:
					{
					State = 5980;
					Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			case FLUSH_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5983;
				_localctx.type = Match(FLUSH_SYMBOL);
				State = 5985;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 5984;
					noWriteToBinLog();
					}
				}

				State = 5996;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TABLES_SYMBOL:
				case TABLE_SYMBOL:
					{
					State = 5987;
					flushTables();
					}
					break;
				case BINARY_SYMBOL:
				case ENGINE_SYMBOL:
				case ERROR_SYMBOL:
				case GENERAL_SYMBOL:
				case HOSTS_SYMBOL:
				case LOGS_SYMBOL:
				case OPTIMIZER_COSTS_SYMBOL:
				case PRIVILEGES_SYMBOL:
				case RELAY_SYMBOL:
				case SLOW_SYMBOL:
				case STATUS_SYMBOL:
				case USER_RESOURCES_SYMBOL:
					{
					State = 5988;
					flushOption();
					State = 5993;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						State = 5989;
						Match(COMMA_SYMBOL);
						State = 5990;
						flushOption();
						}
						}
						State = 5995;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KILL_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5998;
				_localctx.type = Match(KILL_SYMBOL);
				State = 6000;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,700,Context) ) {
				case 1:
					{
					State = 5999;
					_la = TokenStream.LA(1);
					if ( !(_la==CONNECTION_SYMBOL || _la==QUERY_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 6002;
				expr(0);
				}
				break;
			case LOAD_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6003;
				_localctx.type = Match(LOAD_SYMBOL);
				State = 6004;
				Match(INDEX_SYMBOL);
				State = 6005;
				Match(INTO_SYMBOL);
				State = 6006;
				Match(CACHE_SYMBOL);
				State = 6007;
				preloadTail();
				}
				break;
			case SHUTDOWN_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6008;
				_localctx.type = Match(SHUTDOWN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyCacheListOrPartsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyCacheListContext keyCacheList() {
			return GetRuleContext<KeyCacheListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignToKeycachePartitionContext assignToKeycachePartition() {
			return GetRuleContext<AssignToKeycachePartitionContext>(0);
		}
		public KeyCacheListOrPartsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyCacheListOrParts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyCacheListOrParts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyCacheListOrParts(this);
		}
	}

	[RuleVersion(0)]
	public KeyCacheListOrPartsContext keyCacheListOrParts() {
		KeyCacheListOrPartsContext _localctx = new KeyCacheListOrPartsContext(Context, State);
		EnterRule(_localctx, 844, RULE_keyCacheListOrParts);
		try {
			State = 6013;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,702,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6011;
				keyCacheList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6012;
				assignToKeycachePartition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyCacheListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignToKeycacheContext[] assignToKeycache() {
			return GetRuleContexts<AssignToKeycacheContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignToKeycacheContext assignToKeycache(int i) {
			return GetRuleContext<AssignToKeycacheContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyCacheListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyCacheList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyCacheList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyCacheList(this);
		}
	}

	[RuleVersion(0)]
	public KeyCacheListContext keyCacheList() {
		KeyCacheListContext _localctx = new KeyCacheListContext(Context, State);
		EnterRule(_localctx, 846, RULE_keyCacheList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6015;
			assignToKeycache();
			State = 6020;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6016;
				Match(COMMA_SYMBOL);
				State = 6017;
				assignToKeycache();
				}
				}
				State = 6022;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignToKeycacheContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		public AssignToKeycacheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignToKeycache; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAssignToKeycache(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAssignToKeycache(this);
		}
	}

	[RuleVersion(0)]
	public AssignToKeycacheContext assignToKeycache() {
		AssignToKeycacheContext _localctx = new AssignToKeycacheContext(Context, State);
		EnterRule(_localctx, 848, RULE_assignToKeycache);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6023;
			tableRef();
			State = 6025;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 6024;
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignToKeycachePartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		public AssignToKeycachePartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignToKeycachePartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAssignToKeycachePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAssignToKeycachePartition(this);
		}
	}

	[RuleVersion(0)]
	public AssignToKeycachePartitionContext assignToKeycachePartition() {
		AssignToKeycachePartitionContext _localctx = new AssignToKeycachePartitionContext(Context, State);
		EnterRule(_localctx, 850, RULE_assignToKeycachePartition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6027;
			tableRef();
			State = 6028;
			Match(PARTITION_SYMBOL);
			State = 6029;
			Match(OPEN_PAR_SYMBOL);
			State = 6030;
			allOrPartitionNameList();
			State = 6031;
			Match(CLOSE_PAR_SYMBOL);
			State = 6033;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 6032;
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CacheKeyListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyUsageListContext keyUsageList() {
			return GetRuleContext<KeyUsageListContext>(0);
		}
		public CacheKeyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cacheKeyList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCacheKeyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCacheKeyList(this);
		}
	}

	[RuleVersion(0)]
	public CacheKeyListContext cacheKeyList() {
		CacheKeyListContext _localctx = new CacheKeyListContext(Context, State);
		EnterRule(_localctx, 852, RULE_cacheKeyList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6035;
			keyOrIndex();
			State = 6036;
			Match(OPEN_PAR_SYMBOL);
			State = 6038;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,706,Context) ) {
			case 1:
				{
				State = 6037;
				keyUsageList();
				}
				break;
			}
			State = 6040;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyUsageElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyUsageElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyUsageElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyUsageElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyUsageElement(this);
		}
	}

	[RuleVersion(0)]
	public KeyUsageElementContext keyUsageElement() {
		KeyUsageElementContext _localctx = new KeyUsageElementContext(Context, State);
		EnterRule(_localctx, 854, RULE_keyUsageElement);
		try {
			State = 6044;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,707,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6042;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6043;
				Match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyUsageListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyUsageElementContext[] keyUsageElement() {
			return GetRuleContexts<KeyUsageElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyUsageElementContext keyUsageElement(int i) {
			return GetRuleContext<KeyUsageElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyUsageListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyUsageList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyUsageList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyUsageList(this);
		}
	}

	[RuleVersion(0)]
	public KeyUsageListContext keyUsageList() {
		KeyUsageListContext _localctx = new KeyUsageListContext(Context, State);
		EnterRule(_localctx, 856, RULE_keyUsageList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6046;
			keyUsageElement();
			State = 6051;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6047;
				Match(COMMA_SYMBOL);
				State = 6048;
				keyUsageElement();
				}
				}
				State = 6053;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushOptionContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySQLParser.HOSTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogTypeContext logType() {
			return GetRuleContext<LogTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_SYMBOL() { return GetToken(MySQLParser.RELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZER_COSTS_SYMBOL() { return GetToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0); }
		public FlushOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFlushOption(this);
		}
	}

	[RuleVersion(0)]
	public FlushOptionContext flushOption() {
		FlushOptionContext _localctx = new FlushOptionContext(Context, State);
		EnterRule(_localctx, 858, RULE_flushOption);
		int _la;
		try {
			State = 6065;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HOSTS_SYMBOL:
			case PRIVILEGES_SYMBOL:
			case STATUS_SYMBOL:
			case USER_RESOURCES_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6054;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==HOSTS_SYMBOL || _la==PRIVILEGES_SYMBOL || _la==STATUS_SYMBOL || _la==USER_RESOURCES_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case BINARY_SYMBOL:
			case ENGINE_SYMBOL:
			case ERROR_SYMBOL:
			case GENERAL_SYMBOL:
			case LOGS_SYMBOL:
			case SLOW_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BINARY_SYMBOL || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 4398046511109L) != 0) || _la==SLOW_SYMBOL) {
					{
					State = 6055;
					logType();
					}
				}

				State = 6058;
				_localctx.option = Match(LOGS_SYMBOL);
				}
				break;
			case RELAY_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6059;
				_localctx.option = Match(RELAY_SYMBOL);
				State = 6060;
				Match(LOGS_SYMBOL);
				State = 6062;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 6061;
					channel();
					}
				}

				}
				break;
			case OPTIMIZER_COSTS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6064;
				_localctx.option = Match(OPTIMIZER_COSTS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySQLParser.GENERAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW_SYMBOL() { return GetToken(MySQLParser.SLOW_SYMBOL, 0); }
		public LogTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogType(this);
		}
	}

	[RuleVersion(0)]
	public LogTypeContext logType() {
		LogTypeContext _localctx = new LogTypeContext(Context, State);
		EnterRule(_localctx, 860, RULE_logType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6067;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY_SYMBOL || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 4398046511109L) != 0) || _la==SLOW_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushTablesOptionsContext flushTablesOptions() {
			return GetRuleContext<FlushTablesOptionsContext>(0);
		}
		public FlushTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFlushTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFlushTables(this);
		}
	}

	[RuleVersion(0)]
	public FlushTablesContext flushTables() {
		FlushTablesContext _localctx = new FlushTablesContext(Context, State);
		EnterRule(_localctx, 862, RULE_flushTables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6069;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6077;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,713,Context) ) {
			case 1:
				{
				State = 6070;
				Match(WITH_SYMBOL);
				State = 6071;
				Match(READ_SYMBOL);
				State = 6072;
				Match(LOCK_SYMBOL);
				}
				break;
			case 2:
				{
				State = 6073;
				identifierList();
				State = 6075;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL || _la==WITH_SYMBOL) {
					{
					State = 6074;
					flushTablesOptions();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTablesOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySQLParser.EXPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public FlushTablesOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTablesOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFlushTablesOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFlushTablesOptions(this);
		}
	}

	[RuleVersion(0)]
	public FlushTablesOptionsContext flushTablesOptions() {
		FlushTablesOptionsContext _localctx = new FlushTablesOptionsContext(Context, State);
		EnterRule(_localctx, 864, RULE_flushTablesOptions);
		try {
			State = 6084;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6079;
				Match(FOR_SYMBOL);
				State = 6080;
				Match(EXPORT_SYMBOL);
				}
				break;
			case WITH_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6081;
				Match(WITH_SYMBOL);
				State = 6082;
				Match(READ_SYMBOL);
				State = 6083;
				Match(LOCK_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdminPartitionContext adminPartition() {
			return GetRuleContext<AdminPartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySQLParser.LEAVES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreloadListContext preloadList() {
			return GetRuleContext<PreloadListContext>(0);
		}
		public PreloadTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPreloadTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPreloadTail(this);
		}
	}

	[RuleVersion(0)]
	public PreloadTailContext preloadTail() {
		PreloadTailContext _localctx = new PreloadTailContext(Context, State);
		EnterRule(_localctx, 866, RULE_preloadTail);
		int _la;
		try {
			State = 6096;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,717,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6086;
				tableRef();
				State = 6087;
				adminPartition();
				State = 6089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					State = 6088;
					cacheKeyList();
					}
				}

				State = 6093;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL) {
					{
					State = 6091;
					Match(IGNORE_SYMBOL);
					State = 6092;
					Match(LEAVES_SYMBOL);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6095;
				preloadList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreloadKeysContext[] preloadKeys() {
			return GetRuleContexts<PreloadKeysContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreloadKeysContext preloadKeys(int i) {
			return GetRuleContext<PreloadKeysContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PreloadListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPreloadList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPreloadList(this);
		}
	}

	[RuleVersion(0)]
	public PreloadListContext preloadList() {
		PreloadListContext _localctx = new PreloadListContext(Context, State);
		EnterRule(_localctx, 868, RULE_preloadList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6098;
			preloadKeys();
			State = 6103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6099;
				Match(COMMA_SYMBOL);
				State = 6100;
				preloadKeys();
				}
				}
				State = 6105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadKeysContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadKeysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadKeys; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPreloadKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPreloadKeys(this);
		}
	}

	[RuleVersion(0)]
	public PreloadKeysContext preloadKeys() {
		PreloadKeysContext _localctx = new PreloadKeysContext(Context, State);
		EnterRule(_localctx, 870, RULE_preloadKeys);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6106;
			tableRef();
			State = 6108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 6107;
				cacheKeyList();
				}
			}

			State = 6112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				State = 6110;
				Match(IGNORE_SYMBOL);
				State = 6111;
				Match(LEAVES_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdminPartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public AdminPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adminPartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAdminPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAdminPartition(this);
		}
	}

	[RuleVersion(0)]
	public AdminPartitionContext adminPartition() {
		AdminPartitionContext _localctx = new AdminPartitionContext(Context, State);
		EnterRule(_localctx, 872, RULE_adminPartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6114;
			Match(PARTITION_SYMBOL);
			State = 6115;
			Match(OPEN_PAR_SYMBOL);
			State = 6116;
			allOrPartitionNameList();
			State = 6117;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupManagementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateResourceGroupContext createResourceGroup() {
			return GetRuleContext<CreateResourceGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterResourceGroupContext alterResourceGroup() {
			return GetRuleContext<AlterResourceGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetResourceGroupContext setResourceGroup() {
			return GetRuleContext<SetResourceGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropResourceGroupContext dropResourceGroup() {
			return GetRuleContext<DropResourceGroupContext>(0);
		}
		public ResourceGroupManagementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupManagement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupManagement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupManagement(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupManagementContext resourceGroupManagement() {
		ResourceGroupManagementContext _localctx = new ResourceGroupManagementContext(Context, State);
		EnterRule(_localctx, 874, RULE_resourceGroupManagement);
		try {
			State = 6123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6119;
				createResourceGroup();
				}
				break;
			case ALTER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6120;
				alterResourceGroup();
				}
				break;
			case SET_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6121;
				setResourceGroup();
				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6122;
				dropResourceGroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateResourceGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return GetRuleContext<ResourceGroupVcpuListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupPriorityContext resourceGroupPriority() {
			return GetRuleContext<ResourceGroupPriorityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return GetRuleContext<ResourceGroupEnableDisableContext>(0);
		}
		public CreateResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createResourceGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateResourceGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateResourceGroup(this);
		}
	}

	[RuleVersion(0)]
	public CreateResourceGroupContext createResourceGroup() {
		CreateResourceGroupContext _localctx = new CreateResourceGroupContext(Context, State);
		EnterRule(_localctx, 876, RULE_createResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6125;
			Match(CREATE_SYMBOL);
			State = 6126;
			Match(RESOURCE_SYMBOL);
			State = 6127;
			Match(GROUP_SYMBOL);
			State = 6128;
			identifier();
			State = 6129;
			Match(TYPE_SYMBOL);
			State = 6131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 6130;
				equal();
				}
			}

			State = 6133;
			_la = TokenStream.LA(1);
			if ( !(_la==USER_SYMBOL || _la==SYSTEM_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				State = 6134;
				resourceGroupVcpuList();
				}
			}

			State = 6138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				State = 6137;
				resourceGroupPriority();
				}
			}

			State = 6141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				State = 6140;
				resourceGroupEnableDisable();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupVcpuListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VCPU_SYMBOL() { return GetToken(MySQLParser.VCPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VcpuNumOrRangeContext[] vcpuNumOrRange() {
			return GetRuleContexts<VcpuNumOrRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VcpuNumOrRangeContext vcpuNumOrRange(int i) {
			return GetRuleContext<VcpuNumOrRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ResourceGroupVcpuListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupVcpuList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupVcpuList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupVcpuList(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupVcpuListContext resourceGroupVcpuList() {
		ResourceGroupVcpuListContext _localctx = new ResourceGroupVcpuListContext(Context, State);
		EnterRule(_localctx, 878, RULE_resourceGroupVcpuList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6143;
			Match(VCPU_SYMBOL);
			State = 6145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 6144;
				equal();
				}
			}

			State = 6147;
			vcpuNumOrRange();
			State = 6154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT_NUMBER || _la==COMMA_SYMBOL) {
				{
				{
				State = 6149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6148;
					Match(COMMA_SYMBOL);
					}
				}

				State = 6151;
				vcpuNumOrRange();
				}
				}
				State = 6156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VcpuNumOrRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT_NUMBER() { return GetTokens(MySQLParser.INT_NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySQLParser.INT_NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		public VcpuNumOrRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vcpuNumOrRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVcpuNumOrRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVcpuNumOrRange(this);
		}
	}

	[RuleVersion(0)]
	public VcpuNumOrRangeContext vcpuNumOrRange() {
		VcpuNumOrRangeContext _localctx = new VcpuNumOrRangeContext(Context, State);
		EnterRule(_localctx, 880, RULE_vcpuNumOrRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6157;
			Match(INT_NUMBER);
			State = 6160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS_OPERATOR) {
				{
				State = 6158;
				Match(MINUS_OPERATOR);
				State = 6159;
				Match(INT_NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupPriorityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public ResourceGroupPriorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupPriority; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupPriority(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupPriority(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupPriorityContext resourceGroupPriority() {
		ResourceGroupPriorityContext _localctx = new ResourceGroupPriorityContext(Context, State);
		EnterRule(_localctx, 882, RULE_resourceGroupPriority);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6162;
			Match(THREAD_PRIORITY_SYMBOL);
			State = 6164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 6163;
				equal();
				}
			}

			State = 6166;
			Match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupEnableDisableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ResourceGroupEnableDisableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupEnableDisable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupEnableDisable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupEnableDisable(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
		ResourceGroupEnableDisableContext _localctx = new ResourceGroupEnableDisableContext(Context, State);
		EnterRule(_localctx, 884, RULE_resourceGroupEnableDisable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6168;
			_la = TokenStream.LA(1);
			if ( !(_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterResourceGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupRefContext resourceGroupRef() {
			return GetRuleContext<ResourceGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return GetRuleContext<ResourceGroupVcpuListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupPriorityContext resourceGroupPriority() {
			return GetRuleContext<ResourceGroupPriorityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return GetRuleContext<ResourceGroupEnableDisableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_SYMBOL() { return GetToken(MySQLParser.FORCE_SYMBOL, 0); }
		public AlterResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterResourceGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterResourceGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterResourceGroup(this);
		}
	}

	[RuleVersion(0)]
	public AlterResourceGroupContext alterResourceGroup() {
		AlterResourceGroupContext _localctx = new AlterResourceGroupContext(Context, State);
		EnterRule(_localctx, 886, RULE_alterResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6170;
			Match(ALTER_SYMBOL);
			State = 6171;
			Match(RESOURCE_SYMBOL);
			State = 6172;
			Match(GROUP_SYMBOL);
			State = 6173;
			resourceGroupRef();
			State = 6175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				State = 6174;
				resourceGroupVcpuList();
				}
			}

			State = 6178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				State = 6177;
				resourceGroupPriority();
				}
			}

			State = 6181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				State = 6180;
				resourceGroupEnableDisable();
				}
			}

			State = 6184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				State = 6183;
				Match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetResourceGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreadIdListContext threadIdList() {
			return GetRuleContext<ThreadIdListContext>(0);
		}
		public SetResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setResourceGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetResourceGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetResourceGroup(this);
		}
	}

	[RuleVersion(0)]
	public SetResourceGroupContext setResourceGroup() {
		SetResourceGroupContext _localctx = new SetResourceGroupContext(Context, State);
		EnterRule(_localctx, 888, RULE_setResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6186;
			Match(SET_SYMBOL);
			State = 6187;
			Match(RESOURCE_SYMBOL);
			State = 6188;
			Match(GROUP_SYMBOL);
			State = 6189;
			identifier();
			State = 6192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 6190;
				Match(FOR_SYMBOL);
				State = 6191;
				threadIdList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadIdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext[] real_ulong_number() {
			return GetRuleContexts<Real_ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number(int i) {
			return GetRuleContext<Real_ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ThreadIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadIdList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterThreadIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitThreadIdList(this);
		}
	}

	[RuleVersion(0)]
	public ThreadIdListContext threadIdList() {
		ThreadIdListContext _localctx = new ThreadIdListContext(Context, State);
		EnterRule(_localctx, 890, RULE_threadIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6194;
			real_ulong_number();
			State = 6201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592722915384L) != 0)) {
				{
				{
				State = 6196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6195;
					Match(COMMA_SYMBOL);
					}
				}

				State = 6198;
				real_ulong_number();
				}
				}
				State = 6203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropResourceGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupRefContext resourceGroupRef() {
			return GetRuleContext<ResourceGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_SYMBOL() { return GetToken(MySQLParser.FORCE_SYMBOL, 0); }
		public DropResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropResourceGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropResourceGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropResourceGroup(this);
		}
	}

	[RuleVersion(0)]
	public DropResourceGroupContext dropResourceGroup() {
		DropResourceGroupContext _localctx = new DropResourceGroupContext(Context, State);
		EnterRule(_localctx, 892, RULE_dropResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6204;
			Match(DROP_SYMBOL);
			State = 6205;
			Match(RESOURCE_SYMBOL);
			State = 6206;
			Match(GROUP_SYMBOL);
			State = 6207;
			resourceGroupRef();
			State = 6209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				State = 6208;
				Match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UtilityStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescribeStatementContext describeStatement() {
			return GetRuleContext<DescribeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainStatementContext explainStatement() {
			return GetRuleContext<ExplainStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HelpCommandContext helpCommand() {
			return GetRuleContext<HelpCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseCommandContext useCommand() {
			return GetRuleContext<UseCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestartServerContext restartServer() {
			return GetRuleContext<RestartServerContext>(0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utilityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUtilityStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUtilityStatement(this);
		}
	}

	[RuleVersion(0)]
	public UtilityStatementContext utilityStatement() {
		UtilityStatementContext _localctx = new UtilityStatementContext(Context, State);
		EnterRule(_localctx, 894, RULE_utilityStatement);
		try {
			State = 6217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,739,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6211;
				describeStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6212;
				explainStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6213;
				helpCommand();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6214;
				useCommand();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6215;
				if (!(this.isServerVersionGe80011())) throw new FailedPredicateException(this, "this.isServerVersionGe80011()");
				State = 6216;
				restartServer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN_SYMBOL() { return GetToken(MySQLParser.EXPLAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE_SYMBOL() { return GetToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_SYMBOL() { return GetToken(MySQLParser.DESC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		public DescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDescribeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDescribeStatement(this);
		}
	}

	[RuleVersion(0)]
	public DescribeStatementContext describeStatement() {
		DescribeStatementContext _localctx = new DescribeStatementContext(Context, State);
		EnterRule(_localctx, 896, RULE_describeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6219;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & 2199023255555L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6220;
			tableRef();
			State = 6223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,740,Context) ) {
			case 1:
				{
				State = 6221;
				textString();
				}
				break;
			case 2:
				{
				State = 6222;
				columnRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplainableStatementContext explainableStatement() {
			return GetRuleContext<ExplainableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN_SYMBOL() { return GetToken(MySQLParser.EXPLAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE_SYMBOL() { return GetToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_SYMBOL() { return GetToken(MySQLParser.DESC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplainOptionsContext explainOptions() {
			return GetRuleContext<ExplainOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ExplainStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExplainStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExplainStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExplainStatementContext explainStatement() {
		ExplainStatementContext _localctx = new ExplainStatementContext(Context, State);
		EnterRule(_localctx, 898, RULE_explainStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6225;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & 2199023255555L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,741,Context) ) {
			case 1:
				{
				State = 6226;
				explainOptions();
				}
				break;
			}
			State = 6233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,742,Context) ) {
			case 1:
				{
				State = 6229;
				if (!(this.isServerVersionGe80032())) throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
				State = 6230;
				Match(FOR_SYMBOL);
				State = 6231;
				Match(DATABASE_SYMBOL);
				State = 6232;
				textOrIdentifier();
				}
				break;
			}
			State = 6235;
			explainableStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySQLParser.FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainIntoContext explainInto() {
			return GetRuleContext<ExplainIntoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE_SYMBOL() { return GetToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public ExplainOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExplainOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExplainOptions(this);
		}
	}

	[RuleVersion(0)]
	public ExplainOptionsContext explainOptions() {
		ExplainOptionsContext _localctx = new ExplainOptionsContext(Context, State);
		EnterRule(_localctx, 900, RULE_explainOptions);
		try {
			State = 6253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,744,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6237;
				Match(FORMAT_SYMBOL);
				State = 6238;
				Match(EQUAL_OPERATOR);
				State = 6239;
				textOrIdentifier();
				State = 6242;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,743,Context) ) {
				case 1:
					{
					State = 6240;
					if (!(this.isServerVersionGe80032())) throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
					State = 6241;
					explainInto();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6244;
				if (!(this.isServerVersionLt80012())) throw new FailedPredicateException(this, "this.isServerVersionLt80012()");
				State = 6245;
				Match(EXTENDED_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6246;
				if (!(this.isServerVersionGe80018())) throw new FailedPredicateException(this, "this.isServerVersionGe80018()");
				State = 6247;
				Match(ANALYZE_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6248;
				if (!(this.isServerVersionGe80019())) throw new FailedPredicateException(this, "this.isServerVersionGe80019()");
				State = 6249;
				Match(ANALYZE_SYMBOL);
				State = 6250;
				Match(FORMAT_SYMBOL);
				State = 6251;
				Match(EQUAL_OPERATOR);
				State = 6252;
				textOrIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ExplainableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExplainableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExplainableStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExplainableStatementContext explainableStatement() {
		ExplainableStatementContext _localctx = new ExplainableStatementContext(Context, State);
		EnterRule(_localctx, 902, RULE_explainableStatement);
		try {
			State = 6263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,745,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6255;
				selectStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6256;
				deleteStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6257;
				insertStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6258;
				replaceStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6259;
				updateStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6260;
				Match(FOR_SYMBOL);
				State = 6261;
				Match(CONNECTION_SYMBOL);
				State = 6262;
				real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainIntoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ExplainIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExplainInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExplainInto(this);
		}
	}

	[RuleVersion(0)]
	public ExplainIntoContext explainInto() {
		ExplainIntoContext _localctx = new ExplainIntoContext(Context, State);
		EnterRule(_localctx, 904, RULE_explainInto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6265;
			Match(INTO_SYMBOL);
			State = 6266;
			Match(AT_SIGN_SYMBOL);
			State = 6267;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HelpCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP_SYMBOL() { return GetToken(MySQLParser.HELP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public HelpCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_helpCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHelpCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHelpCommand(this);
		}
	}

	[RuleVersion(0)]
	public HelpCommandContext helpCommand() {
		HelpCommandContext _localctx = new HelpCommandContext(Context, State);
		EnterRule(_localctx, 906, RULE_helpCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6269;
			Match(HELP_SYMBOL);
			State = 6270;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_SYMBOL() { return GetToken(MySQLParser.USE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		public UseCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUseCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUseCommand(this);
		}
	}

	[RuleVersion(0)]
	public UseCommandContext useCommand() {
		UseCommandContext _localctx = new UseCommandContext(Context, State);
		EnterRule(_localctx, 908, RULE_useCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6272;
			Match(USE_SYMBOL);
			State = 6273;
			schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestartServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART_SYMBOL() { return GetToken(MySQLParser.RESTART_SYMBOL, 0); }
		public RestartServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restartServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRestartServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRestartServer(this);
		}
	}

	[RuleVersion(0)]
	public RestartServerContext restartServer() {
		RestartServerContext _localctx = new RestartServerContext(Context, State);
		EnterRule(_localctx, 910, RULE_restartServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6275;
			Match(RESTART_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprOrContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_SYMBOL() { return GetToken(MySQLParser.OR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR_OPERATOR() { return GetToken(MySQLParser.LOGICAL_OR_OPERATOR, 0); }
		public ExprOrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprOr(this);
		}
	}
	public partial class ExprNotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprNotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprNot(this);
		}
	}
	public partial class ExprIsContext : ExprContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_SYMBOL() { return GetToken(MySQLParser.IS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_SYMBOL() { return GetToken(MySQLParser.TRUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_SYMBOL() { return GetToken(MySQLParser.FALSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public ExprIsContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprIs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprIs(this);
		}
	}
	public partial class ExprAndContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND_OPERATOR() { return GetToken(MySQLParser.LOGICAL_AND_OPERATOR, 0); }
		public ExprAndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprAnd(this);
		}
	}
	public partial class ExprXorContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_SYMBOL() { return GetToken(MySQLParser.XOR_SYMBOL, 0); }
		public ExprXorContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprXor(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 912;
		EnterRecursionRule(_localctx, 912, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,748,Context) ) {
			case 1:
				{
				_localctx = new ExprIsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 6278;
				boolPri(0);
				State = 6284;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,747,Context) ) {
				case 1:
					{
					State = 6279;
					Match(IS_SYMBOL);
					State = 6281;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
						{
						State = 6280;
						notRule();
						}
					}

					State = 6283;
					((ExprIsContext)_localctx).type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL || _la==UNKNOWN_SYMBOL) ) {
						((ExprIsContext)_localctx).type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new ExprNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6286;
				Match(NOT_SYMBOL);
				State = 6287;
				expr(4);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6301;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,750,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 6299;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,749,Context) ) {
					case 1:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 6290;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 6291;
						((ExprAndContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LOGICAL_AND_OPERATOR || _la==AND_SYMBOL) ) {
							((ExprAndContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6292;
						expr(4);
						}
						break;
					case 2:
						{
						_localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 6293;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 6294;
						Match(XOR_SYMBOL);
						State = 6295;
						expr(3);
						}
						break;
					case 3:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 6296;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 6297;
						((ExprOrContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LOGICAL_OR_OPERATOR || _la==OR_SYMBOL) ) {
							((ExprOrContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6298;
						expr(2);
						}
						break;
					}
					} 
				}
				State = 6303;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,750,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolPriContext : ParserRuleContext {
		public BoolPriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolPri; } }
	 
		public BoolPriContext() { }
		public virtual void CopyFrom(BoolPriContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExprPredicateContext : BoolPriContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PrimaryExprPredicateContext(BoolPriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprPredicate(this);
		}
	}
	public partial class PrimaryExprCompareContext : BoolPriContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompOpContext compOp() {
			return GetRuleContext<CompOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PrimaryExprCompareContext(BoolPriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprCompare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprCompare(this);
		}
	}
	public partial class PrimaryExprAllAnyContext : BoolPriContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompOpContext compOp() {
			return GetRuleContext<CompOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_SYMBOL() { return GetToken(MySQLParser.ANY_SYMBOL, 0); }
		public PrimaryExprAllAnyContext(BoolPriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprAllAny(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprAllAny(this);
		}
	}
	public partial class PrimaryExprIsNullContext : BoolPriContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_SYMBOL() { return GetToken(MySQLParser.IS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public PrimaryExprIsNullContext(BoolPriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprIsNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprIsNull(this);
		}
	}

	[RuleVersion(0)]
	public BoolPriContext boolPri() {
		return boolPri(0);
	}

	private BoolPriContext boolPri(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolPriContext _localctx = new BoolPriContext(Context, _parentState);
		BoolPriContext _prevctx = _localctx;
		int _startState = 914;
		EnterRecursionRule(_localctx, 914, RULE_boolPri, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryExprPredicateContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 6305;
			predicate();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6324;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,753,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 6322;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,752,Context) ) {
					case 1:
						{
						_localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 6307;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 6308;
						Match(IS_SYMBOL);
						State = 6310;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
							{
							State = 6309;
							notRule();
							}
						}

						State = 6312;
						Match(NULL_SYMBOL);
						}
						break;
					case 2:
						{
						_localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 6313;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 6314;
						compOp();
						State = 6315;
						predicate();
						}
						break;
					case 3:
						{
						_localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 6317;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 6318;
						compOp();
						State = 6319;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL_SYMBOL || _la==ANY_SYMBOL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6320;
						subquery();
						}
						break;
					}
					} 
				}
				State = 6326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,753,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SAFE_EQUAL_OPERATOR() { return GetToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUAL_OPERATOR() { return GetToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_OPERATOR() { return GetToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUAL_OPERATOR() { return GetToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_OPERATOR() { return GetToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL_OPERATOR() { return GetToken(MySQLParser.NOT_EQUAL_OPERATOR, 0); }
		public CompOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCompOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCompOp(this);
		}
	}

	[RuleVersion(0)]
	public CompOpContext compOp() {
		CompOpContext _localctx = new CompOpContext(Context, State);
		EnterRule(_localctx, 916, RULE_compOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6327;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16192L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext[] bitExpr() {
			return GetRuleContexts<BitExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr(int i) {
			return GetRuleContext<BitExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateOperationsContext predicateOperations() {
			return GetRuleContext<PredicateOperationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER_SYMBOL() { return GetToken(MySQLParser.MEMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return GetRuleContext<SimpleExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_SYMBOL() { return GetToken(MySQLParser.LIKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF_SYMBOL() { return GetToken(MySQLParser.OF_SYMBOL, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 918, RULE_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6329;
			bitExpr(0);
			State = 6343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,756,Context) ) {
			case 1:
				{
				State = 6331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
					{
					State = 6330;
					notRule();
					}
				}

				State = 6333;
				predicateOperations();
				}
				break;
			case 2:
				{
				State = 6334;
				if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				State = 6335;
				Match(MEMBER_SYMBOL);
				State = 6337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OF_SYMBOL) {
					{
					State = 6336;
					Match(OF_SYMBOL);
					}
				}

				State = 6339;
				simpleExprWithParentheses();
				}
				break;
			case 3:
				{
				State = 6340;
				Match(SOUNDS_SYMBOL);
				State = 6341;
				Match(LIKE_SYMBOL);
				State = 6342;
				bitExpr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateOperationsContext : ParserRuleContext {
		public PredicateOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateOperations; } }
	 
		public PredicateOperationsContext() { }
		public virtual void CopyFrom(PredicateOperationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PredicateExprRegexContext : PredicateOperationsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_SYMBOL() { return GetToken(MySQLParser.REGEXP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public PredicateExprRegexContext(PredicateOperationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprRegex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprRegex(this);
		}
	}
	public partial class PredicateExprBetweenContext : PredicateOperationsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN_SYMBOL() { return GetToken(MySQLParser.BETWEEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicateExprBetweenContext(PredicateOperationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprBetween(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprBetween(this);
		}
	}
	public partial class PredicateExprInContext : PredicateOperationsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PredicateExprInContext(PredicateOperationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprIn(this);
		}
	}
	public partial class PredicateExprLikeContext : PredicateOperationsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_SYMBOL() { return GetToken(MySQLParser.LIKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext[] simpleExpr() {
			return GetRuleContexts<SimpleExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr(int i) {
			return GetRuleContext<SimpleExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public PredicateExprLikeContext(PredicateOperationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprLike(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprLike(this);
		}
	}

	[RuleVersion(0)]
	public PredicateOperationsContext predicateOperations() {
		PredicateOperationsContext _localctx = new PredicateOperationsContext(Context, State);
		EnterRule(_localctx, 920, RULE_predicateOperations);
		try {
			State = 6366;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN_SYMBOL:
				_localctx = new PredicateExprInContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6345;
				Match(IN_SYMBOL);
				State = 6351;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,757,Context) ) {
				case 1:
					{
					State = 6346;
					subquery();
					}
					break;
				case 2:
					{
					State = 6347;
					Match(OPEN_PAR_SYMBOL);
					State = 6348;
					exprList();
					State = 6349;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case BETWEEN_SYMBOL:
				_localctx = new PredicateExprBetweenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6353;
				Match(BETWEEN_SYMBOL);
				State = 6354;
				bitExpr(0);
				State = 6355;
				Match(AND_SYMBOL);
				State = 6356;
				predicate();
				}
				break;
			case LIKE_SYMBOL:
				_localctx = new PredicateExprLikeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6358;
				Match(LIKE_SYMBOL);
				State = 6359;
				simpleExpr(0);
				State = 6362;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,758,Context) ) {
				case 1:
					{
					State = 6360;
					Match(ESCAPE_SYMBOL);
					State = 6361;
					simpleExpr(0);
					}
					break;
				}
				}
				break;
			case REGEXP_SYMBOL:
				_localctx = new PredicateExprRegexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 6364;
				Match(REGEXP_SYMBOL);
				State = 6365;
				bitExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitExprContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext[] bitExpr() {
			return GetRuleContexts<BitExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr(int i) {
			return GetRuleContext<BitExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_XOR_OPERATOR() { return GetToken(MySQLParser.BITWISE_XOR_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_OPERATOR() { return GetToken(MySQLParser.DIV_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_OPERATOR() { return GetToken(MySQLParser.MOD_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_SYMBOL() { return GetToken(MySQLParser.DIV_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_SYMBOL() { return GetToken(MySQLParser.MOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_OPERATOR() { return GetToken(MySQLParser.PLUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFT_LEFT_OPERATOR() { return GetToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFT_RIGHT_OPERATOR() { return GetToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_AND_OPERATOR() { return GetToken(MySQLParser.BITWISE_AND_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR_OPERATOR() { return GetToken(MySQLParser.BITWISE_OR_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public BitExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterBitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitBitExpr(this);
		}
	}

	[RuleVersion(0)]
	public BitExprContext bitExpr() {
		return bitExpr(0);
	}

	private BitExprContext bitExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitExprContext _localctx = new BitExprContext(Context, _parentState);
		BitExprContext _prevctx = _localctx;
		int _startState = 922;
		EnterRecursionRule(_localctx, 922, RULE_bitExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 6369;
			simpleExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6397;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,761,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 6395;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,760,Context) ) {
					case 1:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 6371;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 6372;
						_localctx.op = Match(BITWISE_XOR_OPERATOR);
						State = 6373;
						bitExpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 6374;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 6375;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0) || _la==DIV_SYMBOL || _la==MOD_SYMBOL) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6376;
						bitExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 6377;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 6378;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6379;
						bitExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 6380;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 6381;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==SHIFT_LEFT_OPERATOR || _la==SHIFT_RIGHT_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6382;
						bitExpr(4);
						}
						break;
					case 5:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 6383;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 6384;
						_localctx.op = Match(BITWISE_AND_OPERATOR);
						State = 6385;
						bitExpr(3);
						}
						break;
					case 6:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 6386;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 6387;
						_localctx.op = Match(BITWISE_OR_OPERATOR);
						State = 6388;
						bitExpr(2);
						}
						break;
					case 7:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 6389;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 6390;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6391;
						Match(INTERVAL_SYMBOL);
						State = 6392;
						expr(0);
						State = 6393;
						interval();
						}
						break;
					}
					} 
				}
				State = 6399;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,761,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleExprContext : ParserRuleContext {
		public SimpleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpr; } }
	 
		public SimpleExprContext() { }
		public virtual void CopyFrom(SimpleExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleExprConvertContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySQLParser.CONVERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastTypeContext castType() {
			return GetRuleContext<CastTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConvert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConvert(this);
		}
	}
	public partial class SimpleExprCastContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST_SYMBOL() { return GetToken(MySQLParser.CAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastTypeContext castType() {
			return GetRuleContext<CastTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SYMBOL() { return GetToken(MySQLParser.AT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCastContext arrayCast() {
			return GetRuleContext<ArrayCastContext>(0);
		}
		public SimpleExprCastContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCast(this);
		}
	}
	public partial class SimpleExprUnaryContext : SimpleExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_OPERATOR() { return GetToken(MySQLParser.PLUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_NOT_OPERATOR() { return GetToken(MySQLParser.BITWISE_NOT_OPERATOR, 0); }
		public SimpleExprUnaryContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprUnary(this);
		}
	}
	public partial class SimpleExpressionRValueContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public RvalueSystemOrUserVariableContext rvalueSystemOrUserVariable() {
			return GetRuleContext<RvalueSystemOrUserVariableContext>(0);
		}
		public SimpleExpressionRValueContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExpressionRValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExpressionRValue(this);
		}
	}
	public partial class SimpleExprOdbcContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_CURLY_SYMBOL() { return GetToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_CURLY_SYMBOL() { return GetToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public SimpleExprOdbcContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprOdbc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprOdbc(this);
		}
	}
	public partial class SimpleExprRuntimeFunctionContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeFunctionCallContext runtimeFunctionCall() {
			return GetRuleContext<RuntimeFunctionCallContext>(0);
		}
		public SimpleExprRuntimeFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprRuntimeFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprRuntimeFunction(this);
		}
	}
	public partial class SimpleExprFunctionContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SimpleExprFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprFunction(this);
		}
	}
	public partial class SimpleExprCollateContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySQLParser.COLLATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public SimpleExprCollateContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCollate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCollate(this);
		}
	}
	public partial class SimpleExprMatchContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_SYMBOL() { return GetToken(MySQLParser.MATCH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentListArgContext identListArg() {
			return GetRuleContext<IdentListArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySQLParser.AGAINST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FulltextOptionsContext fulltextOptions() {
			return GetRuleContext<FulltextOptionsContext>(0);
		}
		public SimpleExprMatchContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprMatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprMatch(this);
		}
	}
	public partial class SimpleExprWindowingFunctionContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowFunctionCallContext windowFunctionCall() {
			return GetRuleContext<WindowFunctionCallContext>(0);
		}
		public SimpleExprWindowingFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprWindowingFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprWindowingFunction(this);
		}
	}
	public partial class SimpleExprBinaryContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public SimpleExprBinaryContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprBinary(this);
		}
	}
	public partial class SimpleExprColumnRefContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonOperatorContext jsonOperator() {
			return GetRuleContext<JsonOperatorContext>(0);
		}
		public SimpleExprColumnRefContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprColumnRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprColumnRef(this);
		}
	}
	public partial class SimpleExprParamMarkerContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		public SimpleExprParamMarkerContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprParamMarker(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprParamMarker(this);
		}
	}
	public partial class SimpleExprSumContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumExprContext sumExpr() {
			return GetRuleContext<SumExprContext>(0);
		}
		public SimpleExprSumContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprSum(this);
		}
	}
	public partial class SimpleExprCastTimeContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST_SYMBOL() { return GetToken(MySQLParser.CAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SYMBOL() { return GetToken(MySQLParser.AT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE_SYMBOL() { return GetToken(MySQLParser.ZONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return GetRuleContext<TypeDatetimePrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public SimpleExprCastTimeContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCastTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCastTime(this);
		}
	}
	public partial class SimpleExprConvertUsingContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySQLParser.CONVERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertUsingContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConvertUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConvertUsing(this);
		}
	}
	public partial class SimpleExprSubQueryContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public SimpleExprSubQueryContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprSubQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprSubQuery(this);
		}
	}
	public partial class SimpleExprGroupingOperationContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingOperationContext groupingOperation() {
			return GetRuleContext<GroupingOperationContext>(0);
		}
		public SimpleExprGroupingOperationContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprGroupingOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprGroupingOperation(this);
		}
	}
	public partial class SimpleExprNotContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Not2RuleContext not2Rule() {
			return GetRuleContext<Not2RuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public SimpleExprNotContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprNot(this);
		}
	}
	public partial class SimpleExprValuesContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySQLParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprValuesContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprValues(this);
		}
	}
	public partial class SimpleExprUserVariableAssignmentContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public InExpressionUserVariableAssignmentContext inExpressionUserVariableAssignment() {
			return GetRuleContext<InExpressionUserVariableAssignmentContext>(0);
		}
		public SimpleExprUserVariableAssignmentContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprUserVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprUserVariableAssignment(this);
		}
	}
	public partial class SimpleExprDefaultContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprDefaultContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprDefault(this);
		}
	}
	public partial class SimpleExprListContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public SimpleExprListContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprList(this);
		}
	}
	public partial class SimpleExprIntervalContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_OPERATOR() { return GetToken(MySQLParser.PLUS_OPERATOR, 0); }
		public SimpleExprIntervalContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprInterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprInterval(this);
		}
	}
	public partial class SimpleExprCaseContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE_SYMBOL() { return GetToken(MySQLParser.CASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext[] whenExpression() {
			return GetRuleContexts<WhenExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext whenExpression(int i) {
			return GetRuleContext<WhenExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenExpressionContext[] thenExpression() {
			return GetRuleContexts<ThenExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenExpressionContext thenExpression(int i) {
			return GetRuleContext<ThenExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseExpressionContext elseExpression() {
			return GetRuleContext<ElseExpressionContext>(0);
		}
		public SimpleExprCaseContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCase(this);
		}
	}
	public partial class SimpleExprConcatContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext[] simpleExpr() {
			return GetRuleContexts<SimpleExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr(int i) {
			return GetRuleContext<SimpleExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT_PIPES_SYMBOL() { return GetToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0); }
		public SimpleExprConcatContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConcat(this);
		}
	}
	public partial class SimpleExprLiteralContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralOrNullContext literalOrNull() {
			return GetRuleContext<LiteralOrNullContext>(0);
		}
		public SimpleExprLiteralContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprLiteral(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprContext simpleExpr() {
		return simpleExpr(0);
	}

	private SimpleExprContext simpleExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleExprContext _localctx = new SimpleExprContext(Context, _parentState);
		SimpleExprContext _prevctx = _localctx;
		int _startState = 924;
		EnterRecursionRule(_localctx, 924, RULE_simpleExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6522;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,772,Context) ) {
			case 1:
				{
				_localctx = new SimpleExprColumnRefContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 6401;
				columnRef();
				State = 6403;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,762,Context) ) {
				case 1:
					{
					State = 6402;
					jsonOperator();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new SimpleExprRuntimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6405;
				runtimeFunctionCall();
				}
				break;
			case 3:
				{
				_localctx = new SimpleExprFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6406;
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExprLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6407;
				literalOrNull();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExprParamMarkerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6408;
				Match(PARAM_MARKER);
				}
				break;
			case 6:
				{
				_localctx = new SimpleExpressionRValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6409;
				rvalueSystemOrUserVariable();
				}
				break;
			case 7:
				{
				_localctx = new SimpleExprUserVariableAssignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6410;
				inExpressionUserVariableAssignment();
				}
				break;
			case 8:
				{
				_localctx = new SimpleExprSumContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6411;
				sumExpr();
				}
				break;
			case 9:
				{
				_localctx = new SimpleExprGroupingOperationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6412;
				groupingOperation();
				}
				break;
			case 10:
				{
				_localctx = new SimpleExprWindowingFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6413;
				windowFunctionCall();
				}
				break;
			case 11:
				{
				_localctx = new SimpleExprUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6414;
				((SimpleExprUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1097728L) != 0)) ) {
					((SimpleExprUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6415;
				simpleExpr(15);
				}
				break;
			case 12:
				{
				_localctx = new SimpleExprNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6416;
				not2Rule();
				State = 6417;
				simpleExpr(14);
				}
				break;
			case 13:
				{
				_localctx = new SimpleExprListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROW_SYMBOL) {
					{
					State = 6419;
					Match(ROW_SYMBOL);
					}
				}

				State = 6422;
				Match(OPEN_PAR_SYMBOL);
				State = 6423;
				exprList();
				State = 6424;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 14:
				{
				_localctx = new SimpleExprSubQueryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					State = 6426;
					Match(EXISTS_SYMBOL);
					}
				}

				State = 6429;
				subquery();
				}
				break;
			case 15:
				{
				_localctx = new SimpleExprOdbcContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6430;
				Match(OPEN_CURLY_SYMBOL);
				State = 6431;
				identifier();
				State = 6432;
				expr(0);
				State = 6433;
				Match(CLOSE_CURLY_SYMBOL);
				}
				break;
			case 16:
				{
				_localctx = new SimpleExprMatchContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6435;
				Match(MATCH_SYMBOL);
				State = 6436;
				identListArg();
				State = 6437;
				Match(AGAINST_SYMBOL);
				State = 6438;
				Match(OPEN_PAR_SYMBOL);
				State = 6439;
				bitExpr(0);
				State = 6441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN_SYMBOL || _la==WITH_SYMBOL) {
					{
					State = 6440;
					fulltextOptions();
					}
				}

				State = 6443;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 17:
				{
				_localctx = new SimpleExprBinaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6445;
				Match(BINARY_SYMBOL);
				State = 6446;
				simpleExpr(9);
				}
				break;
			case 18:
				{
				_localctx = new SimpleExprCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6447;
				Match(CAST_SYMBOL);
				State = 6448;
				Match(OPEN_PAR_SYMBOL);
				State = 6449;
				expr(0);
				State = 6452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SYMBOL) {
					{
					State = 6450;
					Match(AT_SYMBOL);
					State = 6451;
					Match(LOCAL_SYMBOL);
					}
				}

				State = 6454;
				Match(AS_SYMBOL);
				State = 6455;
				castType();
				State = 6457;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,767,Context) ) {
				case 1:
					{
					State = 6456;
					arrayCast();
					}
					break;
				}
				State = 6459;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 19:
				{
				_localctx = new SimpleExprCastTimeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6461;
				Match(CAST_SYMBOL);
				State = 6462;
				Match(OPEN_PAR_SYMBOL);
				State = 6463;
				expr(0);
				State = 6464;
				Match(AT_SYMBOL);
				State = 6465;
				Match(TIME_SYMBOL);
				State = 6466;
				Match(ZONE_SYMBOL);
				State = 6468;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,768,Context) ) {
				case 1:
					{
					State = 6467;
					Match(INTERVAL_SYMBOL);
					}
					break;
				}
				State = 6470;
				textStringLiteral();
				State = 6471;
				Match(AS_SYMBOL);
				State = 6472;
				Match(DATETIME_SYMBOL);
				State = 6473;
				typeDatetimePrecision();
				State = 6474;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				{
				_localctx = new SimpleExprCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6476;
				Match(CASE_SYMBOL);
				State = 6478;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,769,Context) ) {
				case 1:
					{
					State = 6477;
					expr(0);
					}
					break;
				}
				State = 6483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6480;
					whenExpression();
					State = 6481;
					thenExpression();
					}
					}
					State = 6485;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN_SYMBOL );
				State = 6488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE_SYMBOL) {
					{
					State = 6487;
					elseExpression();
					}
				}

				State = 6490;
				Match(END_SYMBOL);
				}
				break;
			case 21:
				{
				_localctx = new SimpleExprConvertContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6492;
				Match(CONVERT_SYMBOL);
				State = 6493;
				Match(OPEN_PAR_SYMBOL);
				State = 6494;
				expr(0);
				State = 6495;
				Match(COMMA_SYMBOL);
				State = 6496;
				castType();
				State = 6497;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 22:
				{
				_localctx = new SimpleExprConvertUsingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6499;
				Match(CONVERT_SYMBOL);
				State = 6500;
				Match(OPEN_PAR_SYMBOL);
				State = 6501;
				expr(0);
				State = 6502;
				Match(USING_SYMBOL);
				State = 6503;
				charsetName();
				State = 6504;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				{
				_localctx = new SimpleExprDefaultContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6506;
				Match(DEFAULT_SYMBOL);
				State = 6507;
				Match(OPEN_PAR_SYMBOL);
				State = 6508;
				simpleIdentifier();
				State = 6509;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 24:
				{
				_localctx = new SimpleExprValuesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6511;
				Match(VALUES_SYMBOL);
				State = 6512;
				Match(OPEN_PAR_SYMBOL);
				State = 6513;
				simpleIdentifier();
				State = 6514;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 25:
				{
				_localctx = new SimpleExprIntervalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6516;
				Match(INTERVAL_SYMBOL);
				State = 6517;
				expr(0);
				State = 6518;
				interval();
				State = 6519;
				Match(PLUS_OPERATOR);
				State = 6520;
				expr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6532;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,774,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 6530;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,773,Context) ) {
					case 1:
						{
						_localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						State = 6524;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 6525;
						Match(CONCAT_PIPES_SYMBOL);
						State = 6526;
						simpleExpr(17);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						State = 6527;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 6528;
						Match(COLLATE_SYMBOL);
						State = 6529;
						textOrIdentifier();
						}
						break;
					}
					} 
				}
				State = 6534;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,774,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayCastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_SYMBOL() { return GetToken(MySQLParser.ARRAY_SYMBOL, 0); }
		public ArrayCastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterArrayCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitArrayCast(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCastContext arrayCast() {
		ArrayCastContext _localctx = new ArrayCastContext(Context, State);
		EnterRule(_localctx, 926, RULE_arrayCast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6535;
			if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
			State = 6536;
			Match(ARRAY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SEPARATOR_SYMBOL() { return GetToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_UNQUOTED_SEPARATOR_SYMBOL() { return GetToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0); }
		public JsonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJsonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJsonOperator(this);
		}
	}

	[RuleVersion(0)]
	public JsonOperatorContext jsonOperator() {
		JsonOperatorContext _localctx = new JsonOperatorContext(Context, State);
		EnterRule(_localctx, 928, RULE_jsonOperator);
		try {
			State = 6542;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON_SEPARATOR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6538;
				Match(JSON_SEPARATOR_SYMBOL);
				State = 6539;
				textStringLiteral();
				}
				break;
			case JSON_UNQUOTED_SEPARATOR_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6540;
				Match(JSON_UNQUOTED_SEPARATOR_SYMBOL);
				State = 6541;
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumExprContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InSumExprContext inSumExpr() {
			return GetRuleContext<InSumExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_SYMBOL() { return GetToken(MySQLParser.AVG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND_SYMBOL() { return GetToken(MySQLParser.BIT_AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR_SYMBOL() { return GetToken(MySQLParser.BIT_OR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR_SYMBOL() { return GetToken(MySQLParser.BIT_XOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonFunctionContext jsonFunction() {
			return GetRuleContext<JsonFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_COLLECT_SYMBOL() { return GetToken(MySQLParser.ST_COLLECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_SYMBOL() { return GetToken(MySQLParser.COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_SYMBOL() { return GetToken(MySQLParser.MIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SYMBOL() { return GetToken(MySQLParser.MAX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD_SYMBOL() { return GetToken(MySQLParser.STD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANCE_SYMBOL() { return GetToken(MySQLParser.VARIANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_SAMP_SYMBOL() { return GetToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_SAMP_SYMBOL() { return GetToken(MySQLParser.VAR_SAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM_SYMBOL() { return GetToken(MySQLParser.SUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_CONCAT_SYMBOL() { return GetToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_SYMBOL() { return GetToken(MySQLParser.SEPARATOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public SumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSumExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSumExpr(this);
		}
	}

	[RuleVersion(0)]
	public SumExprContext sumExpr() {
		SumExprContext _localctx = new SumExprContext(Context, State);
		EnterRule(_localctx, 930, RULE_sumExpr);
		int _la;
		try {
			State = 6629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,792,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6544;
				_localctx.name = Match(AVG_SYMBOL);
				State = 6545;
				Match(OPEN_PAR_SYMBOL);
				State = 6547;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,776,Context) ) {
				case 1:
					{
					State = 6546;
					Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 6549;
				inSumExpr();
				State = 6550;
				Match(CLOSE_PAR_SYMBOL);
				State = 6552;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,777,Context) ) {
				case 1:
					{
					State = 6551;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6554;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 11L) != 0)) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6555;
				Match(OPEN_PAR_SYMBOL);
				State = 6556;
				inSumExpr();
				State = 6557;
				Match(CLOSE_PAR_SYMBOL);
				State = 6559;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,778,Context) ) {
				case 1:
					{
					State = 6558;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6561;
				jsonFunction();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6562;
				_localctx.name = Match(ST_COLLECT_SYMBOL);
				State = 6563;
				Match(OPEN_PAR_SYMBOL);
				State = 6565;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,779,Context) ) {
				case 1:
					{
					State = 6564;
					Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 6567;
				inSumExpr();
				State = 6568;
				Match(CLOSE_PAR_SYMBOL);
				State = 6570;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,780,Context) ) {
				case 1:
					{
					State = 6569;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6572;
				_localctx.name = Match(COUNT_SYMBOL);
				State = 6573;
				Match(OPEN_PAR_SYMBOL);
				State = 6581;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,782,Context) ) {
				case 1:
					{
					State = 6575;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL_SYMBOL) {
						{
						State = 6574;
						Match(ALL_SYMBOL);
						}
					}

					State = 6577;
					Match(MULT_OPERATOR);
					}
					break;
				case 2:
					{
					State = 6578;
					inSumExpr();
					}
					break;
				case 3:
					{
					State = 6579;
					Match(DISTINCT_SYMBOL);
					State = 6580;
					exprList();
					}
					break;
				}
				State = 6583;
				Match(CLOSE_PAR_SYMBOL);
				State = 6585;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,783,Context) ) {
				case 1:
					{
					State = 6584;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6587;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MAX_SYMBOL || _la==MIN_SYMBOL) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6588;
				Match(OPEN_PAR_SYMBOL);
				State = 6590;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,784,Context) ) {
				case 1:
					{
					State = 6589;
					Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 6592;
				inSumExpr();
				State = 6593;
				Match(CLOSE_PAR_SYMBOL);
				State = 6595;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,785,Context) ) {
				case 1:
					{
					State = 6594;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6597;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & 65545L) != 0) || _la==VARIANCE_SYMBOL || _la==VAR_SAMP_SYMBOL) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6598;
				Match(OPEN_PAR_SYMBOL);
				State = 6599;
				inSumExpr();
				State = 6600;
				Match(CLOSE_PAR_SYMBOL);
				State = 6602;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,786,Context) ) {
				case 1:
					{
					State = 6601;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6604;
				_localctx.name = Match(SUM_SYMBOL);
				State = 6605;
				Match(OPEN_PAR_SYMBOL);
				State = 6606;
				Match(DISTINCT_SYMBOL);
				State = 6607;
				inSumExpr();
				State = 6608;
				Match(CLOSE_PAR_SYMBOL);
				State = 6610;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,787,Context) ) {
				case 1:
					{
					State = 6609;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6612;
				_localctx.name = Match(GROUP_CONCAT_SYMBOL);
				State = 6613;
				Match(OPEN_PAR_SYMBOL);
				State = 6615;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,788,Context) ) {
				case 1:
					{
					State = 6614;
					Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 6617;
				exprList();
				State = 6619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_SYMBOL) {
					{
					State = 6618;
					orderClause();
					}
				}

				State = 6623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR_SYMBOL) {
					{
					State = 6621;
					Match(SEPARATOR_SYMBOL);
					State = 6622;
					textString();
					}
				}

				State = 6625;
				Match(CLOSE_PAR_SYMBOL);
				State = 6627;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,791,Context) ) {
				case 1:
					{
					State = 6626;
					windowingClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING_SYMBOL() { return GetToken(MySQLParser.GROUPING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public GroupingOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupingOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupingOperation(this);
		}
	}

	[RuleVersion(0)]
	public GroupingOperationContext groupingOperation() {
		GroupingOperationContext _localctx = new GroupingOperationContext(Context, State);
		EnterRule(_localctx, 932, RULE_groupingOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6631;
			Match(GROUPING_SYMBOL);
			State = 6632;
			Match(OPEN_PAR_SYMBOL);
			State = 6633;
			exprList();
			State = 6634;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER_SYMBOL() { return GetToken(MySQLParser.ROW_NUMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK_SYMBOL() { return GetToken(MySQLParser.RANK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK_SYMBOL() { return GetToken(MySQLParser.DENSE_RANK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST_SYMBOL() { return GetToken(MySQLParser.CUME_DIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK_SYMBOL() { return GetToken(MySQLParser.PERCENT_RANK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE_SYMBOL() { return GetToken(MySQLParser.NTILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StableIntegerContext stableInteger() {
			return GetRuleContext<StableIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return GetRuleContext<SimpleExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD_SYMBOL() { return GetToken(MySQLParser.LEAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG_SYMBOL() { return GetToken(MySQLParser.LAG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeadLagInfoContext leadLagInfo() {
			return GetRuleContext<LeadLagInfoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullTreatmentContext nullTreatment() {
			return GetRuleContext<NullTreatmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE_SYMBOL() { return GetToken(MySQLParser.FIRST_VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE_SYMBOL() { return GetToken(MySQLParser.LAST_VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE_SYMBOL() { return GetToken(MySQLParser.NTH_VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		public WindowFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFunctionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public WindowFunctionCallContext windowFunctionCall() {
		WindowFunctionCallContext _localctx = new WindowFunctionCallContext(Context, State);
		EnterRule(_localctx, 934, RULE_windowFunctionCall);
		int _la;
		try {
			State = 6685;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CUME_DIST_SYMBOL:
			case DENSE_RANK_SYMBOL:
			case PERCENT_RANK_SYMBOL:
			case RANK_SYMBOL:
			case ROW_NUMBER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6636;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & 344067L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6637;
				parentheses();
				State = 6638;
				windowingClause();
				}
				break;
			case NTILE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6640;
				Match(NTILE_SYMBOL);
				State = 6647;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,793,Context) ) {
				case 1:
					{
					State = 6641;
					Match(OPEN_PAR_SYMBOL);
					State = 6642;
					stableInteger();
					State = 6643;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				case 2:
					{
					State = 6645;
					if (!(this.isServerVersionLt80024())) throw new FailedPredicateException(this, "this.isServerVersionLt80024()");
					State = 6646;
					simpleExprWithParentheses();
					}
					break;
				}
				State = 6649;
				windowingClause();
				}
				break;
			case LAG_SYMBOL:
			case LEAD_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6651;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG_SYMBOL || _la==LEAD_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6652;
				Match(OPEN_PAR_SYMBOL);
				State = 6653;
				expr(0);
				State = 6655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6654;
					leadLagInfo();
					}
				}

				State = 6657;
				Match(CLOSE_PAR_SYMBOL);
				State = 6659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 6658;
					nullTreatment();
					}
				}

				State = 6661;
				windowingClause();
				}
				break;
			case FIRST_VALUE_SYMBOL:
			case LAST_VALUE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6663;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE_SYMBOL || _la==LAST_VALUE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6664;
				exprWithParentheses();
				State = 6666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 6665;
					nullTreatment();
					}
				}

				State = 6668;
				windowingClause();
				}
				break;
			case NTH_VALUE_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6670;
				Match(NTH_VALUE_SYMBOL);
				State = 6671;
				Match(OPEN_PAR_SYMBOL);
				State = 6672;
				expr(0);
				State = 6673;
				Match(COMMA_SYMBOL);
				State = 6674;
				simpleExpr(0);
				State = 6675;
				Match(CLOSE_PAR_SYMBOL);
				State = 6678;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					State = 6676;
					Match(FROM_SYMBOL);
					State = 6677;
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 6681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 6680;
					nullTreatment();
					}
				}

				State = 6683;
				windowingClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SamplingMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BERNOULLI_SYMBOL() { return GetToken(MySQLParser.BERNOULLI_SYMBOL, 0); }
		public SamplingMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_samplingMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSamplingMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSamplingMethod(this);
		}
	}

	[RuleVersion(0)]
	public SamplingMethodContext samplingMethod() {
		SamplingMethodContext _localctx = new SamplingMethodContext(Context, State);
		EnterRule(_localctx, 936, RULE_samplingMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6687;
			_la = TokenStream.LA(1);
			if ( !(_la==SYSTEM_SYMBOL || _la==BERNOULLI_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SamplingPercentageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		public SamplingPercentageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_samplingPercentage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSamplingPercentage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSamplingPercentage(this);
		}
	}

	[RuleVersion(0)]
	public SamplingPercentageContext samplingPercentage() {
		SamplingPercentageContext _localctx = new SamplingPercentageContext(Context, State);
		EnterRule(_localctx, 938, RULE_samplingPercentage);
		try {
			State = 6693;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6689;
				ulonglongNumber();
				}
				break;
			case AT_SIGN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6690;
				Match(AT_SIGN_SYMBOL);
				State = 6691;
				textOrIdentifier();
				}
				break;
			case PARAM_MARKER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6692;
				Match(PARAM_MARKER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablesampleClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE_SYMBOL() { return GetToken(MySQLParser.TABLESAMPLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SamplingMethodContext samplingMethod() {
			return GetRuleContext<SamplingMethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SamplingPercentageContext samplingPercentage() {
			return GetRuleContext<SamplingPercentageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TablesampleClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablesampleClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablesampleClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablesampleClause(this);
		}
	}

	[RuleVersion(0)]
	public TablesampleClauseContext tablesampleClause() {
		TablesampleClauseContext _localctx = new TablesampleClauseContext(Context, State);
		EnterRule(_localctx, 940, RULE_tablesampleClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6695;
			if (!(this.isServerVersionGe80200())) throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			State = 6696;
			Match(TABLESAMPLE_SYMBOL);
			State = 6697;
			samplingMethod();
			State = 6698;
			Match(OPEN_PAR_SYMBOL);
			State = 6699;
			samplingPercentage();
			State = 6700;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER_SYMBOL() { return GetToken(MySQLParser.OVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public WindowingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowingClause(this);
		}
	}

	[RuleVersion(0)]
	public WindowingClauseContext windowingClause() {
		WindowingClauseContext _localctx = new WindowingClauseContext(Context, State);
		EnterRule(_localctx, 942, RULE_windowingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6702;
			Match(OVER_SYMBOL);
			State = 6705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,801,Context) ) {
			case 1:
				{
				State = 6703;
				windowName();
				}
				break;
			case 2:
				{
				State = 6704;
				windowSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeadLagInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StableIntegerContext stableInteger() {
			return GetRuleContext<StableIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LeadLagInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leadLagInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLeadLagInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLeadLagInfo(this);
		}
	}

	[RuleVersion(0)]
	public LeadLagInfoContext leadLagInfo() {
		LeadLagInfoContext _localctx = new LeadLagInfoContext(Context, State);
		EnterRule(_localctx, 944, RULE_leadLagInfo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6707;
			Match(COMMA_SYMBOL);
			State = 6712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,802,Context) ) {
			case 1:
				{
				State = 6708;
				ulonglongNumber();
				}
				break;
			case 2:
				{
				State = 6709;
				Match(PARAM_MARKER);
				}
				break;
			case 3:
				{
				State = 6710;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 6711;
				stableInteger();
				}
				break;
			}
			State = 6716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				State = 6714;
				Match(COMMA_SYMBOL);
				State = 6715;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StableIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int64LiteralContext int64Literal() {
			return GetRuleContext<Int64LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamOrVarContext paramOrVar() {
			return GetRuleContext<ParamOrVarContext>(0);
		}
		public StableIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stableInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStableInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStableInteger(this);
		}
	}

	[RuleVersion(0)]
	public StableIntegerContext stableInteger() {
		StableIntegerContext _localctx = new StableIntegerContext(Context, State);
		EnterRule(_localctx, 946, RULE_stableInteger);
		try {
			State = 6720;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,804,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6718;
				int64Literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6719;
				paramOrVar();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamOrVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ParamOrVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramOrVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterParamOrVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitParamOrVar(this);
		}
	}

	[RuleVersion(0)]
	public ParamOrVarContext paramOrVar() {
		ParamOrVarContext _localctx = new ParamOrVarContext(Context, State);
		EnterRule(_localctx, 948, RULE_paramOrVar);
		try {
			State = 6726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,805,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6722;
				Match(PARAM_MARKER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6723;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6724;
				Match(AT_SIGN_SYMBOL);
				State = 6725;
				textOrIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullTreatmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_SYMBOL() { return GetToken(MySQLParser.NULLS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySQLParser.RESPECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public NullTreatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullTreatment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNullTreatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNullTreatment(this);
		}
	}

	[RuleVersion(0)]
	public NullTreatmentContext nullTreatment() {
		NullTreatmentContext _localctx = new NullTreatmentContext(Context, State);
		EnterRule(_localctx, 950, RULE_nullTreatment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6728;
			_la = TokenStream.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6729;
			Match(NULLS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAYAGG_SYMBOL() { return GetToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InSumExprContext[] inSumExpr() {
			return GetRuleContexts<InSumExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InSumExprContext inSumExpr(int i) {
			return GetRuleContext<InSumExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECTAGG_SYMBOL() { return GetToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public JsonFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJsonFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJsonFunction(this);
		}
	}

	[RuleVersion(0)]
	public JsonFunctionContext jsonFunction() {
		JsonFunctionContext _localctx = new JsonFunctionContext(Context, State);
		EnterRule(_localctx, 952, RULE_jsonFunction);
		try {
			State = 6747;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON_ARRAYAGG_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6731;
				Match(JSON_ARRAYAGG_SYMBOL);
				State = 6732;
				Match(OPEN_PAR_SYMBOL);
				State = 6733;
				inSumExpr();
				State = 6734;
				Match(CLOSE_PAR_SYMBOL);
				State = 6736;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,806,Context) ) {
				case 1:
					{
					State = 6735;
					windowingClause();
					}
					break;
				}
				}
				break;
			case JSON_OBJECTAGG_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6738;
				Match(JSON_OBJECTAGG_SYMBOL);
				State = 6739;
				Match(OPEN_PAR_SYMBOL);
				State = 6740;
				inSumExpr();
				State = 6741;
				Match(COMMA_SYMBOL);
				State = 6742;
				inSumExpr();
				State = 6743;
				Match(CLOSE_PAR_SYMBOL);
				State = 6745;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,807,Context) ) {
				case 1:
					{
					State = 6744;
					windowingClause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InSumExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public InSumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inSumExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInSumExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInSumExpr(this);
		}
	}

	[RuleVersion(0)]
	public InSumExprContext inSumExpr() {
		InSumExprContext _localctx = new InSumExprContext(Context, State);
		EnterRule(_localctx, 954, RULE_inSumExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6750;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,809,Context) ) {
			case 1:
				{
				State = 6749;
				Match(ALL_SYMBOL);
				}
				break;
			}
			State = 6752;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentListArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentListContext identList() {
			return GetRuleContext<IdentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentListArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identListArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentListArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentListArg(this);
		}
	}

	[RuleVersion(0)]
	public IdentListArgContext identListArg() {
		IdentListArgContext _localctx = new IdentListArgContext(Context, State);
		EnterRule(_localctx, 956, RULE_identListArg);
		try {
			State = 6759;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,810,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6754;
				identList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6755;
				Match(OPEN_PAR_SYMBOL);
				State = 6756;
				identList();
				State = 6757;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext[] simpleIdentifier() {
			return GetRuleContexts<SimpleIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier(int i) {
			return GetRuleContext<SimpleIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IdentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentList(this);
		}
	}

	[RuleVersion(0)]
	public IdentListContext identList() {
		IdentListContext _localctx = new IdentListContext(Context, State);
		EnterRule(_localctx, 958, RULE_identList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6761;
			simpleIdentifier();
			State = 6766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6762;
				Match(COMMA_SYMBOL);
				State = 6763;
				simpleIdentifier();
				}
				}
				State = 6768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FulltextOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE_SYMBOL() { return GetToken(MySQLParser.MODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL_SYMBOL() { return GetToken(MySQLParser.NATURAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public FulltextOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fulltextOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFulltextOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFulltextOptions(this);
		}
	}

	[RuleVersion(0)]
	public FulltextOptionsContext fulltextOptions() {
		FulltextOptionsContext _localctx = new FulltextOptionsContext(Context, State);
		EnterRule(_localctx, 960, RULE_fulltextOptions);
		int _la;
		try {
			State = 6784;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,813,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6769;
				Match(IN_SYMBOL);
				State = 6770;
				Match(BOOLEAN_SYMBOL);
				State = 6771;
				Match(MODE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6772;
				Match(IN_SYMBOL);
				State = 6773;
				Match(NATURAL_SYMBOL);
				State = 6774;
				Match(LANGUAGE_SYMBOL);
				State = 6775;
				Match(MODE_SYMBOL);
				State = 6779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 6776;
					Match(WITH_SYMBOL);
					State = 6777;
					Match(QUERY_SYMBOL);
					State = 6778;
					Match(EXPANSION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6781;
				Match(WITH_SYMBOL);
				State = 6782;
				Match(QUERY_SYMBOL);
				State = 6783;
				Match(EXPANSION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeFunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER_SYMBOL() { return GetToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SYMBOL() { return GetToken(MySQLParser.HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_SYMBOL() { return GetToken(MySQLParser.INSERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE_SYMBOL() { return GetToken(MySQLParser.JSON_VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnEmptyOrErrorContext onEmptyOrError() {
			return GetRuleContext<OnEmptyOrErrorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturningTypeContext returningType() {
			return GetRuleContext<ReturningTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SYMBOL() { return GetToken(MySQLParser.LEFT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySQLParser.MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_SYMBOL() { return GetToken(MySQLParser.MONTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySQLParser.RIGHT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TrimFunctionContext trimFunction() {
			return GetRuleContext<TrimFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserFunctionContext userFunction() {
			return GetRuleContext<UserFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySQLParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURDATE_SYMBOL() { return GetToken(MySQLParser.CURDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURTIME_SYMBOL() { return GetToken(MySQLParser.CURTIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeFunctionParametersContext timeFunctionParameters() {
			return GetRuleContext<TimeFunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_ADD_SYMBOL() { return GetToken(MySQLParser.DATE_ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SUB_SYMBOL() { return GetToken(MySQLParser.DATE_SUB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT_SYMBOL() { return GetToken(MySQLParser.EXTRACT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateTimeTtypeContext dateTimeTtype() {
			return GetRuleContext<DateTimeTtypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG_SYMBOL() { return GetToken(MySQLParser.LOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW_SYMBOL() { return GetToken(MySQLParser.NOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION_SYMBOL() { return GetToken(MySQLParser.POSITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubstringFunctionContext substringFunction() {
			return GetRuleContext<SubstringFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSDATE_SYMBOL() { return GetToken(MySQLParser.SYSDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTimeStampContext intervalTimeStamp() {
			return GetRuleContext<IntervalTimeStampContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPADD_SYMBOL() { return GetToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPDIFF_SYMBOL() { return GetToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_DATE_SYMBOL() { return GetToken(MySQLParser.UTC_DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIME_SYMBOL() { return GetToken(MySQLParser.UTC_TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII_SYMBOL() { return GetToken(MySQLParser.ASCII_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySQLParser.CHARSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySQLParser.COALESCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListWithParenthesesContext exprListWithParentheses() {
			return GetRuleContext<ExprListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySQLParser.COLLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_SYMBOL() { return GetToken(MySQLParser.IF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySQLParser.FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_SYMBOL() { return GetToken(MySQLParser.MOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySQLParser.QUARTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_SYMBOL() { return GetToken(MySQLParser.REPEAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySQLParser.REVERSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK_SYMBOL() { return GetToken(MySQLParser.WEEK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsNumCodepointsContext wsNumCodepoints() {
			return GetRuleContext<WsNumCodepointsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeometryFunctionContext geometryFunction() {
			return GetRuleContext<GeometryFunctionContext>(0);
		}
		public RuntimeFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeFunctionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRuntimeFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRuntimeFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeFunctionCallContext runtimeFunctionCall() {
		RuntimeFunctionCallContext _localctx = new RuntimeFunctionCallContext(Context, State);
		EnterRule(_localctx, 962, RULE_runtimeFunctionCall);
		int _la;
		try {
			State = 7069;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,832,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6786;
				Match(CHAR_SYMBOL);
				State = 6787;
				Match(OPEN_PAR_SYMBOL);
				State = 6788;
				exprList();
				State = 6791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING_SYMBOL) {
					{
					State = 6789;
					Match(USING_SYMBOL);
					State = 6790;
					charsetName();
					}
				}

				State = 6793;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6795;
				Match(CURRENT_USER_SYMBOL);
				State = 6797;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,815,Context) ) {
				case 1:
					{
					State = 6796;
					parentheses();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6799;
				Match(DATE_SYMBOL);
				State = 6800;
				exprWithParentheses();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6801;
				Match(DAY_SYMBOL);
				State = 6802;
				exprWithParentheses();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6803;
				Match(HOUR_SYMBOL);
				State = 6804;
				exprWithParentheses();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6805;
				Match(INSERT_SYMBOL);
				State = 6806;
				Match(OPEN_PAR_SYMBOL);
				State = 6807;
				expr(0);
				State = 6808;
				Match(COMMA_SYMBOL);
				State = 6809;
				expr(0);
				State = 6810;
				Match(COMMA_SYMBOL);
				State = 6811;
				expr(0);
				State = 6812;
				Match(COMMA_SYMBOL);
				State = 6813;
				expr(0);
				State = 6814;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6816;
				Match(INTERVAL_SYMBOL);
				State = 6817;
				Match(OPEN_PAR_SYMBOL);
				State = 6818;
				expr(0);
				State = 6821;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6819;
					Match(COMMA_SYMBOL);
					State = 6820;
					expr(0);
					}
					}
					State = 6823;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA_SYMBOL );
				State = 6825;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6827;
				Match(JSON_VALUE_SYMBOL);
				State = 6828;
				Match(OPEN_PAR_SYMBOL);
				State = 6829;
				simpleExpr(0);
				State = 6830;
				Match(COMMA_SYMBOL);
				State = 6831;
				textLiteral();
				State = 6833;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING_SYMBOL) {
					{
					State = 6832;
					returningType();
					}
				}

				State = 6835;
				onEmptyOrError();
				State = 6836;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6838;
				Match(LEFT_SYMBOL);
				State = 6839;
				Match(OPEN_PAR_SYMBOL);
				State = 6840;
				expr(0);
				State = 6841;
				Match(COMMA_SYMBOL);
				State = 6842;
				expr(0);
				State = 6843;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6845;
				Match(MINUTE_SYMBOL);
				State = 6846;
				exprWithParentheses();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6847;
				Match(MONTH_SYMBOL);
				State = 6848;
				exprWithParentheses();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6849;
				Match(RIGHT_SYMBOL);
				State = 6850;
				Match(OPEN_PAR_SYMBOL);
				State = 6851;
				expr(0);
				State = 6852;
				Match(COMMA_SYMBOL);
				State = 6853;
				expr(0);
				State = 6854;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6856;
				Match(SECOND_SYMBOL);
				State = 6857;
				exprWithParentheses();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6858;
				Match(TIME_SYMBOL);
				State = 6859;
				exprWithParentheses();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6860;
				Match(TIMESTAMP_SYMBOL);
				State = 6861;
				Match(OPEN_PAR_SYMBOL);
				State = 6862;
				expr(0);
				State = 6865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6863;
					Match(COMMA_SYMBOL);
					State = 6864;
					expr(0);
					}
				}

				State = 6867;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6869;
				trimFunction();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6870;
				userFunction();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6871;
				Match(VALUES_SYMBOL);
				State = 6872;
				exprWithParentheses();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6873;
				Match(YEAR_SYMBOL);
				State = 6874;
				exprWithParentheses();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6875;
				_la = TokenStream.LA(1);
				if ( !(_la==ADDDATE_SYMBOL || _la==SUBDATE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6876;
				Match(OPEN_PAR_SYMBOL);
				State = 6877;
				expr(0);
				State = 6878;
				Match(COMMA_SYMBOL);
				State = 6884;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,819,Context) ) {
				case 1:
					{
					State = 6879;
					expr(0);
					}
					break;
				case 2:
					{
					State = 6880;
					Match(INTERVAL_SYMBOL);
					State = 6881;
					expr(0);
					State = 6882;
					interval();
					}
					break;
				}
				State = 6886;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6888;
				Match(CURDATE_SYMBOL);
				State = 6890;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,820,Context) ) {
				case 1:
					{
					State = 6889;
					parentheses();
					}
					break;
				}
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6892;
				Match(CURTIME_SYMBOL);
				State = 6894;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,821,Context) ) {
				case 1:
					{
					State = 6893;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6896;
				_la = TokenStream.LA(1);
				if ( !(_la==DATE_ADD_SYMBOL || _la==DATE_SUB_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6897;
				Match(OPEN_PAR_SYMBOL);
				State = 6898;
				expr(0);
				State = 6899;
				Match(COMMA_SYMBOL);
				State = 6900;
				Match(INTERVAL_SYMBOL);
				State = 6901;
				expr(0);
				State = 6902;
				interval();
				State = 6903;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6905;
				Match(EXTRACT_SYMBOL);
				State = 6906;
				Match(OPEN_PAR_SYMBOL);
				State = 6907;
				interval();
				State = 6908;
				Match(FROM_SYMBOL);
				State = 6909;
				expr(0);
				State = 6910;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6912;
				Match(GET_FORMAT_SYMBOL);
				State = 6913;
				Match(OPEN_PAR_SYMBOL);
				State = 6914;
				dateTimeTtype();
				State = 6915;
				Match(COMMA_SYMBOL);
				State = 6916;
				expr(0);
				State = 6917;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6919;
				if (!(this.isServerVersionGe80032())) throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
				State = 6920;
				Match(LOG_SYMBOL);
				State = 6921;
				Match(OPEN_PAR_SYMBOL);
				State = 6922;
				expr(0);
				State = 6925;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6923;
					Match(COMMA_SYMBOL);
					State = 6924;
					expr(0);
					}
				}

				State = 6927;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6929;
				Match(NOW_SYMBOL);
				State = 6931;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,823,Context) ) {
				case 1:
					{
					State = 6930;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 6933;
				Match(POSITION_SYMBOL);
				State = 6934;
				Match(OPEN_PAR_SYMBOL);
				State = 6935;
				bitExpr(0);
				State = 6936;
				Match(IN_SYMBOL);
				State = 6937;
				expr(0);
				State = 6938;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 6940;
				substringFunction();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 6941;
				Match(SYSDATE_SYMBOL);
				State = 6943;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,824,Context) ) {
				case 1:
					{
					State = 6942;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 6945;
				_la = TokenStream.LA(1);
				if ( !(_la==TIMESTAMPADD_SYMBOL || _la==TIMESTAMPDIFF_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6946;
				Match(OPEN_PAR_SYMBOL);
				State = 6947;
				intervalTimeStamp();
				State = 6948;
				Match(COMMA_SYMBOL);
				State = 6949;
				expr(0);
				State = 6950;
				Match(COMMA_SYMBOL);
				State = 6951;
				expr(0);
				State = 6952;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 6954;
				Match(UTC_DATE_SYMBOL);
				State = 6956;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,825,Context) ) {
				case 1:
					{
					State = 6955;
					parentheses();
					}
					break;
				}
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 6958;
				Match(UTC_TIME_SYMBOL);
				State = 6960;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,826,Context) ) {
				case 1:
					{
					State = 6959;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 6962;
				Match(UTC_TIMESTAMP_SYMBOL);
				State = 6964;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,827,Context) ) {
				case 1:
					{
					State = 6963;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 6966;
				Match(ASCII_SYMBOL);
				State = 6967;
				exprWithParentheses();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 6968;
				Match(CHARSET_SYMBOL);
				State = 6969;
				exprWithParentheses();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 6970;
				Match(COALESCE_SYMBOL);
				State = 6971;
				exprListWithParentheses();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 6972;
				Match(COLLATION_SYMBOL);
				State = 6973;
				exprWithParentheses();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 6974;
				Match(DATABASE_SYMBOL);
				State = 6975;
				parentheses();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 6976;
				Match(IF_SYMBOL);
				State = 6977;
				Match(OPEN_PAR_SYMBOL);
				State = 6978;
				expr(0);
				State = 6979;
				Match(COMMA_SYMBOL);
				State = 6980;
				expr(0);
				State = 6981;
				Match(COMMA_SYMBOL);
				State = 6982;
				expr(0);
				State = 6983;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 6985;
				Match(FORMAT_SYMBOL);
				State = 6986;
				Match(OPEN_PAR_SYMBOL);
				State = 6987;
				expr(0);
				State = 6988;
				Match(COMMA_SYMBOL);
				State = 6989;
				expr(0);
				State = 6992;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6990;
					Match(COMMA_SYMBOL);
					State = 6991;
					expr(0);
					}
				}

				State = 6994;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 6996;
				Match(MICROSECOND_SYMBOL);
				State = 6997;
				exprWithParentheses();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 6998;
				Match(MOD_SYMBOL);
				State = 6999;
				Match(OPEN_PAR_SYMBOL);
				State = 7000;
				expr(0);
				State = 7001;
				Match(COMMA_SYMBOL);
				State = 7002;
				expr(0);
				State = 7003;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 7005;
				if (!(this.isServerVersionLt80011())) throw new FailedPredicateException(this, "this.isServerVersionLt80011()");
				State = 7006;
				Match(PASSWORD_SYMBOL);
				State = 7007;
				exprWithParentheses();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 7008;
				Match(QUARTER_SYMBOL);
				State = 7009;
				exprWithParentheses();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 7010;
				Match(REPEAT_SYMBOL);
				State = 7011;
				Match(OPEN_PAR_SYMBOL);
				State = 7012;
				expr(0);
				State = 7013;
				Match(COMMA_SYMBOL);
				State = 7014;
				expr(0);
				State = 7015;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 7017;
				Match(REPLACE_SYMBOL);
				State = 7018;
				Match(OPEN_PAR_SYMBOL);
				State = 7019;
				expr(0);
				State = 7020;
				Match(COMMA_SYMBOL);
				State = 7021;
				expr(0);
				State = 7022;
				Match(COMMA_SYMBOL);
				State = 7023;
				expr(0);
				State = 7024;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 7026;
				Match(REVERSE_SYMBOL);
				State = 7027;
				exprWithParentheses();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 7028;
				Match(ROW_COUNT_SYMBOL);
				State = 7029;
				parentheses();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 7030;
				Match(TRUNCATE_SYMBOL);
				State = 7031;
				Match(OPEN_PAR_SYMBOL);
				State = 7032;
				expr(0);
				State = 7033;
				Match(COMMA_SYMBOL);
				State = 7034;
				expr(0);
				State = 7035;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 7037;
				Match(WEEK_SYMBOL);
				State = 7038;
				Match(OPEN_PAR_SYMBOL);
				State = 7039;
				expr(0);
				State = 7042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 7040;
					Match(COMMA_SYMBOL);
					State = 7041;
					expr(0);
					}
				}

				State = 7044;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 7046;
				Match(WEIGHT_STRING_SYMBOL);
				State = 7047;
				Match(OPEN_PAR_SYMBOL);
				State = 7048;
				expr(0);
				State = 7064;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,831,Context) ) {
				case 1:
					{
					State = 7052;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS_SYMBOL) {
						{
						State = 7049;
						Match(AS_SYMBOL);
						State = 7050;
						Match(CHAR_SYMBOL);
						State = 7051;
						wsNumCodepoints();
						}
					}

					}
					break;
				case 2:
					{
					State = 7054;
					Match(AS_SYMBOL);
					State = 7055;
					Match(BINARY_SYMBOL);
					State = 7056;
					wsNumCodepoints();
					}
					break;
				case 3:
					{
					State = 7057;
					Match(COMMA_SYMBOL);
					State = 7058;
					ulong_number();
					State = 7059;
					Match(COMMA_SYMBOL);
					State = 7060;
					ulong_number();
					State = 7061;
					Match(COMMA_SYMBOL);
					State = 7062;
					ulong_number();
					}
					break;
				}
				State = 7066;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 7068;
				geometryFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturningTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING_SYMBOL() { return GetToken(MySQLParser.RETURNING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastTypeContext castType() {
			return GetRuleContext<CastTypeContext>(0);
		}
		public ReturningTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returningType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReturningType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReturningType(this);
		}
	}

	[RuleVersion(0)]
	public ReturningTypeContext returningType() {
		ReturningTypeContext _localctx = new ReturningTypeContext(Context, State);
		EnterRule(_localctx, 964, RULE_returningType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7071;
			Match(RETURNING_SYMBOL);
			State = 7072;
			castType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeometryFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListWithParenthesesContext exprListWithParentheses() {
			return GetRuleContext<ExprListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_SYMBOL() { return GetToken(MySQLParser.POINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public GeometryFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_geometryFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGeometryFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGeometryFunction(this);
		}
	}

	[RuleVersion(0)]
	public GeometryFunctionContext geometryFunction() {
		GeometryFunctionContext _localctx = new GeometryFunctionContext(Context, State);
		EnterRule(_localctx, 966, RULE_geometryFunction);
		try {
			State = 7097;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GEOMETRYCOLLECTION_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7074;
				Match(GEOMETRYCOLLECTION_SYMBOL);
				State = 7075;
				Match(OPEN_PAR_SYMBOL);
				State = 7077;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,833,Context) ) {
				case 1:
					{
					State = 7076;
					exprList();
					}
					break;
				}
				State = 7079;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case LINESTRING_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7080;
				Match(LINESTRING_SYMBOL);
				State = 7081;
				exprListWithParentheses();
				}
				break;
			case MULTILINESTRING_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7082;
				Match(MULTILINESTRING_SYMBOL);
				State = 7083;
				exprListWithParentheses();
				}
				break;
			case MULTIPOINT_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7084;
				Match(MULTIPOINT_SYMBOL);
				State = 7085;
				exprListWithParentheses();
				}
				break;
			case MULTIPOLYGON_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7086;
				Match(MULTIPOLYGON_SYMBOL);
				State = 7087;
				exprListWithParentheses();
				}
				break;
			case POINT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7088;
				Match(POINT_SYMBOL);
				State = 7089;
				Match(OPEN_PAR_SYMBOL);
				State = 7090;
				expr(0);
				State = 7091;
				Match(COMMA_SYMBOL);
				State = 7092;
				expr(0);
				State = 7093;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case POLYGON_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7095;
				Match(POLYGON_SYMBOL);
				State = 7096;
				exprListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeFunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FractionalPrecisionContext fractionalPrecision() {
			return GetRuleContext<FractionalPrecisionContext>(0);
		}
		public TimeFunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeFunctionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTimeFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTimeFunctionParameters(this);
		}
	}

	[RuleVersion(0)]
	public TimeFunctionParametersContext timeFunctionParameters() {
		TimeFunctionParametersContext _localctx = new TimeFunctionParametersContext(Context, State);
		EnterRule(_localctx, 968, RULE_timeFunctionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7099;
			Match(OPEN_PAR_SYMBOL);
			State = 7101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT_NUMBER) {
				{
				State = 7100;
				fractionalPrecision();
				}
			}

			State = 7103;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FractionalPrecisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public FractionalPrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fractionalPrecision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFractionalPrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFractionalPrecision(this);
		}
	}

	[RuleVersion(0)]
	public FractionalPrecisionContext fractionalPrecision() {
		FractionalPrecisionContext _localctx = new FractionalPrecisionContext(Context, State);
		EnterRule(_localctx, 970, RULE_fractionalPrecision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7105;
			Match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightStringLevelsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySQLParser.LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext[] real_ulong_number() {
			return GetRuleContexts<Real_ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number(int i) {
			return GetRuleContext<Real_ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WeightStringLevelListItemContext[] weightStringLevelListItem() {
			return GetRuleContexts<WeightStringLevelListItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightStringLevelListItemContext weightStringLevelListItem(int i) {
			return GetRuleContext<WeightStringLevelListItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WeightStringLevelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightStringLevels; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWeightStringLevels(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWeightStringLevels(this);
		}
	}

	[RuleVersion(0)]
	public WeightStringLevelsContext weightStringLevels() {
		WeightStringLevelsContext _localctx = new WeightStringLevelsContext(Context, State);
		EnterRule(_localctx, 972, RULE_weightStringLevels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7107;
			Match(LEVEL_SYMBOL);
			State = 7120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,837,Context) ) {
			case 1:
				{
				State = 7108;
				real_ulong_number();
				State = 7109;
				Match(MINUS_OPERATOR);
				State = 7110;
				real_ulong_number();
				}
				break;
			case 2:
				{
				State = 7112;
				weightStringLevelListItem();
				State = 7117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7113;
					Match(COMMA_SYMBOL);
					State = 7114;
					weightStringLevelListItem();
					}
					}
					State = 7119;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightStringLevelListItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySQLParser.REVERSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC_SYMBOL() { return GetToken(MySQLParser.ASC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_SYMBOL() { return GetToken(MySQLParser.DESC_SYMBOL, 0); }
		public WeightStringLevelListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightStringLevelListItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWeightStringLevelListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWeightStringLevelListItem(this);
		}
	}

	[RuleVersion(0)]
	public WeightStringLevelListItemContext weightStringLevelListItem() {
		WeightStringLevelListItemContext _localctx = new WeightStringLevelListItemContext(Context, State);
		EnterRule(_localctx, 974, RULE_weightStringLevelListItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7122;
			real_ulong_number();
			State = 7128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASC_SYMBOL:
			case DESC_SYMBOL:
				{
				State = 7123;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REVERSE_SYMBOL) {
					{
					State = 7124;
					Match(REVERSE_SYMBOL);
					}
				}

				}
				break;
			case REVERSE_SYMBOL:
				{
				State = 7127;
				Match(REVERSE_SYMBOL);
				}
				break;
			case Eof:
			case COMMA_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeTtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public DateTimeTtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeTtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDateTimeTtype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDateTimeTtype(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeTtypeContext dateTimeTtype() {
		DateTimeTtypeContext _localctx = new DateTimeTtypeContext(Context, State);
		EnterRule(_localctx, 976, RULE_dateTimeTtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7130;
			_la = TokenStream.LA(1);
			if ( !(_la==DATETIME_SYMBOL || _la==DATE_SYMBOL || _la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrimFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM_SYMBOL() { return GetToken(MySQLParser.TRIM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING_SYMBOL() { return GetToken(MySQLParser.LEADING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING_SYMBOL() { return GetToken(MySQLParser.TRAILING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH_SYMBOL() { return GetToken(MySQLParser.BOTH_SYMBOL, 0); }
		public TrimFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trimFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTrimFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTrimFunction(this);
		}
	}

	[RuleVersion(0)]
	public TrimFunctionContext trimFunction() {
		TrimFunctionContext _localctx = new TrimFunctionContext(Context, State);
		EnterRule(_localctx, 978, RULE_trimFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7132;
			Match(TRIM_SYMBOL);
			State = 7133;
			Match(OPEN_PAR_SYMBOL);
			State = 7157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,844,Context) ) {
			case 1:
				{
				State = 7134;
				expr(0);
				State = 7137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					State = 7135;
					Match(FROM_SYMBOL);
					State = 7136;
					expr(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 7139;
				Match(LEADING_SYMBOL);
				State = 7141;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,841,Context) ) {
				case 1:
					{
					State = 7140;
					expr(0);
					}
					break;
				}
				State = 7143;
				Match(FROM_SYMBOL);
				State = 7144;
				expr(0);
				}
				break;
			case 3:
				{
				State = 7145;
				Match(TRAILING_SYMBOL);
				State = 7147;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,842,Context) ) {
				case 1:
					{
					State = 7146;
					expr(0);
					}
					break;
				}
				State = 7149;
				Match(FROM_SYMBOL);
				State = 7150;
				expr(0);
				}
				break;
			case 4:
				{
				State = 7151;
				Match(BOTH_SYMBOL);
				State = 7153;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,843,Context) ) {
				case 1:
					{
					State = 7152;
					expr(0);
					}
					break;
				}
				State = 7155;
				Match(FROM_SYMBOL);
				State = 7156;
				expr(0);
				}
				break;
			}
			State = 7159;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstringFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING_SYMBOL() { return GetToken(MySQLParser.SUBSTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public SubstringFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substringFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSubstringFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSubstringFunction(this);
		}
	}

	[RuleVersion(0)]
	public SubstringFunctionContext substringFunction() {
		SubstringFunctionContext _localctx = new SubstringFunctionContext(Context, State);
		EnterRule(_localctx, 980, RULE_substringFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7161;
			Match(SUBSTRING_SYMBOL);
			State = 7162;
			Match(OPEN_PAR_SYMBOL);
			State = 7163;
			expr(0);
			State = 7176;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA_SYMBOL:
				{
				State = 7164;
				Match(COMMA_SYMBOL);
				State = 7165;
				expr(0);
				State = 7168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 7166;
					Match(COMMA_SYMBOL);
					State = 7167;
					expr(0);
					}
				}

				}
				break;
			case FROM_SYMBOL:
				{
				State = 7170;
				Match(FROM_SYMBOL);
				State = 7171;
				expr(0);
				State = 7174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 7172;
					Match(FOR_SYMBOL);
					State = 7173;
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7178;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UdfExprListContext udfExprList() {
			return GetRuleContext<UdfExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 982, RULE_functionCall);
		try {
			State = 7194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,850,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7180;
				pureIdentifier();
				State = 7181;
				Match(OPEN_PAR_SYMBOL);
				State = 7183;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,848,Context) ) {
				case 1:
					{
					State = 7182;
					udfExprList();
					}
					break;
				}
				State = 7185;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7187;
				qualifiedIdentifier();
				State = 7188;
				Match(OPEN_PAR_SYMBOL);
				State = 7190;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,849,Context) ) {
				case 1:
					{
					State = 7189;
					exprList();
					}
					break;
				}
				State = 7192;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UdfExprContext[] udfExpr() {
			return GetRuleContexts<UdfExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UdfExprContext udfExpr(int i) {
			return GetRuleContext<UdfExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UdfExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUdfExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUdfExprList(this);
		}
	}

	[RuleVersion(0)]
	public UdfExprListContext udfExprList() {
		UdfExprListContext _localctx = new UdfExprListContext(Context, State);
		EnterRule(_localctx, 984, RULE_udfExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7196;
			udfExpr();
			State = 7201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7197;
				Match(COMMA_SYMBOL);
				State = 7198;
				udfExpr();
				}
				}
				State = 7203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public UdfExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUdfExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUdfExpr(this);
		}
	}

	[RuleVersion(0)]
	public UdfExprContext udfExpr() {
		UdfExprContext _localctx = new UdfExprContext(Context, State);
		EnterRule(_localctx, 986, RULE_udfExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7204;
			expr(0);
			State = 7206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,852,Context) ) {
			case 1:
				{
				State = 7205;
				selectAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public UserVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUserVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUserVariable(this);
		}
	}

	[RuleVersion(0)]
	public UserVariableContext userVariable() {
		UserVariableContext _localctx = new UserVariableContext(Context, State);
		EnterRule(_localctx, 988, RULE_userVariable);
		try {
			State = 7211;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SIGN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7208;
				Match(AT_SIGN_SYMBOL);
				State = 7209;
				textOrIdentifier();
				}
				break;
			case AT_TEXT_SUFFIX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7210;
				Match(AT_TEXT_SUFFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InExpressionUserVariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OPERATOR() { return GetToken(MySQLParser.ASSIGN_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public InExpressionUserVariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inExpressionUserVariableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInExpressionUserVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInExpressionUserVariableAssignment(this);
		}
	}

	[RuleVersion(0)]
	public InExpressionUserVariableAssignmentContext inExpressionUserVariableAssignment() {
		InExpressionUserVariableAssignmentContext _localctx = new InExpressionUserVariableAssignmentContext(Context, State);
		EnterRule(_localctx, 990, RULE_inExpressionUserVariableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7213;
			userVariable();
			State = 7214;
			Match(ASSIGN_OPERATOR);
			State = 7215;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RvalueSystemOrUserVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RvalueSystemVariableContext rvalueSystemVariable() {
			return GetRuleContext<RvalueSystemVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RvalueSystemVariableTypeContext rvalueSystemVariableType() {
			return GetRuleContext<RvalueSystemVariableTypeContext>(0);
		}
		public RvalueSystemOrUserVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rvalueSystemOrUserVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRvalueSystemOrUserVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRvalueSystemOrUserVariable(this);
		}
	}

	[RuleVersion(0)]
	public RvalueSystemOrUserVariableContext rvalueSystemOrUserVariable() {
		RvalueSystemOrUserVariableContext _localctx = new RvalueSystemOrUserVariableContext(Context, State);
		EnterRule(_localctx, 992, RULE_rvalueSystemOrUserVariable);
		try {
			State = 7223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SIGN_SYMBOL:
			case AT_TEXT_SUFFIX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7217;
				userVariable();
				}
				break;
			case AT_AT_SIGN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7218;
				Match(AT_AT_SIGN_SYMBOL);
				State = 7220;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,854,Context) ) {
				case 1:
					{
					State = 7219;
					rvalueSystemVariableType();
					}
					break;
				}
				State = 7222;
				rvalueSystemVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LValueIdentifierContext lValueIdentifier() {
			return GetRuleContext<LValueIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public LvalueVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalueVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLvalueVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLvalueVariable(this);
		}
	}

	[RuleVersion(0)]
	public LvalueVariableContext lvalueVariable() {
		LvalueVariableContext _localctx = new LvalueVariableContext(Context, State);
		EnterRule(_localctx, 994, RULE_lvalueVariable);
		int _la;
		try {
			State = 7238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,859,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7234;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,858,Context) ) {
				case 1:
					{
					State = 7225;
					identifier();
					State = 7227;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						State = 7226;
						dotIdentifier();
						}
					}

					}
					break;
				case 2:
					{
					State = 7229;
					if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
					State = 7230;
					lValueIdentifier();
					State = 7232;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						State = 7231;
						dotIdentifier();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7236;
				Match(DEFAULT_SYMBOL);
				State = 7237;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RvalueSystemVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public RvalueSystemVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rvalueSystemVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRvalueSystemVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRvalueSystemVariable(this);
		}
	}

	[RuleVersion(0)]
	public RvalueSystemVariableContext rvalueSystemVariable() {
		RvalueSystemVariableContext _localctx = new RvalueSystemVariableContext(Context, State);
		EnterRule(_localctx, 996, RULE_rvalueSystemVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7240;
			textOrIdentifier();
			State = 7242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,860,Context) ) {
			case 1:
				{
				State = 7241;
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN_SYMBOL() { return GetToken(MySQLParser.WHEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWhenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWhenExpression(this);
		}
	}

	[RuleVersion(0)]
	public WhenExpressionContext whenExpression() {
		WhenExpressionContext _localctx = new WhenExpressionContext(Context, State);
		EnterRule(_localctx, 998, RULE_whenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7244;
			Match(WHEN_SYMBOL);
			State = 7245;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN_SYMBOL() { return GetToken(MySQLParser.THEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ThenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterThenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitThenExpression(this);
		}
	}

	[RuleVersion(0)]
	public ThenExpressionContext thenExpression() {
		ThenExpressionContext _localctx = new ThenExpressionContext(Context, State);
		EnterRule(_localctx, 1000, RULE_thenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7247;
			Match(THEN_SYMBOL);
			State = 7248;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_SYMBOL() { return GetToken(MySQLParser.ELSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ElseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterElseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitElseExpression(this);
		}
	}

	[RuleVersion(0)]
	public ElseExpressionContext elseExpression() {
		ElseExpressionContext _localctx = new ElseExpressionContext(Context, State);
		EnterRule(_localctx, 1002, RULE_elseExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7250;
			Match(ELSE_SYMBOL);
			State = 7251;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return GetRuleContext<CharsetWithOptBinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NcharContext nchar() {
			return GetRuleContext<NcharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySQLParser.SIGNED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_SYMBOL() { return GetToken(MySQLParser.INT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_SYMBOL() { return GetToken(MySQLParser.UNSIGNED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return GetRuleContext<TypeDatetimePrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FloatOptionsContext floatOptions() {
			return GetRuleContext<FloatOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SYMBOL() { return GetToken(MySQLParser.JSON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RealTypeContext realType() {
			return GetRuleContext<RealTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_SYMBOL() { return GetToken(MySQLParser.FLOAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StandardFloatOptionsContext standardFloatOptions() {
			return GetRuleContext<StandardFloatOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_SYMBOL() { return GetToken(MySQLParser.POINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySQLParser.POLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public CastTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCastType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCastType(this);
		}
	}

	[RuleVersion(0)]
	public CastTypeContext castType() {
		CastTypeContext _localctx = new CastTypeContext(Context, State);
		EnterRule(_localctx, 1004, RULE_castType);
		int _la;
		try {
			State = 7301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,871,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7253;
				Match(BINARY_SYMBOL);
				State = 7255;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,861,Context) ) {
				case 1:
					{
					State = 7254;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7257;
				Match(CHAR_SYMBOL);
				State = 7259;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,862,Context) ) {
				case 1:
					{
					State = 7258;
					fieldLength();
					}
					break;
				}
				State = 7262;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,863,Context) ) {
				case 1:
					{
					State = 7261;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7264;
				nchar();
				State = 7266;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,864,Context) ) {
				case 1:
					{
					State = 7265;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7268;
				Match(SIGNED_SYMBOL);
				State = 7270;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,865,Context) ) {
				case 1:
					{
					State = 7269;
					Match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7272;
				Match(UNSIGNED_SYMBOL);
				State = 7274;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,866,Context) ) {
				case 1:
					{
					State = 7273;
					Match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7276;
				Match(DATE_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7277;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 7278;
				Match(YEAR_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7279;
				Match(TIME_SYMBOL);
				State = 7281;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,867,Context) ) {
				case 1:
					{
					State = 7280;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7283;
				Match(DATETIME_SYMBOL);
				State = 7285;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,868,Context) ) {
				case 1:
					{
					State = 7284;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7287;
				Match(DECIMAL_SYMBOL);
				State = 7289;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,869,Context) ) {
				case 1:
					{
					State = 7288;
					floatOptions();
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7291;
				Match(JSON_SYMBOL);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7292;
				if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				State = 7293;
				realType();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7294;
				if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				State = 7295;
				Match(FLOAT_SYMBOL);
				State = 7297;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,870,Context) ) {
				case 1:
					{
					State = 7296;
					standardFloatOptions();
					}
					break;
				}
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7299;
				if (!(this.isServerVersionGe80027())) throw new FailedPredicateException(this, "this.isServerVersionGe80027()");
				State = 7300;
				_la = TokenStream.LA(1);
				if ( !(_la==GEOMETRYCOLLECTION_SYMBOL || _la==LINESTRING_SYMBOL || ((((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & 108086391056891911L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 1006, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7303;
			expr(0);
			State = 7308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7304;
				Match(COMMA_SYMBOL);
				State = 7305;
				expr(0);
				}
				}
				State = 7310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public CharsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCharset(this);
		}
	}

	[RuleVersion(0)]
	public CharsetContext charset() {
		CharsetContext _localctx = new CharsetContext(Context, State);
		EnterRule(_localctx, 1008, RULE_charset);
		try {
			State = 7314;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7311;
				Match(CHAR_SYMBOL);
				State = 7312;
				Match(SET_SYMBOL);
				}
				break;
			case CHARSET_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7313;
				Match(CHARSET_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT2_SYMBOL() { return GetToken(MySQLParser.NOT2_SYMBOL, 0); }
		public NotRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNotRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNotRule(this);
		}
	}

	[RuleVersion(0)]
	public NotRuleContext notRule() {
		NotRuleContext _localctx = new NotRuleContext(Context, State);
		EnterRule(_localctx, 1010, RULE_notRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7316;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==NOT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not2RuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_NOT_OPERATOR() { return GetToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT2_SYMBOL() { return GetToken(MySQLParser.NOT2_SYMBOL, 0); }
		public Not2RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not2Rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNot2Rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNot2Rule(this);
		}
	}

	[RuleVersion(0)]
	public Not2RuleContext not2Rule() {
		Not2RuleContext _localctx = new Not2RuleContext(Context, State);
		EnterRule(_localctx, 1012, RULE_not2Rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7318;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==LOGICAL_NOT_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTimeStampContext intervalTimeStamp() {
			return GetRuleContext<IntervalTimeStampContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_MICROSECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SECOND_SYMBOL() { return GetToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MICROSECOND_SYMBOL() { return GetToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SECOND_SYMBOL() { return GetToken(MySQLParser.HOUR_SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MINUTE_SYMBOL() { return GetToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MICROSECOND_SYMBOL() { return GetToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SECOND_SYMBOL() { return GetToken(MySQLParser.DAY_SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MINUTE_SYMBOL() { return GetToken(MySQLParser.DAY_MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_HOUR_SYMBOL() { return GetToken(MySQLParser.DAY_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_MONTH_SYMBOL() { return GetToken(MySQLParser.YEAR_MONTH_SYMBOL, 0); }
		public IntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInterval(this);
		}
	}

	[RuleVersion(0)]
	public IntervalContext interval() {
		IntervalContext _localctx = new IntervalContext(Context, State);
		EnterRule(_localctx, 1014, RULE_interval);
		int _la;
		try {
			State = 7322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DAY_SYMBOL:
			case HOUR_SYMBOL:
			case MICROSECOND_SYMBOL:
			case MINUTE_SYMBOL:
			case MONTH_SYMBOL:
			case QUARTER_SYMBOL:
			case SECOND_SYMBOL:
			case WEEK_SYMBOL:
			case YEAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7320;
				intervalTimeStamp();
				}
				break;
			case DAY_HOUR_SYMBOL:
			case DAY_MICROSECOND_SYMBOL:
			case DAY_MINUTE_SYMBOL:
			case DAY_SECOND_SYMBOL:
			case HOUR_MICROSECOND_SYMBOL:
			case HOUR_MINUTE_SYMBOL:
			case HOUR_SECOND_SYMBOL:
			case MINUTE_MICROSECOND_SYMBOL:
			case MINUTE_SECOND_SYMBOL:
			case SECOND_MICROSECOND_SYMBOL:
			case YEAR_MONTH_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7321;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & 15L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & 7L) != 0) || _la==MINUTE_MICROSECOND_SYMBOL || _la==MINUTE_SECOND_SYMBOL || _la==SECOND_MICROSECOND_SYMBOL || _la==YEAR_MONTH_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTimeStampContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySQLParser.MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SYMBOL() { return GetToken(MySQLParser.HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK_SYMBOL() { return GetToken(MySQLParser.WEEK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_SYMBOL() { return GetToken(MySQLParser.MONTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySQLParser.QUARTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		public IntervalTimeStampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalTimeStamp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIntervalTimeStamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIntervalTimeStamp(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTimeStampContext intervalTimeStamp() {
		IntervalTimeStampContext _localctx = new IntervalTimeStampContext(Context, State);
		EnterRule(_localctx, 1016, RULE_intervalTimeStamp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7324;
			_la = TokenStream.LA(1);
			if ( !(_la==DAY_SYMBOL || _la==HOUR_SYMBOL || ((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & 4129L) != 0) || _la==QUARTER_SYMBOL || _la==SECOND_SYMBOL || _la==WEEK_SYMBOL || _la==YEAR_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListWithParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprListWithParentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprListWithParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprListWithParentheses(this);
		}
	}

	[RuleVersion(0)]
	public ExprListWithParenthesesContext exprListWithParentheses() {
		ExprListWithParenthesesContext _localctx = new ExprListWithParenthesesContext(Context, State);
		EnterRule(_localctx, 1018, RULE_exprListWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7326;
			Match(OPEN_PAR_SYMBOL);
			State = 7327;
			exprList();
			State = 7328;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprWithParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprWithParentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprWithParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprWithParentheses(this);
		}
	}

	[RuleVersion(0)]
	public ExprWithParenthesesContext exprWithParentheses() {
		ExprWithParenthesesContext _localctx = new ExprWithParenthesesContext(Context, State);
		EnterRule(_localctx, 1020, RULE_exprWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7330;
			Match(OPEN_PAR_SYMBOL);
			State = 7331;
			expr(0);
			State = 7332;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExprWithParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExprWithParentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprWithParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprWithParentheses(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
		SimpleExprWithParenthesesContext _localctx = new SimpleExprWithParenthesesContext(Context, State);
		EnterRule(_localctx, 1022, RULE_simpleExprWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7334;
			Match(OPEN_PAR_SYMBOL);
			State = 7335;
			simpleExpr(0);
			State = 7336;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrderExpressionContext[] orderExpression() {
			return GetRuleContexts<OrderExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderExpressionContext orderExpression(int i) {
			return GetRuleContext<OrderExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public OrderListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOrderList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOrderList(this);
		}
	}

	[RuleVersion(0)]
	public OrderListContext orderList() {
		OrderListContext _localctx = new OrderListContext(Context, State);
		EnterRule(_localctx, 1024, RULE_orderList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7338;
			orderExpression();
			State = 7343;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,875,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7339;
					Match(COMMA_SYMBOL);
					State = 7340;
					orderExpression();
					}
					} 
				}
				State = 7345;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,875,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public OrderExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOrderExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOrderExpression(this);
		}
	}

	[RuleVersion(0)]
	public OrderExpressionContext orderExpression() {
		OrderExpressionContext _localctx = new OrderExpressionContext(Context, State);
		EnterRule(_localctx, 1026, RULE_orderExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7346;
			expr(0);
			State = 7348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,876,Context) ) {
			case 1:
				{
				State = 7347;
				direction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingExpressionContext[] groupingExpression() {
			return GetRuleContexts<GroupingExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingExpressionContext groupingExpression(int i) {
			return GetRuleContext<GroupingExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GroupListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupList(this);
		}
	}

	[RuleVersion(0)]
	public GroupListContext groupList() {
		GroupListContext _localctx = new GroupListContext(Context, State);
		EnterRule(_localctx, 1028, RULE_groupList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7350;
			groupingExpression();
			State = 7355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7351;
				Match(COMMA_SYMBOL);
				State = 7352;
				groupingExpression();
				}
				}
				State = 7357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public GroupingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupingExpression(this);
		}
	}

	[RuleVersion(0)]
	public GroupingExpressionContext groupingExpression() {
		GroupingExpressionContext _localctx = new GroupingExpressionContext(Context, State);
		EnterRule(_localctx, 1030, RULE_groupingExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7358;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public ChannelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChannel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChannel(this);
		}
	}

	[RuleVersion(0)]
	public ChannelContext channel() {
		ChannelContext _localctx = new ChannelContext(Context, State);
		EnterRule(_localctx, 1032, RULE_channel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7360;
			Match(FOR_SYMBOL);
			State = 7361;
			Match(CHANNEL_SYMBOL);
			State = 7362;
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledBlockContext labeledBlock() {
			return GetRuleContext<LabeledBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlabeledBlockContext unlabeledBlock() {
			return GetRuleContext<UnlabeledBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledControlContext labeledControl() {
			return GetRuleContext<LabeledControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlabeledControlContext unlabeledControl() {
			return GetRuleContext<UnlabeledControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaveStatementContext leaveStatement() {
			return GetRuleContext<LeaveStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterateStatementContext iterateStatement() {
			return GetRuleContext<IterateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorOpenContext cursorOpen() {
			return GetRuleContext<CursorOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorFetchContext cursorFetch() {
			return GetRuleContext<CursorFetchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorCloseContext cursorClose() {
			return GetRuleContext<CursorCloseContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 1034, RULE_compoundStatement);
		try {
			State = 7377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,878,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7364;
				simpleStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7365;
				returnStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7366;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7367;
				caseStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7368;
				labeledBlock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7369;
				unlabeledBlock();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7370;
				labeledControl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7371;
				unlabeledControl();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7372;
				leaveStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7373;
				iterateStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7374;
				cursorOpen();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7375;
				cursorFetch();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7376;
				cursorClose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN_SYMBOL() { return GetToken(MySQLParser.RETURN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 1036, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7379;
			Match(RETURN_SYMBOL);
			State = 7380;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF_SYMBOL() { return GetTokens(MySQLParser.IF_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_SYMBOL(int i) {
			return GetToken(MySQLParser.IF_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBodyContext ifBody() {
			return GetRuleContext<IfBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 1038, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7382;
			Match(IF_SYMBOL);
			State = 7383;
			ifBody();
			State = 7384;
			Match(END_SYMBOL);
			State = 7385;
			Match(IF_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenStatementContext thenStatement() {
			return GetRuleContext<ThenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF_SYMBOL() { return GetToken(MySQLParser.ELSEIF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfBodyContext ifBody() {
			return GetRuleContext<IfBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_SYMBOL() { return GetToken(MySQLParser.ELSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIfBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIfBody(this);
		}
	}

	[RuleVersion(0)]
	public IfBodyContext ifBody() {
		IfBodyContext _localctx = new IfBodyContext(Context, State);
		EnterRule(_localctx, 1040, RULE_ifBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7387;
			expr(0);
			State = 7388;
			thenStatement();
			State = 7393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSEIF_SYMBOL:
				{
				State = 7389;
				Match(ELSEIF_SYMBOL);
				State = 7390;
				ifBody();
				}
				break;
			case ELSE_SYMBOL:
				{
				State = 7391;
				Match(ELSE_SYMBOL);
				State = 7392;
				compoundStatementList();
				}
				break;
			case END_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN_SYMBOL() { return GetToken(MySQLParser.THEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterThenStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitThenStatement(this);
		}
	}

	[RuleVersion(0)]
	public ThenStatementContext thenStatement() {
		ThenStatementContext _localctx = new ThenStatementContext(Context, State);
		EnterRule(_localctx, 1042, RULE_thenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7395;
			Match(THEN_SYMBOL);
			State = 7396;
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext[] compoundStatement() {
			return GetRuleContexts<CompoundStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement(int i) {
			return GetRuleContext<CompoundStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON_SYMBOL() { return GetTokens(MySQLParser.SEMICOLON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON_SYMBOL(int i) {
			return GetToken(MySQLParser.SEMICOLON_SYMBOL, i);
		}
		public CompoundStatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatementList(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementListContext compoundStatementList() {
		CompoundStatementListContext _localctx = new CompoundStatementListContext(Context, State);
		EnterRule(_localctx, 1044, RULE_compoundStatementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7401;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7398;
					compoundStatement();
					State = 7399;
					Match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7403;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,880,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE_SYMBOL() { return GetTokens(MySQLParser.CASE_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE_SYMBOL(int i) {
			return GetToken(MySQLParser.CASE_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext[] whenExpression() {
			return GetRuleContexts<WhenExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext whenExpression(int i) {
			return GetRuleContext<WhenExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenStatementContext[] thenStatement() {
			return GetRuleContexts<ThenStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenStatementContext thenStatement(int i) {
			return GetRuleContext<ThenStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 1046, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7405;
			Match(CASE_SYMBOL);
			State = 7407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,881,Context) ) {
			case 1:
				{
				State = 7406;
				expr(0);
				}
				break;
			}
			State = 7412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 7409;
				whenExpression();
				State = 7410;
				thenStatement();
				}
				}
				State = 7414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN_SYMBOL );
			State = 7417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE_SYMBOL) {
				{
				State = 7416;
				elseStatement();
				}
			}

			State = 7419;
			Match(END_SYMBOL);
			State = 7420;
			Match(CASE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_SYMBOL() { return GetToken(MySQLParser.ELSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 1048, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7422;
			Match(ELSE_SYMBOL);
			State = 7423;
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginEndBlockContext beginEndBlock() {
			return GetRuleContext<BeginEndBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LabeledBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabeledBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabeledBlock(this);
		}
	}

	[RuleVersion(0)]
	public LabeledBlockContext labeledBlock() {
		LabeledBlockContext _localctx = new LabeledBlockContext(Context, State);
		EnterRule(_localctx, 1050, RULE_labeledBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7425;
			label();
			State = 7426;
			beginEndBlock();
			State = 7428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,884,Context) ) {
			case 1:
				{
				State = 7427;
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlabeledBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BeginEndBlockContext beginEndBlock() {
			return GetRuleContext<BeginEndBlockContext>(0);
		}
		public UnlabeledBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabeledBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUnlabeledBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUnlabeledBlock(this);
		}
	}

	[RuleVersion(0)]
	public UnlabeledBlockContext unlabeledBlock() {
		UnlabeledBlockContext _localctx = new UnlabeledBlockContext(Context, State);
		EnterRule(_localctx, 1052, RULE_unlabeledBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7430;
			beginEndBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelIdentifierContext labelIdentifier() {
			return GetRuleContext<LabelIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMBOL() { return GetToken(MySQLParser.COLON_SYMBOL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 1054, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7432;
			labelIdentifier();
			State = 7433;
			Match(COLON_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginEndBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpDeclarationsContext spDeclarations() {
			return GetRuleContext<SpDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public BeginEndBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginEndBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterBeginEndBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitBeginEndBlock(this);
		}
	}

	[RuleVersion(0)]
	public BeginEndBlockContext beginEndBlock() {
		BeginEndBlockContext _localctx = new BeginEndBlockContext(Context, State);
		EnterRule(_localctx, 1056, RULE_beginEndBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7435;
			Match(BEGIN_SYMBOL);
			State = 7437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,885,Context) ) {
			case 1:
				{
				State = 7436;
				spDeclarations();
				}
				break;
			}
			State = 7440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,886,Context) ) {
			case 1:
				{
				State = 7439;
				compoundStatementList();
				}
				break;
			}
			State = 7442;
			Match(END_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlabeledControlContext unlabeledControl() {
			return GetRuleContext<UnlabeledControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LabeledControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabeledControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabeledControl(this);
		}
	}

	[RuleVersion(0)]
	public LabeledControlContext labeledControl() {
		LabeledControlContext _localctx = new LabeledControlContext(Context, State);
		EnterRule(_localctx, 1058, RULE_labeledControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7444;
			label();
			State = 7445;
			unlabeledControl();
			State = 7447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,887,Context) ) {
			case 1:
				{
				State = 7446;
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlabeledControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopBlockContext loopBlock() {
			return GetRuleContext<LoopBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileDoBlockContext whileDoBlock() {
			return GetRuleContext<WhileDoBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatUntilBlockContext repeatUntilBlock() {
			return GetRuleContext<RepeatUntilBlockContext>(0);
		}
		public UnlabeledControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabeledControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUnlabeledControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUnlabeledControl(this);
		}
	}

	[RuleVersion(0)]
	public UnlabeledControlContext unlabeledControl() {
		UnlabeledControlContext _localctx = new UnlabeledControlContext(Context, State);
		EnterRule(_localctx, 1060, RULE_unlabeledControl);
		try {
			State = 7452;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOOP_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7449;
				loopBlock();
				}
				break;
			case WHILE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7450;
				whileDoBlock();
				}
				break;
			case REPEAT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7451;
				repeatUntilBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP_SYMBOL() { return GetTokens(MySQLParser.LOOP_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP_SYMBOL(int i) {
			return GetToken(MySQLParser.LOOP_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public LoopBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoopBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoopBlock(this);
		}
	}

	[RuleVersion(0)]
	public LoopBlockContext loopBlock() {
		LoopBlockContext _localctx = new LoopBlockContext(Context, State);
		EnterRule(_localctx, 1062, RULE_loopBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7454;
			Match(LOOP_SYMBOL);
			State = 7455;
			compoundStatementList();
			State = 7456;
			Match(END_SYMBOL);
			State = 7457;
			Match(LOOP_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileDoBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE_SYMBOL() { return GetTokens(MySQLParser.WHILE_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_SYMBOL(int i) {
			return GetToken(MySQLParser.WHILE_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public WhileDoBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileDoBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWhileDoBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWhileDoBlock(this);
		}
	}

	[RuleVersion(0)]
	public WhileDoBlockContext whileDoBlock() {
		WhileDoBlockContext _localctx = new WhileDoBlockContext(Context, State);
		EnterRule(_localctx, 1064, RULE_whileDoBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7459;
			Match(WHILE_SYMBOL);
			State = 7460;
			expr(0);
			State = 7461;
			Match(DO_SYMBOL);
			State = 7462;
			compoundStatementList();
			State = 7463;
			Match(END_SYMBOL);
			State = 7464;
			Match(WHILE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatUntilBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REPEAT_SYMBOL() { return GetTokens(MySQLParser.REPEAT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_SYMBOL(int i) {
			return GetToken(MySQLParser.REPEAT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySQLParser.UNTIL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public RepeatUntilBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatUntilBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRepeatUntilBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRepeatUntilBlock(this);
		}
	}

	[RuleVersion(0)]
	public RepeatUntilBlockContext repeatUntilBlock() {
		RepeatUntilBlockContext _localctx = new RepeatUntilBlockContext(Context, State);
		EnterRule(_localctx, 1066, RULE_repeatUntilBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7466;
			Match(REPEAT_SYMBOL);
			State = 7467;
			compoundStatementList();
			State = 7468;
			Match(UNTIL_SYMBOL);
			State = 7469;
			expr(0);
			State = 7470;
			Match(END_SYMBOL);
			State = 7471;
			Match(REPEAT_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpDeclarationContext[] spDeclaration() {
			return GetRuleContexts<SpDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpDeclarationContext spDeclaration(int i) {
			return GetRuleContext<SpDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON_SYMBOL() { return GetTokens(MySQLParser.SEMICOLON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON_SYMBOL(int i) {
			return GetToken(MySQLParser.SEMICOLON_SYMBOL, i);
		}
		public SpDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSpDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSpDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public SpDeclarationsContext spDeclarations() {
		SpDeclarationsContext _localctx = new SpDeclarationsContext(Context, State);
		EnterRule(_localctx, 1068, RULE_spDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7476;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7473;
					spDeclaration();
					State = 7474;
					Match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7478;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,889,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionDeclarationContext conditionDeclaration() {
			return GetRuleContext<ConditionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerDeclarationContext handlerDeclaration() {
			return GetRuleContext<HandlerDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorDeclarationContext cursorDeclaration() {
			return GetRuleContext<CursorDeclarationContext>(0);
		}
		public SpDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSpDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSpDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SpDeclarationContext spDeclaration() {
		SpDeclarationContext _localctx = new SpDeclarationContext(Context, State);
		EnterRule(_localctx, 1070, RULE_spDeclaration);
		try {
			State = 7484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,890,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7480;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7481;
				conditionDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7482;
				handlerDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7483;
				cursorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySQLParser.DECLARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 1072, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7486;
			Match(DECLARE_SYMBOL);
			State = 7487;
			identifierList();
			State = 7488;
			dataType();
			State = 7490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE_SYMBOL) {
				{
				State = 7489;
				collate();
				}
			}

			State = 7494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 7492;
				Match(DEFAULT_SYMBOL);
				State = 7493;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySQLParser.DECLARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION_SYMBOL() { return GetToken(MySQLParser.CONDITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpConditionContext spCondition() {
			return GetRuleContext<SpConditionContext>(0);
		}
		public ConditionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConditionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConditionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConditionDeclarationContext conditionDeclaration() {
		ConditionDeclarationContext _localctx = new ConditionDeclarationContext(Context, State);
		EnterRule(_localctx, 1074, RULE_conditionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7496;
			Match(DECLARE_SYMBOL);
			State = 7497;
			identifier();
			State = 7498;
			Match(CONDITION_SYMBOL);
			State = 7499;
			Match(FOR_SYMBOL);
			State = 7500;
			spCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlstateContext sqlstate() {
			return GetRuleContext<SqlstateContext>(0);
		}
		public SpConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSpCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSpCondition(this);
		}
	}

	[RuleVersion(0)]
	public SpConditionContext spCondition() {
		SpConditionContext _localctx = new SpConditionContext(Context, State);
		EnterRule(_localctx, 1076, RULE_spCondition);
		try {
			State = 7504;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7502;
				ulong_number();
				}
				break;
			case SQLSTATE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7503;
				sqlstate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlstateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE_SYMBOL() { return GetToken(MySQLParser.SQLSTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		public SqlstateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlstate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSqlstate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSqlstate(this);
		}
	}

	[RuleVersion(0)]
	public SqlstateContext sqlstate() {
		SqlstateContext _localctx = new SqlstateContext(Context, State);
		EnterRule(_localctx, 1078, RULE_sqlstate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7506;
			Match(SQLSTATE_SYMBOL);
			State = 7508;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,894,Context) ) {
			case 1:
				{
				State = 7507;
				Match(VALUE_SYMBOL);
				}
				break;
			}
			State = 7510;
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySQLParser.DECLARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySQLParser.HANDLER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionContext[] handlerCondition() {
			return GetRuleContexts<HandlerConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionContext handlerCondition(int i) {
			return GetRuleContext<HandlerConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_SYMBOL() { return GetToken(MySQLParser.CONTINUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT_SYMBOL() { return GetToken(MySQLParser.EXIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_SYMBOL() { return GetToken(MySQLParser.UNDO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public HandlerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHandlerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHandlerDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public HandlerDeclarationContext handlerDeclaration() {
		HandlerDeclarationContext _localctx = new HandlerDeclarationContext(Context, State);
		EnterRule(_localctx, 1080, RULE_handlerDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7512;
			Match(DECLARE_SYMBOL);
			State = 7513;
			_la = TokenStream.LA(1);
			if ( !(_la==CONTINUE_SYMBOL || _la==EXIT_SYMBOL || _la==UNDO_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7514;
			Match(HANDLER_SYMBOL);
			State = 7515;
			Match(FOR_SYMBOL);
			State = 7516;
			handlerCondition();
			State = 7521;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,895,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7517;
					Match(COMMA_SYMBOL);
					State = 7518;
					handlerCondition();
					}
					} 
				}
				State = 7523;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,895,Context);
			}
			State = 7524;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpConditionContext spCondition() {
			return GetRuleContext<SpConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLWARNING_SYMBOL() { return GetToken(MySQLParser.SQLWARNING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND_SYMBOL() { return GetToken(MySQLParser.FOUND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLEXCEPTION_SYMBOL() { return GetToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0); }
		public HandlerConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHandlerCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHandlerCondition(this);
		}
	}

	[RuleVersion(0)]
	public HandlerConditionContext handlerCondition() {
		HandlerConditionContext _localctx = new HandlerConditionContext(Context, State);
		EnterRule(_localctx, 1082, RULE_handlerCondition);
		try {
			State = 7533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,896,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7526;
				spCondition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7527;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7528;
				Match(SQLWARNING_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7529;
				notRule();
				State = 7530;
				Match(FOUND_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7532;
				Match(SQLEXCEPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySQLParser.DECLARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_SYMBOL() { return GetToken(MySQLParser.CURSOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public CursorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCursorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCursorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public CursorDeclarationContext cursorDeclaration() {
		CursorDeclarationContext _localctx = new CursorDeclarationContext(Context, State);
		EnterRule(_localctx, 1084, RULE_cursorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7535;
			Match(DECLARE_SYMBOL);
			State = 7536;
			identifier();
			State = 7537;
			Match(CURSOR_SYMBOL);
			State = 7538;
			Match(FOR_SYMBOL);
			State = 7539;
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERATE_SYMBOL() { return GetToken(MySQLParser.ITERATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIterateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIterateStatement(this);
		}
	}

	[RuleVersion(0)]
	public IterateStatementContext iterateStatement() {
		IterateStatementContext _localctx = new IterateStatementContext(Context, State);
		EnterRule(_localctx, 1086, RULE_iterateStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7541;
			Match(ITERATE_SYMBOL);
			State = 7542;
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVE_SYMBOL() { return GetToken(MySQLParser.LEAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLeaveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLeaveStatement(this);
		}
	}

	[RuleVersion(0)]
	public LeaveStatementContext leaveStatement() {
		LeaveStatementContext _localctx = new LeaveStatementContext(Context, State);
		EnterRule(_localctx, 1088, RULE_leaveStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7544;
			Match(LEAVE_SYMBOL);
			State = 7545;
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetDiagnosticsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_SYMBOL() { return GetToken(MySQLParser.GET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementInformationItemContext[] statementInformationItem() {
			return GetRuleContexts<StatementInformationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementInformationItemContext statementInformationItem(int i) {
			return GetRuleContext<StatementInformationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION_SYMBOL() { return GetToken(MySQLParser.CONDITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalAllowedExprContext signalAllowedExpr() {
			return GetRuleContext<SignalAllowedExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionInformationItemContext[] conditionInformationItem() {
			return GetRuleContexts<ConditionInformationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionInformationItemContext conditionInformationItem(int i) {
			return GetRuleContext<ConditionInformationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED_SYMBOL() { return GetToken(MySQLParser.STACKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GetDiagnosticsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getDiagnosticsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGetDiagnosticsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGetDiagnosticsStatement(this);
		}
	}

	[RuleVersion(0)]
	public GetDiagnosticsStatementContext getDiagnosticsStatement() {
		GetDiagnosticsStatementContext _localctx = new GetDiagnosticsStatementContext(Context, State);
		EnterRule(_localctx, 1090, RULE_getDiagnosticsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7547;
			Match(GET_SYMBOL);
			State = 7549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CURRENT_SYMBOL || _la==STACKED_SYMBOL) {
				{
				State = 7548;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT_SYMBOL || _la==STACKED_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 7551;
			Match(DIAGNOSTICS_SYMBOL);
			State = 7570;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,900,Context) ) {
			case 1:
				{
				State = 7552;
				statementInformationItem();
				State = 7557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7553;
					Match(COMMA_SYMBOL);
					State = 7554;
					statementInformationItem();
					}
					}
					State = 7559;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 7560;
				Match(CONDITION_SYMBOL);
				State = 7561;
				signalAllowedExpr();
				State = 7562;
				conditionInformationItem();
				State = 7567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7563;
					Match(COMMA_SYMBOL);
					State = 7564;
					conditionInformationItem();
					}
					}
					State = 7569;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalAllowedExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RvalueSystemOrUserVariableContext rvalueSystemOrUserVariable() {
			return GetRuleContext<RvalueSystemOrUserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public SignalAllowedExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalAllowedExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignalAllowedExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignalAllowedExpr(this);
		}
	}

	[RuleVersion(0)]
	public SignalAllowedExprContext signalAllowedExpr() {
		SignalAllowedExprContext _localctx = new SignalAllowedExprContext(Context, State);
		EnterRule(_localctx, 1092, RULE_signalAllowedExpr);
		try {
			State = 7575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,901,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7572;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7573;
				rvalueSystemOrUserVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7574;
				qualifiedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementInformationItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySQLParser.NUMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementInformationItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStatementInformationItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStatementInformationItem(this);
		}
	}

	[RuleVersion(0)]
	public StatementInformationItemContext statementInformationItem() {
		StatementInformationItemContext _localctx = new StatementInformationItemContext(Context, State);
		EnterRule(_localctx, 1094, RULE_statementInformationItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,902,Context) ) {
			case 1:
				{
				State = 7577;
				userVariable();
				}
				break;
			case 2:
				{
				State = 7578;
				identifier();
				}
				break;
			}
			State = 7581;
			Match(EQUAL_OPERATOR);
			State = 7582;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER_SYMBOL || _la==ROW_COUNT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionInformationItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemNameContext signalInformationItemName() {
			return GetRuleContext<SignalInformationItemNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public ConditionInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionInformationItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConditionInformationItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConditionInformationItem(this);
		}
	}

	[RuleVersion(0)]
	public ConditionInformationItemContext conditionInformationItem() {
		ConditionInformationItemContext _localctx = new ConditionInformationItemContext(Context, State);
		EnterRule(_localctx, 1096, RULE_conditionInformationItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,903,Context) ) {
			case 1:
				{
				State = 7584;
				userVariable();
				}
				break;
			case 2:
				{
				State = 7585;
				identifier();
				}
				break;
			}
			State = 7588;
			Match(EQUAL_OPERATOR);
			State = 7591;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CATALOG_NAME_SYMBOL:
			case CLASS_ORIGIN_SYMBOL:
			case COLUMN_NAME_SYMBOL:
			case CONSTRAINT_CATALOG_SYMBOL:
			case CONSTRAINT_NAME_SYMBOL:
			case CONSTRAINT_SCHEMA_SYMBOL:
			case CURSOR_NAME_SYMBOL:
			case MESSAGE_TEXT_SYMBOL:
			case MYSQL_ERRNO_SYMBOL:
			case SCHEMA_NAME_SYMBOL:
			case SUBCLASS_ORIGIN_SYMBOL:
			case TABLE_NAME_SYMBOL:
				{
				State = 7589;
				signalInformationItemName();
				}
				break;
			case RETURNED_SQLSTATE_SYMBOL:
				{
				State = 7590;
				Match(RETURNED_SQLSTATE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalInformationItemNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO_SYMBOL() { return GetToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public SignalInformationItemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalInformationItemName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignalInformationItemName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignalInformationItemName(this);
		}
	}

	[RuleVersion(0)]
	public SignalInformationItemNameContext signalInformationItemName() {
		SignalInformationItemNameContext _localctx = new SignalInformationItemNameContext(Context, State);
		EnterRule(_localctx, 1098, RULE_signalInformationItemName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7593;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 2251859943752705L) != 0) || _la==MESSAGE_TEXT_SYMBOL || _la==MYSQL_ERRNO_SYMBOL || _la==SCHEMA_NAME_SYMBOL || _la==SUBCLASS_ORIGIN_SYMBOL || _la==TABLE_NAME_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNAL_SYMBOL() { return GetToken(MySQLParser.SIGNAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlstateContext sqlstate() {
			return GetRuleContext<SqlstateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemContext[] signalInformationItem() {
			return GetRuleContexts<SignalInformationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemContext signalInformationItem(int i) {
			return GetRuleContext<SignalInformationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignalStatement(this);
		}
	}

	[RuleVersion(0)]
	public SignalStatementContext signalStatement() {
		SignalStatementContext _localctx = new SignalStatementContext(Context, State);
		EnterRule(_localctx, 1100, RULE_signalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7595;
			Match(SIGNAL_SYMBOL);
			State = 7598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,905,Context) ) {
			case 1:
				{
				State = 7596;
				identifier();
				}
				break;
			case 2:
				{
				State = 7597;
				sqlstate();
				}
				break;
			}
			State = 7609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET_SYMBOL) {
				{
				State = 7600;
				Match(SET_SYMBOL);
				State = 7601;
				signalInformationItem();
				State = 7606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7602;
					Match(COMMA_SYMBOL);
					State = 7603;
					signalInformationItem();
					}
					}
					State = 7608;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESIGNAL_SYMBOL() { return GetToken(MySQLParser.RESIGNAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlstateContext sqlstate() {
			return GetRuleContext<SqlstateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemContext[] signalInformationItem() {
			return GetRuleContexts<SignalInformationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemContext signalInformationItem(int i) {
			return GetRuleContext<SignalInformationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ResignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resignalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResignalStatement(this);
		}
	}

	[RuleVersion(0)]
	public ResignalStatementContext resignalStatement() {
		ResignalStatementContext _localctx = new ResignalStatementContext(Context, State);
		EnterRule(_localctx, 1102, RULE_resignalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7611;
			Match(RESIGNAL_SYMBOL);
			State = 7614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,908,Context) ) {
			case 1:
				{
				State = 7612;
				identifier();
				}
				break;
			case 2:
				{
				State = 7613;
				sqlstate();
				}
				break;
			}
			State = 7625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET_SYMBOL) {
				{
				State = 7616;
				Match(SET_SYMBOL);
				State = 7617;
				signalInformationItem();
				State = 7622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7618;
					Match(COMMA_SYMBOL);
					State = 7619;
					signalInformationItem();
					}
					}
					State = 7624;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalInformationItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemNameContext signalInformationItemName() {
			return GetRuleContext<SignalInformationItemNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalAllowedExprContext signalAllowedExpr() {
			return GetRuleContext<SignalAllowedExprContext>(0);
		}
		public SignalInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalInformationItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignalInformationItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignalInformationItem(this);
		}
	}

	[RuleVersion(0)]
	public SignalInformationItemContext signalInformationItem() {
		SignalInformationItemContext _localctx = new SignalInformationItemContext(Context, State);
		EnterRule(_localctx, 1104, RULE_signalInformationItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7627;
			signalInformationItemName();
			State = 7628;
			Match(EQUAL_OPERATOR);
			State = 7629;
			signalAllowedExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorOpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CursorOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorOpen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCursorOpen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCursorOpen(this);
		}
	}

	[RuleVersion(0)]
	public CursorOpenContext cursorOpen() {
		CursorOpenContext _localctx = new CursorOpenContext(Context, State);
		EnterRule(_localctx, 1106, RULE_cursorOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7631;
			Match(OPEN_SYMBOL);
			State = 7632;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorCloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySQLParser.CLOSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CursorCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorClose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCursorClose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCursorClose(this);
		}
	}

	[RuleVersion(0)]
	public CursorCloseContext cursorClose() {
		CursorCloseContext _localctx = new CursorCloseContext(Context, State);
		EnterRule(_localctx, 1108, RULE_cursorClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7634;
			Match(CLOSE_SYMBOL);
			State = 7635;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorFetchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH_SYMBOL() { return GetToken(MySQLParser.FETCH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT_SYMBOL() { return GetToken(MySQLParser.NEXT_SYMBOL, 0); }
		public CursorFetchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorFetch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCursorFetch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCursorFetch(this);
		}
	}

	[RuleVersion(0)]
	public CursorFetchContext cursorFetch() {
		CursorFetchContext _localctx = new CursorFetchContext(Context, State);
		EnterRule(_localctx, 1110, RULE_cursorFetch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7637;
			Match(FETCH_SYMBOL);
			State = 7642;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,912,Context) ) {
			case 1:
				{
				State = 7639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEXT_SYMBOL) {
					{
					State = 7638;
					Match(NEXT_SYMBOL);
					}
				}

				State = 7641;
				Match(FROM_SYMBOL);
				}
				break;
			}
			State = 7644;
			identifier();
			State = 7645;
			Match(INTO_SYMBOL);
			State = 7646;
			identifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScheduleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SYMBOL() { return GetToken(MySQLParser.AT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY_SYMBOL() { return GetToken(MySQLParser.EVERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS_SYMBOL() { return GetToken(MySQLParser.STARTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS_SYMBOL() { return GetToken(MySQLParser.ENDS_SYMBOL, 0); }
		public ScheduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schedule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSchedule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSchedule(this);
		}
	}

	[RuleVersion(0)]
	public ScheduleContext schedule() {
		ScheduleContext _localctx = new ScheduleContext(Context, State);
		EnterRule(_localctx, 1112, RULE_schedule);
		int _la;
		try {
			State = 7661;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7648;
				Match(AT_SYMBOL);
				State = 7649;
				expr(0);
				}
				break;
			case EVERY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7650;
				Match(EVERY_SYMBOL);
				State = 7651;
				expr(0);
				State = 7652;
				interval();
				State = 7655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STARTS_SYMBOL) {
					{
					State = 7653;
					Match(STARTS_SYMBOL);
					State = 7654;
					expr(0);
					}
				}

				State = 7659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENDS_SYMBOL) {
					{
					State = 7657;
					Match(ENDS_SYMBOL);
					State = 7658;
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckOrReferencesContext checkOrReferences() {
			return GetRuleContext<CheckOrReferencesContext>(0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 1114, RULE_columnDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7663;
			columnName();
			State = 7664;
			fieldDefinition();
			State = 7666;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,916,Context) ) {
			case 1:
				{
				State = 7665;
				checkOrReferences();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckOrReferencesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferencesContext references() {
			return GetRuleContext<ReferencesContext>(0);
		}
		public CheckOrReferencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkOrReferences; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCheckOrReferences(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCheckOrReferences(this);
		}
	}

	[RuleVersion(0)]
	public CheckOrReferencesContext checkOrReferences() {
		CheckOrReferencesContext _localctx = new CheckOrReferencesContext(Context, State);
		EnterRule(_localctx, 1116, RULE_checkOrReferences);
		try {
			State = 7671;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,917,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7668;
				if (!(this.isServerVersionLt80016())) throw new FailedPredicateException(this, "this.isServerVersionLt80016()");
				State = 7669;
				checkConstraint();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7670;
				references();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public CheckConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCheckConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCheckConstraint(this);
		}
	}

	[RuleVersion(0)]
	public CheckConstraintContext checkConstraint() {
		CheckConstraintContext _localctx = new CheckConstraintContext(Context, State);
		EnterRule(_localctx, 1118, RULE_checkConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7673;
			Match(CHECK_SYMBOL);
			State = 7674;
			exprWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintEnforcementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED_SYMBOL() { return GetToken(MySQLParser.ENFORCED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ConstraintEnforcementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintEnforcement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintEnforcement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintEnforcement(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintEnforcementContext constraintEnforcement() {
		ConstraintEnforcementContext _localctx = new ConstraintEnforcementContext(Context, State);
		EnterRule(_localctx, 1120, RULE_constraintEnforcement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7676;
			if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
			State = 7678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT_SYMBOL) {
				{
				State = 7677;
				Match(NOT_SYMBOL);
				}
			}

			State = 7680;
			Match(ENFORCED_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableConstraintDefContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public KeyListWithExpressionContext keyListWithExpression() {
			return GetRuleContext<KeyListWithExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameAndTypeContext indexNameAndType() {
			return GetRuleContext<IndexNameAndTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT_SYMBOL() { return GetToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FulltextIndexOptionContext[] fulltextIndexOption() {
			return GetRuleContexts<FulltextIndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return GetRuleContext<FulltextIndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpatialIndexOptionContext[] spatialIndexOption() {
			return GetRuleContexts<SpatialIndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpatialIndexOptionContext spatialIndexOption(int i) {
			return GetRuleContext<SpatialIndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyListContext keyList() {
			return GetRuleContext<KeyListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferencesContext references() {
			return GetRuleContext<ReferencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintNameContext constraintName() {
			return GetRuleContext<ConstraintNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		public TableConstraintDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableConstraintDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableConstraintDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableConstraintDef(this);
		}
	}

	[RuleVersion(0)]
	public TableConstraintDefContext tableConstraintDef() {
		TableConstraintDefContext _localctx = new TableConstraintDefContext(Context, State);
		EnterRule(_localctx, 1122, RULE_tableConstraintDef);
		int _la;
		try {
			int _alt;
			State = 7756;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX_SYMBOL:
			case KEY_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7682;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7684;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,919,Context) ) {
				case 1:
					{
					State = 7683;
					indexNameAndType();
					}
					break;
				}
				State = 7686;
				keyListWithExpression();
				State = 7690;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,920,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7687;
						indexOption();
						}
						} 
					}
					State = 7692;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,920,Context);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7693;
				_localctx.type = Match(FULLTEXT_SYMBOL);
				State = 7695;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,921,Context) ) {
				case 1:
					{
					State = 7694;
					keyOrIndex();
					}
					break;
				}
				State = 7698;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,922,Context) ) {
				case 1:
					{
					State = 7697;
					indexName();
					}
					break;
				}
				State = 7700;
				keyListWithExpression();
				State = 7704;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,923,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7701;
						fulltextIndexOption();
						}
						} 
					}
					State = 7706;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,923,Context);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7707;
				_localctx.type = Match(SPATIAL_SYMBOL);
				State = 7709;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,924,Context) ) {
				case 1:
					{
					State = 7708;
					keyOrIndex();
					}
					break;
				}
				State = 7712;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,925,Context) ) {
				case 1:
					{
					State = 7711;
					indexName();
					}
					break;
				}
				State = 7714;
				keyListWithExpression();
				State = 7718;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,926,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7715;
						spatialIndexOption();
						}
						} 
					}
					State = 7720;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,926,Context);
				}
				}
				break;
			case CHECK_SYMBOL:
			case CONSTRAINT_SYMBOL:
			case FOREIGN_SYMBOL:
			case PRIMARY_SYMBOL:
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7722;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					State = 7721;
					constraintName();
					}
				}

				State = 7754;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY_SYMBOL:
				case UNIQUE_SYMBOL:
					{
					State = 7730;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PRIMARY_SYMBOL:
						{
						State = 7724;
						_localctx.type = Match(PRIMARY_SYMBOL);
						State = 7725;
						Match(KEY_SYMBOL);
						}
						break;
					case UNIQUE_SYMBOL:
						{
						State = 7726;
						_localctx.type = Match(UNIQUE_SYMBOL);
						State = 7728;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,928,Context) ) {
						case 1:
							{
							State = 7727;
							keyOrIndex();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7733;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,930,Context) ) {
					case 1:
						{
						State = 7732;
						indexNameAndType();
						}
						break;
					}
					State = 7735;
					keyListWithExpression();
					State = 7739;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,931,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 7736;
							indexOption();
							}
							} 
						}
						State = 7741;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,931,Context);
					}
					}
					break;
				case FOREIGN_SYMBOL:
					{
					State = 7742;
					_localctx.type = Match(FOREIGN_SYMBOL);
					State = 7743;
					Match(KEY_SYMBOL);
					State = 7745;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,932,Context) ) {
					case 1:
						{
						State = 7744;
						indexName();
						}
						break;
					}
					State = 7747;
					keyList();
					State = 7748;
					references();
					}
					break;
				case CHECK_SYMBOL:
					{
					State = 7750;
					checkConstraint();
					State = 7752;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,933,Context) ) {
					case 1:
						{
						State = 7751;
						constraintEnforcement();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintName(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintNameContext constraintName() {
		ConstraintNameContext _localctx = new ConstraintNameContext(Context, State);
		EnterRule(_localctx, 1124, RULE_constraintName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7758;
			Match(CONSTRAINT_SYMBOL);
			State = 7760;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,936,Context) ) {
			case 1:
				{
				State = 7759;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAttributeContext[] columnAttribute() {
			return GetRuleContexts<ColumnAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAttributeContext columnAttribute(int i) {
			return GetRuleContext<ColumnAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED_SYMBOL() { return GetToken(MySQLParser.GENERATED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL_SYMBOL() { return GetToken(MySQLParser.VIRTUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED_SYMBOL() { return GetToken(MySQLParser.STORED_SYMBOL, 0); }
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 1126, RULE_fieldDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7762;
			dataType();
			State = 7787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,942,Context) ) {
			case 1:
				{
				State = 7766;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,937,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7763;
						columnAttribute();
						}
						} 
					}
					State = 7768;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,937,Context);
				}
				}
				break;
			case 2:
				{
				State = 7770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					State = 7769;
					collate();
					}
				}

				State = 7774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATED_SYMBOL) {
					{
					State = 7772;
					Match(GENERATED_SYMBOL);
					State = 7773;
					Match(ALWAYS_SYMBOL);
					}
				}

				State = 7776;
				Match(AS_SYMBOL);
				State = 7777;
				exprWithParentheses();
				State = 7779;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,940,Context) ) {
				case 1:
					{
					State = 7778;
					_la = TokenStream.LA(1);
					if ( !(_la==STORED_SYMBOL || _la==VIRTUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 7784;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,941,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7781;
						columnAttribute();
						}
						} 
					}
					State = 7786;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,941,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnAttributeContext : ParserRuleContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NowOrSignedLiteralContext nowOrSignedLiteral() {
			return GetRuleContext<NowOrSignedLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW_SYMBOL() { return GetToken(MySQLParser.NOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeFunctionParametersContext timeFunctionParameters() {
			return GetRuleContext<TimeFunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySQLParser.SERIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnFormatContext columnFormat() {
			return GetRuleContext<ColumnFormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StorageMediaContext storageMedia() {
			return GetRuleContext<StorageMediaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRID_SYMBOL() { return GetToken(MySQLParser.SRID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintNameContext constraintName() {
			return GetRuleContext<ConstraintNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonAttributeContext jsonAttribute() {
			return GetRuleContext<JsonAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ColumnAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnAttribute(this);
		}
	}

	[RuleVersion(0)]
	public ColumnAttributeContext columnAttribute() {
		ColumnAttributeContext _localctx = new ColumnAttributeContext(Context, State);
		EnterRule(_localctx, 1128, RULE_columnAttribute);
		int _la;
		try {
			State = 7850;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,951,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 7789;
					Match(NOT_SYMBOL);
					}
				}

				State = 7792;
				nullLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7793;
				if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				State = 7794;
				Match(NOT_SYMBOL);
				State = 7795;
				Match(SECONDARY_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7796;
				_localctx.value = Match(DEFAULT_SYMBOL);
				State = 7800;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,944,Context) ) {
				case 1:
					{
					State = 7797;
					nowOrSignedLiteral();
					}
					break;
				case 2:
					{
					State = 7798;
					if (!(this.isServerVersionGe80013())) throw new FailedPredicateException(this, "this.isServerVersionGe80013()");
					State = 7799;
					exprWithParentheses();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7802;
				_localctx.value = Match(ON_SYMBOL);
				State = 7803;
				Match(UPDATE_SYMBOL);
				State = 7804;
				Match(NOW_SYMBOL);
				State = 7806;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,945,Context) ) {
				case 1:
					{
					State = 7805;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7808;
				_localctx.value = Match(AUTO_INCREMENT_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7809;
				_localctx.value = Match(SERIAL_SYMBOL);
				State = 7810;
				Match(DEFAULT_SYMBOL);
				State = 7811;
				Match(VALUE_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					State = 7812;
					Match(PRIMARY_SYMBOL);
					}
				}

				State = 7815;
				_localctx.value = Match(KEY_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7816;
				_localctx.value = Match(UNIQUE_SYMBOL);
				State = 7818;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,947,Context) ) {
				case 1:
					{
					State = 7817;
					Match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7820;
				_localctx.value = Match(COMMENT_SYMBOL);
				State = 7821;
				textLiteral();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7822;
				collate();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7823;
				_localctx.value = Match(COLUMN_FORMAT_SYMBOL);
				State = 7824;
				columnFormat();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7825;
				_localctx.value = Match(STORAGE_SYMBOL);
				State = 7826;
				storageMedia();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7827;
				_localctx.value = Match(SRID_SYMBOL);
				State = 7828;
				real_ulonglong_number();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7829;
				if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				State = 7831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					State = 7830;
					constraintName();
					}
				}

				State = 7833;
				checkConstraint();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7834;
				if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				State = 7835;
				constraintEnforcement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7836;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 7837;
				_localctx.value = Match(ENGINE_ATTRIBUTE_SYMBOL);
				State = 7839;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,949,Context) ) {
				case 1:
					{
					State = 7838;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7841;
				jsonAttribute();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7842;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 7843;
				_localctx.value = Match(SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
				State = 7845;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,950,Context) ) {
				case 1:
					{
					State = 7844;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7847;
				jsonAttribute();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7848;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 7849;
				visibility();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnFormatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ColumnFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnFormat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnFormat(this);
		}
	}

	[RuleVersion(0)]
	public ColumnFormatContext columnFormat() {
		ColumnFormatContext _localctx = new ColumnFormatContext(Context, State);
		EnterRule(_localctx, 1130, RULE_columnFormat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7852;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & 1152921504611041281L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageMediaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK_SYMBOL() { return GetToken(MySQLParser.DISK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public StorageMediaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageMedia; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStorageMedia(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStorageMedia(this);
		}
	}

	[RuleVersion(0)]
	public StorageMediaContext storageMedia() {
		StorageMediaContext _localctx = new StorageMediaContext(Context, State);
		EnterRule(_localctx, 1132, RULE_storageMedia);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7854;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT_SYMBOL || _la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW_SYMBOL() { return GetToken(MySQLParser.NOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDatetimePrecisionContext functionDatetimePrecision() {
			return GetRuleContext<FunctionDatetimePrecisionContext>(0);
		}
		public NowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_now; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNow(this);
		}
	}

	[RuleVersion(0)]
	public NowContext now() {
		NowContext _localctx = new NowContext(Context, State);
		EnterRule(_localctx, 1134, RULE_now);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7856;
			Match(NOW_SYMBOL);
			State = 7857;
			functionDatetimePrecision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NowOrSignedLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NowContext now() {
			return GetRuleContext<NowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedLiteralOrNullContext signedLiteralOrNull() {
			return GetRuleContext<SignedLiteralOrNullContext>(0);
		}
		public NowOrSignedLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nowOrSignedLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNowOrSignedLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNowOrSignedLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NowOrSignedLiteralContext nowOrSignedLiteral() {
		NowOrSignedLiteralContext _localctx = new NowOrSignedLiteralContext(Context, State);
		EnterRule(_localctx, 1136, RULE_nowOrSignedLiteral);
		try {
			State = 7861;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,952,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7859;
				now();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7860;
				signedLiteralOrNull();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GcolAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public GcolAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gcolAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGcolAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGcolAttribute(this);
		}
	}

	[RuleVersion(0)]
	public GcolAttributeContext gcolAttribute() {
		GcolAttributeContext _localctx = new GcolAttributeContext(Context, State);
		EnterRule(_localctx, 1138, RULE_gcolAttribute);
		int _la;
		try {
			State = 7877;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7863;
				Match(UNIQUE_SYMBOL);
				State = 7865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEY_SYMBOL) {
					{
					State = 7864;
					Match(KEY_SYMBOL);
					}
				}

				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7867;
				Match(COMMENT_SYMBOL);
				State = 7868;
				textString();
				}
				break;
			case NOT2_SYMBOL:
			case NOT_SYMBOL:
			case NULL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7870;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
					{
					State = 7869;
					notRule();
					}
				}

				State = 7872;
				Match(NULL_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
			case PRIMARY_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					State = 7873;
					Match(PRIMARY_SYMBOL);
					}
				}

				State = 7876;
				Match(KEY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferencesContext : ParserRuleContext {
		public IToken match;
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES_SYMBOL() { return GetToken(MySQLParser.REFERENCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_SYMBOL() { return GetToken(MySQLParser.MATCH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySQLParser.ON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySQLParser.ON_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteOptionContext[] deleteOption() {
			return GetRuleContexts<DeleteOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteOptionContext deleteOption(int i) {
			return GetRuleContext<DeleteOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_SYMBOL() { return GetToken(MySQLParser.DELETE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public ReferencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_references; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReferences(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReferences(this);
		}
	}

	[RuleVersion(0)]
	public ReferencesContext references() {
		ReferencesContext _localctx = new ReferencesContext(Context, State);
		EnterRule(_localctx, 1140, RULE_references);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7879;
			Match(REFERENCES_SYMBOL);
			State = 7880;
			tableRef();
			State = 7882;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 7881;
				identifierListWithParentheses();
				}
			}

			State = 7886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCH_SYMBOL) {
				{
				State = 7884;
				Match(MATCH_SYMBOL);
				State = 7885;
				_localctx.match = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULL_SYMBOL || _la==PARTIAL_SYMBOL || _la==SIMPLE_SYMBOL) ) {
					_localctx.match = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 7904;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,961,Context) ) {
			case 1:
				{
				State = 7888;
				Match(ON_SYMBOL);
				State = 7889;
				_localctx.option = Match(UPDATE_SYMBOL);
				State = 7890;
				deleteOption();
				State = 7894;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 7891;
					Match(ON_SYMBOL);
					State = 7892;
					Match(DELETE_SYMBOL);
					State = 7893;
					deleteOption();
					}
				}

				}
				break;
			case 2:
				{
				State = 7896;
				Match(ON_SYMBOL);
				State = 7897;
				_localctx.option = Match(DELETE_SYMBOL);
				State = 7898;
				deleteOption();
				State = 7902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 7899;
					Match(ON_SYMBOL);
					State = 7900;
					Match(UPDATE_SYMBOL);
					State = 7901;
					deleteOption();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySQLParser.CASCADE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_SYMBOL() { return GetToken(MySQLParser.ACTION_SYMBOL, 0); }
		public DeleteOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDeleteOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDeleteOption(this);
		}
	}

	[RuleVersion(0)]
	public DeleteOptionContext deleteOption() {
		DeleteOptionContext _localctx = new DeleteOptionContext(Context, State);
		EnterRule(_localctx, 1142, RULE_deleteOption);
		int _la;
		try {
			State = 7913;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,962,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7906;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7907;
				Match(SET_SYMBOL);
				State = 7908;
				nullLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7909;
				Match(SET_SYMBOL);
				State = 7910;
				Match(DEFAULT_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7911;
				Match(NO_SYMBOL);
				State = 7912;
				Match(ACTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartContext[] keyPart() {
			return GetRuleContexts<KeyPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartContext keyPart(int i) {
			return GetRuleContext<KeyPartContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyList(this);
		}
	}

	[RuleVersion(0)]
	public KeyListContext keyList() {
		KeyListContext _localctx = new KeyListContext(Context, State);
		EnterRule(_localctx, 1144, RULE_keyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7915;
			Match(OPEN_PAR_SYMBOL);
			State = 7916;
			keyPart();
			State = 7921;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7917;
				Match(COMMA_SYMBOL);
				State = 7918;
				keyPart();
				}
				}
				State = 7923;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7924;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public KeyPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyPart(this);
		}
	}

	[RuleVersion(0)]
	public KeyPartContext keyPart() {
		KeyPartContext _localctx = new KeyPartContext(Context, State);
		EnterRule(_localctx, 1146, RULE_keyPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7926;
			identifier();
			State = 7928;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 7927;
				fieldLength();
				}
			}

			State = 7931;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				State = 7930;
				direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyListWithExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartOrExpressionContext[] keyPartOrExpression() {
			return GetRuleContexts<KeyPartOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartOrExpressionContext keyPartOrExpression(int i) {
			return GetRuleContext<KeyPartOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListWithExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyListWithExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyListWithExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyListWithExpression(this);
		}
	}

	[RuleVersion(0)]
	public KeyListWithExpressionContext keyListWithExpression() {
		KeyListWithExpressionContext _localctx = new KeyListWithExpressionContext(Context, State);
		EnterRule(_localctx, 1148, RULE_keyListWithExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7933;
			Match(OPEN_PAR_SYMBOL);
			State = 7934;
			keyPartOrExpression();
			State = 7939;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7935;
				Match(COMMA_SYMBOL);
				State = 7936;
				keyPartOrExpression();
				}
				}
				State = 7941;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7942;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyPartOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartContext keyPart() {
			return GetRuleContext<KeyPartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public KeyPartOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyPartOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyPartOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyPartOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public KeyPartOrExpressionContext keyPartOrExpression() {
		KeyPartOrExpressionContext _localctx = new KeyPartOrExpressionContext(Context, State);
		EnterRule(_localctx, 1150, RULE_keyPartOrExpression);
		int _la;
		try {
			State = 7950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,968,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7944;
				keyPart();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7945;
				if (!(this.isServerVersionGe80013())) throw new FailedPredicateException(this, "this.isServerVersionGe80013()");
				State = 7946;
				exprWithParentheses();
				State = 7948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
					{
					State = 7947;
					direction();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeContext : ParserRuleContext {
		public IToken algorithm;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE_SYMBOL() { return GetToken(MySQLParser.BTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE_SYMBOL() { return GetToken(MySQLParser.RTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexType(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeContext indexType() {
		IndexTypeContext _localctx = new IndexTypeContext(Context, State);
		EnterRule(_localctx, 1152, RULE_indexType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7952;
			_localctx.algorithm = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BTREE_SYMBOL || _la==HASH_SYMBOL || _la==RTREE_SYMBOL) ) {
				_localctx.algorithm = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeClauseContext indexTypeClause() {
			return GetRuleContext<IndexTypeClauseContext>(0);
		}
		public IndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexOption(this);
		}
	}

	[RuleVersion(0)]
	public IndexOptionContext indexOption() {
		IndexOptionContext _localctx = new IndexOptionContext(Context, State);
		EnterRule(_localctx, 1154, RULE_indexOption);
		try {
			State = 7956;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,969,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7954;
				commonIndexOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7955;
				indexTypeClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonIndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonAttributeContext jsonAttribute() {
			return GetRuleContext<JsonAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0); }
		public CommonIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonIndexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCommonIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCommonIndexOption(this);
		}
	}

	[RuleVersion(0)]
	public CommonIndexOptionContext commonIndexOption() {
		CommonIndexOptionContext _localctx = new CommonIndexOptionContext(Context, State);
		EnterRule(_localctx, 1156, RULE_commonIndexOption);
		int _la;
		try {
			State = 7978;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,973,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7958;
				Match(KEY_BLOCK_SIZE_SYMBOL);
				State = 7960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7959;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7962;
				ulong_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7963;
				Match(COMMENT_SYMBOL);
				State = 7964;
				textLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7965;
				visibility();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7966;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 7967;
				Match(ENGINE_ATTRIBUTE_SYMBOL);
				State = 7969;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,971,Context) ) {
				case 1:
					{
					State = 7968;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7971;
				jsonAttribute();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7972;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 7973;
				Match(SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
				State = 7975;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,972,Context) ) {
				case 1:
					{
					State = 7974;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7977;
				jsonAttribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 1158, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7980;
			_la = TokenStream.LA(1);
			if ( !(_la==INVISIBLE_SYMBOL || _la==VISIBLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		public IndexTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexTypeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexTypeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexTypeClause(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeClauseContext indexTypeClause() {
		IndexTypeClauseContext _localctx = new IndexTypeClauseContext(Context, State);
		EnterRule(_localctx, 1160, RULE_indexTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7982;
			_la = TokenStream.LA(1);
			if ( !(_la==TYPE_SYMBOL || _la==USING_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7983;
			indexType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FulltextIndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER_SYMBOL() { return GetToken(MySQLParser.PARSER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FulltextIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fulltextIndexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFulltextIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFulltextIndexOption(this);
		}
	}

	[RuleVersion(0)]
	public FulltextIndexOptionContext fulltextIndexOption() {
		FulltextIndexOptionContext _localctx = new FulltextIndexOptionContext(Context, State);
		EnterRule(_localctx, 1162, RULE_fulltextIndexOption);
		try {
			State = 7989;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,974,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7985;
				commonIndexOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7986;
				Match(WITH_SYMBOL);
				State = 7987;
				Match(PARSER_SYMBOL);
				State = 7988;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpatialIndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		public SpatialIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spatialIndexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSpatialIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSpatialIndexOption(this);
		}
	}

	[RuleVersion(0)]
	public SpatialIndexOptionContext spatialIndexOption() {
		SpatialIndexOptionContext _localctx = new SpatialIndexOptionContext(Context, State);
		EnterRule(_localctx, 1164, RULE_spatialIndexOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7991;
			commonIndexOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MySQLParser.Eof, 0); }
		public DataTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDataTypeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDataTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeDefinitionContext dataTypeDefinition() {
		DataTypeDefinitionContext _localctx = new DataTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 1166, RULE_dataTypeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7993;
			dataType();
			State = 7994;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_SYMBOL() { return GetToken(MySQLParser.INT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYINT_SYMBOL() { return GetToken(MySQLParser.TINYINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT_SYMBOL() { return GetToken(MySQLParser.SMALLINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMINT_SYMBOL() { return GetToken(MySQLParser.MEDIUMINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT_SYMBOL() { return GetToken(MySQLParser.BIGINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_SYMBOL() { return GetToken(MySQLParser.REAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_SYMBOL() { return GetToken(MySQLParser.DOUBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION_SYMBOL() { return GetToken(MySQLParser.PRECISION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_SYMBOL() { return GetToken(MySQLParser.FLOAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_SYMBOL() { return GetToken(MySQLParser.NUMERIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FloatOptionsContext floatOptions() {
			return GetRuleContext<FloatOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_SYMBOL() { return GetToken(MySQLParser.BIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_SYMBOL() { return GetToken(MySQLParser.BOOL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return GetRuleContext<CharsetWithOptBinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NcharContext nchar() {
			return GetRuleContext<NcharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING_SYMBOL() { return GetToken(MySQLParser.VARYING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR_SYMBOL() { return GetToken(MySQLParser.VARCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySQLParser.NCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY_SYMBOL() { return GetToken(MySQLParser.VARBINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return GetRuleContext<TypeDatetimePrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYBLOB_SYMBOL() { return GetToken(MySQLParser.TINYBLOB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB_SYMBOL() { return GetToken(MySQLParser.BLOB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMBLOB_SYMBOL() { return GetToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGBLOB_SYMBOL() { return GetToken(MySQLParser.LONGBLOB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_SYMBOL() { return GetToken(MySQLParser.LONG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYTEXT_SYMBOL() { return GetToken(MySQLParser.TINYTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_SYMBOL() { return GetToken(MySQLParser.TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMTEXT_SYMBOL() { return GetToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGTEXT_SYMBOL() { return GetToken(MySQLParser.LONGTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringListContext stringList() {
			return GetRuleContext<StringListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_SYMBOL() { return GetToken(MySQLParser.ENUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySQLParser.SERIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SYMBOL() { return GetToken(MySQLParser.JSON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_SYMBOL() { return GetToken(MySQLParser.POINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySQLParser.POLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 1168, RULE_dataType);
		int _la;
		try {
			State = 8142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1008,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7996;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BIGINT_SYMBOL || _la==INT_SYMBOL || _la==MEDIUMINT_SYMBOL || _la==SMALLINT_SYMBOL || _la==TINYINT_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7998;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,975,Context) ) {
				case 1:
					{
					State = 7997;
					fieldLength();
					}
					break;
				}
				State = 8001;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,976,Context) ) {
				case 1:
					{
					State = 8000;
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8008;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case REAL_SYMBOL:
					{
					State = 8003;
					_localctx.type = Match(REAL_SYMBOL);
					}
					break;
				case DOUBLE_SYMBOL:
					{
					State = 8004;
					_localctx.type = Match(DOUBLE_SYMBOL);
					State = 8006;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,977,Context) ) {
					case 1:
						{
						State = 8005;
						Match(PRECISION_SYMBOL);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8011;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,979,Context) ) {
				case 1:
					{
					State = 8010;
					precision();
					}
					break;
				}
				State = 8014;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,980,Context) ) {
				case 1:
					{
					State = 8013;
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8016;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 164)) & ~0x3f) == 0 && ((1L << (_la - 164)) & -4611686018427387903L) != 0) || _la==NUMERIC_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8018;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,981,Context) ) {
				case 1:
					{
					State = 8017;
					floatOptions();
					}
					break;
				}
				State = 8021;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,982,Context) ) {
				case 1:
					{
					State = 8020;
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8023;
				_localctx.type = Match(BIT_SYMBOL);
				State = 8025;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,983,Context) ) {
				case 1:
					{
					State = 8024;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8027;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BOOLEAN_SYMBOL || _la==BOOL_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8028;
				_localctx.type = Match(CHAR_SYMBOL);
				State = 8030;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,984,Context) ) {
				case 1:
					{
					State = 8029;
					fieldLength();
					}
					break;
				}
				State = 8033;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,985,Context) ) {
				case 1:
					{
					State = 8032;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8035;
				nchar();
				State = 8037;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,986,Context) ) {
				case 1:
					{
					State = 8036;
					fieldLength();
					}
					break;
				}
				State = 8040;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,987,Context) ) {
				case 1:
					{
					State = 8039;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8042;
				_localctx.type = Match(BINARY_SYMBOL);
				State = 8044;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,988,Context) ) {
				case 1:
					{
					State = 8043;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8049;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CHAR_SYMBOL:
					{
					State = 8046;
					_localctx.type = Match(CHAR_SYMBOL);
					State = 8047;
					Match(VARYING_SYMBOL);
					}
					break;
				case VARCHAR_SYMBOL:
					{
					State = 8048;
					_localctx.type = Match(VARCHAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8051;
				fieldLength();
				State = 8053;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,990,Context) ) {
				case 1:
					{
					State = 8052;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8065;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,991,Context) ) {
				case 1:
					{
					State = 8055;
					_localctx.type = Match(NATIONAL_SYMBOL);
					State = 8056;
					Match(VARCHAR_SYMBOL);
					}
					break;
				case 2:
					{
					State = 8057;
					_localctx.type = Match(NVARCHAR_SYMBOL);
					}
					break;
				case 3:
					{
					State = 8058;
					_localctx.type = Match(NCHAR_SYMBOL);
					State = 8059;
					Match(VARCHAR_SYMBOL);
					}
					break;
				case 4:
					{
					State = 8060;
					_localctx.type = Match(NATIONAL_SYMBOL);
					State = 8061;
					Match(CHAR_SYMBOL);
					State = 8062;
					Match(VARYING_SYMBOL);
					}
					break;
				case 5:
					{
					State = 8063;
					_localctx.type = Match(NCHAR_SYMBOL);
					State = 8064;
					Match(VARYING_SYMBOL);
					}
					break;
				}
				State = 8067;
				fieldLength();
				State = 8069;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,992,Context) ) {
				case 1:
					{
					State = 8068;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8071;
				_localctx.type = Match(VARBINARY_SYMBOL);
				State = 8072;
				fieldLength();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 8073;
				_localctx.type = Match(YEAR_SYMBOL);
				State = 8075;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,993,Context) ) {
				case 1:
					{
					State = 8074;
					fieldLength();
					}
					break;
				}
				State = 8078;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,994,Context) ) {
				case 1:
					{
					State = 8077;
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 8080;
				_localctx.type = Match(DATE_SYMBOL);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 8081;
				_localctx.type = Match(TIME_SYMBOL);
				State = 8083;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,995,Context) ) {
				case 1:
					{
					State = 8082;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 8085;
				_localctx.type = Match(TIMESTAMP_SYMBOL);
				State = 8087;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,996,Context) ) {
				case 1:
					{
					State = 8086;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 8089;
				_localctx.type = Match(DATETIME_SYMBOL);
				State = 8091;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,997,Context) ) {
				case 1:
					{
					State = 8090;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 8093;
				_localctx.type = Match(TINYBLOB_SYMBOL);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 8094;
				_localctx.type = Match(BLOB_SYMBOL);
				State = 8096;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,998,Context) ) {
				case 1:
					{
					State = 8095;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 8098;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LONGBLOB_SYMBOL || _la==MEDIUMBLOB_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 8099;
				_localctx.type = Match(LONG_SYMBOL);
				State = 8100;
				Match(VARBINARY_SYMBOL);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 8101;
				_localctx.type = Match(LONG_SYMBOL);
				State = 8105;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,999,Context) ) {
				case 1:
					{
					State = 8102;
					Match(CHAR_SYMBOL);
					State = 8103;
					Match(VARYING_SYMBOL);
					}
					break;
				case 2:
					{
					State = 8104;
					Match(VARCHAR_SYMBOL);
					}
					break;
				}
				State = 8108;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1000,Context) ) {
				case 1:
					{
					State = 8107;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 8110;
				_localctx.type = Match(TINYTEXT_SYMBOL);
				State = 8112;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1001,Context) ) {
				case 1:
					{
					State = 8111;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 8114;
				_localctx.type = Match(TEXT_SYMBOL);
				State = 8116;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1002,Context) ) {
				case 1:
					{
					State = 8115;
					fieldLength();
					}
					break;
				}
				State = 8119;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1003,Context) ) {
				case 1:
					{
					State = 8118;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 8121;
				_localctx.type = Match(MEDIUMTEXT_SYMBOL);
				State = 8123;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1004,Context) ) {
				case 1:
					{
					State = 8122;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 8125;
				_localctx.type = Match(LONGTEXT_SYMBOL);
				State = 8127;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1005,Context) ) {
				case 1:
					{
					State = 8126;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 8129;
				_localctx.type = Match(ENUM_SYMBOL);
				State = 8130;
				stringList();
				State = 8132;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1006,Context) ) {
				case 1:
					{
					State = 8131;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 8134;
				_localctx.type = Match(SET_SYMBOL);
				State = 8135;
				stringList();
				State = 8137;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1007,Context) ) {
				case 1:
					{
					State = 8136;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 8139;
				_localctx.type = Match(SERIAL_SYMBOL);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 8140;
				_localctx.type = Match(JSON_SYMBOL);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 8141;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==GEOMETRYCOLLECTION_SYMBOL || _la==GEOMETRY_SYMBOL || _la==LINESTRING_SYMBOL || ((((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & 108086391056891911L) != 0)) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NcharContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySQLParser.NCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public NcharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nchar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNchar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNchar(this);
		}
	}

	[RuleVersion(0)]
	public NcharContext nchar() {
		NcharContext _localctx = new NcharContext(Context, State);
		EnterRule(_localctx, 1170, RULE_nchar);
		try {
			State = 8147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NCHAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8144;
				_localctx.type = Match(NCHAR_SYMBOL);
				}
				break;
			case NATIONAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8145;
				_localctx.type = Match(NATIONAL_SYMBOL);
				State = 8146;
				Match(CHAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealTypeContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_SYMBOL() { return GetToken(MySQLParser.REAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_SYMBOL() { return GetToken(MySQLParser.DOUBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION_SYMBOL() { return GetToken(MySQLParser.PRECISION_SYMBOL, 0); }
		public RealTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRealType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRealType(this);
		}
	}

	[RuleVersion(0)]
	public RealTypeContext realType() {
		RealTypeContext _localctx = new RealTypeContext(Context, State);
		EnterRule(_localctx, 1172, RULE_realType);
		try {
			State = 8154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8149;
				_localctx.type = Match(REAL_SYMBOL);
				}
				break;
			case DOUBLE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8150;
				_localctx.type = Match(DOUBLE_SYMBOL);
				State = 8152;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1010,Context) ) {
				case 1:
					{
					State = 8151;
					Match(PRECISION_SYMBOL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(Context, State);
		EnterRule(_localctx, 1174, RULE_fieldLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8156;
			Match(OPEN_PAR_SYMBOL);
			State = 8159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1012,Context) ) {
			case 1:
				{
				State = 8157;
				real_ulonglong_number();
				}
				break;
			case 2:
				{
				State = 8158;
				Match(DECIMAL_NUMBER);
				}
				break;
			}
			State = 8161;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SIGNED_SYMBOL() { return GetTokens(MySQLParser.SIGNED_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_SYMBOL(int i) {
			return GetToken(MySQLParser.SIGNED_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNSIGNED_SYMBOL() { return GetTokens(MySQLParser.UNSIGNED_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_SYMBOL(int i) {
			return GetToken(MySQLParser.UNSIGNED_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ZEROFILL_SYMBOL() { return GetTokens(MySQLParser.ZEROFILL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZEROFILL_SYMBOL(int i) {
			return GetToken(MySQLParser.ZEROFILL_SYMBOL, i);
		}
		public FieldOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldOptions(this);
		}
	}

	[RuleVersion(0)]
	public FieldOptionsContext fieldOptions() {
		FieldOptionsContext _localctx = new FieldOptionsContext(Context, State);
		EnterRule(_localctx, 1176, RULE_fieldOptions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8164;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8163;
					_la = TokenStream.LA(1);
					if ( !(_la==SIGNED_SYMBOL || _la==UNSIGNED_SYMBOL || _la==ZEROFILL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8166;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1013,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetWithOptBinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AsciiContext ascii() {
			return GetRuleContext<AsciiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnicodeContext unicode() {
			return GetRuleContext<UnicodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_SYMBOL() { return GetToken(MySQLParser.BYTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public CharsetWithOptBinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetWithOptBinary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCharsetWithOptBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCharsetWithOptBinary(this);
		}
	}

	[RuleVersion(0)]
	public CharsetWithOptBinaryContext charsetWithOptBinary() {
		CharsetWithOptBinaryContext _localctx = new CharsetWithOptBinaryContext(Context, State);
		EnterRule(_localctx, 1178, RULE_charsetWithOptBinary);
		try {
			State = 8182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1016,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8168;
				ascii();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8169;
				unicode();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8170;
				Match(BYTE_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8171;
				charset();
				State = 8172;
				charsetName();
				State = 8174;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1014,Context) ) {
				case 1:
					{
					State = 8173;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8176;
				Match(BINARY_SYMBOL);
				State = 8180;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1015,Context) ) {
				case 1:
					{
					State = 8177;
					charset();
					State = 8178;
					charsetName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsciiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII_SYMBOL() { return GetToken(MySQLParser.ASCII_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public AsciiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascii; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAscii(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAscii(this);
		}
	}

	[RuleVersion(0)]
	public AsciiContext ascii() {
		AsciiContext _localctx = new AsciiContext(Context, State);
		EnterRule(_localctx, 1180, RULE_ascii);
		try {
			State = 8190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASCII_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8184;
				Match(ASCII_SYMBOL);
				State = 8186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1017,Context) ) {
				case 1:
					{
					State = 8185;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8188;
				Match(BINARY_SYMBOL);
				State = 8189;
				Match(ASCII_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnicodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySQLParser.UNICODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public UnicodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unicode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUnicode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUnicode(this);
		}
	}

	[RuleVersion(0)]
	public UnicodeContext unicode() {
		UnicodeContext _localctx = new UnicodeContext(Context, State);
		EnterRule(_localctx, 1182, RULE_unicode);
		try {
			State = 8198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNICODE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8192;
				Match(UNICODE_SYMBOL);
				State = 8194;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1019,Context) ) {
				case 1:
					{
					State = 8193;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8196;
				Match(BINARY_SYMBOL);
				State = 8197;
				Match(UNICODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsNumCodepointsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WsNumCodepointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wsNumCodepoints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWsNumCodepoints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWsNumCodepoints(this);
		}
	}

	[RuleVersion(0)]
	public WsNumCodepointsContext wsNumCodepoints() {
		WsNumCodepointsContext _localctx = new WsNumCodepointsContext(Context, State);
		EnterRule(_localctx, 1184, RULE_wsNumCodepoints);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8200;
			Match(OPEN_PAR_SYMBOL);
			State = 8201;
			real_ulong_number();
			State = 8202;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDatetimePrecisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TypeDatetimePrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDatetimePrecision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTypeDatetimePrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTypeDatetimePrecision(this);
		}
	}

	[RuleVersion(0)]
	public TypeDatetimePrecisionContext typeDatetimePrecision() {
		TypeDatetimePrecisionContext _localctx = new TypeDatetimePrecisionContext(Context, State);
		EnterRule(_localctx, 1186, RULE_typeDatetimePrecision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8204;
			Match(OPEN_PAR_SYMBOL);
			State = 8205;
			Match(INT_NUMBER);
			State = 8206;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDatetimePrecisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FunctionDatetimePrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDatetimePrecision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionDatetimePrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionDatetimePrecision(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDatetimePrecisionContext functionDatetimePrecision() {
		FunctionDatetimePrecisionContext _localctx = new FunctionDatetimePrecisionContext(Context, State);
		EnterRule(_localctx, 1188, RULE_functionDatetimePrecision);
		try {
			State = 8213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1021,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8209;
				parentheses();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8210;
				Match(OPEN_PAR_SYMBOL);
				State = 8211;
				Match(INT_NUMBER);
				State = 8212;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCharsetName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCharsetName(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameContext charsetName() {
		CharsetNameContext _localctx = new CharsetNameContext(Context, State);
		EnterRule(_localctx, 1190, RULE_charsetName);
		try {
			State = 8219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1022,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8215;
				textOrIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8216;
				Match(BINARY_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8217;
				if (!(this.isServerVersionLt80011())) throw new FailedPredicateException(this, "this.isServerVersionLt80011()");
				State = 8218;
				Match(DEFAULT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCollationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCollationName(this);
		}
	}

	[RuleVersion(0)]
	public CollationNameContext collationName() {
		CollationNameContext _localctx = new CollationNameContext(Context, State);
		EnterRule(_localctx, 1192, RULE_collationName);
		try {
			State = 8226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1023,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8221;
				textOrIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8222;
				if (!(this.isServerVersionLt80011())) throw new FailedPredicateException(this, "this.isServerVersionLt80011()");
				State = 8223;
				Match(DEFAULT_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8224;
				if (!(this.isServerVersionGe80018())) throw new FailedPredicateException(this, "this.isServerVersionGe80018()");
				State = 8225;
				Match(BINARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionContext[] createTableOption() {
			return GetRuleContexts<CreateTableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionContext createTableOption(int i) {
			return GetRuleContext<CreateTableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateTableOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOptions(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionsContext createTableOptions() {
		CreateTableOptionsContext _localctx = new CreateTableOptionsContext(Context, State);
		EnterRule(_localctx, 1194, RULE_createTableOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8228;
			createTableOption();
			State = 8235;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1025,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8230;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1024,Context) ) {
					case 1:
						{
						State = 8229;
						Match(COMMA_SYMBOL);
						}
						break;
					}
					State = 8232;
					createTableOption();
					}
					} 
				}
				State = 8237;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1025,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionsEtcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionsContext createTableOptions() {
			return GetRuleContext<CreateTableOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatePartitioningEtcContext createPartitioningEtc() {
			return GetRuleContext<CreatePartitioningEtcContext>(0);
		}
		public CreateTableOptionsEtcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOptionsEtc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOptionsEtc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOptionsEtc(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionsEtcContext createTableOptionsEtc() {
		CreateTableOptionsEtcContext _localctx = new CreateTableOptionsEtcContext(Context, State);
		EnterRule(_localctx, 1196, RULE_createTableOptionsEtc);
		try {
			State = 8243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1027,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8238;
				createTableOptions();
				State = 8240;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1026,Context) ) {
				case 1:
					{
					State = 8239;
					createPartitioningEtc();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8242;
				createPartitioningEtc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatePartitioningEtcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DuplicateAsQeContext duplicateAsQe() {
			return GetRuleContext<DuplicateAsQeContext>(0);
		}
		public CreatePartitioningEtcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createPartitioningEtc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreatePartitioningEtc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreatePartitioningEtc(this);
		}
	}

	[RuleVersion(0)]
	public CreatePartitioningEtcContext createPartitioningEtc() {
		CreatePartitioningEtcContext _localctx = new CreatePartitioningEtcContext(Context, State);
		EnterRule(_localctx, 1198, RULE_createPartitioningEtc);
		try {
			State = 8250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1029,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8245;
				partitionClause();
				State = 8247;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1028,Context) ) {
				case 1:
					{
					State = 8246;
					duplicateAsQe();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8249;
				duplicateAsQe();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionsSpaceSeparatedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionContext[] createTableOption() {
			return GetRuleContexts<CreateTableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionContext createTableOption(int i) {
			return GetRuleContext<CreateTableOptionContext>(i);
		}
		public CreateTableOptionsSpaceSeparatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOptionsSpaceSeparated; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOptionsSpaceSeparated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOptionsSpaceSeparated(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated() {
		CreateTableOptionsSpaceSeparatedContext _localctx = new CreateTableOptionsSpaceSeparatedContext(Context, State);
		EnterRule(_localctx, 1200, RULE_createTableOptionsSpaceSeparated);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8253;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8252;
					createTableOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8255;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1030,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionContext : ParserRuleContext {
		public IToken option;
		public IToken format;
		public IToken method;
		[System.Diagnostics.DebuggerNonUserCode] public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TernaryOptionContext ternaryOption() {
			return GetRuleContext<TernaryOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySQLParser.COMPACT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION_SYMBOL() { return GetToken(MySQLParser.UNION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCharsetContext defaultCharset() {
			return GetRuleContext<DefaultCharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCollationContext defaultCollation() {
			return GetRuleContext<DefaultCollationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK_SYMBOL() { return GetToken(MySQLParser.DISK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonAttributeContext jsonAttribute() {
			return GetRuleContext<JsonAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		public CreateTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOption(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionContext createTableOption() {
		CreateTableOptionContext _localctx = new CreateTableOptionContext(Context, State);
		EnterRule(_localctx, 1202, RULE_createTableOption);
		int _la;
		try {
			State = 8397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1056,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8257;
				_localctx.option = Match(ENGINE_SYMBOL);
				State = 8259;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1031,Context) ) {
				case 1:
					{
					State = 8258;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8261;
				engineRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8262;
				if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				State = 8263;
				_localctx.option = Match(SECONDARY_ENGINE_SYMBOL);
				State = 8265;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1032,Context) ) {
				case 1:
					{
					State = 8264;
					equal();
					}
					break;
				}
				State = 8269;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1033,Context) ) {
				case 1:
					{
					State = 8267;
					Match(NULL_SYMBOL);
					}
					break;
				case 2:
					{
					State = 8268;
					textOrIdentifier();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8271;
				_localctx.option = Match(MAX_ROWS_SYMBOL);
				State = 8273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8272;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8275;
				ulonglongNumber();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8276;
				_localctx.option = Match(MIN_ROWS_SYMBOL);
				State = 8278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8277;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8280;
				ulonglongNumber();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8281;
				_localctx.option = Match(AVG_ROW_LENGTH_SYMBOL);
				State = 8283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8282;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8285;
				ulonglongNumber();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8286;
				_localctx.option = Match(PASSWORD_SYMBOL);
				State = 8288;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1037,Context) ) {
				case 1:
					{
					State = 8287;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8290;
				textStringLiteral();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8291;
				_localctx.option = Match(COMMENT_SYMBOL);
				State = 8293;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1038,Context) ) {
				case 1:
					{
					State = 8292;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8295;
				textStringLiteral();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8296;
				_localctx.option = Match(COMPRESSION_SYMBOL);
				State = 8298;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1039,Context) ) {
				case 1:
					{
					State = 8297;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8300;
				textString();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8301;
				_localctx.option = Match(ENCRYPTION_SYMBOL);
				State = 8303;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1040,Context) ) {
				case 1:
					{
					State = 8302;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8305;
				textString();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8306;
				_localctx.option = Match(AUTO_INCREMENT_SYMBOL);
				State = 8308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8307;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8310;
				ulonglongNumber();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8311;
				_localctx.option = Match(PACK_KEYS_SYMBOL);
				State = 8313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8312;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8315;
				ternaryOption();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 8316;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 7L) != 0)) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8317;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8320;
				ternaryOption();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 8321;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHECKSUM_SYMBOL || _la==TABLE_CHECKSUM_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8322;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8325;
				ulong_number();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 8326;
				_localctx.option = Match(DELAY_KEY_WRITE_SYMBOL);
				State = 8328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8327;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8330;
				ulong_number();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 8331;
				_localctx.option = Match(ROW_FORMAT_SYMBOL);
				State = 8333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8332;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8335;
				_localctx.format = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & 35184372088837L) != 0) || _la==DYNAMIC_SYMBOL || _la==FIXED_SYMBOL || _la==REDUNDANT_SYMBOL) ) {
					_localctx.format = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 8336;
				_localctx.option = Match(UNION_SYMBOL);
				State = 8338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8337;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8340;
				Match(OPEN_PAR_SYMBOL);
				State = 8341;
				tableRefList();
				State = 8342;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 8344;
				defaultCharset();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 8345;
				defaultCollation();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 8346;
				_localctx.option = Match(INSERT_METHOD_SYMBOL);
				State = 8348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8347;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8350;
				_localctx.method = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NO_SYMBOL) ) {
					_localctx.method = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 8351;
				_localctx.option = Match(DATA_SYMBOL);
				State = 8352;
				Match(DIRECTORY_SYMBOL);
				State = 8354;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1049,Context) ) {
				case 1:
					{
					State = 8353;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8356;
				textString();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 8357;
				_localctx.option = Match(INDEX_SYMBOL);
				State = 8358;
				Match(DIRECTORY_SYMBOL);
				State = 8360;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1050,Context) ) {
				case 1:
					{
					State = 8359;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8362;
				textString();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 8363;
				_localctx.option = Match(TABLESPACE_SYMBOL);
				State = 8365;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1051,Context) ) {
				case 1:
					{
					State = 8364;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8367;
				identifier();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 8368;
				_localctx.option = Match(STORAGE_SYMBOL);
				State = 8369;
				_la = TokenStream.LA(1);
				if ( !(_la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 8370;
				_localctx.option = Match(CONNECTION_SYMBOL);
				State = 8372;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1052,Context) ) {
				case 1:
					{
					State = 8371;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8374;
				textString();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 8375;
				_localctx.option = Match(KEY_BLOCK_SIZE_SYMBOL);
				State = 8377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8376;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8379;
				ulonglongNumber();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 8380;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 8381;
				_localctx.option = Match(START_SYMBOL);
				State = 8382;
				Match(TRANSACTION_SYMBOL);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 8383;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 8384;
				_localctx.option = Match(ENGINE_ATTRIBUTE_SYMBOL);
				State = 8386;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1054,Context) ) {
				case 1:
					{
					State = 8385;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8388;
				jsonAttribute();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 8389;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 8390;
				_localctx.option = Match(SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
				State = 8392;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1055,Context) ) {
				case 1:
					{
					State = 8391;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8394;
				jsonAttribute();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 8395;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 8396;
				tsOptionAutoextendSize();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TernaryOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternaryOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTernaryOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTernaryOption(this);
		}
	}

	[RuleVersion(0)]
	public TernaryOptionContext ternaryOption() {
		TernaryOptionContext _localctx = new TernaryOptionContext(Context, State);
		EnterRule(_localctx, 1204, RULE_ternaryOption);
		try {
			State = 8401;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8399;
				ulong_number();
				}
				break;
			case DEFAULT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8400;
				Match(DEFAULT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCollationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySQLParser.COLLATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCollationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCollation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefaultCollation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefaultCollation(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCollationContext defaultCollation() {
		DefaultCollationContext _localctx = new DefaultCollationContext(Context, State);
		EnterRule(_localctx, 1206, RULE_defaultCollation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 8403;
				Match(DEFAULT_SYMBOL);
				}
			}

			State = 8406;
			Match(COLLATE_SYMBOL);
			State = 8408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1059,Context) ) {
			case 1:
				{
				State = 8407;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 8410;
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultEncryptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultEncryptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultEncryption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefaultEncryption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefaultEncryption(this);
		}
	}

	[RuleVersion(0)]
	public DefaultEncryptionContext defaultEncryption() {
		DefaultEncryptionContext _localctx = new DefaultEncryptionContext(Context, State);
		EnterRule(_localctx, 1208, RULE_defaultEncryption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 8412;
				Match(DEFAULT_SYMBOL);
				}
			}

			State = 8415;
			Match(ENCRYPTION_SYMBOL);
			State = 8417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1061,Context) ) {
			case 1:
				{
				State = 8416;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 8419;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCharsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCharsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCharset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefaultCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefaultCharset(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCharsetContext defaultCharset() {
		DefaultCharsetContext _localctx = new DefaultCharsetContext(Context, State);
		EnterRule(_localctx, 1210, RULE_defaultCharset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 8421;
				Match(DEFAULT_SYMBOL);
				}
			}

			State = 8424;
			charset();
			State = 8426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1063,Context) ) {
			case 1:
				{
				State = 8425;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 8428;
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionTypeDefContext partitionTypeDef() {
			return GetRuleContext<PartitionTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubPartitionsContext subPartitions() {
			return GetRuleContext<SubPartitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionClause(this);
		}
	}

	[RuleVersion(0)]
	public PartitionClauseContext partitionClause() {
		PartitionClauseContext _localctx = new PartitionClauseContext(Context, State);
		EnterRule(_localctx, 1212, RULE_partitionClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8430;
			Match(PARTITION_SYMBOL);
			State = 8431;
			Match(BY_SYMBOL);
			State = 8432;
			partitionTypeDef();
			State = 8435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1064,Context) ) {
			case 1:
				{
				State = 8433;
				Match(PARTITIONS_SYMBOL);
				State = 8434;
				real_ulong_number();
				}
				break;
			}
			State = 8438;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1065,Context) ) {
			case 1:
				{
				State = 8437;
				subPartitions();
				}
				break;
			}
			State = 8441;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1066,Context) ) {
			case 1:
				{
				State = 8440;
				partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionTypeDefContext : ParserRuleContext {
		public PartitionTypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionTypeDef; } }
	 
		public PartitionTypeDefContext() { }
		public virtual void CopyFrom(PartitionTypeDefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionDefRangeListContext : PartitionTypeDefContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_SYMBOL() { return GetToken(MySQLParser.RANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SYMBOL() { return GetToken(MySQLParser.LIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public PartitionDefRangeListContext(PartitionTypeDefContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefRangeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefRangeList(this);
		}
	}
	public partial class PartitionDefKeyContext : PartitionTypeDefContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySQLParser.LINEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return GetRuleContext<PartitionKeyAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public PartitionDefKeyContext(PartitionTypeDefContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefKey(this);
		}
	}
	public partial class PartitionDefHashContext : PartitionTypeDefContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionDefHashContext(PartitionTypeDefContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefHash(this);
		}
	}

	[RuleVersion(0)]
	public PartitionTypeDefContext partitionTypeDef() {
		PartitionTypeDefContext _localctx = new PartitionTypeDefContext(Context, State);
		EnterRule(_localctx, 1214, RULE_partitionTypeDef);
		int _la;
		try {
			State = 8476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1073,Context) ) {
			case 1:
				_localctx = new PartitionDefKeyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 8444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					State = 8443;
					Match(LINEAR_SYMBOL);
					}
				}

				State = 8446;
				Match(KEY_SYMBOL);
				State = 8448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					State = 8447;
					partitionKeyAlgorithm();
					}
				}

				State = 8450;
				Match(OPEN_PAR_SYMBOL);
				State = 8452;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1069,Context) ) {
				case 1:
					{
					State = 8451;
					identifierList();
					}
					break;
				}
				State = 8454;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				_localctx = new PartitionDefHashContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 8456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					State = 8455;
					Match(LINEAR_SYMBOL);
					}
				}

				State = 8458;
				Match(HASH_SYMBOL);
				State = 8459;
				Match(OPEN_PAR_SYMBOL);
				State = 8460;
				bitExpr(0);
				State = 8461;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				_localctx = new PartitionDefRangeListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 8463;
				_la = TokenStream.LA(1);
				if ( !(_la==LIST_SYMBOL || _la==RANGE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8474;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 8464;
					Match(OPEN_PAR_SYMBOL);
					State = 8465;
					bitExpr(0);
					State = 8466;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				case COLUMNS_SYMBOL:
					{
					State = 8468;
					Match(COLUMNS_SYMBOL);
					State = 8469;
					Match(OPEN_PAR_SYMBOL);
					State = 8471;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1071,Context) ) {
					case 1:
						{
						State = 8470;
						identifierList();
						}
						break;
					}
					State = 8473;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubPartitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySQLParser.LINEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return GetRuleContext<PartitionKeyAlgorithmContext>(0);
		}
		public SubPartitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subPartitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSubPartitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSubPartitions(this);
		}
	}

	[RuleVersion(0)]
	public SubPartitionsContext subPartitions() {
		SubPartitionsContext _localctx = new SubPartitionsContext(Context, State);
		EnterRule(_localctx, 1216, RULE_subPartitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8478;
			Match(SUBPARTITION_SYMBOL);
			State = 8479;
			Match(BY_SYMBOL);
			State = 8481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINEAR_SYMBOL) {
				{
				State = 8480;
				Match(LINEAR_SYMBOL);
				}
			}

			State = 8493;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HASH_SYMBOL:
				{
				State = 8483;
				Match(HASH_SYMBOL);
				State = 8484;
				Match(OPEN_PAR_SYMBOL);
				State = 8485;
				bitExpr(0);
				State = 8486;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
				{
				State = 8488;
				Match(KEY_SYMBOL);
				State = 8490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					State = 8489;
					partitionKeyAlgorithm();
					}
				}

				State = 8492;
				identifierListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1077,Context) ) {
			case 1:
				{
				State = 8495;
				Match(SUBPARTITIONS_SYMBOL);
				State = 8496;
				real_ulong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionKeyAlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public PartitionKeyAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionKeyAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionKeyAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionKeyAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
		PartitionKeyAlgorithmContext _localctx = new PartitionKeyAlgorithmContext(Context, State);
		EnterRule(_localctx, 1218, RULE_partitionKeyAlgorithm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8499;
			Match(ALGORITHM_SYMBOL);
			State = 8500;
			Match(EQUAL_OPERATOR);
			State = 8501;
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinitions(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionsContext partitionDefinitions() {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(Context, State);
		EnterRule(_localctx, 1220, RULE_partitionDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8503;
			Match(OPEN_PAR_SYMBOL);
			State = 8504;
			partitionDefinition();
			State = 8509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8505;
				Match(COMMA_SYMBOL);
				State = 8506;
				partitionDefinition();
				}
				}
				State = 8511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8512;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySQLParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySQLParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN_SYMBOL() { return GetToken(MySQLParser.THAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValuesInContext partitionValuesIn() {
			return GetRuleContext<PartitionValuesInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemListParenContext partitionValueItemListParen() {
			return GetRuleContext<PartitionValueItemListParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE_SYMBOL() { return GetToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionContext partitionDefinition() {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 1222, RULE_partitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8514;
			Match(PARTITION_SYMBOL);
			State = 8515;
			identifier();
			State = 8526;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1080,Context) ) {
			case 1:
				{
				State = 8516;
				Match(VALUES_SYMBOL);
				State = 8517;
				Match(LESS_SYMBOL);
				State = 8518;
				Match(THAN_SYMBOL);
				State = 8521;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 8519;
					partitionValueItemListParen();
					}
					break;
				case MAXVALUE_SYMBOL:
					{
					State = 8520;
					Match(MAXVALUE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				State = 8523;
				Match(VALUES_SYMBOL);
				State = 8524;
				Match(IN_SYMBOL);
				State = 8525;
				partitionValuesIn();
				}
				break;
			}
			State = 8531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || _la==INDEX_SYMBOL || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & 1099512152065L) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL) {
				{
				{
				State = 8528;
				partitionOption();
				}
				}
				State = 8533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 8534;
				Match(OPEN_PAR_SYMBOL);
				State = 8535;
				subpartitionDefinition();
				State = 8540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 8536;
					Match(COMMA_SYMBOL);
					State = 8537;
					subpartitionDefinition();
					}
					}
					State = 8542;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 8543;
				Match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValuesInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemListParenContext[] partitionValueItemListParen() {
			return GetRuleContexts<PartitionValueItemListParenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemListParenContext partitionValueItemListParen(int i) {
			return GetRuleContext<PartitionValueItemListParenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValuesInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValuesIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionValuesIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionValuesIn(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValuesInContext partitionValuesIn() {
		PartitionValuesInContext _localctx = new PartitionValuesInContext(Context, State);
		EnterRule(_localctx, 1224, RULE_partitionValuesIn);
		int _la;
		try {
			State = 8559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1085,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8547;
				partitionValueItemListParen();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8548;
				Match(OPEN_PAR_SYMBOL);
				State = 8549;
				partitionValueItemListParen();
				State = 8554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 8550;
					Match(COMMA_SYMBOL);
					State = 8551;
					partitionValueItemListParen();
					}
					}
					State = 8556;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 8557;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionOptionContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public PartitionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionOption(this);
		}
	}

	[RuleVersion(0)]
	public PartitionOptionContext partitionOption() {
		PartitionOptionContext _localctx = new PartitionOptionContext(Context, State);
		EnterRule(_localctx, 1226, RULE_partitionOption);
		int _la;
		try {
			State = 8595;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLESPACE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8561;
				_localctx.option = Match(TABLESPACE_SYMBOL);
				State = 8563;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1086,Context) ) {
				case 1:
					{
					State = 8562;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8565;
				identifier();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					State = 8566;
					Match(STORAGE_SYMBOL);
					}
				}

				State = 8569;
				_localctx.option = Match(ENGINE_SYMBOL);
				State = 8571;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1088,Context) ) {
				case 1:
					{
					State = 8570;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8573;
				engineRef();
				}
				break;
			case NODEGROUP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8574;
				_localctx.option = Match(NODEGROUP_SYMBOL);
				State = 8576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8575;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8578;
				real_ulong_number();
				}
				break;
			case MAX_ROWS_SYMBOL:
			case MIN_ROWS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8579;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MAX_ROWS_SYMBOL || _la==MIN_ROWS_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8580;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8583;
				real_ulong_number();
				}
				break;
			case DATA_SYMBOL:
			case INDEX_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8584;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATA_SYMBOL || _la==INDEX_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8585;
				Match(DIRECTORY_SYMBOL);
				State = 8587;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1091,Context) ) {
				case 1:
					{
					State = 8586;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8589;
				textLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8590;
				_localctx.option = Match(COMMENT_SYMBOL);
				State = 8592;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1092,Context) ) {
				case 1:
					{
					State = 8591;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8594;
				textLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSubpartitionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSubpartitionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionDefinitionContext subpartitionDefinition() {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 1228, RULE_subpartitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8597;
			Match(SUBPARTITION_SYMBOL);
			State = 8598;
			textOrIdentifier();
			State = 8602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || _la==INDEX_SYMBOL || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & 1099512152065L) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL) {
				{
				{
				State = 8599;
				partitionOption();
				}
				}
				State = 8604;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValueItemListParenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemContext[] partitionValueItem() {
			return GetRuleContexts<PartitionValueItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemContext partitionValueItem(int i) {
			return GetRuleContext<PartitionValueItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValueItemListParenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValueItemListParen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionValueItemListParen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionValueItemListParen(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValueItemListParenContext partitionValueItemListParen() {
		PartitionValueItemListParenContext _localctx = new PartitionValueItemListParenContext(Context, State);
		EnterRule(_localctx, 1230, RULE_partitionValueItemListParen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8605;
			Match(OPEN_PAR_SYMBOL);
			State = 8606;
			partitionValueItem();
			State = 8611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8607;
				Match(COMMA_SYMBOL);
				State = 8608;
				partitionValueItem();
				}
				}
				State = 8613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8614;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValueItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE_SYMBOL() { return GetToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
		public PartitionValueItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValueItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionValueItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionValueItem(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValueItemContext partitionValueItem() {
		PartitionValueItemContext _localctx = new PartitionValueItemContext(Context, State);
		EnterRule(_localctx, 1232, RULE_partitionValueItem);
		try {
			State = 8618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1096,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8616;
				bitExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8617;
				Match(MAXVALUE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinerClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public DefinerClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definerClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefinerClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefinerClause(this);
		}
	}

	[RuleVersion(0)]
	public DefinerClauseContext definerClause() {
		DefinerClauseContext _localctx = new DefinerClauseContext(Context, State);
		EnterRule(_localctx, 1234, RULE_definerClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8620;
			Match(DEFINER_SYMBOL);
			State = 8621;
			Match(EQUAL_OPERATOR);
			State = 8622;
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_SYMBOL() { return GetToken(MySQLParser.IF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIfExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIfExists(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsContext ifExists() {
		IfExistsContext _localctx = new IfExistsContext(Context, State);
		EnterRule(_localctx, 1236, RULE_ifExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8624;
			Match(IF_SYMBOL);
			State = 8625;
			Match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PersistedVariableIdentifierContext persistedVariableIdentifier() {
			return GetRuleContext<PersistedVariableIdentifierContext>(0);
		}
		public IfExistsIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExistsIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIfExistsIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIfExistsIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsIdentifierContext ifExistsIdentifier() {
		IfExistsIdentifierContext _localctx = new IfExistsIdentifierContext(Context, State);
		EnterRule(_localctx, 1238, RULE_ifExistsIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8627;
			ifExists();
			State = 8628;
			persistedVariableIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PersistedVariableIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public PersistedVariableIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_persistedVariableIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPersistedVariableIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPersistedVariableIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public PersistedVariableIdentifierContext persistedVariableIdentifier() {
		PersistedVariableIdentifierContext _localctx = new PersistedVariableIdentifierContext(Context, State);
		EnterRule(_localctx, 1240, RULE_persistedVariableIdentifier);
		try {
			State = 8637;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1098,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8630;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8631;
				if (!(this.isServerVersionGe80032())) throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
				State = 8635;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1097,Context) ) {
				case 1:
					{
					State = 8632;
					qualifiedIdentifier();
					}
					break;
				case 2:
					{
					State = 8633;
					Match(DEFAULT_SYMBOL);
					State = 8634;
					dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfNotExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_SYMBOL() { return GetToken(MySQLParser.IF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifNotExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIfNotExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIfNotExists(this);
		}
	}

	[RuleVersion(0)]
	public IfNotExistsContext ifNotExists() {
		IfNotExistsContext _localctx = new IfNotExistsContext(Context, State);
		EnterRule(_localctx, 1242, RULE_ifNotExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8639;
			Match(IF_SYMBOL);
			State = 8640;
			notRule();
			State = 8641;
			Match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IgnoreUnknownUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public IgnoreUnknownUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ignoreUnknownUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIgnoreUnknownUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIgnoreUnknownUser(this);
		}
	}

	[RuleVersion(0)]
	public IgnoreUnknownUserContext ignoreUnknownUser() {
		IgnoreUnknownUserContext _localctx = new IgnoreUnknownUserContext(Context, State);
		EnterRule(_localctx, 1244, RULE_ignoreUnknownUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8643;
			Match(IGNORE_SYMBOL);
			State = 8644;
			Match(UNKNOWN_SYMBOL);
			State = 8645;
			Match(USER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter() {
			return GetRuleContext<FunctionParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_SYMBOL() { return GetToken(MySQLParser.OUT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT_SYMBOL() { return GetToken(MySQLParser.INOUT_SYMBOL, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProcedureParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProcedureParameter(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
		EnterRule(_localctx, 1246, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1099,Context) ) {
			case 1:
				{
				State = 8647;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INOUT_SYMBOL || _la==IN_SYMBOL || _la==OUT_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 8650;
			functionParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterNameContext parameterName() {
			return GetRuleContext<ParameterNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeWithOptCollateContext typeWithOptCollate() {
			return GetRuleContext<TypeWithOptCollateContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 1248, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8652;
			parameterName();
			State = 8653;
			typeWithOptCollate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySQLParser.COLLATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCollate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCollate(this);
		}
	}

	[RuleVersion(0)]
	public CollateContext collate() {
		CollateContext _localctx = new CollateContext(Context, State);
		EnterRule(_localctx, 1250, RULE_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8655;
			Match(COLLATE_SYMBOL);
			State = 8656;
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeWithOptCollateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public TypeWithOptCollateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeWithOptCollate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTypeWithOptCollate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTypeWithOptCollate(this);
		}
	}

	[RuleVersion(0)]
	public TypeWithOptCollateContext typeWithOptCollate() {
		TypeWithOptCollateContext _localctx = new TypeWithOptCollateContext(Context, State);
		EnterRule(_localctx, 1252, RULE_typeWithOptCollate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8658;
			dataType();
			State = 8660;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1100,Context) ) {
			case 1:
				{
				State = 8659;
				collate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaIdentifierPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext[] schemaRef() {
			return GetRuleContexts<SchemaRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef(int i) {
			return GetRuleContext<SchemaRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SchemaIdentifierPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaIdentifierPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSchemaIdentifierPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSchemaIdentifierPair(this);
		}
	}

	[RuleVersion(0)]
	public SchemaIdentifierPairContext schemaIdentifierPair() {
		SchemaIdentifierPairContext _localctx = new SchemaIdentifierPairContext(Context, State);
		EnterRule(_localctx, 1254, RULE_schemaIdentifierPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8662;
			Match(OPEN_PAR_SYMBOL);
			State = 8663;
			schemaRef();
			State = 8664;
			Match(COMMA_SYMBOL);
			State = 8665;
			schemaRef();
			State = 8666;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewRefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefContext[] viewRef() {
			return GetRuleContexts<ViewRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefContext viewRef(int i) {
			return GetRuleContext<ViewRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ViewRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewRefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewRefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewRefList(this);
		}
	}

	[RuleVersion(0)]
	public ViewRefListContext viewRefList() {
		ViewRefListContext _localctx = new ViewRefListContext(Context, State);
		EnterRule(_localctx, 1256, RULE_viewRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8668;
			viewRef();
			State = 8673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8669;
				Match(COMMA_SYMBOL);
				State = 8670;
				viewRef();
				}
				}
				State = 8675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UpdateElementContext[] updateElement() {
			return GetRuleContexts<UpdateElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateElementContext updateElement(int i) {
			return GetRuleContext<UpdateElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUpdateList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUpdateList(this);
		}
	}

	[RuleVersion(0)]
	public UpdateListContext updateList() {
		UpdateListContext _localctx = new UpdateListContext(Context, State);
		EnterRule(_localctx, 1258, RULE_updateList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8676;
			updateElement();
			State = 8681;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1102,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8677;
					Match(COMMA_SYMBOL);
					State = 8678;
					updateElement();
					}
					} 
				}
				State = 8683;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1102,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public UpdateElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUpdateElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUpdateElement(this);
		}
	}

	[RuleVersion(0)]
	public UpdateElementContext updateElement() {
		UpdateElementContext _localctx = new UpdateElementContext(Context, State);
		EnterRule(_localctx, 1260, RULE_updateElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8684;
			columnRef();
			State = 8685;
			Match(EQUAL_OPERATOR);
			State = 8688;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1103,Context) ) {
			case 1:
				{
				State = 8686;
				expr(0);
				}
				break;
			case 2:
				{
				State = 8687;
				Match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CharsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCharsetClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCharsetClause(this);
		}
	}

	[RuleVersion(0)]
	public CharsetClauseContext charsetClause() {
		CharsetClauseContext _localctx = new CharsetClauseContext(Context, State);
		EnterRule(_localctx, 1262, RULE_charsetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8690;
			charset();
			State = 8691;
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldTermContext[] fieldTerm() {
			return GetRuleContexts<FieldTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldTermContext fieldTerm(int i) {
			return GetRuleContext<FieldTermContext>(i);
		}
		public FieldsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldsClause(this);
		}
	}

	[RuleVersion(0)]
	public FieldsClauseContext fieldsClause() {
		FieldsClauseContext _localctx = new FieldsClauseContext(Context, State);
		EnterRule(_localctx, 1264, RULE_fieldsClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8693;
			Match(COLUMNS_SYMBOL);
			State = 8695;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8694;
					fieldTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8697;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1104,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED_SYMBOL() { return GetToken(MySQLParser.TERMINATED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCLOSED_SYMBOL() { return GetToken(MySQLParser.ENCLOSED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONALLY_SYMBOL() { return GetToken(MySQLParser.OPTIONALLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPED_SYMBOL() { return GetToken(MySQLParser.ESCAPED_SYMBOL, 0); }
		public FieldTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldTerm(this);
		}
	}

	[RuleVersion(0)]
	public FieldTermContext fieldTerm() {
		FieldTermContext _localctx = new FieldTermContext(Context, State);
		EnterRule(_localctx, 1266, RULE_fieldTerm);
		int _la;
		try {
			State = 8711;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERMINATED_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8699;
				Match(TERMINATED_SYMBOL);
				State = 8700;
				Match(BY_SYMBOL);
				State = 8701;
				textString();
				}
				break;
			case ENCLOSED_SYMBOL:
			case OPTIONALLY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONALLY_SYMBOL) {
					{
					State = 8702;
					Match(OPTIONALLY_SYMBOL);
					}
				}

				State = 8705;
				Match(ENCLOSED_SYMBOL);
				State = 8706;
				Match(BY_SYMBOL);
				State = 8707;
				textString();
				}
				break;
			case ESCAPED_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8708;
				Match(ESCAPED_SYMBOL);
				State = 8709;
				Match(BY_SYMBOL);
				State = 8710;
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinesClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES_SYMBOL() { return GetToken(MySQLParser.LINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineTermContext[] lineTerm() {
			return GetRuleContexts<LineTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineTermContext lineTerm(int i) {
			return GetRuleContext<LineTermContext>(i);
		}
		public LinesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linesClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLinesClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLinesClause(this);
		}
	}

	[RuleVersion(0)]
	public LinesClauseContext linesClause() {
		LinesClauseContext _localctx = new LinesClauseContext(Context, State);
		EnterRule(_localctx, 1268, RULE_linesClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8713;
			Match(LINES_SYMBOL);
			State = 8715;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8714;
					lineTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8717;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1107,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED_SYMBOL() { return GetToken(MySQLParser.TERMINATED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTING_SYMBOL() { return GetToken(MySQLParser.STARTING_SYMBOL, 0); }
		public LineTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLineTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLineTerm(this);
		}
	}

	[RuleVersion(0)]
	public LineTermContext lineTerm() {
		LineTermContext _localctx = new LineTermContext(Context, State);
		EnterRule(_localctx, 1270, RULE_lineTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8719;
			_la = TokenStream.LA(1);
			if ( !(_la==STARTING_SYMBOL || _la==TERMINATED_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8720;
			Match(BY_SYMBOL);
			State = 8721;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserContext[] user() {
			return GetRuleContexts<UserContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user(int i) {
			return GetRuleContext<UserContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUserList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUserList(this);
		}
	}

	[RuleVersion(0)]
	public UserListContext userList() {
		UserListContext _localctx = new UserListContext(Context, State);
		EnterRule(_localctx, 1272, RULE_userList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8723;
			user();
			State = 8728;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1108,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8724;
					Match(COMMA_SYMBOL);
					State = 8725;
					user();
					}
					} 
				}
				State = 8730;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1108,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserContext[] createUser() {
			return GetRuleContexts<CreateUserContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserContext createUser(int i) {
			return GetRuleContext<CreateUserContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateUserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUserList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUserList(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserListContext createUserList() {
		CreateUserListContext _localctx = new CreateUserListContext(Context, State);
		EnterRule(_localctx, 1274, RULE_createUserList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8731;
			createUser();
			State = 8736;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1109,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8732;
					Match(COMMA_SYMBOL);
					State = 8733;
					createUser();
					}
					} 
				}
				State = 8738;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1109,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentificationContext identification() {
			return GetRuleContext<IdentificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginContext identifiedWithPlugin() {
			return GetRuleContext<IdentifiedWithPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserWithMfaContext createUserWithMfa() {
			return GetRuleContext<CreateUserWithMfaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitialAuthContext initialAuth() {
			return GetRuleContext<InitialAuthContext>(0);
		}
		public CreateUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUser(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserContext createUser() {
		CreateUserContext _localctx = new CreateUserContext(Context, State);
		EnterRule(_localctx, 1276, RULE_createUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8739;
			user();
			State = 8749;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1112,Context) ) {
			case 1:
				{
				State = 8740;
				identification();
				State = 8742;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1110,Context) ) {
				case 1:
					{
					State = 8741;
					createUserWithMfa();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 8744;
				identifiedWithPlugin();
				State = 8746;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1111,Context) ) {
				case 1:
					{
					State = 8745;
					initialAuth();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 8748;
				createUserWithMfa();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserWithMfaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND_SYMBOL() { return GetTokens(MySQLParser.AND_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL(int i) {
			return GetToken(MySQLParser.AND_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentificationContext[] identification() {
			return GetRuleContexts<IdentificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentificationContext identification(int i) {
			return GetRuleContext<IdentificationContext>(i);
		}
		public CreateUserWithMfaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserWithMfa; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUserWithMfa(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUserWithMfa(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserWithMfaContext createUserWithMfa() {
		CreateUserWithMfaContext _localctx = new CreateUserWithMfaContext(Context, State);
		EnterRule(_localctx, 1278, RULE_createUserWithMfa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8751;
			Match(AND_SYMBOL);
			State = 8752;
			identification();
			State = 8755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1113,Context) ) {
			case 1:
				{
				State = 8753;
				Match(AND_SYMBOL);
				State = 8754;
				identification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByPasswordContext identifiedByPassword() {
			return GetRuleContext<IdentifiedByPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByRandomPasswordContext identifiedByRandomPassword() {
			return GetRuleContext<IdentifiedByRandomPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginContext identifiedWithPlugin() {
			return GetRuleContext<IdentifiedWithPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginAsAuthContext identifiedWithPluginAsAuth() {
			return GetRuleContext<IdentifiedWithPluginAsAuthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginByPasswordContext identifiedWithPluginByPassword() {
			return GetRuleContext<IdentifiedWithPluginByPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginByRandomPasswordContext identifiedWithPluginByRandomPassword() {
			return GetRuleContext<IdentifiedWithPluginByRandomPasswordContext>(0);
		}
		public IdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentification(this);
		}
	}

	[RuleVersion(0)]
	public IdentificationContext identification() {
		IdentificationContext _localctx = new IdentificationContext(Context, State);
		EnterRule(_localctx, 1280, RULE_identification);
		try {
			State = 8763;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8757;
				identifiedByPassword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8758;
				identifiedByRandomPassword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8759;
				identifiedWithPlugin();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8760;
				identifiedWithPluginAsAuth();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8761;
				identifiedWithPluginByPassword();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8762;
				identifiedWithPluginByRandomPassword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiedByPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public IdentifiedByPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiedByPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifiedByPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifiedByPassword(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiedByPasswordContext identifiedByPassword() {
		IdentifiedByPasswordContext _localctx = new IdentifiedByPasswordContext(Context, State);
		EnterRule(_localctx, 1282, RULE_identifiedByPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8765;
			Match(IDENTIFIED_SYMBOL);
			State = 8766;
			Match(BY_SYMBOL);
			State = 8767;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiedByRandomPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySQLParser.RANDOM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public IdentifiedByRandomPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiedByRandomPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifiedByRandomPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifiedByRandomPassword(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiedByRandomPasswordContext identifiedByRandomPassword() {
		IdentifiedByRandomPasswordContext _localctx = new IdentifiedByRandomPasswordContext(Context, State);
		EnterRule(_localctx, 1284, RULE_identifiedByRandomPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8769;
			Match(IDENTIFIED_SYMBOL);
			State = 8770;
			Match(BY_SYMBOL);
			State = 8771;
			Match(RANDOM_SYMBOL);
			State = 8772;
			Match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiedWithPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public IdentifiedWithPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiedWithPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifiedWithPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifiedWithPlugin(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiedWithPluginContext identifiedWithPlugin() {
		IdentifiedWithPluginContext _localctx = new IdentifiedWithPluginContext(Context, State);
		EnterRule(_localctx, 1286, RULE_identifiedWithPlugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8774;
			Match(IDENTIFIED_SYMBOL);
			State = 8775;
			Match(WITH_SYMBOL);
			State = 8776;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiedWithPluginAsAuthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringHashContext textStringHash() {
			return GetRuleContext<TextStringHashContext>(0);
		}
		public IdentifiedWithPluginAsAuthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiedWithPluginAsAuth; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifiedWithPluginAsAuth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifiedWithPluginAsAuth(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiedWithPluginAsAuthContext identifiedWithPluginAsAuth() {
		IdentifiedWithPluginAsAuthContext _localctx = new IdentifiedWithPluginAsAuthContext(Context, State);
		EnterRule(_localctx, 1288, RULE_identifiedWithPluginAsAuth);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8778;
			Match(IDENTIFIED_SYMBOL);
			State = 8779;
			Match(WITH_SYMBOL);
			State = 8780;
			textOrIdentifier();
			State = 8781;
			Match(AS_SYMBOL);
			State = 8782;
			textStringHash();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiedWithPluginByPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public IdentifiedWithPluginByPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiedWithPluginByPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifiedWithPluginByPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifiedWithPluginByPassword(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiedWithPluginByPasswordContext identifiedWithPluginByPassword() {
		IdentifiedWithPluginByPasswordContext _localctx = new IdentifiedWithPluginByPasswordContext(Context, State);
		EnterRule(_localctx, 1290, RULE_identifiedWithPluginByPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8784;
			Match(IDENTIFIED_SYMBOL);
			State = 8785;
			Match(WITH_SYMBOL);
			State = 8786;
			textOrIdentifier();
			State = 8787;
			Match(BY_SYMBOL);
			State = 8788;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiedWithPluginByRandomPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySQLParser.RANDOM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public IdentifiedWithPluginByRandomPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiedWithPluginByRandomPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifiedWithPluginByRandomPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifiedWithPluginByRandomPassword(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiedWithPluginByRandomPasswordContext identifiedWithPluginByRandomPassword() {
		IdentifiedWithPluginByRandomPasswordContext _localctx = new IdentifiedWithPluginByRandomPasswordContext(Context, State);
		EnterRule(_localctx, 1292, RULE_identifiedWithPluginByRandomPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8790;
			Match(IDENTIFIED_SYMBOL);
			State = 8791;
			Match(WITH_SYMBOL);
			State = 8792;
			textOrIdentifier();
			State = 8793;
			Match(BY_SYMBOL);
			State = 8794;
			Match(RANDOM_SYMBOL);
			State = 8795;
			Match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialAuthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SYMBOL() { return GetToken(MySQLParser.INITIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHENTICATION_SYMBOL() { return GetToken(MySQLParser.AUTHENTICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByRandomPasswordContext identifiedByRandomPassword() {
			return GetRuleContext<IdentifiedByRandomPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginAsAuthContext identifiedWithPluginAsAuth() {
			return GetRuleContext<IdentifiedWithPluginAsAuthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByPasswordContext identifiedByPassword() {
			return GetRuleContext<IdentifiedByPasswordContext>(0);
		}
		public InitialAuthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialAuth; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInitialAuth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInitialAuth(this);
		}
	}

	[RuleVersion(0)]
	public InitialAuthContext initialAuth() {
		InitialAuthContext _localctx = new InitialAuthContext(Context, State);
		EnterRule(_localctx, 1294, RULE_initialAuth);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8797;
			Match(INITIAL_SYMBOL);
			State = 8798;
			Match(AUTHENTICATION_SYMBOL);
			State = 8802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1115,Context) ) {
			case 1:
				{
				State = 8799;
				identifiedByRandomPassword();
				}
				break;
			case 2:
				{
				State = 8800;
				identifiedWithPluginAsAuth();
				}
				break;
			case 3:
				{
				State = 8801;
				identifiedByPassword();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetainCurrentPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySQLParser.RETAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public RetainCurrentPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retainCurrentPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRetainCurrentPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRetainCurrentPassword(this);
		}
	}

	[RuleVersion(0)]
	public RetainCurrentPasswordContext retainCurrentPassword() {
		RetainCurrentPasswordContext _localctx = new RetainCurrentPasswordContext(Context, State);
		EnterRule(_localctx, 1296, RULE_retainCurrentPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8804;
			Match(RETAIN_SYMBOL);
			State = 8805;
			Match(CURRENT_SYMBOL);
			State = 8806;
			Match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardOldPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_SYMBOL() { return GetToken(MySQLParser.OLD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public DiscardOldPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardOldPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDiscardOldPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDiscardOldPassword(this);
		}
	}

	[RuleVersion(0)]
	public DiscardOldPasswordContext discardOldPassword() {
		DiscardOldPasswordContext _localctx = new DiscardOldPasswordContext(Context, State);
		EnterRule(_localctx, 1298, RULE_discardOldPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8808;
			Match(DISCARD_SYMBOL);
			State = 8809;
			Match(OLD_SYMBOL);
			State = 8810;
			Match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserRegistrationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIATE_SYMBOL() { return GetToken(MySQLParser.INITIATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGISTRATION_SYMBOL() { return GetToken(MySQLParser.REGISTRATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNREGISTER_SYMBOL() { return GetToken(MySQLParser.UNREGISTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINISH_SYMBOL() { return GetToken(MySQLParser.FINISH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHALLENGE_RESPONSE_SYMBOL() { return GetToken(MySQLParser.CHALLENGE_RESPONSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringHashContext textStringHash() {
			return GetRuleContext<TextStringHashContext>(0);
		}
		public UserRegistrationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userRegistration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUserRegistration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUserRegistration(this);
		}
	}

	[RuleVersion(0)]
	public UserRegistrationContext userRegistration() {
		UserRegistrationContext _localctx = new UserRegistrationContext(Context, State);
		EnterRule(_localctx, 1300, RULE_userRegistration);
		try {
			State = 8827;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8812;
				factor();
				State = 8813;
				Match(INITIATE_SYMBOL);
				State = 8814;
				Match(REGISTRATION_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8816;
				factor();
				State = 8817;
				Match(UNREGISTER_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8819;
				factor();
				State = 8820;
				Match(FINISH_SYMBOL);
				State = 8821;
				Match(REGISTRATION_SYMBOL);
				State = 8822;
				Match(SET_SYMBOL);
				State = 8823;
				Match(CHALLENGE_RESPONSE_SYMBOL);
				State = 8824;
				Match(AS_SYMBOL);
				State = 8825;
				textStringHash();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumLiteralContext numLiteral() {
			return GetRuleContext<NumLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FACTOR_SYMBOL() { return GetToken(MySQLParser.FACTOR_SYMBOL, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 1302, RULE_factor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8829;
			numLiteral();
			State = 8830;
			Match(FACTOR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacePasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ReplacePasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacePassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplacePassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplacePassword(this);
		}
	}

	[RuleVersion(0)]
	public ReplacePasswordContext replacePassword() {
		ReplacePasswordContext _localctx = new ReplacePasswordContext(Context, State);
		EnterRule(_localctx, 1304, RULE_replacePassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8832;
			Match(REPLACE_SYMBOL);
			State = 8833;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserIdentifierOrTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		public UserIdentifierOrTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userIdentifierOrText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUserIdentifierOrText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUserIdentifierOrText(this);
		}
	}

	[RuleVersion(0)]
	public UserIdentifierOrTextContext userIdentifierOrText() {
		UserIdentifierOrTextContext _localctx = new UserIdentifierOrTextContext(Context, State);
		EnterRule(_localctx, 1306, RULE_userIdentifierOrText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8835;
			textOrIdentifier();
			State = 8837;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1117,Context) ) {
			case 1:
				{
				State = 8836;
				userVariable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserIdentifierOrTextContext userIdentifierOrText() {
			return GetRuleContext<UserIdentifierOrTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER_SYMBOL() { return GetToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public UserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUser(this);
		}
	}

	[RuleVersion(0)]
	public UserContext user() {
		UserContext _localctx = new UserContext(Context, State);
		EnterRule(_localctx, 1308, RULE_user);
		try {
			State = 8844;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8839;
				userIdentifierOrText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8840;
				Match(CURRENT_USER_SYMBOL);
				State = 8842;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1118,Context) ) {
				case 1:
					{
					State = 8841;
					parentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_SYMBOL() { return GetToken(MySQLParser.LIKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public LikeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLikeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLikeClause(this);
		}
	}

	[RuleVersion(0)]
	public LikeClauseContext likeClause() {
		LikeClauseContext _localctx = new LikeClauseContext(Context, State);
		EnterRule(_localctx, 1310, RULE_likeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8846;
			Match(LIKE_SYMBOL);
			State = 8847;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeOrWhereContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LikeClauseContext likeClause() {
			return GetRuleContext<LikeClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public LikeOrWhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeOrWhere; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLikeOrWhere(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLikeOrWhere(this);
		}
	}

	[RuleVersion(0)]
	public LikeOrWhereContext likeOrWhere() {
		LikeOrWhereContext _localctx = new LikeOrWhereContext(Context, State);
		EnterRule(_localctx, 1312, RULE_likeOrWhere);
		try {
			State = 8851;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIKE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8849;
				likeClause();
				}
				break;
			case WHERE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8850;
				whereClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnlineOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE_SYMBOL() { return GetToken(MySQLParser.ONLINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE_SYMBOL() { return GetToken(MySQLParser.OFFLINE_SYMBOL, 0); }
		public OnlineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onlineOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnlineOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnlineOption(this);
		}
	}

	[RuleVersion(0)]
	public OnlineOptionContext onlineOption() {
		OnlineOptionContext _localctx = new OnlineOptionContext(Context, State);
		EnterRule(_localctx, 1314, RULE_onlineOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8853;
			_la = TokenStream.LA(1);
			if ( !(_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoWriteToBinLogContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG_SYMBOL() { return GetToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0); }
		public NoWriteToBinLogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noWriteToBinLog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNoWriteToBinLog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNoWriteToBinLog(this);
		}
	}

	[RuleVersion(0)]
	public NoWriteToBinLogContext noWriteToBinLog() {
		NoWriteToBinLogContext _localctx = new NoWriteToBinLogContext(Context, State);
		EnterRule(_localctx, 1316, RULE_noWriteToBinLog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8855;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsePartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		public UsePartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usePartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUsePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUsePartition(this);
		}
	}

	[RuleVersion(0)]
	public UsePartitionContext usePartition() {
		UsePartitionContext _localctx = new UsePartitionContext(Context, State);
		EnterRule(_localctx, 1318, RULE_usePartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8857;
			Match(PARTITION_SYMBOL);
			State = 8858;
			identifierListWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FieldIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public FieldIdentifierContext fieldIdentifier() {
		FieldIdentifierContext _localctx = new FieldIdentifierContext(Context, State);
		EnterRule(_localctx, 1320, RULE_fieldIdentifier);
		try {
			State = 8865;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8860;
				dotIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8861;
				qualifiedIdentifier();
				State = 8863;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1121,Context) ) {
				case 1:
					{
					State = 8862;
					dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnName(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameContext columnName() {
		ColumnNameContext _localctx = new ColumnNameContext(Context, State);
		EnterRule(_localctx, 1322, RULE_columnName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8867;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnInternalRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ColumnInternalRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnInternalRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnInternalRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnInternalRef(this);
		}
	}

	[RuleVersion(0)]
	public ColumnInternalRefContext columnInternalRef() {
		ColumnInternalRefContext _localctx = new ColumnInternalRefContext(Context, State);
		EnterRule(_localctx, 1324, RULE_columnInternalRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8869;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnInternalRefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefContext[] columnInternalRef() {
			return GetRuleContexts<ColumnInternalRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefContext columnInternalRef(int i) {
			return GetRuleContext<ColumnInternalRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnInternalRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnInternalRefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnInternalRefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnInternalRefList(this);
		}
	}

	[RuleVersion(0)]
	public ColumnInternalRefListContext columnInternalRefList() {
		ColumnInternalRefListContext _localctx = new ColumnInternalRefListContext(Context, State);
		EnterRule(_localctx, 1326, RULE_columnInternalRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8871;
			Match(OPEN_PAR_SYMBOL);
			State = 8872;
			columnInternalRef();
			State = 8877;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8873;
				Match(COMMA_SYMBOL);
				State = 8874;
				columnInternalRef();
				}
				}
				State = 8879;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8880;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public ColumnRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnRef(this);
		}
	}

	[RuleVersion(0)]
	public ColumnRefContext columnRef() {
		ColumnRefContext _localctx = new ColumnRefContext(Context, State);
		EnterRule(_localctx, 1328, RULE_columnRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8882;
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableWildContext tableWild() {
			return GetRuleContext<TableWildContext>(0);
		}
		public InsertIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public InsertIdentifierContext insertIdentifier() {
		InsertIdentifierContext _localctx = new InsertIdentifierContext(Context, State);
		EnterRule(_localctx, 1330, RULE_insertIdentifier);
		try {
			State = 8886;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1124,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8884;
				columnRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8885;
				tableWild();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexName(this);
		}
	}

	[RuleVersion(0)]
	public IndexNameContext indexName() {
		IndexNameContext _localctx = new IndexNameContext(Context, State);
		EnterRule(_localctx, 1332, RULE_indexName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8888;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public IndexRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexRef(this);
		}
	}

	[RuleVersion(0)]
	public IndexRefContext indexRef() {
		IndexRefContext _localctx = new IndexRefContext(Context, State);
		EnterRule(_localctx, 1334, RULE_indexRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8890;
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableWildContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT_SYMBOL() { return GetTokens(MySQLParser.DOT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL(int i) {
			return GetToken(MySQLParser.DOT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		public TableWildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableWild; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableWild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableWild(this);
		}
	}

	[RuleVersion(0)]
	public TableWildContext tableWild() {
		TableWildContext _localctx = new TableWildContext(Context, State);
		EnterRule(_localctx, 1336, RULE_tableWild);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8892;
			identifier();
			State = 8893;
			Match(DOT_SYMBOL);
			State = 8897;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1125,Context) ) {
			case 1:
				{
				State = 8894;
				identifier();
				State = 8895;
				Match(DOT_SYMBOL);
				}
				break;
			}
			State = 8899;
			Match(MULT_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSchemaName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSchemaName(this);
		}
	}

	[RuleVersion(0)]
	public SchemaNameContext schemaName() {
		SchemaNameContext _localctx = new SchemaNameContext(Context, State);
		EnterRule(_localctx, 1338, RULE_schemaName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8901;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SchemaRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSchemaRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSchemaRef(this);
		}
	}

	[RuleVersion(0)]
	public SchemaRefContext schemaRef() {
		SchemaRefContext _localctx = new SchemaRefContext(Context, State);
		EnterRule(_localctx, 1340, RULE_schemaRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8903;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProcedureName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProcedureName(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureNameContext procedureName() {
		ProcedureNameContext _localctx = new ProcedureNameContext(Context, State);
		EnterRule(_localctx, 1342, RULE_procedureName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8905;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ProcedureRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProcedureRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProcedureRef(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureRefContext procedureRef() {
		ProcedureRefContext _localctx = new ProcedureRefContext(Context, State);
		EnterRule(_localctx, 1344, RULE_procedureRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8907;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 1346, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8909;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FunctionRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionRef(this);
		}
	}

	[RuleVersion(0)]
	public FunctionRefContext functionRef() {
		FunctionRefContext _localctx = new FunctionRefContext(Context, State);
		EnterRule(_localctx, 1348, RULE_functionRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8911;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TriggerNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerName(this);
		}
	}

	[RuleVersion(0)]
	public TriggerNameContext triggerName() {
		TriggerNameContext _localctx = new TriggerNameContext(Context, State);
		EnterRule(_localctx, 1350, RULE_triggerName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8913;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TriggerRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerRef(this);
		}
	}

	[RuleVersion(0)]
	public TriggerRefContext triggerRef() {
		TriggerRefContext _localctx = new TriggerRefContext(Context, State);
		EnterRule(_localctx, 1352, RULE_triggerRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8915;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public ViewNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewName(this);
		}
	}

	[RuleVersion(0)]
	public ViewNameContext viewName() {
		ViewNameContext _localctx = new ViewNameContext(Context, State);
		EnterRule(_localctx, 1354, RULE_viewName);
		try {
			State = 8919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1126,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8917;
				qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8918;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public ViewRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewRef(this);
		}
	}

	[RuleVersion(0)]
	public ViewRefContext viewRef() {
		ViewRefContext _localctx = new ViewRefContext(Context, State);
		EnterRule(_localctx, 1356, RULE_viewRef);
		try {
			State = 8923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8921;
				qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8922;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TablespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablespaceName(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceNameContext tablespaceName() {
		TablespaceNameContext _localctx = new TablespaceNameContext(Context, State);
		EnterRule(_localctx, 1358, RULE_tablespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8925;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TablespaceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablespaceRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablespaceRef(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceRefContext tablespaceRef() {
		TablespaceRefContext _localctx = new TablespaceRefContext(Context, State);
		EnterRule(_localctx, 1360, RULE_tablespaceRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8927;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LogfileGroupNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupName(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupNameContext logfileGroupName() {
		LogfileGroupNameContext _localctx = new LogfileGroupNameContext(Context, State);
		EnterRule(_localctx, 1362, RULE_logfileGroupName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8929;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LogfileGroupRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupRef(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupRefContext logfileGroupRef() {
		LogfileGroupRefContext _localctx = new LogfileGroupRefContext(Context, State);
		EnterRule(_localctx, 1364, RULE_logfileGroupRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8931;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public EventNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEventName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEventName(this);
		}
	}

	[RuleVersion(0)]
	public EventNameContext eventName() {
		EventNameContext _localctx = new EventNameContext(Context, State);
		EnterRule(_localctx, 1366, RULE_eventName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8933;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public EventRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEventRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEventRef(this);
		}
	}

	[RuleVersion(0)]
	public EventRefContext eventRef() {
		EventRefContext _localctx = new EventRefContext(Context, State);
		EnterRule(_localctx, 1368, RULE_eventRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8935;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UdfNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUdfName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUdfName(this);
		}
	}

	[RuleVersion(0)]
	public UdfNameContext udfName() {
		UdfNameContext _localctx = new UdfNameContext(Context, State);
		EnterRule(_localctx, 1370, RULE_udfName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8937;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ServerNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerName(this);
		}
	}

	[RuleVersion(0)]
	public ServerNameContext serverName() {
		ServerNameContext _localctx = new ServerNameContext(Context, State);
		EnterRule(_localctx, 1372, RULE_serverName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8939;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ServerRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerRef(this);
		}
	}

	[RuleVersion(0)]
	public ServerRefContext serverRef() {
		ServerRefContext _localctx = new ServerRefContext(Context, State);
		EnterRule(_localctx, 1374, RULE_serverRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8941;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EngineRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public EngineRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engineRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEngineRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEngineRef(this);
		}
	}

	[RuleVersion(0)]
	public EngineRefContext engineRef() {
		EngineRefContext _localctx = new EngineRefContext(Context, State);
		EnterRule(_localctx, 1376, RULE_engineRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8943;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableName(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 1378, RULE_tableName);
		try {
			State = 8947;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1128,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8945;
				qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8946;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterTableRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public FilterTableRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterTableRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterTableRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterTableRef(this);
		}
	}

	[RuleVersion(0)]
	public FilterTableRefContext filterTableRef() {
		FilterTableRefContext _localctx = new FilterTableRefContext(Context, State);
		EnterRule(_localctx, 1380, RULE_filterTableRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8949;
			schemaRef();
			State = 8950;
			dotIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefWithWildcardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableRefWithWildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRefWithWildcard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableRefWithWildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableRefWithWildcard(this);
		}
	}

	[RuleVersion(0)]
	public TableRefWithWildcardContext tableRefWithWildcard() {
		TableRefWithWildcardContext _localctx = new TableRefWithWildcardContext(Context, State);
		EnterRule(_localctx, 1382, RULE_tableRefWithWildcard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8952;
			identifier();
			State = 8960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1130,Context) ) {
			case 1:
				{
				State = 8953;
				Match(DOT_SYMBOL);
				State = 8954;
				Match(MULT_OPERATOR);
				}
				break;
			case 2:
				{
				State = 8955;
				dotIdentifier();
				State = 8958;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 8956;
					Match(DOT_SYMBOL);
					State = 8957;
					Match(MULT_OPERATOR);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableRef(this);
		}
	}

	[RuleVersion(0)]
	public TableRefContext tableRef() {
		TableRefContext _localctx = new TableRefContext(Context, State);
		EnterRule(_localctx, 1384, RULE_tableRef);
		try {
			State = 8964;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8962;
				qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8963;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext[] tableRef() {
			return GetRuleContexts<TableRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef(int i) {
			return GetRuleContext<TableRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableRefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableRefList(this);
		}
	}

	[RuleVersion(0)]
	public TableRefListContext tableRefList() {
		TableRefListContext _localctx = new TableRefListContext(Context, State);
		EnterRule(_localctx, 1386, RULE_tableRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8966;
			tableRef();
			State = 8971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8967;
				Match(COMMA_SYMBOL);
				State = 8968;
				tableRef();
				}
				}
				State = 8973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasRefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefWithWildcardContext[] tableRefWithWildcard() {
			return GetRuleContexts<TableRefWithWildcardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRefWithWildcardContext tableRefWithWildcard(int i) {
			return GetRuleContext<TableRefWithWildcardContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableAliasRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAliasRefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableAliasRefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableAliasRefList(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasRefListContext tableAliasRefList() {
		TableAliasRefListContext _localctx = new TableAliasRefListContext(Context, State);
		EnterRule(_localctx, 1388, RULE_tableAliasRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8974;
			tableRefWithWildcard();
			State = 8979;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8975;
				Match(COMMA_SYMBOL);
				State = 8976;
				tableRefWithWildcard();
				}
				}
				State = 8981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterParameterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitParameterName(this);
		}
	}

	[RuleVersion(0)]
	public ParameterNameContext parameterName() {
		ParameterNameContext _localctx = new ParameterNameContext(Context, State);
		EnterRule(_localctx, 1390, RULE_parameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8982;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelKeywordContext labelKeyword() {
			return GetRuleContext<LabelKeywordContext>(0);
		}
		public LabelIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabelIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabelIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public LabelIdentifierContext labelIdentifier() {
		LabelIdentifierContext _localctx = new LabelIdentifierContext(Context, State);
		EnterRule(_localctx, 1392, RULE_labelIdentifier);
		try {
			State = 8986;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1134,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8984;
				pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8985;
				labelKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelIdentifierContext labelIdentifier() {
			return GetRuleContext<LabelIdentifierContext>(0);
		}
		public LabelRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabelRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabelRef(this);
		}
	}

	[RuleVersion(0)]
	public LabelRefContext labelRef() {
		LabelRefContext _localctx = new LabelRefContext(Context, State);
		EnterRule(_localctx, 1394, RULE_labelRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8988;
			labelIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleKeywordContext roleKeyword() {
			return GetRuleContext<RoleKeywordContext>(0);
		}
		public RoleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public RoleIdentifierContext roleIdentifier() {
		RoleIdentifierContext _localctx = new RoleIdentifierContext(Context, State);
		EnterRule(_localctx, 1396, RULE_roleIdentifier);
		try {
			State = 8992;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1135,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8990;
				pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8991;
				roleKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluginRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PluginRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pluginRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPluginRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPluginRef(this);
		}
	}

	[RuleVersion(0)]
	public PluginRefContext pluginRef() {
		PluginRefContext _localctx = new PluginRefContext(Context, State);
		EnterRule(_localctx, 1398, RULE_pluginRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8994;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ComponentRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterComponentRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitComponentRef(this);
		}
	}

	[RuleVersion(0)]
	public ComponentRefContext componentRef() {
		ComponentRefContext _localctx = new ComponentRefContext(Context, State);
		EnterRule(_localctx, 1400, RULE_componentRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8996;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ResourceGroupRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupRef(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupRefContext resourceGroupRef() {
		ResourceGroupRefContext _localctx = new ResourceGroupRefContext(Context, State);
		EnterRule(_localctx, 1402, RULE_resourceGroupRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8998;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowName(this);
		}
	}

	[RuleVersion(0)]
	public WindowNameContext windowName() {
		WindowNameContext _localctx = new WindowNameContext(Context, State);
		EnterRule(_localctx, 1404, RULE_windowName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9000;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PureIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MySQLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACK_TICK_QUOTED_ID() { return GetToken(MySQLParser.BACK_TICK_QUOTED_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_TEXT() { return GetToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public PureIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pureIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPureIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPureIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public PureIdentifierContext pureIdentifier() {
		PureIdentifierContext _localctx = new PureIdentifierContext(Context, State);
		EnterRule(_localctx, 1406, RULE_pureIdentifier);
		int _la;
		try {
			State = 9005;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9002;
				_la = TokenStream.LA(1);
				if ( !(_la==IDENTIFIER || _la==BACK_TICK_QUOTED_ID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9003;
				if (!(this.isPureIdentifier())) throw new FailedPredicateException(this, "this.isPureIdentifier()");
				State = 9004;
				Match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordContext identifierKeyword() {
			return GetRuleContext<IdentifierKeywordContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 1408, RULE_identifier);
		try {
			State = 9009;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1137,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9007;
				pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9008;
				identifierKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 1410, RULE_identifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9011;
			identifier();
			State = 9016;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9012;
					Match(COMMA_SYMBOL);
					State = 9013;
					identifier();
					}
					} 
				}
				State = 9018;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1138,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListWithParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierListWithParentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierListWithParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierListWithParentheses(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListWithParenthesesContext identifierListWithParentheses() {
		IdentifierListWithParenthesesContext _localctx = new IdentifierListWithParenthesesContext(Context, State);
		EnterRule(_localctx, 1412, RULE_identifierListWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9019;
			Match(OPEN_PAR_SYMBOL);
			State = 9020;
			identifierList();
			State = 9021;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 1414, RULE_qualifiedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9023;
			identifier();
			State = 9025;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1139,Context) ) {
			case 1:
				{
				State = 9024;
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext[] dotIdentifier() {
			return GetRuleContexts<DotIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier(int i) {
			return GetRuleContext<DotIdentifierContext>(i);
		}
		public SimpleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIdentifierContext simpleIdentifier() {
		SimpleIdentifierContext _localctx = new SimpleIdentifierContext(Context, State);
		EnterRule(_localctx, 1416, RULE_simpleIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9027;
			identifier();
			State = 9032;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT_SYMBOL) {
				{
				State = 9028;
				dotIdentifier();
				State = 9030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 9029;
					dotIdentifier();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DotIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDotIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDotIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public DotIdentifierContext dotIdentifier() {
		DotIdentifierContext _localctx = new DotIdentifierContext(Context, State);
		EnterRule(_localctx, 1418, RULE_dotIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9034;
			Match(DOT_SYMBOL);
			State = 9035;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ulong_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySQLParser.DECIMAL_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NUMBER() { return GetToken(MySQLParser.FLOAT_NUMBER, 0); }
		public Ulong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ulong_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUlong_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUlong_number(this);
		}
	}

	[RuleVersion(0)]
	public Ulong_numberContext ulong_number() {
		Ulong_numberContext _localctx = new Ulong_numberContext(Context, State);
		EnterRule(_localctx, 1420, RULE_ulong_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9037;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 228698418577464L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_ulong_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public Real_ulong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_ulong_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReal_ulong_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReal_ulong_number(this);
		}
	}

	[RuleVersion(0)]
	public Real_ulong_numberContext real_ulong_number() {
		Real_ulong_numberContext _localctx = new Real_ulong_numberContext(Context, State);
		EnterRule(_localctx, 1422, RULE_real_ulong_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9039;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592186044472L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UlonglongNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySQLParser.DECIMAL_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NUMBER() { return GetToken(MySQLParser.FLOAT_NUMBER, 0); }
		public UlonglongNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ulonglongNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUlonglongNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUlonglongNumber(this);
		}
	}

	[RuleVersion(0)]
	public UlonglongNumberContext ulonglongNumber() {
		UlonglongNumberContext _localctx = new UlonglongNumberContext(Context, State);
		EnterRule(_localctx, 1424, RULE_ulonglongNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9041;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 211106232533048L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_ulonglong_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		public Real_ulonglong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_ulonglong_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReal_ulonglong_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReal_ulonglong_number(this);
		}
	}

	[RuleVersion(0)]
	public Real_ulonglong_numberContext real_ulonglong_number() {
		Real_ulonglong_numberContext _localctx = new Real_ulonglong_numberContext(Context, State);
		EnterRule(_localctx, 1426, RULE_real_ulonglong_number);
		try {
			State = 9048;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1142,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9043;
				Match(INT_NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9044;
				if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				State = 9045;
				Match(HEX_NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9046;
				Match(ULONGLONG_NUMBER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9047;
				Match(LONG_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_OPERATOR() { return GetToken(MySQLParser.PLUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		public SignedLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignedLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignedLiteral(this);
		}
	}

	[RuleVersion(0)]
	public SignedLiteralContext signedLiteral() {
		SignedLiteralContext _localctx = new SignedLiteralContext(Context, State);
		EnterRule(_localctx, 1428, RULE_signedLiteral);
		try {
			State = 9055;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9050;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9051;
				Match(PLUS_OPERATOR);
				State = 9052;
				ulong_number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9053;
				Match(MINUS_OPERATOR);
				State = 9054;
				ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLiteralOrNullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignedLiteralContext signedLiteral() {
			return GetRuleContext<SignedLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullAsLiteralContext nullAsLiteral() {
			return GetRuleContext<NullAsLiteralContext>(0);
		}
		public SignedLiteralOrNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLiteralOrNull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignedLiteralOrNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignedLiteralOrNull(this);
		}
	}

	[RuleVersion(0)]
	public SignedLiteralOrNullContext signedLiteralOrNull() {
		SignedLiteralOrNullContext _localctx = new SignedLiteralOrNullContext(Context, State);
		EnterRule(_localctx, 1430, RULE_signedLiteralOrNull);
		try {
			State = 9060;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1144,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9057;
				signedLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9058;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 9059;
				nullAsLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumLiteralContext numLiteral() {
			return GetRuleContext<NumLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemporalLiteralContext temporalLiteral() {
			return GetRuleContext<TemporalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_NUMBER() { return GetToken(MySQLParser.BIN_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE_CHARSET() { return GetToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 1432, RULE_literal);
		int _la;
		try {
			State = 9071;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9062;
				textLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9063;
				numLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9064;
				temporalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9065;
				nullLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9066;
				boolLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNDERSCORE_CHARSET) {
					{
					State = 9067;
					Match(UNDERSCORE_CHARSET);
					}
				}

				State = 9070;
				_la = TokenStream.LA(1);
				if ( !(_la==HEX_NUMBER || _la==BIN_NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralOrNullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullAsLiteralContext nullAsLiteral() {
			return GetRuleContext<NullAsLiteralContext>(0);
		}
		public LiteralOrNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalOrNull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLiteralOrNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLiteralOrNull(this);
		}
	}

	[RuleVersion(0)]
	public LiteralOrNullContext literalOrNull() {
		LiteralOrNullContext _localctx = new LiteralOrNullContext(Context, State);
		EnterRule(_localctx, 1434, RULE_literalOrNull);
		try {
			State = 9076;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1147,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9073;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9074;
				if (!(this.isServerVersionGe80024())) throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				State = 9075;
				nullAsLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullAsLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public NullAsLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullAsLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNullAsLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNullAsLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NullAsLiteralContext nullAsLiteral() {
		NullAsLiteralContext _localctx = new NullAsLiteralContext(Context, State);
		EnterRule(_localctx, 1436, RULE_nullAsLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9078;
			Match(NULL_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public StringListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStringList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStringList(this);
		}
	}

	[RuleVersion(0)]
	public StringListContext stringList() {
		StringListContext _localctx = new StringListContext(Context, State);
		EnterRule(_localctx, 1438, RULE_stringList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9080;
			Match(OPEN_PAR_SYMBOL);
			State = 9081;
			textString();
			State = 9086;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 9082;
				Match(COMMA_SYMBOL);
				State = 9083;
				textString();
				}
				}
				State = 9088;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 9089;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringLiteralContext : ParserRuleContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTED_TEXT() { return GetToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_TEXT() { return GetToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public TextStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public TextStringLiteralContext textStringLiteral() {
		TextStringLiteralContext _localctx = new TextStringLiteralContext(Context, State);
		EnterRule(_localctx, 1440, RULE_textStringLiteral);
		try {
			State = 9094;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1149,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9091;
				_localctx.value = Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9092;
				if (!(this.isTextStringLiteral())) throw new FailedPredicateException(this, "this.isTextStringLiteral()");
				State = 9093;
				_localctx.value = Match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_NUMBER() { return GetToken(MySQLParser.BIN_NUMBER, 0); }
		public TextStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextString(this);
		}
	}

	[RuleVersion(0)]
	public TextStringContext textString() {
		TextStringContext _localctx = new TextStringContext(Context, State);
		EnterRule(_localctx, 1442, RULE_textString);
		try {
			State = 9099;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1150,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9096;
				textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9097;
				Match(HEX_NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9098;
				Match(BIN_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringHashContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		public TextStringHashContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringHash; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextStringHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextStringHash(this);
		}
	}

	[RuleVersion(0)]
	public TextStringHashContext textStringHash() {
		TextStringHashContext _localctx = new TextStringHashContext(Context, State);
		EnterRule(_localctx, 1444, RULE_textStringHash);
		try {
			State = 9104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1151,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9101;
				textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9102;
				if (!(this.isServerVersionGe80017())) throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				State = 9103;
				Match(HEX_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext[] textStringLiteral() {
			return GetRuleContexts<TextStringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral(int i) {
			return GetRuleContext<TextStringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_TEXT() { return GetToken(MySQLParser.NCHAR_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE_CHARSET() { return GetToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
		public TextLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextLiteral(this);
		}
	}

	[RuleVersion(0)]
	public TextLiteralContext textLiteral() {
		TextLiteralContext _localctx = new TextLiteralContext(Context, State);
		EnterRule(_localctx, 1446, RULE_textLiteral);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1153,Context) ) {
			case 1:
				{
				State = 9107;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1152,Context) ) {
				case 1:
					{
					State = 9106;
					Match(UNDERSCORE_CHARSET);
					}
					break;
				}
				State = 9109;
				textStringLiteral();
				}
				break;
			case 2:
				{
				State = 9110;
				Match(NCHAR_TEXT);
				}
				break;
			}
			State = 9116;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1154,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9113;
					textStringLiteral();
					}
					} 
				}
				State = 9118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1154,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringNoLinebreakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public TextStringNoLinebreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringNoLinebreak; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextStringNoLinebreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextStringNoLinebreak(this);
		}
	}

	[RuleVersion(0)]
	public TextStringNoLinebreakContext textStringNoLinebreak() {
		TextStringNoLinebreakContext _localctx = new TextStringNoLinebreakContext(Context, State);
		EnterRule(_localctx, 1448, RULE_textStringNoLinebreak);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9119;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringLiteralListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext[] textStringLiteral() {
			return GetRuleContexts<TextStringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral(int i) {
			return GetRuleContext<TextStringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TextStringLiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringLiteralList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextStringLiteralList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextStringLiteralList(this);
		}
	}

	[RuleVersion(0)]
	public TextStringLiteralListContext textStringLiteralList() {
		TextStringLiteralListContext _localctx = new TextStringLiteralListContext(Context, State);
		EnterRule(_localctx, 1450, RULE_textStringLiteralList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9121;
			textStringLiteral();
			State = 9126;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1155,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9122;
					Match(COMMA_SYMBOL);
					State = 9123;
					textStringLiteral();
					}
					} 
				}
				State = 9128;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1155,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int64LiteralContext int64Literal() {
			return GetRuleContext<Int64LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySQLParser.DECIMAL_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NUMBER() { return GetToken(MySQLParser.FLOAT_NUMBER, 0); }
		public NumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNumLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNumLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumLiteralContext numLiteral() {
		NumLiteralContext _localctx = new NumLiteralContext(Context, State);
		EnterRule(_localctx, 1452, RULE_numLiteral);
		try {
			State = 9132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9129;
				int64Literal();
				}
				break;
			case DECIMAL_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9130;
				Match(DECIMAL_NUMBER);
				}
				break;
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9131;
				Match(FLOAT_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_SYMBOL() { return GetToken(MySQLParser.TRUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_SYMBOL() { return GetToken(MySQLParser.FALSE_SYMBOL, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 1454, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9134;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL2_SYMBOL() { return GetToken(MySQLParser.NULL2_SYMBOL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 1456, RULE_nullLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9136;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL2_SYMBOL || _la==NULL_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int64LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public Int64LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int64Literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInt64Literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInt64Literal(this);
		}
	}

	[RuleVersion(0)]
	public Int64LiteralContext int64Literal() {
		Int64LiteralContext _localctx = new Int64LiteralContext(Context, State);
		EnterRule(_localctx, 1458, RULE_int64Literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9138;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 56L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemporalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTED_TEXT() { return GetToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TemporalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_temporalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTemporalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTemporalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public TemporalLiteralContext temporalLiteral() {
		TemporalLiteralContext _localctx = new TemporalLiteralContext(Context, State);
		EnterRule(_localctx, 1460, RULE_temporalLiteral);
		try {
			State = 9146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9140;
				Match(DATE_SYMBOL);
				State = 9141;
				Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIME_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9142;
				Match(TIME_SYMBOL);
				State = 9143;
				Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIMESTAMP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9144;
				Match(TIMESTAMP_SYMBOL);
				State = 9145;
				Match(SINGLE_QUOTED_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		public FloatOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFloatOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFloatOptions(this);
		}
	}

	[RuleVersion(0)]
	public FloatOptionsContext floatOptions() {
		FloatOptionsContext _localctx = new FloatOptionsContext(Context, State);
		EnterRule(_localctx, 1462, RULE_floatOptions);
		try {
			State = 9150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1158,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9148;
				fieldLength();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9149;
				precision();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardFloatOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		public StandardFloatOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardFloatOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStandardFloatOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStandardFloatOptions(this);
		}
	}

	[RuleVersion(0)]
	public StandardFloatOptionsContext standardFloatOptions() {
		StandardFloatOptionsContext _localctx = new StandardFloatOptionsContext(Context, State);
		EnterRule(_localctx, 1464, RULE_standardFloatOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9152;
			precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT_NUMBER() { return GetTokens(MySQLParser.INT_NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySQLParser.INT_NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrecision(this);
		}
	}

	[RuleVersion(0)]
	public PrecisionContext precision() {
		PrecisionContext _localctx = new PrecisionContext(Context, State);
		EnterRule(_localctx, 1466, RULE_precision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9154;
			Match(OPEN_PAR_SYMBOL);
			State = 9155;
			Match(INT_NUMBER);
			State = 9156;
			Match(COMMA_SYMBOL);
			State = 9157;
			Match(INT_NUMBER);
			State = 9158;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextOrIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public TextOrIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textOrIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextOrIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextOrIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public TextOrIdentifierContext textOrIdentifier() {
		TextOrIdentifierContext _localctx = new TextOrIdentifierContext(Context, State);
		EnterRule(_localctx, 1468, RULE_textOrIdentifier);
		try {
			State = 9162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1159,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9160;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9161;
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LValueKeywordContext lValueKeyword() {
			return GetRuleContext<LValueKeywordContext>(0);
		}
		public LValueIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLValueIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLValueIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public LValueIdentifierContext lValueIdentifier() {
		LValueIdentifierContext _localctx = new LValueIdentifierContext(Context, State);
		EnterRule(_localctx, 1470, RULE_lValueIdentifier);
		try {
			State = 9166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9164;
				pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9165;
				lValueKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleIdentifierOrTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleIdentifierContext roleIdentifier() {
			return GetRuleContext<RoleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public RoleIdentifierOrTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleIdentifierOrText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleIdentifierOrText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleIdentifierOrText(this);
		}
	}

	[RuleVersion(0)]
	public RoleIdentifierOrTextContext roleIdentifierOrText() {
		RoleIdentifierOrTextContext _localctx = new RoleIdentifierOrTextContext(Context, State);
		EnterRule(_localctx, 1472, RULE_roleIdentifierOrText);
		try {
			State = 9170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9168;
				roleIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9169;
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public SizeNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSizeNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSizeNumber(this);
		}
	}

	[RuleVersion(0)]
	public SizeNumberContext sizeNumber() {
		SizeNumberContext _localctx = new SizeNumberContext(Context, State);
		EnterRule(_localctx, 1474, RULE_sizeNumber);
		try {
			State = 9174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1162,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9172;
				real_ulonglong_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9173;
				pureIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitParentheses(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesesContext parentheses() {
		ParenthesesContext _localctx = new ParenthesesContext(Context, State);
		EnterRule(_localctx, 1476, RULE_parentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9176;
			Match(OPEN_PAR_SYMBOL);
			State = 9177;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OPERATOR() { return GetToken(MySQLParser.ASSIGN_OPERATOR, 0); }
		public EqualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEqual(this);
		}
	}

	[RuleVersion(0)]
	public EqualContext equal() {
		EqualContext _localctx = new EqualContext(Context, State);
		EnterRule(_localctx, 1478, RULE_equal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9179;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySQLParser.PERSIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		public OptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionType(this);
		}
	}

	[RuleVersion(0)]
	public OptionTypeContext optionType() {
		OptionTypeContext _localctx = new OptionTypeContext(Context, State);
		EnterRule(_localctx, 1480, RULE_optionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9181;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RvalueSystemVariableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		public RvalueSystemVariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rvalueSystemVariableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRvalueSystemVariableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRvalueSystemVariableType(this);
		}
	}

	[RuleVersion(0)]
	public RvalueSystemVariableTypeContext rvalueSystemVariableType() {
		RvalueSystemVariableTypeContext _localctx = new RvalueSystemVariableTypeContext(Context, State);
		EnterRule(_localctx, 1482, RULE_rvalueSystemVariableType);
		try {
			State = 9189;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GLOBAL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9183;
				Match(GLOBAL_SYMBOL);
				State = 9184;
				Match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9185;
				Match(LOCAL_SYMBOL);
				State = 9186;
				Match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9187;
				Match(SESSION_SYMBOL);
				State = 9188;
				Match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVarIdentTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySQLParser.PERSIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		public SetVarIdentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVarIdentType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetVarIdentType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetVarIdentType(this);
		}
	}

	[RuleVersion(0)]
	public SetVarIdentTypeContext setVarIdentType() {
		SetVarIdentTypeContext _localctx = new SetVarIdentTypeContext(Context, State);
		EnterRule(_localctx, 1484, RULE_setVarIdentType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9191;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 9192;
			Match(DOT_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public JsonAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJsonAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJsonAttribute(this);
		}
	}

	[RuleVersion(0)]
	public JsonAttributeContext jsonAttribute() {
		JsonAttributeContext _localctx = new JsonAttributeContext(Context, State);
		EnterRule(_localctx, 1486, RULE_jsonAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9194;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelKeywordContext labelKeyword() {
			return GetRuleContext<LabelKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return GetRuleContext<RoleOrIdentifierKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART_SYMBOL() { return GetToken(MySQLParser.RESTART_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous1RolesAndLabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public IdentifierKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeyword(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordContext identifierKeyword() {
		IdentifierKeywordContext _localctx = new IdentifierKeywordContext(Context, State);
		EnterRule(_localctx, 1488, RULE_identifierKeyword);
		try {
			State = 9212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1166,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9196;
				if (!(this.isServerVersionLt80017())) throw new FailedPredicateException(this, "this.isServerVersionLt80017()");
				State = 9203;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1164,Context) ) {
				case 1:
					{
					State = 9197;
					labelKeyword();
					}
					break;
				case 2:
					{
					State = 9198;
					roleOrIdentifierKeyword();
					}
					break;
				case 3:
					{
					State = 9199;
					Match(EXECUTE_SYMBOL);
					}
					break;
				case 4:
					{
					State = 9200;
					Match(SHUTDOWN_SYMBOL);
					}
					break;
				case 5:
					{
					State = 9201;
					if (!(this.isServerVersionGe80011())) throw new FailedPredicateException(this, "this.isServerVersionGe80011()");
					State = 9202;
					Match(RESTART_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9210;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1165,Context) ) {
				case 1:
					{
					State = 9205;
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					State = 9206;
					identifierKeywordsAmbiguous1RolesAndLabels();
					}
					break;
				case 3:
					{
					State = 9207;
					identifierKeywordsAmbiguous2Labels();
					}
					break;
				case 4:
					{
					State = 9208;
					identifierKeywordsAmbiguous3Roles();
					}
					break;
				case 5:
					{
					State = 9209;
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous1RolesAndLabelsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART_SYMBOL() { return GetToken(MySQLParser.RESTART_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous1RolesAndLabels; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
		IdentifierKeywordsAmbiguous1RolesAndLabelsContext _localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(Context, State);
		EnterRule(_localctx, 1490, RULE_identifierKeywordsAmbiguous1RolesAndLabels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9214;
			_la = TokenStream.LA(1);
			if ( !(_la==EXECUTE_SYMBOL || _la==SHUTDOWN_SYMBOL || _la==RESTART_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous2LabelsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII_SYMBOL() { return GetToken(MySQLParser.ASCII_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_SYMBOL() { return GetToken(MySQLParser.BYTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE_SYMBOL() { return GetToken(MySQLParser.CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySQLParser.CHARSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_SYMBOL() { return GetToken(MySQLParser.CLONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySQLParser.COMMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySQLParser.FLUSH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySQLParser.HANDLER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP_SYMBOL() { return GetToken(MySQLParser.HELP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySQLParser.INSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySQLParser.PREPARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySQLParser.REPAIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET_SYMBOL() { return GetToken(MySQLParser.RESET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySQLParser.SIGNED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_SYMBOL() { return GetToken(MySQLParser.STOP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySQLParser.UNICODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_SYMBOL() { return GetToken(MySQLParser.XA_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous2LabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous2Labels; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous2Labels(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous2Labels(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
		IdentifierKeywordsAmbiguous2LabelsContext _localctx = new IdentifierKeywordsAmbiguous2LabelsContext(Context, State);
		EnterRule(_localctx, 1492, RULE_identifierKeywordsAmbiguous2Labels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9216;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 45036683569136129L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 4612811919407972353L) != 0) || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & 563224906825731L) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & 10995116277761L) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & 22518006743572481L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & -4602678819172646399L) != 0) || _la==XA_SYMBOL || _la==CLONE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return GetRuleContext<RoleOrLabelKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_SYMBOL() { return GetToken(MySQLParser.FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySQLParser.PROCESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySQLParser.RELOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER_SYMBOL() { return GetToken(MySQLParser.SUPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public LabelKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabelKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabelKeyword(this);
		}
	}

	[RuleVersion(0)]
	public LabelKeywordContext labelKeyword() {
		LabelKeywordContext _localctx = new LabelKeywordContext(Context, State);
		EnterRule(_localctx, 1494, RULE_labelKeyword);
		try {
			State = 9236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1169,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9218;
				if (!(this.isServerVersionLt80017())) throw new FailedPredicateException(this, "this.isServerVersionLt80017()");
				State = 9229;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1167,Context) ) {
				case 1:
					{
					State = 9219;
					roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					State = 9220;
					Match(EVENT_SYMBOL);
					}
					break;
				case 3:
					{
					State = 9221;
					Match(FILE_SYMBOL);
					}
					break;
				case 4:
					{
					State = 9222;
					Match(NONE_SYMBOL);
					}
					break;
				case 5:
					{
					State = 9223;
					Match(PROCESS_SYMBOL);
					}
					break;
				case 6:
					{
					State = 9224;
					Match(PROXY_SYMBOL);
					}
					break;
				case 7:
					{
					State = 9225;
					Match(RELOAD_SYMBOL);
					}
					break;
				case 8:
					{
					State = 9226;
					Match(REPLICATION_SYMBOL);
					}
					break;
				case 9:
					{
					State = 9227;
					Match(RESOURCE_SYMBOL);
					}
					break;
				case 10:
					{
					State = 9228;
					Match(SUPER_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9234;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1168,Context) ) {
				case 1:
					{
					State = 9231;
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					State = 9232;
					identifierKeywordsAmbiguous3Roles();
					}
					break;
				case 3:
					{
					State = 9233;
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous3RolesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_SYMBOL() { return GetToken(MySQLParser.FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySQLParser.PROCESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySQLParser.RELOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER_SYMBOL() { return GetToken(MySQLParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous3RolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous3Roles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous3Roles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous3Roles(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
		IdentifierKeywordsAmbiguous3RolesContext _localctx = new IdentifierKeywordsAmbiguous3RolesContext(Context, State);
		EnterRule(_localctx, 1496, RULE_identifierKeywordsAmbiguous3Roles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9238;
			_la = TokenStream.LA(1);
			if ( !(_la==EVENT_SYMBOL || _la==FILE_SYMBOL || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 76561193665298433L) != 0) || _la==RELOAD_SYMBOL || _la==REPLICATION_SYMBOL || _la==SUPER_SYMBOL || _la==RESOURCE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsUnambiguousContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_SYMBOL() { return GetToken(MySQLParser.ACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySQLParser.ADMIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER_SYMBOL() { return GetToken(MySQLParser.AFTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySQLParser.AGAINST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_SYMBOL() { return GetToken(MySQLParser.ANY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SYMBOL() { return GetToken(MySQLParser.AT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_SYMBOL() { return GetToken(MySQLParser.ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHENTICATION_SYMBOL() { return GetToken(MySQLParser.AUTHENTICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_SYMBOL() { return GetToken(MySQLParser.AVG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySQLParser.BACKUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySQLParser.BINLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_SYMBOL() { return GetToken(MySQLParser.BIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySQLParser.BLOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_SYMBOL() { return GetToken(MySQLParser.BOOL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE_SYMBOL() { return GetToken(MySQLParser.BTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySQLParser.CASCADED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySQLParser.CHAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHALLENGE_RESPONSE_SYMBOL() { return GetToken(MySQLParser.CHALLENGE_RESPONSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySQLParser.CHANGED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySQLParser.CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySQLParser.CLIENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySQLParser.CLOSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySQLParser.COALESCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_SYMBOL() { return GetToken(MySQLParser.CODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySQLParser.COLLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySQLParser.COMPACT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU_SYMBOL() { return GetToken(MySQLParser.CPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINITION_SYMBOL() { return GetToken(MySQLParser.DEFINITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK_SYMBOL() { return GetToken(MySQLParser.DISK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS_SYMBOL() { return GetToken(MySQLParser.ENDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED_SYMBOL() { return GetToken(MySQLParser.ENFORCED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySQLParser.ENGINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_SYMBOL() { return GetToken(MySQLParser.ENUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySQLParser.ERRORS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySQLParser.EVENTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY_SYMBOL() { return GetToken(MySQLParser.EVERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE_SYMBOL() { return GetToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE_SYMBOL() { return GetToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySQLParser.EXPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FACTOR_SYMBOL() { return GetToken(MySQLParser.FACTOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST_SYMBOL() { return GetToken(MySQLParser.FAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySQLParser.FAULTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_SYMBOL() { return GetToken(MySQLParser.FILTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINISH_SYMBOL() { return GetToken(MySQLParser.FINISH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySQLParser.FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND_SYMBOL() { return GetToken(MySQLParser.FOUND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySQLParser.GENERAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return GetToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_SOURCE_PUBLIC_KEY_SYMBOL() { return GetToken(MySQLParser.GET_SOURCE_PUBLIC_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySQLParser.GRANTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTID_ONLY_SYMBOL() { return GetToken(MySQLParser.GTID_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySQLParser.HISTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySQLParser.HOSTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST_SYMBOL() { return GetToken(MySQLParser.HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SYMBOL() { return GetToken(MySQLParser.HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySQLParser.INDEXES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SYMBOL() { return GetToken(MySQLParser.INITIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIATE_SYMBOL() { return GetToken(MySQLParser.INITIATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySQLParser.INVOKER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_SYMBOL() { return GetToken(MySQLParser.IO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC_SYMBOL() { return GetToken(MySQLParser.IPC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySQLParser.ISSUER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SYMBOL() { return GetToken(MySQLParser.JSON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE_SYMBOL() { return GetToken(MySQLParser.JSON_VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYRING_SYMBOL() { return GetToken(MySQLParser.KEYRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySQLParser.LEAVES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySQLParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySQLParser.LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SYMBOL() { return GetToken(MySQLParser.LIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySQLParser.LOCKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKS_SYMBOL() { return GetToken(MySQLParser.LOCKS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return GetToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NETWORK_NAMESPACE_SYMBOL() { return GetToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return GetToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return GetToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE_SYMBOL() { return GetToken(MySQLParser.MERGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySQLParser.MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE_SYMBOL() { return GetToken(MySQLParser.MODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySQLParser.MODIFY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_SYMBOL() { return GetToken(MySQLParser.MONTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySQLParser.MUTEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO_SYMBOL() { return GetToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES_SYMBOL() { return GetToken(MySQLParser.NAMES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_SYMBOL() { return GetToken(MySQLParser.NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySQLParser.NCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDBCLUSTER_SYMBOL() { return GetToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_SYMBOL() { return GetToken(MySQLParser.NESTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER_SYMBOL() { return GetToken(MySQLParser.NEVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_SYMBOL() { return GetToken(MySQLParser.NEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT_SYMBOL() { return GetToken(MySQLParser.NEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_SYMBOL() { return GetToken(MySQLParser.NULLS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySQLParser.NUMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySQLParser.OFFSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OJ_SYMBOL() { return GetToken(MySQLParser.OJ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_SYMBOL() { return GetToken(MySQLParser.OLD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_SYMBOL() { return GetToken(MySQLParser.ONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY_SYMBOL() { return GetToken(MySQLParser.ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySQLParser.OTHERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER_SYMBOL() { return GetToken(MySQLParser.OWNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_SYMBOL() { return GetToken(MySQLParser.PAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER_SYMBOL() { return GetToken(MySQLParser.PARSER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH_SYMBOL() { return GetToken(MySQLParser.PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE_SYMBOL() { return GetToken(MySQLParser.PHASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_SYMBOL() { return GetToken(MySQLParser.POINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySQLParser.POLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT_SYMBOL() { return GetToken(MySQLParser.PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV_SYMBOL() { return GetToken(MySQLParser.PREV_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return GetToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySQLParser.PROFILES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySQLParser.PROFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySQLParser.QUARTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY_SYMBOL() { return GetToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySQLParser.REBUILD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySQLParser.RECOVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGISTRATION_SYMBOL() { return GetToken(MySQLParser.REGISTRATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_SYMBOL() { return GetToken(MySQLParser.RELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySQLParser.REMOVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL() { return GetToken(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICAS_SYMBOL() { return GetToken(MySQLParser.REPLICAS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA_SYMBOL() { return GetToken(MySQLParser.REPLICA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySQLParser.RESPECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE_SYMBOL() { return GetToken(MySQLParser.RESTORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME_SYMBOL() { return GetToken(MySQLParser.RESUME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySQLParser.RETAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING_SYMBOL() { return GetToken(MySQLParser.RETURNING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySQLParser.RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REUSE_SYMBOL() { return GetToken(MySQLParser.REUSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySQLParser.REVERSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySQLParser.ROTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE_SYMBOL() { return GetToken(MySQLParser.RTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySQLParser.SECURITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySQLParser.SERIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE_SYMBOL() { return GetToken(MySQLParser.SHARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_SYMBOL() { return GetToken(MySQLParser.SKIP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW_SYMBOL() { return GetToken(MySQLParser.SLOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySQLParser.SOCKET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME_SYMBOL() { return GetToken(MySQLParser.SONAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_AUTO_POSITION_SYMBOL() { return GetToken(MySQLParser.SOURCE_AUTO_POSITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_BIND_SYMBOL() { return GetToken(MySQLParser.SOURCE_BIND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_COMPRESSION_ALGORITHM_SYMBOL() { return GetToken(MySQLParser.SOURCE_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL() { return GetToken(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_CONNECT_RETRY_SYMBOL() { return GetToken(MySQLParser.SOURCE_CONNECT_RETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_DELAY_SYMBOL() { return GetToken(MySQLParser.SOURCE_DELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySQLParser.SOURCE_HEARTBEAT_PERIOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_HOST_SYMBOL() { return GetToken(MySQLParser.SOURCE_HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.SOURCE_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_LOG_POS_SYMBOL() { return GetToken(MySQLParser.SOURCE_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_PASSWORD_SYMBOL() { return GetToken(MySQLParser.SOURCE_PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_PORT_SYMBOL() { return GetToken(MySQLParser.SOURCE_PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySQLParser.SOURCE_PUBLIC_KEY_PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_RETRY_COUNT_SYMBOL() { return GetToken(MySQLParser.SOURCE_RETRY_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CAPATH_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_CAPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CA_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_CA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CERT_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CIPHER_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CRLPATH_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_CRLPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CRL_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_CRL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_KEY_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL() { return GetToken(MySQLParser.SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySQLParser.SOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_TLS_CIPHERSUITES_SYMBOL() { return GetToken(MySQLParser.SOURCE_TLS_CIPHERSUITES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_TLS_VERSION_SYMBOL() { return GetToken(MySQLParser.SOURCE_TLS_VERSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_USER_SYMBOL() { return GetToken(MySQLParser.SOURCE_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return GetToken(MySQLParser.SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRID_SYMBOL() { return GetToken(MySQLParser.SRID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED_SYMBOL() { return GetToken(MySQLParser.STACKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS_SYMBOL() { return GetToken(MySQLParser.STARTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_SYMBOL() { return GetToken(MySQLParser.STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_COLLECT_SYMBOL() { return GetToken(MySQLParser.ST_COLLECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySQLParser.SWAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_SYMBOL() { return GetToken(MySQLParser.TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN_SYMBOL() { return GetToken(MySQLParser.THAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES_SYMBOL() { return GetToken(MySQLParser.TIES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPADD_SYMBOL() { return GetToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPDIFF_SYMBOL() { return GetToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLS_SYMBOL() { return GetToken(MySQLParser.TLS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_SYMBOL() { return GetToken(MySQLParser.TYPES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNREGISTER_SYMBOL() { return GetToken(MySQLParser.UNREGISTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySQLParser.UNTIL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION_SYMBOL() { return GetToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VCPU_SYMBOL() { return GetToken(MySQLParser.VCPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_SYMBOL() { return GetToken(MySQLParser.WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK_SYMBOL() { return GetToken(MySQLParser.WEEK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT_SYMBOL() { return GetToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509_SYMBOL() { return GetToken(MySQLParser.X509_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XID_SYMBOL() { return GetToken(MySQLParser.XID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_SYMBOL() { return GetToken(MySQLParser.XML_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE_SYMBOL() { return GetToken(MySQLParser.ZONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_SYMBOL() { return GetToken(MySQLParser.ARRAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILED_LOGIN_ATTEMPTS_SYMBOL() { return GetToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER_SYMBOL() { return GetToken(MySQLParser.MEMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF_SYMBOL() { return GetToken(MySQLParser.OFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_LOCK_TIME_SYMBOL() { return GetToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySQLParser.RANDOM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_ROW_FORMAT_SYMBOL() { return GetToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() { return GetToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM_SYMBOL() { return GetToken(MySQLParser.STREAM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BULK_SYMBOL() { return GetToken(MySQLParser.BULK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATE_SYMBOL() { return GetToken(MySQLParser.GENERATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTIDS_SYMBOL() { return GetToken(MySQLParser.GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG_SYMBOL() { return GetToken(MySQLParser.LOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSE_TREE_SYMBOL() { return GetToken(MySQLParser.PARSE_TREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S3_SYMBOL() { return GetToken(MySQLParser.S3_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BERNOULLI_SYMBOL() { return GetToken(MySQLParser.BERNOULLI_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsUnambiguous; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsUnambiguous(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsUnambiguous(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
		IdentifierKeywordsUnambiguousContext _localctx = new IdentifierKeywordsUnambiguousContext(Context, State);
		EnterRule(_localctx, 1498, RULE_identifierKeywordsUnambiguous);
		int _la;
		try {
			State = 9245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1170,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9240;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & 9086892652644541691L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -4412943208922816677L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & -8429668761677951481L) != 0) || ((((_la - 242)) & ~0x3f) == 0 && ((1L << (_la - 242)) & 7283684567714153551L) != 0) || ((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & 6223708532345118931L) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & -8648045939034882561L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 8175298952803425509L) != 0) || ((((_la - 501)) & ~0x3f) == 0 && ((1L << (_la - 501)) & 4749773417287869291L) != 0) || ((((_la - 566)) & ~0x3f) == 0 && ((1L << (_la - 566)) & 8440016285667793983L) != 0) || ((((_la - 634)) & ~0x3f) == 0 && ((1L << (_la - 634)) & -9132393641699904475L) != 0) || ((((_la - 698)) & ~0x3f) == 0 && ((1L << (_la - 698)) & 8611416781445657001L) != 0) || ((((_la - 762)) & ~0x3f) == 0 && ((1L << (_la - 762)) & 2199023255551L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9241;
				if (!(this.isServerVersionGe80019())) throw new FailedPredicateException(this, "this.isServerVersionGe80019()");
				State = 9242;
				_la = TokenStream.LA(1);
				if ( !(_la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL || ((((_la - 739)) & ~0x3f) == 0 && ((1L << (_la - 739)) & 16381L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9243;
				if (!(this.isServerVersionGe80200())) throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
				State = 9244;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 804)) & ~0x3f) == 0 && ((1L << (_la - 804)) & 2237L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return GetRuleContext<RoleOrLabelKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return GetRuleContext<RoleOrIdentifierKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public RoleKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleKeyword(this);
		}
	}

	[RuleVersion(0)]
	public RoleKeywordContext roleKeyword() {
		RoleKeywordContext _localctx = new RoleKeywordContext(Context, State);
		EnterRule(_localctx, 1500, RULE_roleKeyword);
		try {
			State = 9257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1173,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9247;
				if (!(this.isServerVersionLt80017())) throw new FailedPredicateException(this, "this.isServerVersionLt80017()");
				State = 9250;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1171,Context) ) {
				case 1:
					{
					State = 9248;
					roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					State = 9249;
					roleOrIdentifierKeyword();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9255;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1172,Context) ) {
				case 1:
					{
					State = 9252;
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					State = 9253;
					identifierKeywordsAmbiguous2Labels();
					}
					break;
				case 3:
					{
					State = 9254;
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous1RolesAndLabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		public LValueKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLValueKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLValueKeyword(this);
		}
	}

	[RuleVersion(0)]
	public LValueKeywordContext lValueKeyword() {
		LValueKeywordContext _localctx = new LValueKeywordContext(Context, State);
		EnterRule(_localctx, 1502, RULE_lValueKeyword);
		try {
			State = 9263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1174,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9259;
				identifierKeywordsUnambiguous();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9260;
				identifierKeywordsAmbiguous1RolesAndLabels();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9261;
				identifierKeywordsAmbiguous2Labels();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9262;
				identifierKeywordsAmbiguous3Roles();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous4SystemVariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySQLParser.PERSIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous4SystemVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous4SystemVariables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
		IdentifierKeywordsAmbiguous4SystemVariablesContext _localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(Context, State);
		EnterRule(_localctx, 1504, RULE_identifierKeywordsAmbiguous4SystemVariables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9265;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrIdentifierKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII_SYMBOL() { return GetToken(MySQLParser.ASCII_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySQLParser.BACKUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_SYMBOL() { return GetToken(MySQLParser.BYTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE_SYMBOL() { return GetToken(MySQLParser.CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySQLParser.CHARSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_SYMBOL() { return GetToken(MySQLParser.CLONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySQLParser.CLOSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySQLParser.COMMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySQLParser.FLUSH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySQLParser.FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySQLParser.HANDLER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP_SYMBOL() { return GetToken(MySQLParser.HELP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST_SYMBOL() { return GetToken(MySQLParser.HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySQLParser.INSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER_SYMBOL() { return GetToken(MySQLParser.OWNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER_SYMBOL() { return GetToken(MySQLParser.PARSER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT_SYMBOL() { return GetToken(MySQLParser.PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySQLParser.PREPARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySQLParser.REMOVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySQLParser.REPAIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET_SYMBOL() { return GetToken(MySQLParser.RESET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE_SYMBOL() { return GetToken(MySQLParser.RESTORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySQLParser.SECURITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySQLParser.SIGNED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySQLParser.SOCKET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME_SYMBOL() { return GetToken(MySQLParser.SONAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_SYMBOL() { return GetToken(MySQLParser.STOP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySQLParser.UNICODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_SYMBOL() { return GetToken(MySQLParser.XA_SYMBOL, 0); }
		public RoleOrIdentifierKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrIdentifierKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleOrIdentifierKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleOrIdentifierKeyword(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
		RoleOrIdentifierKeywordContext _localctx = new RoleOrIdentifierKeywordContext(Context, State);
		EnterRule(_localctx, 1506, RULE_roleOrIdentifierKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9267;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & 1197964097992328193L) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 35184372121605L) != 0) || ((((_la - 183)) & ~0x3f) == 0 && ((1L << (_la - 183)) & 577692205326536705L) != 0) || ((((_la - 251)) & ~0x3f) == 0 && ((1L << (_la - 251)) & 70368811286569L) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & 11547170643969L) != 0) || ((((_la - 469)) & ~0x3f) == 0 && ((1L << (_la - 469)) & 7097956755589890057L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & -4602678819172646399L) != 0) || ((((_la - 624)) & ~0x3f) == 0 && ((1L << (_la - 624)) & 2305957397077688321L) != 0) || ((((_la - 728)) & ~0x3f) == 0 && ((1L << (_la - 728)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrLabelKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_SYMBOL() { return GetToken(MySQLParser.ACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER_SYMBOL() { return GetToken(MySQLParser.AFTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySQLParser.AGAINST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_SYMBOL() { return GetToken(MySQLParser.ANY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SYMBOL() { return GetToken(MySQLParser.AT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_SYMBOL() { return GetToken(MySQLParser.AVG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySQLParser.BINLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_SYMBOL() { return GetToken(MySQLParser.BIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySQLParser.BLOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_SYMBOL() { return GetToken(MySQLParser.BOOL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE_SYMBOL() { return GetToken(MySQLParser.BTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySQLParser.CASCADED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySQLParser.CHAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySQLParser.CHANGED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySQLParser.CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySQLParser.CLIENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySQLParser.COALESCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_SYMBOL() { return GetToken(MySQLParser.CODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySQLParser.COLLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySQLParser.COMPACT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU_SYMBOL() { return GetToken(MySQLParser.CPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK_SYMBOL() { return GetToken(MySQLParser.DISK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS_SYMBOL() { return GetToken(MySQLParser.ENDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_SYMBOL() { return GetToken(MySQLParser.ENUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySQLParser.ENGINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySQLParser.ERRORS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySQLParser.EVENTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY_SYMBOL() { return GetToken(MySQLParser.EVERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySQLParser.EXPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySQLParser.FAULTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST_SYMBOL() { return GetToken(MySQLParser.FAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND_SYMBOL() { return GetToken(MySQLParser.FOUND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_SYMBOL() { return GetToken(MySQLParser.FILTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySQLParser.GENERAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySQLParser.GRANTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySQLParser.HISTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySQLParser.HOSTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SYMBOL() { return GetToken(MySQLParser.HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySQLParser.INVOKER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySQLParser.INDEXES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_SYMBOL() { return GetToken(MySQLParser.IO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC_SYMBOL() { return GetToken(MySQLParser.IPC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySQLParser.ISSUER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SYMBOL() { return GetToken(MySQLParser.JSON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySQLParser.LEAVES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySQLParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySQLParser.LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SYMBOL() { return GetToken(MySQLParser.LIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySQLParser.LOCKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKS_SYMBOL() { return GetToken(MySQLParser.LOCKS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE_SYMBOL() { return GetToken(MySQLParser.MERGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySQLParser.MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySQLParser.MODIFY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE_SYMBOL() { return GetToken(MySQLParser.MODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_SYMBOL() { return GetToken(MySQLParser.MONTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySQLParser.MUTEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO_SYMBOL() { return GetToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_SYMBOL() { return GetToken(MySQLParser.NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES_SYMBOL() { return GetToken(MySQLParser.NAMES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySQLParser.NCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDBCLUSTER_SYMBOL() { return GetToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_SYMBOL() { return GetToken(MySQLParser.NESTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER_SYMBOL() { return GetToken(MySQLParser.NEVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT_SYMBOL() { return GetToken(MySQLParser.NEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_SYMBOL() { return GetToken(MySQLParser.NEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_SYMBOL() { return GetToken(MySQLParser.NULLS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySQLParser.NUMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySQLParser.OFFSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_SYMBOL() { return GetToken(MySQLParser.OLD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_SYMBOL() { return GetToken(MySQLParser.ONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySQLParser.OTHERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_SYMBOL() { return GetToken(MySQLParser.PAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH_SYMBOL() { return GetToken(MySQLParser.PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE_SYMBOL() { return GetToken(MySQLParser.PHASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_SYMBOL() { return GetToken(MySQLParser.POINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySQLParser.POLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV_SYMBOL() { return GetToken(MySQLParser.PREV_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySQLParser.PROFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySQLParser.PROFILES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySQLParser.QUARTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY_SYMBOL() { return GetToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySQLParser.REBUILD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySQLParser.RECOVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_SYMBOL() { return GetToken(MySQLParser.RELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE_SYMBOL() { return GetToken(MySQLParser.REMOTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySQLParser.RESPECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME_SYMBOL() { return GetToken(MySQLParser.RESUME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySQLParser.RETAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySQLParser.RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REUSE_SYMBOL() { return GetToken(MySQLParser.REUSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySQLParser.REVERSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySQLParser.ROTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE_SYMBOL() { return GetToken(MySQLParser.RTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySQLParser.SERIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE_SYMBOL() { return GetToken(MySQLParser.SHARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_SYMBOL() { return GetToken(MySQLParser.SKIP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW_SYMBOL() { return GetToken(MySQLParser.SLOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySQLParser.SOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRID_SYMBOL() { return GetToken(MySQLParser.SRID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED_SYMBOL() { return GetToken(MySQLParser.STACKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS_SYMBOL() { return GetToken(MySQLParser.STARTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_SYMBOL() { return GetToken(MySQLParser.STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER_SYMBOL() { return GetToken(MySQLParser.SUPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySQLParser.SWAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_SYMBOL() { return GetToken(MySQLParser.TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN_SYMBOL() { return GetToken(MySQLParser.THAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES_SYMBOL() { return GetToken(MySQLParser.TIES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPADD_SYMBOL() { return GetToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPDIFF_SYMBOL() { return GetToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_SYMBOL() { return GetToken(MySQLParser.TYPES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDF_RETURNS_SYMBOL() { return GetToken(MySQLParser.UDF_RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySQLParser.UNTIL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VCPU_SYMBOL() { return GetToken(MySQLParser.VCPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_SYMBOL() { return GetToken(MySQLParser.WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK_SYMBOL() { return GetToken(MySQLParser.WEEK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509_SYMBOL() { return GetToken(MySQLParser.X509_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XID_SYMBOL() { return GetToken(MySQLParser.XID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_SYMBOL() { return GetToken(MySQLParser.XML_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public RoleOrLabelKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrLabelKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleOrLabelKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleOrLabelKeyword(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrLabelKeywordContext roleOrLabelKeyword() {
		RoleOrLabelKeywordContext _localctx = new RoleOrLabelKeywordContext(Context, State);
		EnterRule(_localctx, 1508, RULE_roleOrLabelKeyword);
		int _la;
		try {
			State = 9272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1175,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9269;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & -5256386462840123267L) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & -2206471604461408339L) != 0) || ((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & 4972508841280096003L) != 0) || ((((_la - 243)) & ~0x3f) == 0 && ((1L << (_la - 243)) & 3641842283857068591L) != 0) || ((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & 6223708532345118939L) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & -8936355520825983489L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 8174173048601615589L) != 0) || ((((_la - 501)) & ~0x3f) == 0 && ((1L << (_la - 501)) & 4749773415677223275L) != 0) || ((((_la - 566)) & ~0x3f) == 0 && ((1L << (_la - 566)) & 8151794705609104959L) != 0) || ((((_la - 636)) & ~0x3f) == 0 && ((1L << (_la - 636)) & 6940555069192944905L) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & 72057652113112629L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9270;
				if (!(this.isServerVersionGe80014())) throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				State = 9271;
				Match(ADMIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return alterStatement_sempred((AlterStatementContext)_localctx, predIndex);
		case 15: return standaloneAlterCommands_sempred((StandaloneAlterCommandsContext)_localctx, predIndex);
		case 19: return alterListItem_sempred((AlterListItemContext)_localctx, predIndex);
		case 29: return alterTablespace_sempred((AlterTablespaceContext)_localctx, predIndex);
		case 34: return alterTablespaceOption_sempred((AlterTablespaceOptionContext)_localctx, predIndex);
		case 40: return alterInstanceStatement_sempred((AlterInstanceStatementContext)_localctx, predIndex);
		case 41: return createStatement_sempred((CreateStatementContext)_localctx, predIndex);
		case 43: return createDatabaseOption_sempred((CreateDatabaseOptionContext)_localctx, predIndex);
		case 54: return storedRoutineBody_sempred((StoredRoutineBodyContext)_localctx, predIndex);
		case 59: return routineOption_sempred((RoutineOptionContext)_localctx, predIndex);
		case 71: return tsDataFileName_sempred((TsDataFileNameContext)_localctx, predIndex);
		case 74: return tablespaceOption_sempred((TablespaceOptionContext)_localctx, predIndex);
		case 97: return dropStatement_sempred((DropStatementContext)_localctx, predIndex);
		case 118: return deleteStatement_sempred((DeleteStatementContext)_localctx, predIndex);
		case 132: return valuesReference_sempred((ValuesReferenceContext)_localctx, predIndex);
		case 137: return loadFrom_sempred((LoadFromContext)_localctx, predIndex);
		case 138: return loadSourceType_sempred((LoadSourceTypeContext)_localctx, predIndex);
		case 139: return sourceCount_sempred((SourceCountContext)_localctx, predIndex);
		case 140: return sourceOrder_sempred((SourceOrderContext)_localctx, predIndex);
		case 145: return loadAlgorithm_sempred((LoadAlgorithmContext)_localctx, predIndex);
		case 146: return loadParallel_sempred((LoadParallelContext)_localctx, predIndex);
		case 147: return loadMemory_sempred((LoadMemoryContext)_localctx, predIndex);
		case 150: return selectStatementWithInto_sempred((SelectStatementWithIntoContext)_localctx, predIndex);
		case 152: return queryExpressionBody_sempred((QueryExpressionBodyContext)_localctx, predIndex);
		case 154: return queryPrimary_sempred((QueryPrimaryContext)_localctx, predIndex);
		case 165: return qualifyClause_sempred((QualifyClauseContext)_localctx, predIndex);
		case 179: return groupByClause_sempred((GroupByClauseContext)_localctx, predIndex);
		case 189: return lockingClauseList_sempred((LockingClauseListContext)_localctx, predIndex);
		case 197: return tableReference_sempred((TableReferenceContext)_localctx, predIndex);
		case 203: return tableFactor_sempred((TableFactorContext)_localctx, predIndex);
		case 206: return derivedTable_sempred((DerivedTableContext)_localctx, predIndex);
		case 210: return jtColumn_sempred((JtColumnContext)_localctx, predIndex);
		case 217: return tableAlias_sempred((TableAliasContext)_localctx, predIndex);
		case 241: return masterOrBinaryLogsAndGtids_sempred((MasterOrBinaryLogsAndGtidsContext)_localctx, predIndex);
		case 244: return changeReplicationSource_sempred((ChangeReplicationSourceContext)_localctx, predIndex);
		case 247: return sourceDefinition_sempred((SourceDefinitionContext)_localctx, predIndex);
		case 307: return cloneStatement_sempred((CloneStatementContext)_localctx, predIndex);
		case 311: return alterUserStatement_sempred((AlterUserStatementContext)_localctx, predIndex);
		case 313: return alterUser_sempred((AlterUserContext)_localctx, predIndex);
		case 317: return createUserTail_sempred((CreateUserTailContext)_localctx, predIndex);
		case 322: return accountLockPasswordExpireOptions_sempred((AccountLockPasswordExpireOptionsContext)_localctx, predIndex);
		case 326: return grantTargetList_sempred((GrantTargetListContext)_localctx, predIndex);
		case 331: return versionedRequireClause_sempred((VersionedRequireClauseContext)_localctx, predIndex);
		case 333: return revokeStatement_sempred((RevokeStatementContext)_localctx, predIndex);
		case 337: return grantIdentifier_sempred((GrantIdentifierContext)_localctx, predIndex);
		case 340: return grantOption_sempred((GrantOptionContext)_localctx, predIndex);
		case 345: return histogramAutoUpdate_sempred((HistogramAutoUpdateContext)_localctx, predIndex);
		case 346: return histogramUpdateParam_sempred((HistogramUpdateParamContext)_localctx, predIndex);
		case 347: return histogramNumBuckets_sempred((HistogramNumBucketsContext)_localctx, predIndex);
		case 356: return installSetValueList_sempred((InstallSetValueListContext)_localctx, predIndex);
		case 358: return startOptionValueList_sempred((StartOptionValueListContext)_localctx, predIndex);
		case 363: return optionValueNoOptionType_sempred((OptionValueNoOptionTypeContext)_localctx, predIndex);
		case 375: return showParseTreeStatement_sempred((ShowParseTreeStatementContext)_localctx, predIndex);
		case 447: return utilityStatement_sempred((UtilityStatementContext)_localctx, predIndex);
		case 449: return explainStatement_sempred((ExplainStatementContext)_localctx, predIndex);
		case 450: return explainOptions_sempred((ExplainOptionsContext)_localctx, predIndex);
		case 456: return expr_sempred((ExprContext)_localctx, predIndex);
		case 457: return boolPri_sempred((BoolPriContext)_localctx, predIndex);
		case 459: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 461: return bitExpr_sempred((BitExprContext)_localctx, predIndex);
		case 462: return simpleExpr_sempred((SimpleExprContext)_localctx, predIndex);
		case 463: return arrayCast_sempred((ArrayCastContext)_localctx, predIndex);
		case 467: return windowFunctionCall_sempred((WindowFunctionCallContext)_localctx, predIndex);
		case 470: return tablesampleClause_sempred((TablesampleClauseContext)_localctx, predIndex);
		case 472: return leadLagInfo_sempred((LeadLagInfoContext)_localctx, predIndex);
		case 481: return runtimeFunctionCall_sempred((RuntimeFunctionCallContext)_localctx, predIndex);
		case 497: return lvalueVariable_sempred((LvalueVariableContext)_localctx, predIndex);
		case 502: return castType_sempred((CastTypeContext)_localctx, predIndex);
		case 558: return checkOrReferences_sempred((CheckOrReferencesContext)_localctx, predIndex);
		case 560: return constraintEnforcement_sempred((ConstraintEnforcementContext)_localctx, predIndex);
		case 564: return columnAttribute_sempred((ColumnAttributeContext)_localctx, predIndex);
		case 575: return keyPartOrExpression_sempred((KeyPartOrExpressionContext)_localctx, predIndex);
		case 578: return commonIndexOption_sempred((CommonIndexOptionContext)_localctx, predIndex);
		case 595: return charsetName_sempred((CharsetNameContext)_localctx, predIndex);
		case 596: return collationName_sempred((CollationNameContext)_localctx, predIndex);
		case 601: return createTableOption_sempred((CreateTableOptionContext)_localctx, predIndex);
		case 620: return persistedVariableIdentifier_sempred((PersistedVariableIdentifierContext)_localctx, predIndex);
		case 703: return pureIdentifier_sempred((PureIdentifierContext)_localctx, predIndex);
		case 713: return real_ulonglong_number_sempred((Real_ulonglong_numberContext)_localctx, predIndex);
		case 715: return signedLiteralOrNull_sempred((SignedLiteralOrNullContext)_localctx, predIndex);
		case 717: return literalOrNull_sempred((LiteralOrNullContext)_localctx, predIndex);
		case 720: return textStringLiteral_sempred((TextStringLiteralContext)_localctx, predIndex);
		case 722: return textStringHash_sempred((TextStringHashContext)_localctx, predIndex);
		case 744: return identifierKeyword_sempred((IdentifierKeywordContext)_localctx, predIndex);
		case 747: return labelKeyword_sempred((LabelKeywordContext)_localctx, predIndex);
		case 749: return identifierKeywordsUnambiguous_sempred((IdentifierKeywordsUnambiguousContext)_localctx, predIndex);
		case 750: return roleKeyword_sempred((RoleKeywordContext)_localctx, predIndex);
		case 754: return roleOrLabelKeyword_sempred((RoleOrLabelKeywordContext)_localctx, predIndex);
		}
		return true;
	}
	private bool alterStatement_sempred(AlterStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.isServerVersionGe80014();
		}
		return true;
	}
	private bool standaloneAlterCommands_sempred(StandaloneAlterCommandsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return this.isServerVersionGe80014();
		}
		return true;
	}
	private bool alterListItem_sempred(AlterListItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return this.isServerVersionGe80017();
		case 3: return this.isServerVersionGe80019();
		case 4: return this.isServerVersionGe80014();
		case 5: return this.isServerVersionGe80024();
		case 6: return this.isServerVersionGe80017();
		case 7: return this.isServerVersionGe80019();
		case 8: return this.isServerVersionGe80014();
		}
		return true;
	}
	private bool alterTablespace_sempred(AlterTablespaceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return this.isServerVersionGe80014();
		}
		return true;
	}
	private bool alterTablespaceOption_sempred(AlterTablespaceOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return this.isServerVersionGe80024();
		}
		return true;
	}
	private bool alterInstanceStatement_sempred(AlterInstanceStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return this.isServerVersionGe80024();
		}
		return true;
	}
	private bool createStatement_sempred(CreateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return this.isServerVersionGe80011();
		case 13: return this.isServerVersionGe80014();
		}
		return true;
	}
	private bool createDatabaseOption_sempred(CreateDatabaseOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return this.isServerVersionGe80016();
		}
		return true;
	}
	private bool storedRoutineBody_sempred(StoredRoutineBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return this.isStoredRoutineBody();
		}
		return true;
	}
	private bool routineOption_sempred(RoutineOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return this.isServerVersionGe80032();
		}
		return true;
	}
	private bool tsDataFileName_sempred(TsDataFileNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return this.isServerVersionGe80014();
		}
		return true;
	}
	private bool tablespaceOption_sempred(TablespaceOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return this.isServerVersionGe80014();
		}
		return true;
	}
	private bool dropStatement_sempred(DropStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return this.isServerVersionGe80011();
		case 20: return this.isServerVersionGe80014();
		}
		return true;
	}
	private bool deleteStatement_sempred(DeleteStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return this.isServerVersionGe80017();
		}
		return true;
	}
	private bool valuesReference_sempred(ValuesReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return this.isServerVersionGe80018();
		}
		return true;
	}
	private bool loadFrom_sempred(LoadFromContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return this.isServerVersionGe80200();
		}
		return true;
	}
	private bool loadSourceType_sempred(LoadSourceTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return this.isServerVersionGe80200();
		}
		return true;
	}
	private bool sourceCount_sempred(SourceCountContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return this.isServerVersionGe80200();
		}
		return true;
	}
	private bool sourceOrder_sempred(SourceOrderContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return this.isServerVersionGe80200();
		}
		return true;
	}
	private bool loadAlgorithm_sempred(LoadAlgorithmContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27: return this.isServerVersionGe80200();
		}
		return true;
	}
	private bool loadParallel_sempred(LoadParallelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return this.isServerVersionGe80200();
		}
		return true;
	}
	private bool loadMemory_sempred(LoadMemoryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return this.isServerVersionGe80200();
		}
		return true;
	}
	private bool selectStatementWithInto_sempred(SelectStatementWithIntoContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return this.isSelectStatementWithInto();
		}
		return true;
	}
	private bool queryExpressionBody_sempred(QueryExpressionBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return this.isServerVersionGe80031();
		}
		return true;
	}
	private bool queryPrimary_sempred(QueryPrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return this.isServerVersionGe80019();
		case 33: return this.isServerVersionGe80019();
		}
		return true;
	}
	private bool qualifyClause_sempred(QualifyClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return this.isServerVersionGe80200();
		}
		return true;
	}
	private bool groupByClause_sempred(GroupByClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return this.isServerVersionGe80032();
		}
		return true;
	}
	private bool lockingClauseList_sempred(LockingClauseListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return this.isServerVersionGe80031();
		}
		return true;
	}
	private bool tableReference_sempred(TableReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return this.isServerVersionGe80017();
		}
		return true;
	}
	private bool tableFactor_sempred(TableFactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return this.isServerVersionGe80004();
		}
		return true;
	}
	private bool derivedTable_sempred(DerivedTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return this.isServerVersionGe80014();
		}
		return true;
	}
	private bool jtColumn_sempred(JtColumnContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return this.isServerVersionGe80014();
		}
		return true;
	}
	private bool tableAlias_sempred(TableAliasContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return this.isServerVersionGe80017();
		}
		return true;
	}
	private bool masterOrBinaryLogsAndGtids_sempred(MasterOrBinaryLogsAndGtidsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return this.isServerVersionGe80032();
		}
		return true;
	}
	private bool changeReplicationSource_sempred(ChangeReplicationSourceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return this.isServerVersionGe80024();
		}
		return true;
	}
	private bool sourceDefinition_sempred(SourceDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return this.isServerVersionGe80024();
		case 45: return this.isServerVersionGe80024();
		case 46: return this.isServerVersionGe80027();
		}
		return true;
	}
	private bool cloneStatement_sempred(CloneStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return this.isServerVersionGe80014();
		}
		return true;
	}
	private bool alterUserStatement_sempred(AlterUserStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return this.isServerVersionGe80014();
		case 49: return this.isServerVersionGe80014();
		}
		return true;
	}
	private bool alterUser_sempred(AlterUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return this.isServerVersionLt80025();
		case 51: return this.isServerVersionGe80025();
		}
		return true;
	}
	private bool createUserTail_sempred(CreateUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return this.isServerVersionGe80024();
		}
		return true;
	}
	private bool accountLockPasswordExpireOptions_sempred(AccountLockPasswordExpireOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return this.isServerVersionGe80014();
		}
		return true;
	}
	private bool grantTargetList_sempred(GrantTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return this.isServerVersionLt80011();
		case 55: return this.isServerVersionGe80011();
		}
		return true;
	}
	private bool versionedRequireClause_sempred(VersionedRequireClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return this.isServerVersionLt80011();
		}
		return true;
	}
	private bool revokeStatement_sempred(RevokeStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return this.isServerVersionGe80031();
		case 58: return this.isServerVersionGe80031();
		}
		return true;
	}
	private bool grantIdentifier_sempred(GrantIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59: return this.isServerVersionGe80017();
		}
		return true;
	}
	private bool grantOption_sempred(GrantOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return this.isServerVersionLt80011();
		}
		return true;
	}
	private bool histogramAutoUpdate_sempred(HistogramAutoUpdateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return this.isServerVersionGe80200();
		}
		return true;
	}
	private bool histogramUpdateParam_sempred(HistogramUpdateParamContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return this.isServerVersionGe80031();
		}
		return true;
	}
	private bool histogramNumBuckets_sempred(HistogramNumBucketsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return this.isServerVersionGe80200();
		}
		return true;
	}
	private bool installSetValueList_sempred(InstallSetValueListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return this.isServerVersionGe80032();
		}
		return true;
	}
	private bool startOptionValueList_sempred(StartOptionValueListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65: return this.isServerVersionLt80014();
		case 66: return this.isServerVersionGe80018();
		}
		return true;
	}
	private bool optionValueNoOptionType_sempred(OptionValueNoOptionTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67: return this.isServerVersionGe80011();
		}
		return true;
	}
	private bool showParseTreeStatement_sempred(ShowParseTreeStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68: return this.isServerVersionGe80100();
		}
		return true;
	}
	private bool utilityStatement_sempred(UtilityStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69: return this.isServerVersionGe80011();
		}
		return true;
	}
	private bool explainStatement_sempred(ExplainStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70: return this.isServerVersionGe80032();
		}
		return true;
	}
	private bool explainOptions_sempred(ExplainOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71: return this.isServerVersionGe80032();
		case 72: return this.isServerVersionLt80012();
		case 73: return this.isServerVersionGe80018();
		case 74: return this.isServerVersionGe80019();
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75: return Precpred(Context, 3);
		case 76: return Precpred(Context, 2);
		case 77: return Precpred(Context, 1);
		}
		return true;
	}
	private bool boolPri_sempred(BoolPriContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78: return Precpred(Context, 3);
		case 79: return Precpred(Context, 2);
		case 80: return Precpred(Context, 1);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81: return this.isServerVersionGe80017();
		}
		return true;
	}
	private bool bitExpr_sempred(BitExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 82: return Precpred(Context, 7);
		case 83: return Precpred(Context, 6);
		case 84: return Precpred(Context, 5);
		case 85: return Precpred(Context, 3);
		case 86: return Precpred(Context, 2);
		case 87: return Precpred(Context, 1);
		case 88: return Precpred(Context, 4);
		}
		return true;
	}
	private bool simpleExpr_sempred(SimpleExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 89: return Precpred(Context, 16);
		case 90: return Precpred(Context, 24);
		}
		return true;
	}
	private bool arrayCast_sempred(ArrayCastContext _localctx, int predIndex) {
		switch (predIndex) {
		case 91: return this.isServerVersionGe80017();
		}
		return true;
	}
	private bool windowFunctionCall_sempred(WindowFunctionCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 92: return this.isServerVersionLt80024();
		}
		return true;
	}
	private bool tablesampleClause_sempred(TablesampleClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 93: return this.isServerVersionGe80200();
		}
		return true;
	}
	private bool leadLagInfo_sempred(LeadLagInfoContext _localctx, int predIndex) {
		switch (predIndex) {
		case 94: return this.isServerVersionGe80024();
		}
		return true;
	}
	private bool runtimeFunctionCall_sempred(RuntimeFunctionCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 95: return this.isServerVersionGe80032();
		case 96: return this.isServerVersionLt80011();
		}
		return true;
	}
	private bool lvalueVariable_sempred(LvalueVariableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 97: return this.isServerVersionGe80017();
		}
		return true;
	}
	private bool castType_sempred(CastTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 98: return this.isServerVersionGe80024();
		case 99: return this.isServerVersionGe80017();
		case 100: return this.isServerVersionGe80017();
		case 101: return this.isServerVersionGe80027();
		}
		return true;
	}
	private bool checkOrReferences_sempred(CheckOrReferencesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 102: return this.isServerVersionLt80016();
		}
		return true;
	}
	private bool constraintEnforcement_sempred(ConstraintEnforcementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 103: return this.isServerVersionGe80017();
		}
		return true;
	}
	private bool columnAttribute_sempred(ColumnAttributeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 104: return this.isServerVersionGe80014();
		case 105: return this.isServerVersionGe80013();
		case 106: return this.isServerVersionGe80017();
		case 107: return this.isServerVersionGe80017();
		case 108: return this.isServerVersionGe80024();
		case 109: return this.isServerVersionGe80024();
		case 110: return this.isServerVersionGe80024();
		}
		return true;
	}
	private bool keyPartOrExpression_sempred(KeyPartOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 111: return this.isServerVersionGe80013();
		}
		return true;
	}
	private bool commonIndexOption_sempred(CommonIndexOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 112: return this.isServerVersionGe80024();
		case 113: return this.isServerVersionGe80024();
		}
		return true;
	}
	private bool charsetName_sempred(CharsetNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 114: return this.isServerVersionLt80011();
		}
		return true;
	}
	private bool collationName_sempred(CollationNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 115: return this.isServerVersionLt80011();
		case 116: return this.isServerVersionGe80018();
		}
		return true;
	}
	private bool createTableOption_sempred(CreateTableOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 117: return this.isServerVersionGe80014();
		case 118: return this.isServerVersionGe80024();
		case 119: return this.isServerVersionGe80024();
		case 120: return this.isServerVersionGe80024();
		case 121: return this.isServerVersionGe80024();
		}
		return true;
	}
	private bool persistedVariableIdentifier_sempred(PersistedVariableIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 122: return this.isServerVersionGe80032();
		}
		return true;
	}
	private bool pureIdentifier_sempred(PureIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 123: return this.isPureIdentifier();
		}
		return true;
	}
	private bool real_ulonglong_number_sempred(Real_ulonglong_numberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 124: return this.isServerVersionGe80017();
		}
		return true;
	}
	private bool signedLiteralOrNull_sempred(SignedLiteralOrNullContext _localctx, int predIndex) {
		switch (predIndex) {
		case 125: return this.isServerVersionGe80024();
		}
		return true;
	}
	private bool literalOrNull_sempred(LiteralOrNullContext _localctx, int predIndex) {
		switch (predIndex) {
		case 126: return this.isServerVersionGe80024();
		}
		return true;
	}
	private bool textStringLiteral_sempred(TextStringLiteralContext _localctx, int predIndex) {
		switch (predIndex) {
		case 127: return this.isTextStringLiteral();
		}
		return true;
	}
	private bool textStringHash_sempred(TextStringHashContext _localctx, int predIndex) {
		switch (predIndex) {
		case 128: return this.isServerVersionGe80017();
		}
		return true;
	}
	private bool identifierKeyword_sempred(IdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 129: return this.isServerVersionLt80017();
		case 130: return this.isServerVersionGe80011();
		}
		return true;
	}
	private bool labelKeyword_sempred(LabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 131: return this.isServerVersionLt80017();
		}
		return true;
	}
	private bool identifierKeywordsUnambiguous_sempred(IdentifierKeywordsUnambiguousContext _localctx, int predIndex) {
		switch (predIndex) {
		case 132: return this.isServerVersionGe80019();
		case 133: return this.isServerVersionGe80200();
		}
		return true;
	}
	private bool roleKeyword_sempred(RoleKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 134: return this.isServerVersionLt80017();
		}
		return true;
	}
	private bool roleOrLabelKeyword_sempred(RoleOrLabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 135: return this.isServerVersionGe80014();
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,833,9275,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,
		2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,
		2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
		2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
		2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,
		2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,
		2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,
		2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,
		2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,
		2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,
		2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,
		2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,
		2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,
		2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
		2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
		2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,
		2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,
		2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,
		2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,
		2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,
		2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,
		2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,
		2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,
		2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,
		2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,
		2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
		2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,
		2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,
		2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,
		2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,
		2,513,7,513,2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,
		2,519,7,519,2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,
		2,525,7,525,2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,
		2,531,7,531,2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,
		2,537,7,537,2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,
		2,543,7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,
		2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
		2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,
		2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,
		2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,
		2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,7,578,
		2,579,7,579,2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,7,584,
		2,585,7,585,2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,7,590,
		2,591,7,591,2,592,7,592,2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,
		2,597,7,597,2,598,7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,
		2,603,7,603,2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,
		2,609,7,609,2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,
		2,615,7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,7,620,
		2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,2,626,7,626,
		2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,7,631,2,632,7,632,
		2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,2,637,7,637,2,638,7,638,
		2,639,7,639,2,640,7,640,2,641,7,641,2,642,7,642,2,643,7,643,2,644,7,644,
		2,645,7,645,2,646,7,646,2,647,7,647,2,648,7,648,2,649,7,649,2,650,7,650,
		2,651,7,651,2,652,7,652,2,653,7,653,2,654,7,654,2,655,7,655,2,656,7,656,
		2,657,7,657,2,658,7,658,2,659,7,659,2,660,7,660,2,661,7,661,2,662,7,662,
		2,663,7,663,2,664,7,664,2,665,7,665,2,666,7,666,2,667,7,667,2,668,7,668,
		2,669,7,669,2,670,7,670,2,671,7,671,2,672,7,672,2,673,7,673,2,674,7,674,
		2,675,7,675,2,676,7,676,2,677,7,677,2,678,7,678,2,679,7,679,2,680,7,680,
		2,681,7,681,2,682,7,682,2,683,7,683,2,684,7,684,2,685,7,685,2,686,7,686,
		2,687,7,687,2,688,7,688,2,689,7,689,2,690,7,690,2,691,7,691,2,692,7,692,
		2,693,7,693,2,694,7,694,2,695,7,695,2,696,7,696,2,697,7,697,2,698,7,698,
		2,699,7,699,2,700,7,700,2,701,7,701,2,702,7,702,2,703,7,703,2,704,7,704,
		2,705,7,705,2,706,7,706,2,707,7,707,2,708,7,708,2,709,7,709,2,710,7,710,
		2,711,7,711,2,712,7,712,2,713,7,713,2,714,7,714,2,715,7,715,2,716,7,716,
		2,717,7,717,2,718,7,718,2,719,7,719,2,720,7,720,2,721,7,721,2,722,7,722,
		2,723,7,723,2,724,7,724,2,725,7,725,2,726,7,726,2,727,7,727,2,728,7,728,
		2,729,7,729,2,730,7,730,2,731,7,731,2,732,7,732,2,733,7,733,2,734,7,734,
		2,735,7,735,2,736,7,736,2,737,7,737,2,738,7,738,2,739,7,739,2,740,7,740,
		2,741,7,741,2,742,7,742,2,743,7,743,2,744,7,744,2,745,7,745,2,746,7,746,
		2,747,7,747,2,748,7,748,2,749,7,749,2,750,7,750,2,751,7,751,2,752,7,752,
		2,753,7,753,2,754,7,754,1,0,5,0,1512,8,0,10,0,12,0,1515,9,0,1,0,1,0,1,
		1,1,1,3,1,1521,8,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1601,8,2,1,3,1,3,
		1,3,1,3,1,3,1,3,3,3,1609,8,3,1,3,1,3,1,3,3,3,1614,8,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,3,3,1624,8,3,1,4,1,4,1,4,4,4,1629,8,4,11,4,12,4,1630,1,
		5,1,5,1,5,1,5,3,5,1637,8,5,1,5,3,5,1640,8,5,1,6,3,6,1643,8,6,1,6,1,6,1,
		6,1,6,1,6,3,6,1650,8,6,1,6,1,6,1,6,3,6,1655,8,6,1,6,3,6,1658,8,6,1,6,1,
		6,1,6,3,6,1663,8,6,1,6,1,6,1,6,1,6,3,6,1669,8,6,3,6,1671,8,6,1,6,1,6,3,
		6,1675,8,6,1,6,1,6,3,6,1679,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,1688,8,
		7,1,8,1,8,3,8,1692,8,8,1,8,5,8,1695,8,8,10,8,12,8,1698,9,8,1,9,1,9,1,9,
		3,9,1703,8,9,1,10,1,10,1,10,1,10,1,11,3,11,1710,8,11,1,11,1,11,1,11,3,
		11,1715,8,11,1,12,1,12,1,12,3,12,1720,8,12,1,12,1,12,1,12,1,12,1,12,3,
		12,1727,8,12,1,12,3,12,1730,8,12,1,13,1,13,1,13,1,13,3,13,1736,8,13,1,
		13,3,13,1739,8,13,1,14,1,14,1,14,5,14,1744,8,14,10,14,12,14,1747,9,14,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,1756,8,15,1,16,1,16,1,16,3,16,
		1761,8,16,1,16,1,16,1,16,3,16,1766,8,16,1,16,1,16,1,16,1,16,1,16,1,16,
		3,16,1774,8,16,1,16,1,16,1,16,1,16,3,16,1780,8,16,1,16,1,16,3,16,1784,
		8,16,1,16,1,16,1,16,3,16,1789,8,16,1,16,1,16,1,16,1,16,1,16,5,16,1796,
		8,16,10,16,12,16,1799,9,16,1,16,1,16,1,16,3,16,1804,8,16,1,16,1,16,5,16,
		1808,8,16,10,16,12,16,1811,9,16,1,16,1,16,1,16,3,16,1816,8,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,3,16,1825,8,16,1,16,1,16,1,16,1,16,3,16,1831,
		8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,1840,8,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,1852,8,16,1,17,1,17,3,17,1856,
		8,17,1,17,1,17,1,17,1,17,3,17,1862,8,17,5,17,1864,8,17,10,17,12,17,1867,
		9,17,1,18,1,18,1,18,3,18,1872,8,18,1,19,1,19,3,19,1876,8,19,1,19,1,19,
		1,19,3,19,1881,8,19,1,19,3,19,1884,8,19,1,19,1,19,1,19,1,19,3,19,1890,
		8,19,1,19,1,19,1,19,1,19,3,19,1896,8,19,1,19,1,19,1,19,1,19,3,19,1902,
		8,19,1,19,1,19,3,19,1906,8,19,1,19,1,19,1,19,3,19,1911,8,19,1,19,1,19,
		3,19,1915,8,19,1,19,1,19,3,19,1919,8,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,1935,8,19,1,19,1,19,1,19,
		1,19,1,19,1,19,3,19,1943,8,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,1951,
		8,19,1,19,1,19,1,19,1,19,1,19,3,19,1958,8,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,3,19,1985,8,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,2000,8,19,1,19,3,19,2003,
		8,19,1,19,1,19,1,19,1,19,3,19,2009,8,19,1,20,1,20,1,20,3,20,2014,8,20,
		1,21,1,21,1,22,1,22,3,22,2020,8,22,1,22,1,22,1,22,3,22,2025,8,22,5,22,
		2027,8,22,10,22,12,22,2030,9,22,1,23,1,23,3,23,2034,8,23,1,23,1,23,3,23,
		2038,8,23,1,24,1,24,3,24,2042,8,24,1,24,1,24,3,24,2046,8,24,1,25,1,25,
		3,25,2050,8,25,1,25,1,25,3,25,2054,8,25,3,25,2056,8,25,1,26,1,26,1,26,
		1,27,1,27,1,27,1,28,1,28,3,28,2066,8,28,1,29,1,29,1,29,1,29,1,29,1,29,
		3,29,2074,8,29,1,29,1,29,1,29,1,29,1,29,3,29,2081,8,29,1,30,1,30,1,30,
		1,30,1,30,1,30,3,30,2089,8,30,1,31,1,31,3,31,2093,8,31,1,31,5,31,2096,
		8,31,10,31,12,31,2099,9,31,1,32,1,32,1,33,1,33,3,33,2105,8,33,1,33,5,33,
		2108,8,33,10,33,12,33,2111,9,33,1,34,1,34,3,34,2115,8,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,3,34,2125,8,34,1,35,1,35,3,35,2129,8,35,1,35,
		1,35,1,35,3,35,2134,8,35,1,36,3,36,2137,8,36,1,36,3,36,2140,8,36,1,36,
		3,36,2143,8,36,1,36,1,36,1,36,1,36,1,37,3,37,2150,8,37,1,37,1,37,1,37,
		1,38,1,38,3,38,2157,8,38,1,39,1,39,3,39,2161,8,39,1,39,1,39,1,39,1,40,
		1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
		1,40,1,40,1,40,1,40,1,40,3,40,2186,8,40,3,40,2188,8,40,1,40,1,40,1,40,
		1,40,1,40,1,40,3,40,2196,8,40,3,40,2198,8,40,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,
		2218,8,41,1,42,1,42,3,42,2222,8,42,1,42,1,42,5,42,2226,8,42,10,42,12,42,
		2229,9,42,1,43,1,43,1,43,1,43,3,43,2235,8,43,1,44,3,44,2238,8,44,1,44,
		1,44,3,44,2242,8,44,1,44,1,44,1,44,1,44,1,44,3,44,2249,8,44,1,44,3,44,
		2252,8,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,2261,8,44,1,45,1,45,
		1,45,5,45,2266,8,45,10,45,12,45,2269,9,45,1,46,1,46,3,46,2273,8,46,1,47,
		3,47,2276,8,47,1,47,1,47,1,48,3,48,2281,8,48,1,48,1,48,1,49,1,49,3,49,
		2287,8,49,1,49,3,49,2290,8,49,1,50,1,50,3,50,2294,8,50,1,51,1,51,1,51,
		1,51,3,51,2300,8,51,1,51,3,51,2303,8,51,1,51,1,51,1,52,3,52,2308,8,52,
		1,52,1,52,3,52,2312,8,52,1,52,1,52,1,52,1,52,1,52,5,52,2319,8,52,10,52,
		12,52,2322,9,52,3,52,2324,8,52,1,52,1,52,5,52,2328,8,52,10,52,12,52,2331,
		9,52,1,52,1,52,1,53,1,53,3,53,2337,8,53,1,54,1,54,1,54,1,54,3,54,2343,
		8,54,1,55,3,55,2346,8,55,1,55,1,55,3,55,2350,8,55,1,55,1,55,1,55,1,55,
		1,55,5,55,2357,8,55,10,55,12,55,2360,9,55,3,55,2362,8,55,1,55,1,55,1,55,
		1,55,5,55,2368,8,55,10,55,12,55,2371,9,55,1,55,1,55,1,56,3,56,2376,8,56,
		1,56,1,56,3,56,2380,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,3,57,
		2390,8,57,1,57,3,57,2393,8,57,1,58,4,58,2396,8,58,11,58,12,58,2397,1,59,
		1,59,1,59,1,59,1,59,1,59,3,59,2406,8,59,1,59,1,59,1,59,1,59,1,59,1,59,
		1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2421,8,59,1,60,3,60,2424,8,60,
		1,60,3,60,2427,8,60,1,60,1,60,1,60,3,60,2432,8,60,1,60,1,60,5,60,2436,
		8,60,10,60,12,60,2439,9,60,1,60,1,60,1,60,1,60,1,60,5,60,2446,8,60,10,
		60,12,60,2449,9,60,1,60,1,60,1,60,1,60,1,60,5,60,2456,8,60,10,60,12,60,
		2459,9,60,3,60,2461,8,60,1,60,3,60,2464,8,60,1,61,1,61,3,61,2468,8,61,
		1,61,1,61,1,61,1,61,1,61,1,61,3,61,2476,8,61,1,62,1,62,1,62,1,62,1,63,
		1,63,1,63,1,63,1,63,1,63,1,63,3,63,2489,8,63,1,64,1,64,3,64,2493,8,64,
		1,64,5,64,2496,8,64,10,64,12,64,2499,9,64,1,65,1,65,1,65,1,65,1,65,1,65,
		3,65,2507,8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,
		1,67,1,67,5,67,2522,8,67,10,67,12,67,2525,9,67,1,67,1,67,1,68,1,68,1,68,
		1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,2543,8,68,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,2552,8,69,1,69,3,69,2555,8,69,
		1,70,1,70,1,70,1,70,1,70,1,70,3,70,2563,8,70,1,71,1,71,1,71,1,71,1,71,
		3,71,2570,8,71,3,71,2572,8,71,1,72,1,72,1,72,1,73,1,73,3,73,2579,8,73,
		1,73,5,73,2582,8,73,10,73,12,73,2585,9,73,1,74,1,74,1,74,1,74,1,74,1,74,
		1,74,1,74,1,74,1,74,1,74,3,74,2598,8,74,1,75,1,75,3,75,2602,8,75,1,75,
		1,75,1,76,1,76,3,76,2608,8,76,1,76,1,76,1,77,1,77,3,77,2614,8,77,1,77,
		1,77,1,78,1,78,3,78,2620,8,78,1,78,1,78,1,79,1,79,3,79,2626,8,79,1,79,
		1,79,1,80,1,80,3,80,2632,8,80,1,80,1,80,1,81,3,81,2637,8,81,1,81,1,81,
		3,81,2641,8,81,1,81,1,81,1,82,1,82,1,83,1,83,3,83,2649,8,83,1,83,1,83,
		1,84,1,84,3,84,2655,8,84,1,84,1,84,1,85,1,85,3,85,2661,8,85,1,85,1,85,
		1,86,1,86,3,86,2667,8,86,1,86,1,86,1,87,3,87,2672,8,87,1,87,3,87,2675,
		8,87,1,87,3,87,2678,8,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,3,88,2687,
		8,88,1,88,3,88,2690,8,88,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,91,
		3,91,2701,8,91,1,91,1,91,3,91,2705,8,91,1,91,1,91,1,91,1,91,1,91,1,91,
		1,91,1,91,1,91,3,91,2716,8,91,1,91,1,91,1,92,1,92,1,92,1,93,3,93,2724,
		8,93,1,93,1,93,3,93,2728,8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,
		2737,8,93,1,93,3,93,2740,8,93,1,93,1,93,1,93,1,93,3,93,2746,8,93,3,93,
		2748,8,93,1,93,1,93,3,93,2752,8,93,1,93,1,93,1,93,1,94,1,94,3,94,2759,
		8,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,5,95,2770,8,95,10,95,
		12,95,2773,9,95,1,95,1,95,1,95,1,95,3,95,2779,8,95,1,95,1,95,5,95,2783,
		8,95,10,95,12,95,2786,9,95,3,95,2788,8,95,1,96,1,96,1,96,1,96,1,96,1,96,
		1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,2805,8,96,1,97,1,97,
		1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
		1,97,3,97,2824,8,97,1,98,1,98,3,98,2828,8,98,1,98,1,98,1,99,1,99,3,99,
		2834,8,99,1,99,1,99,1,100,1,100,3,100,2840,8,100,1,100,1,100,1,101,1,101,
		3,101,2846,8,101,1,101,1,101,1,102,3,102,2851,8,102,1,102,1,102,1,102,
		1,102,1,102,3,102,2858,8,102,1,103,1,103,1,103,1,103,1,103,3,103,2865,
		8,103,1,103,5,103,2868,8,103,10,103,12,103,2871,9,103,3,103,2873,8,103,
		1,104,1,104,3,104,2877,8,104,1,105,1,105,3,105,2881,8,105,1,105,1,105,
		1,106,3,106,2886,8,106,1,106,1,106,3,106,2890,8,106,1,106,1,106,3,106,
		2894,8,106,1,107,1,107,1,107,1,107,3,107,2900,8,107,1,107,5,107,2903,8,
		107,10,107,12,107,2906,9,107,3,107,2908,8,107,1,108,1,108,3,108,2912,8,
		108,1,108,1,108,1,109,1,109,3,109,2918,8,109,1,109,1,109,3,109,2922,8,
		109,1,110,1,110,3,110,2926,8,110,1,110,1,110,1,111,1,111,1,111,1,111,3,
		111,2934,8,111,1,111,1,111,1,112,1,112,1,112,1,112,3,112,2942,8,112,1,
		113,1,113,1,113,1,113,1,113,5,113,2949,8,113,10,113,12,113,2952,9,113,
		1,114,1,114,1,114,1,114,1,115,1,115,3,115,2960,8,115,1,115,1,115,1,116,
		1,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,3,117,2973,8,117,1,117,
		3,117,2976,8,117,1,118,3,118,2979,8,118,1,118,1,118,5,118,2983,8,118,10,
		118,12,118,2986,9,118,1,118,1,118,1,118,1,118,1,118,3,118,2993,8,118,1,
		118,1,118,1,118,3,118,2998,8,118,1,118,3,118,3001,8,118,1,118,3,118,3004,
		8,118,1,118,3,118,3007,8,118,1,118,3,118,3010,8,118,3,118,3012,8,118,1,
		118,1,118,1,118,1,118,3,118,3018,8,118,3,118,3020,8,118,1,119,1,119,1,
		119,1,119,1,119,1,120,1,120,1,121,1,121,1,121,1,122,1,122,1,122,1,122,
		3,122,3036,8,122,1,122,1,122,1,122,1,122,1,122,3,122,3043,8,122,1,122,
		3,122,3046,8,122,3,122,3048,8,122,3,122,3050,8,122,1,123,1,123,1,123,1,
		123,1,123,1,123,1,123,1,123,3,123,3060,8,123,3,123,3062,8,123,1,124,1,
		124,3,124,3066,8,124,1,124,3,124,3069,8,124,1,124,3,124,3072,8,124,1,124,
		1,124,3,124,3076,8,124,1,124,1,124,3,124,3080,8,124,1,124,1,124,1,124,
		3,124,3085,8,124,1,124,3,124,3088,8,124,1,124,3,124,3091,8,124,1,125,1,
		125,1,126,1,126,3,126,3097,8,126,1,126,3,126,3100,8,126,1,126,1,126,1,
		127,1,127,1,127,5,127,3107,8,127,10,127,12,127,3110,9,127,1,128,1,128,
		1,128,1,129,1,129,1,129,1,129,3,129,3119,8,129,1,129,3,129,3122,8,129,
		1,129,3,129,3125,8,129,1,130,1,130,3,130,3129,8,130,1,130,1,130,1,130,
		1,130,3,130,3135,8,130,1,130,5,130,3138,8,130,10,130,12,130,3141,9,130,
		1,131,1,131,3,131,3145,8,131,1,131,1,131,1,131,3,131,3150,8,131,5,131,
		3152,8,131,10,131,12,131,3155,9,131,1,132,1,132,1,132,1,132,3,132,3161,
		8,132,1,133,1,133,1,133,1,133,1,133,1,133,1,134,1,134,1,134,3,134,3172,
		8,134,1,134,3,134,3175,8,134,1,134,3,134,3178,8,134,1,134,3,134,3181,8,
		134,1,134,1,134,3,134,3185,8,134,1,134,3,134,3188,8,134,1,134,3,134,3191,
		8,134,1,134,1,134,1,134,1,134,3,134,3197,8,134,1,134,3,134,3200,8,134,
		1,134,3,134,3203,8,134,1,134,3,134,3206,8,134,1,134,3,134,3209,8,134,1,
		134,1,134,3,134,3213,8,134,1,134,3,134,3216,8,134,1,134,3,134,3219,8,134,
		1,135,1,135,1,136,1,136,1,137,1,137,1,137,1,138,1,138,1,138,3,138,3231,
		8,138,1,139,1,139,1,139,1,139,1,139,1,139,3,139,3239,8,139,1,140,1,140,
		1,140,1,140,1,140,1,140,1,141,1,141,1,141,1,141,1,141,1,142,1,142,1,142,
		3,142,3255,8,142,1,142,3,142,3258,8,142,1,142,1,142,3,142,3262,8,142,1,
		143,1,143,3,143,3266,8,143,1,143,1,143,1,144,1,144,1,144,1,144,3,144,3274,
		8,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,3282,8,144,5,144,3284,
		8,144,10,144,12,144,3287,9,144,1,145,1,145,1,145,1,145,1,145,1,146,1,146,
		1,146,1,146,1,146,1,147,1,147,1,147,1,147,1,147,1,148,1,148,3,148,3306,
		8,148,1,148,3,148,3309,8,148,1,148,1,148,3,148,3313,8,148,1,148,1,148,
		1,148,1,148,3,148,3319,8,148,1,149,1,149,3,149,3323,8,149,1,149,3,149,
		3326,8,149,1,150,1,150,1,150,1,150,1,150,1,150,1,150,3,150,3335,8,150,
		1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,3,150,3345,8,150,1,151,
		3,151,3348,8,151,1,151,1,151,3,151,3352,8,151,1,151,3,151,3355,8,151,1,
		152,1,152,3,152,3359,8,152,1,152,1,152,1,152,3,152,3364,8,152,1,152,3,
		152,3367,8,152,1,152,5,152,3370,8,152,10,152,12,152,3373,9,152,1,153,1,
		153,1,153,3,153,3378,8,153,1,153,1,153,1,154,1,154,1,154,1,154,1,154,3,
		154,3387,8,154,1,155,1,155,5,155,3391,8,155,10,155,12,155,3394,9,155,1,
		155,1,155,3,155,3398,8,155,1,155,3,155,3401,8,155,1,155,3,155,3404,8,155,
		1,155,3,155,3407,8,155,1,155,3,155,3410,8,155,1,155,3,155,3413,8,155,1,
		155,3,155,3416,8,155,1,156,1,156,1,157,1,157,1,158,1,158,1,158,1,159,1,
		159,1,159,1,160,1,160,1,160,3,160,3431,8,160,1,161,1,161,3,161,3435,8,
		161,1,162,1,162,1,162,1,162,3,162,3441,8,162,1,162,3,162,3444,8,162,1,
		162,3,162,3447,8,162,1,162,1,162,1,162,1,162,3,162,3453,8,162,1,162,1,
		162,1,162,3,162,3458,8,162,5,162,3460,8,162,10,162,12,162,3463,9,162,3,
		162,3465,8,162,1,163,1,163,1,163,1,163,1,163,3,163,3472,8,163,3,163,3474,
		8,163,1,163,1,163,1,164,1,164,1,164,1,165,1,165,1,165,1,165,1,166,1,166,
		1,166,1,166,5,166,3489,8,166,10,166,12,166,3492,9,166,1,167,1,167,1,167,
		1,167,1,168,1,168,1,168,1,168,1,169,3,169,3503,8,169,1,169,1,169,1,169,
		3,169,3508,8,169,1,169,3,169,3511,8,169,1,169,3,169,3514,8,169,1,170,1,
		170,1,170,3,170,3519,8,170,1,171,1,171,1,172,1,172,3,172,3525,8,172,1,
		173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
		1,173,1,173,3,173,3541,8,173,1,174,1,174,1,174,1,174,1,174,1,175,1,175,
		1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,3,175,
		3561,8,175,1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,3570,8,176,
		1,177,1,177,3,177,3574,8,177,1,177,1,177,1,177,5,177,3579,8,177,10,177,
		12,177,3582,9,177,1,178,1,178,3,178,3586,8,178,1,178,1,178,1,178,1,179,
		1,179,1,179,1,179,3,179,3595,8,179,1,179,1,179,1,179,1,179,1,179,1,179,
		1,179,1,179,3,179,3605,8,179,1,180,1,180,1,180,1,181,1,181,1,181,1,181,
		1,182,1,182,1,183,1,183,1,183,3,183,3619,8,183,1,184,1,184,1,184,5,184,
		3624,8,184,10,184,12,184,3627,9,184,1,185,1,185,1,185,1,185,5,185,3633,
		8,185,10,185,12,185,3636,9,185,1,186,1,186,1,186,1,187,1,187,1,187,3,187,
		3644,8,187,1,187,1,187,1,188,1,188,3,188,3650,8,188,1,189,1,189,4,189,
		3654,8,189,11,189,12,189,3655,1,190,1,190,1,190,1,190,3,190,3662,8,190,
		1,190,3,190,3665,8,190,1,190,1,190,1,190,1,190,3,190,3671,8,190,1,191,
		1,191,1,192,1,192,1,192,3,192,3678,8,192,1,193,1,193,3,193,3682,8,193,
		1,193,1,193,5,193,3686,8,193,10,193,12,193,3689,9,193,1,194,1,194,1,194,
		3,194,3694,8,194,3,194,3696,8,194,1,195,3,195,3699,8,195,1,195,1,195,3,
		195,3703,8,195,1,196,1,196,1,196,1,197,1,197,1,197,1,197,1,197,3,197,3713,
		8,197,1,197,1,197,1,197,3,197,3718,8,197,1,197,5,197,3721,8,197,10,197,
		12,197,3724,9,197,1,198,1,198,5,198,3728,8,198,10,198,12,198,3731,9,198,
		1,199,1,199,1,199,1,199,1,199,1,199,3,199,3739,8,199,1,199,1,199,1,199,
		1,199,1,199,1,199,3,199,3747,8,199,1,199,1,199,1,199,3,199,3752,8,199,
		1,200,1,200,3,200,3756,8,200,1,200,1,200,1,200,1,200,3,200,3762,8,200,
		1,200,3,200,3765,8,200,1,201,3,201,3768,8,201,1,201,1,201,3,201,3772,8,
		201,1,202,1,202,3,202,3776,8,202,1,202,1,202,1,203,1,203,1,203,1,203,1,
		203,1,203,3,203,3786,8,203,1,204,1,204,3,204,3790,8,204,1,204,3,204,3793,
		8,204,1,204,3,204,3796,8,204,1,204,3,204,3799,8,204,1,205,1,205,1,205,
		3,205,3804,8,205,1,205,1,205,1,206,1,206,3,206,3810,8,206,1,206,3,206,
		3813,8,206,1,206,1,206,1,206,1,206,3,206,3819,8,206,1,206,3,206,3822,8,
		206,3,206,3824,8,206,1,207,1,207,1,207,3,207,3829,8,207,1,207,1,207,1,
		208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,3,208,3841,8,208,1,209,1,
		209,1,209,1,209,1,209,5,209,3848,8,209,10,209,12,209,3851,9,209,1,209,
		1,209,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,3,210,3863,8,210,
		1,210,3,210,3866,8,210,1,210,1,210,1,210,3,210,3871,8,210,1,210,1,210,
		1,210,1,210,1,210,3,210,3878,8,210,1,211,1,211,3,211,3882,8,211,1,211,
		3,211,3885,8,211,1,212,1,212,1,212,1,212,3,212,3891,8,212,1,213,1,213,
		1,213,1,213,1,214,1,214,1,214,1,214,1,215,1,215,1,215,1,215,3,215,3905,
		8,215,1,216,1,216,1,217,1,217,1,217,3,217,3912,8,217,1,217,1,217,1,218,
		1,218,1,218,5,218,3919,8,218,10,218,12,218,3922,9,218,1,219,1,219,1,219,
		3,219,3927,8,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,3,219,3936,
		8,219,1,219,1,219,3,219,3940,8,219,1,219,1,219,3,219,3944,8,219,1,220,
		1,220,1,221,1,221,1,222,1,222,1,222,1,222,3,222,3954,8,222,3,222,3956,
		8,222,1,223,1,223,1,223,1,223,1,223,1,223,3,223,3964,8,223,1,224,1,224,
		1,224,5,224,3969,8,224,10,224,12,224,3972,9,224,1,225,1,225,3,225,3976,
		8,225,1,226,3,226,3979,8,226,1,226,1,226,3,226,3983,8,226,1,226,3,226,
		3986,8,226,1,226,1,226,1,226,1,226,3,226,3992,8,226,1,226,3,226,3995,8,
		226,1,226,3,226,3998,8,226,1,227,1,227,1,227,1,227,3,227,4004,8,227,1,
		228,1,228,1,228,5,228,4009,8,228,10,228,12,228,4012,9,228,1,228,1,228,
		3,228,4016,8,228,1,228,1,228,3,228,4020,8,228,1,228,3,228,4023,8,228,1,
		228,3,228,4026,8,228,1,228,3,228,4029,8,228,3,228,4031,8,228,1,229,1,229,
		3,229,4035,8,229,1,230,1,230,1,230,1,230,1,230,3,230,4042,8,230,1,231,
		1,231,1,231,1,231,3,231,4048,8,231,1,231,1,231,3,231,4052,8,231,1,231,
		1,231,1,231,3,231,4057,8,231,1,231,3,231,4060,8,231,1,231,3,231,4063,8,
		231,1,231,3,231,4066,8,231,3,231,4068,8,231,1,231,1,231,1,231,3,231,4073,
		8,231,1,232,1,232,1,232,1,232,1,232,5,232,4080,8,232,10,232,12,232,4083,
		9,232,1,232,1,232,1,232,1,232,1,232,1,232,3,232,4091,8,232,1,233,1,233,
		3,233,4095,8,233,1,233,1,233,1,234,1,234,3,234,4101,8,234,1,234,3,234,
		4104,8,234,1,234,3,234,4107,8,234,1,235,1,235,1,235,1,235,3,235,4113,8,
		235,1,235,1,235,1,235,1,235,1,235,3,235,4120,8,235,3,235,4122,8,235,1,
		235,1,235,1,235,1,235,1,235,1,235,3,235,4130,8,235,1,235,1,235,1,235,1,
		235,3,235,4136,8,235,3,235,4138,8,235,1,236,1,236,1,236,1,237,1,237,1,
		237,1,237,1,237,3,237,4148,8,237,3,237,4150,8,237,1,238,1,238,1,238,1,
		238,1,238,1,238,1,238,5,238,4159,8,238,10,238,12,238,4162,9,238,1,238,
		1,238,1,238,3,238,4167,8,238,1,238,1,238,1,238,1,238,1,238,3,238,4174,
		8,238,1,239,1,239,1,239,1,239,1,239,1,239,3,239,4182,8,239,1,240,1,240,
		3,240,4186,8,240,1,240,1,240,3,240,4190,8,240,1,240,3,240,4193,8,240,3,
		240,4195,8,240,1,241,1,241,1,241,1,241,1,241,1,241,3,241,4203,8,241,1,
		242,1,242,1,242,1,243,1,243,1,243,1,243,3,243,4212,8,243,1,243,1,243,1,
		243,1,244,1,244,1,244,1,244,3,244,4221,8,244,1,245,1,245,1,245,1,245,1,
		245,3,245,4228,8,245,1,246,1,246,1,246,5,246,4233,8,246,10,246,12,246,
		4236,9,246,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,3,247,4366,
		8,247,1,248,1,248,1,249,1,249,1,250,1,250,1,251,1,251,1,252,1,252,1,253,
		1,253,1,254,1,254,1,255,1,255,1,256,1,256,1,257,1,257,1,258,1,258,1,259,
		1,259,1,260,1,260,1,261,1,261,1,262,1,262,1,263,1,263,1,264,1,264,1,265,
		1,265,1,266,1,266,1,267,1,267,1,268,1,268,1,269,1,269,1,270,1,270,1,271,
		1,271,1,272,1,272,1,273,1,273,3,273,4420,8,273,1,274,1,274,1,275,1,275,
		1,275,3,275,4427,8,275,1,276,1,276,3,276,4431,8,276,1,277,1,277,1,277,
		1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,3,277,
		4447,8,277,1,278,1,278,1,279,1,279,1,280,1,280,1,280,1,280,5,280,4457,
		8,280,10,280,12,280,4460,9,280,3,280,4462,8,280,1,280,1,280,1,281,1,281,
		1,281,1,281,1,281,1,281,5,281,4472,8,281,10,281,12,281,4475,9,281,1,281,
		3,281,4478,8,281,1,282,1,282,1,282,1,282,3,282,4484,8,282,1,282,1,282,
		1,282,1,282,1,282,3,282,4491,8,282,1,282,1,282,1,282,1,282,1,282,3,282,
		4498,8,282,1,282,1,282,1,282,1,282,1,282,3,282,4505,8,282,1,282,1,282,
		1,282,1,282,1,282,3,282,4512,8,282,1,282,1,282,1,282,1,282,1,282,3,282,
		4519,8,282,1,282,1,282,1,282,1,282,1,282,3,282,4526,8,282,1,282,3,282,
		4529,8,282,1,283,1,283,1,283,5,283,4534,8,283,10,283,12,283,4537,9,283,
		1,284,1,284,1,284,5,284,4542,8,284,10,284,12,284,4545,9,284,1,285,1,285,
		1,285,5,285,4550,8,285,10,285,12,285,4553,9,285,1,286,1,286,1,287,1,287,
		1,287,5,287,4560,8,287,10,287,12,287,4563,9,287,1,288,1,288,1,288,3,288,
		4568,8,288,1,288,1,288,3,288,4572,8,288,1,288,3,288,4575,8,288,1,288,3,
		288,4578,8,288,1,288,3,288,4581,8,288,1,288,3,288,4584,8,288,1,288,3,288,
		4587,8,288,1,289,1,289,1,289,3,289,4592,8,289,1,289,3,289,4595,8,289,1,
		290,1,290,1,290,1,290,1,290,3,290,4602,8,290,1,290,1,290,5,290,4606,8,
		290,10,290,12,290,4609,9,290,1,291,1,291,1,291,1,291,1,292,1,292,1,292,
		1,292,1,293,1,293,1,293,1,293,1,294,1,294,1,294,1,294,1,295,1,295,1,295,
		5,295,4630,8,295,10,295,12,295,4633,9,295,1,296,1,296,1,297,1,297,3,297,
		4639,8,297,1,297,3,297,4642,8,297,1,297,1,297,1,298,1,298,1,298,5,298,
		4649,8,298,10,298,12,298,4652,9,298,1,299,1,299,1,299,3,299,4657,8,299,
		1,300,1,300,1,300,1,300,1,301,1,301,1,301,1,301,1,302,1,302,1,302,1,302,
		1,303,1,303,1,304,1,304,1,304,1,304,1,304,3,304,4678,8,304,1,304,1,304,
		1,304,1,304,3,304,4684,8,304,1,305,1,305,1,305,1,305,3,305,4690,8,305,
		1,306,1,306,1,306,5,306,4695,8,306,10,306,12,306,4698,9,306,1,307,1,307,
		1,307,1,307,1,307,3,307,4705,8,307,1,307,1,307,1,307,1,307,3,307,4711,
		8,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,3,307,
		4723,8,307,3,307,4725,8,307,1,308,1,308,1,308,1,308,3,308,4731,8,308,1,
		308,1,308,3,308,4735,8,308,3,308,4737,8,308,1,309,1,309,3,309,4741,8,309,
		1,309,1,309,1,310,1,310,1,310,1,310,1,310,1,310,1,310,3,310,4752,8,310,
		1,311,1,311,1,311,3,311,4757,8,311,1,311,1,311,1,311,1,311,3,311,4763,
		8,311,1,311,1,311,1,311,1,311,1,311,3,311,4770,8,311,1,311,3,311,4773,
		8,311,1,311,3,311,4776,8,311,1,311,1,311,1,311,1,311,3,311,4782,8,311,
		3,311,4784,8,311,1,311,1,311,1,311,1,311,1,311,1,311,3,311,4792,8,311,
		1,311,3,311,4795,8,311,3,311,4797,8,311,3,311,4799,8,311,1,312,1,312,1,
		312,5,312,4804,8,312,10,312,12,312,4807,9,312,1,313,1,313,1,313,1,313,
		1,313,1,313,1,313,1,313,3,313,4817,8,313,1,313,3,313,4820,8,313,3,313,
		4822,8,313,1,313,1,313,3,313,4826,8,313,1,313,1,313,1,313,3,313,4831,8,
		313,3,313,4833,8,313,1,313,1,313,1,313,3,313,4838,8,313,1,313,1,313,1,
		313,1,313,3,313,4844,8,313,1,313,3,313,4847,8,313,3,313,4849,8,313,1,313,
		1,313,3,313,4853,8,313,1,313,3,313,4856,8,313,1,313,1,313,1,313,1,313,
		1,313,1,313,1,313,3,313,4865,8,313,1,313,1,313,1,313,1,313,1,313,1,313,
		1,313,3,313,4874,8,313,1,313,1,313,1,313,1,313,3,313,4880,8,313,3,313,
		4882,8,313,3,313,4884,8,313,1,314,1,314,1,314,1,314,1,314,1,314,1,314,
		3,314,4893,8,314,1,314,1,314,3,314,4897,8,314,1,314,1,314,1,314,1,314,
		3,314,4903,8,314,1,314,3,314,4906,8,314,3,314,4908,8,314,1,314,1,314,1,
		314,1,314,1,314,1,314,1,314,1,314,1,314,3,314,4919,8,314,1,314,1,314,1,
		314,3,314,4924,8,314,1,314,1,314,1,314,3,314,4929,8,314,1,314,1,314,1,
		314,1,314,3,314,4935,8,314,3,314,4937,8,314,1,314,1,314,3,314,4941,8,314,
		3,314,4943,8,314,1,315,1,315,1,315,1,316,1,316,1,316,3,316,4951,8,316,
		1,316,1,316,3,316,4955,8,316,1,316,1,316,1,317,3,317,4960,8,317,1,317,
		3,317,4963,8,317,1,317,5,317,4966,8,317,10,317,12,317,4969,9,317,1,317,
		1,317,3,317,4973,8,317,1,318,1,318,1,318,1,318,3,318,4979,8,318,1,319,
		1,319,1,319,1,319,1,320,1,320,1,320,3,320,4988,8,320,1,321,1,321,1,321,
		1,321,1,321,1,321,1,321,1,321,1,321,4,321,4999,8,321,11,321,12,321,5000,
		1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,3,322,5013,
		8,322,1,322,1,322,1,322,3,322,5018,8,322,1,322,1,322,1,322,1,322,1,322,
		1,322,3,322,5026,8,322,1,322,1,322,1,322,1,322,3,322,5032,8,322,3,322,
		5034,8,322,1,322,1,322,1,322,1,322,1,322,3,322,5041,8,322,3,322,5043,8,
		322,1,323,1,323,1,323,1,323,1,323,3,323,5050,8,323,1,324,1,324,1,324,3,
		324,5055,8,324,1,324,1,324,1,325,1,325,1,325,1,325,1,325,1,325,1,325,3,
		325,5066,8,325,1,325,1,325,1,325,3,325,5071,8,325,3,325,5073,8,325,1,325,
		1,325,3,325,5077,8,325,1,325,1,325,1,325,1,325,3,325,5083,8,325,1,325,
		3,325,5086,8,325,1,325,3,325,5089,8,325,1,325,1,325,1,325,1,325,1,325,
		1,325,1,325,1,325,3,325,5099,8,325,3,325,5101,8,325,1,326,1,326,1,326,
		1,326,3,326,5107,8,326,1,327,1,327,1,327,1,328,1,328,1,328,1,329,1,329,
		1,329,1,329,1,329,3,329,5120,8,329,1,329,1,329,3,329,5124,8,329,1,330,
		1,330,1,330,3,330,5129,8,330,1,331,1,331,1,331,1,332,1,332,1,332,1,332,
		1,332,1,332,1,332,1,332,1,332,1,332,5,332,5144,8,332,10,332,12,332,5147,
		9,332,1,333,1,333,1,333,3,333,5152,8,333,1,333,1,333,1,333,1,333,1,333,
		1,333,1,333,3,333,5161,8,333,1,333,1,333,1,333,1,333,1,333,1,333,3,333,
		5169,8,333,1,333,1,333,3,333,5173,8,333,1,333,1,333,1,333,1,333,3,333,
		5179,8,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,3,333,5189,
		8,333,1,333,1,333,3,333,5193,8,333,1,334,1,334,1,335,1,335,1,335,5,335,
		5200,8,335,10,335,12,335,5203,9,335,1,336,1,336,3,336,5207,8,336,1,336,
		1,336,1,336,1,336,3,336,5213,8,336,3,336,5215,8,336,1,336,1,336,3,336,
		5219,8,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,3,336,
		5230,8,336,1,336,1,336,1,336,1,336,1,336,3,336,5237,8,336,1,336,1,336,
		1,336,1,336,3,336,5243,8,336,1,336,1,336,3,336,5247,8,336,1,337,1,337,
		1,337,3,337,5252,8,337,1,337,1,337,1,337,3,337,5257,8,337,1,337,1,337,
		1,337,1,337,1,337,1,337,3,337,5265,8,337,1,338,1,338,3,338,5269,8,338,
		1,338,5,338,5272,8,338,10,338,12,338,5275,9,338,1,339,1,339,1,339,1,339,
		1,339,1,339,3,339,5283,8,339,1,340,1,340,1,340,1,340,1,340,1,340,1,340,
		1,340,1,340,1,340,1,340,3,340,5296,8,340,3,340,5298,8,340,1,341,1,341,
		1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,3,341,5312,
		8,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,3,341,5321,8,341,3,341,
		5323,8,341,1,342,1,342,1,342,5,342,5328,8,342,10,342,12,342,5331,9,342,
		1,343,1,343,3,343,5335,8,343,1,344,1,344,3,344,5339,8,344,1,344,1,344,
		1,344,3,344,5344,8,344,1,344,1,344,1,344,1,344,5,344,5350,8,344,10,344,
		12,344,5353,9,344,1,344,1,344,1,344,1,344,3,344,5359,8,344,1,344,1,344,
		3,344,5363,8,344,1,344,1,344,1,344,1,344,3,344,5369,8,344,1,344,1,344,
		1,344,5,344,5374,8,344,10,344,12,344,5377,9,344,3,344,5379,8,344,1,345,
		1,345,1,345,1,345,1,346,3,346,5386,8,346,1,346,3,346,5389,8,346,1,346,
		1,346,1,346,1,346,3,346,5395,8,346,1,347,1,347,1,347,1,347,1,347,1,348,
		1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,3,348,5412,8,348,
		1,349,1,349,1,349,3,349,5417,8,349,1,350,1,350,1,351,1,351,1,351,1,351,
		1,351,1,351,1,351,5,351,5428,8,351,10,351,12,351,5431,9,351,3,351,5433,
		8,351,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,3,352,5444,
		8,352,3,352,5446,8,352,1,353,1,353,1,354,1,354,3,354,5452,8,354,1,355,
		1,355,1,355,1,355,1,355,1,356,1,356,1,356,1,356,1,356,5,356,5464,8,356,
		10,356,12,356,5467,9,356,1,357,1,357,1,357,1,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,3,358,5483,8,358,1,358,1,358,1,358,
		3,358,5488,8,358,1,358,3,358,5491,8,358,1,358,1,358,3,358,5495,8,358,1,
		358,3,358,5498,8,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,5506,8,
		358,1,358,1,358,1,358,1,358,3,358,5512,8,358,1,358,1,358,1,358,3,358,5517,
		8,358,1,358,3,358,5520,8,358,3,358,5522,8,358,1,359,1,359,3,359,5526,8,
		359,1,359,1,359,1,359,3,359,5531,8,359,3,359,5533,8,359,1,360,1,360,1,
		360,1,361,1,361,1,361,1,361,1,361,1,361,1,361,3,361,5545,8,361,1,362,1,
		362,5,362,5549,8,362,10,362,12,362,5552,9,362,1,363,1,363,1,363,1,363,
		1,363,1,363,1,363,1,363,1,363,1,363,1,363,3,363,5565,8,363,1,363,1,363,
		1,363,1,363,1,363,1,363,1,363,1,363,1,363,1,363,3,363,5577,8,363,1,363,
		1,363,3,363,5581,8,363,3,363,5583,8,363,1,364,1,364,1,364,1,364,1,364,
		1,364,3,364,5591,8,364,1,365,1,365,3,365,5595,8,365,1,365,1,365,1,366,
		1,366,1,366,1,366,1,366,3,366,5604,8,366,1,367,1,367,1,367,1,367,1,368,
		1,368,1,368,1,368,1,368,1,368,1,368,3,368,5617,8,368,1,369,1,369,1,369,
		3,369,5622,8,369,1,370,1,370,3,370,5626,8,370,1,370,1,370,3,370,5630,8,
		370,1,370,3,370,5633,8,370,1,371,1,371,3,371,5637,8,371,1,371,1,371,3,
		371,5641,8,371,1,371,3,371,5644,8,371,1,372,1,372,1,372,3,372,5649,8,372,
		1,372,3,372,5652,8,372,1,373,1,373,1,373,1,373,3,373,5658,8,373,1,373,
		3,373,5661,8,373,1,374,1,374,1,374,1,374,3,374,5667,8,374,1,374,3,374,
		5670,8,374,1,375,1,375,1,375,1,375,1,375,1,376,1,376,1,376,1,377,1,377,
		1,377,1,377,1,377,1,378,1,378,1,378,1,378,1,378,1,379,1,379,1,379,1,379,
		1,379,1,380,1,380,3,380,5697,8,380,1,380,1,380,1,380,1,380,3,380,5703,
		8,380,1,380,3,380,5706,8,380,1,381,1,381,1,381,1,381,1,382,1,382,1,382,
		1,382,1,382,1,383,1,383,1,383,1,383,1,383,3,383,5722,8,383,1,384,1,384,
		1,384,1,384,1,384,3,384,5729,8,384,1,384,1,384,3,384,5733,8,384,1,384,
		3,384,5736,8,384,1,384,3,384,5739,8,384,1,385,1,385,1,385,1,385,1,385,
		3,385,5746,8,385,1,385,1,385,3,385,5750,8,385,1,385,3,385,5753,8,385,1,
		385,3,385,5756,8,385,1,386,1,386,3,386,5760,8,386,1,386,1,386,1,386,1,
		386,3,386,5766,8,386,1,386,3,386,5769,8,386,1,387,1,387,3,387,5773,8,387,
		1,387,1,387,1,388,1,388,1,388,1,388,1,388,1,388,1,388,1,389,1,389,1,389,
		1,389,1,389,1,389,1,389,1,390,1,390,1,390,3,390,5794,8,390,1,391,1,391,
		1,391,3,391,5799,8,391,1,392,1,392,1,392,1,393,1,393,1,393,3,393,5807,
		8,393,1,393,1,393,1,393,3,393,5812,8,393,1,393,3,393,5815,8,393,1,394,
		1,394,3,394,5819,8,394,1,394,1,394,3,394,5823,8,394,1,395,1,395,3,395,
		5827,8,395,1,395,1,395,1,396,1,396,3,396,5833,8,396,1,396,1,396,3,396,
		5837,8,396,1,397,1,397,1,397,3,397,5842,8,397,1,398,1,398,1,398,3,398,
		5847,8,398,1,399,1,399,1,399,1,400,1,400,1,400,1,400,1,400,1,400,3,400,
		5858,8,400,3,400,5860,8,400,1,401,1,401,1,401,1,401,3,401,5866,8,401,1,
		401,1,401,1,402,1,402,1,402,1,402,1,402,1,403,1,403,1,403,1,403,1,403,
		1,404,1,404,1,404,1,404,1,405,1,405,1,405,1,405,3,405,5888,8,405,1,406,
		1,406,1,406,1,406,1,406,1,407,1,407,1,407,1,407,1,407,1,408,1,408,1,408,
		1,408,1,408,1,409,1,409,1,409,1,409,1,409,3,409,5910,8,409,1,410,1,410,
		1,410,1,410,1,410,3,410,5917,8,410,1,411,1,411,1,411,1,411,1,411,1,411,
		1,412,1,412,1,412,1,412,1,412,1,412,1,413,1,413,1,413,1,413,1,413,1,414,
		1,414,1,414,1,414,1,414,1,415,1,415,1,415,3,415,5944,8,415,3,415,5946,
		8,415,1,416,1,416,3,416,5950,8,416,1,417,1,417,1,418,1,418,1,418,1,419,
		1,419,1,419,5,419,5960,8,419,10,419,12,419,5963,9,419,1,420,1,420,1,420,
		1,420,1,420,1,420,1,420,3,420,5972,8,420,1,421,1,421,1,421,1,421,1,421,
		1,421,1,421,1,421,3,421,5982,8,421,1,421,1,421,3,421,5986,8,421,1,421,
		1,421,1,421,1,421,5,421,5992,8,421,10,421,12,421,5995,9,421,3,421,5997,
		8,421,1,421,1,421,3,421,6001,8,421,1,421,1,421,1,421,1,421,1,421,1,421,
		1,421,3,421,6010,8,421,1,422,1,422,3,422,6014,8,422,1,423,1,423,1,423,
		5,423,6019,8,423,10,423,12,423,6022,9,423,1,424,1,424,3,424,6026,8,424,
		1,425,1,425,1,425,1,425,1,425,1,425,3,425,6034,8,425,1,426,1,426,1,426,
		3,426,6039,8,426,1,426,1,426,1,427,1,427,3,427,6045,8,427,1,428,1,428,
		1,428,5,428,6050,8,428,10,428,12,428,6053,9,428,1,429,1,429,3,429,6057,
		8,429,1,429,1,429,1,429,1,429,3,429,6063,8,429,1,429,3,429,6066,8,429,
		1,430,1,430,1,431,1,431,1,431,1,431,1,431,1,431,3,431,6076,8,431,3,431,
		6078,8,431,1,432,1,432,1,432,1,432,1,432,3,432,6085,8,432,1,433,1,433,
		1,433,3,433,6090,8,433,1,433,1,433,3,433,6094,8,433,1,433,3,433,6097,8,
		433,1,434,1,434,1,434,5,434,6102,8,434,10,434,12,434,6105,9,434,1,435,
		1,435,3,435,6109,8,435,1,435,1,435,3,435,6113,8,435,1,436,1,436,1,436,
		1,436,1,436,1,437,1,437,1,437,1,437,3,437,6124,8,437,1,438,1,438,1,438,
		1,438,1,438,1,438,3,438,6132,8,438,1,438,1,438,3,438,6136,8,438,1,438,
		3,438,6139,8,438,1,438,3,438,6142,8,438,1,439,1,439,3,439,6146,8,439,1,
		439,1,439,3,439,6150,8,439,1,439,5,439,6153,8,439,10,439,12,439,6156,9,
		439,1,440,1,440,1,440,3,440,6161,8,440,1,441,1,441,3,441,6165,8,441,1,
		441,1,441,1,442,1,442,1,443,1,443,1,443,1,443,1,443,3,443,6176,8,443,1,
		443,3,443,6179,8,443,1,443,3,443,6182,8,443,1,443,3,443,6185,8,443,1,444,
		1,444,1,444,1,444,1,444,1,444,3,444,6193,8,444,1,445,1,445,3,445,6197,
		8,445,1,445,5,445,6200,8,445,10,445,12,445,6203,9,445,1,446,1,446,1,446,
		1,446,1,446,3,446,6210,8,446,1,447,1,447,1,447,1,447,1,447,1,447,3,447,
		6218,8,447,1,448,1,448,1,448,1,448,3,448,6224,8,448,1,449,1,449,3,449,
		6228,8,449,1,449,1,449,1,449,1,449,3,449,6234,8,449,1,449,1,449,1,450,
		1,450,1,450,1,450,1,450,3,450,6243,8,450,1,450,1,450,1,450,1,450,1,450,
		1,450,1,450,1,450,1,450,3,450,6254,8,450,1,451,1,451,1,451,1,451,1,451,
		1,451,1,451,1,451,3,451,6264,8,451,1,452,1,452,1,452,1,452,1,453,1,453,
		1,453,1,454,1,454,1,454,1,455,1,455,1,456,1,456,1,456,1,456,3,456,6282,
		8,456,1,456,3,456,6285,8,456,1,456,1,456,3,456,6289,8,456,1,456,1,456,
		1,456,1,456,1,456,1,456,1,456,1,456,1,456,5,456,6300,8,456,10,456,12,456,
		6303,9,456,1,457,1,457,1,457,1,457,1,457,1,457,3,457,6311,8,457,1,457,
		1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,5,457,6323,8,457,
		10,457,12,457,6326,9,457,1,458,1,458,1,459,1,459,3,459,6332,8,459,1,459,
		1,459,1,459,1,459,3,459,6338,8,459,1,459,1,459,1,459,1,459,3,459,6344,
		8,459,1,460,1,460,1,460,1,460,1,460,1,460,3,460,6352,8,460,1,460,1,460,
		1,460,1,460,1,460,1,460,1,460,1,460,1,460,3,460,6363,8,460,1,460,1,460,
		3,460,6367,8,460,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,
		1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,
		1,461,1,461,1,461,1,461,1,461,1,461,5,461,6396,8,461,10,461,12,461,6399,
		9,461,1,462,1,462,1,462,3,462,6404,8,462,1,462,1,462,1,462,1,462,1,462,
		1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,3,462,6421,
		8,462,1,462,1,462,1,462,1,462,1,462,3,462,6428,8,462,1,462,1,462,1,462,
		1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,3,462,6442,8,462,
		1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,3,462,6453,8,462,
		1,462,1,462,1,462,3,462,6458,8,462,1,462,1,462,1,462,1,462,1,462,1,462,
		1,462,1,462,1,462,3,462,6469,8,462,1,462,1,462,1,462,1,462,1,462,1,462,
		1,462,1,462,3,462,6479,8,462,1,462,1,462,1,462,4,462,6484,8,462,11,462,
		12,462,6485,1,462,3,462,6489,8,462,1,462,1,462,1,462,1,462,1,462,1,462,
		1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,
		1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,
		1,462,1,462,3,462,6523,8,462,1,462,1,462,1,462,1,462,1,462,1,462,5,462,
		6531,8,462,10,462,12,462,6534,9,462,1,463,1,463,1,463,1,464,1,464,1,464,
		1,464,3,464,6543,8,464,1,465,1,465,1,465,3,465,6548,8,465,1,465,1,465,
		1,465,3,465,6553,8,465,1,465,1,465,1,465,1,465,1,465,3,465,6560,8,465,
		1,465,1,465,1,465,1,465,3,465,6566,8,465,1,465,1,465,1,465,3,465,6571,
		8,465,1,465,1,465,1,465,3,465,6576,8,465,1,465,1,465,1,465,1,465,3,465,
		6582,8,465,1,465,1,465,3,465,6586,8,465,1,465,1,465,1,465,3,465,6591,8,
		465,1,465,1,465,1,465,3,465,6596,8,465,1,465,1,465,1,465,1,465,1,465,3,
		465,6603,8,465,1,465,1,465,1,465,1,465,1,465,1,465,3,465,6611,8,465,1,
		465,1,465,1,465,3,465,6616,8,465,1,465,1,465,3,465,6620,8,465,1,465,1,
		465,3,465,6624,8,465,1,465,1,465,3,465,6628,8,465,3,465,6630,8,465,1,466,
		1,466,1,466,1,466,1,466,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,
		1,467,1,467,1,467,3,467,6648,8,467,1,467,1,467,1,467,1,467,1,467,1,467,
		3,467,6656,8,467,1,467,1,467,3,467,6660,8,467,1,467,1,467,1,467,1,467,
		1,467,3,467,6667,8,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,
		1,467,1,467,3,467,6679,8,467,1,467,3,467,6682,8,467,1,467,1,467,3,467,
		6686,8,467,1,468,1,468,1,469,1,469,1,469,1,469,3,469,6694,8,469,1,470,
		1,470,1,470,1,470,1,470,1,470,1,470,1,471,1,471,1,471,3,471,6706,8,471,
		1,472,1,472,1,472,1,472,1,472,3,472,6713,8,472,1,472,1,472,3,472,6717,
		8,472,1,473,1,473,3,473,6721,8,473,1,474,1,474,1,474,1,474,3,474,6727,
		8,474,1,475,1,475,1,475,1,476,1,476,1,476,1,476,1,476,3,476,6737,8,476,
		1,476,1,476,1,476,1,476,1,476,1,476,1,476,3,476,6746,8,476,3,476,6748,
		8,476,1,477,3,477,6751,8,477,1,477,1,477,1,478,1,478,1,478,1,478,1,478,
		3,478,6760,8,478,1,479,1,479,1,479,5,479,6765,8,479,10,479,12,479,6768,
		9,479,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,3,480,
		6780,8,480,1,480,1,480,1,480,3,480,6785,8,480,1,481,1,481,1,481,1,481,
		1,481,3,481,6792,8,481,1,481,1,481,1,481,1,481,3,481,6798,8,481,1,481,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,4,481,6822,8,481,
		11,481,12,481,6823,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,3,481,
		6834,8,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,3,481,6866,8,481,1,481,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,
		1,481,1,481,1,481,1,481,3,481,6885,8,481,1,481,1,481,1,481,1,481,3,481,
		6891,8,481,1,481,1,481,3,481,6895,8,481,1,481,1,481,1,481,1,481,1,481,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,
		3,481,6926,8,481,1,481,1,481,1,481,1,481,3,481,6932,8,481,1,481,1,481,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,3,481,6944,8,481,1,481,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,3,481,6957,
		8,481,1,481,1,481,3,481,6961,8,481,1,481,1,481,3,481,6965,8,481,1,481,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,
		1,481,3,481,6993,8,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,
		1,481,1,481,1,481,1,481,3,481,7043,8,481,1,481,1,481,1,481,1,481,1,481,
		1,481,1,481,1,481,3,481,7053,8,481,1,481,1,481,1,481,1,481,1,481,1,481,
		1,481,1,481,1,481,1,481,3,481,7065,8,481,1,481,1,481,1,481,3,481,7070,
		8,481,1,482,1,482,1,482,1,483,1,483,1,483,3,483,7078,8,483,1,483,1,483,
		1,483,1,483,1,483,1,483,1,483,1,483,1,483,1,483,1,483,1,483,1,483,1,483,
		1,483,1,483,1,483,1,483,3,483,7098,8,483,1,484,1,484,3,484,7102,8,484,
		1,484,1,484,1,485,1,485,1,486,1,486,1,486,1,486,1,486,1,486,1,486,1,486,
		5,486,7116,8,486,10,486,12,486,7119,9,486,3,486,7121,8,486,1,487,1,487,
		1,487,3,487,7126,8,487,1,487,3,487,7129,8,487,1,488,1,488,1,489,1,489,
		1,489,1,489,1,489,3,489,7138,8,489,1,489,1,489,3,489,7142,8,489,1,489,
		1,489,1,489,1,489,3,489,7148,8,489,1,489,1,489,1,489,1,489,3,489,7154,
		8,489,1,489,1,489,3,489,7158,8,489,1,489,1,489,1,490,1,490,1,490,1,490,
		1,490,1,490,1,490,3,490,7169,8,490,1,490,1,490,1,490,1,490,3,490,7175,
		8,490,3,490,7177,8,490,1,490,1,490,1,491,1,491,1,491,3,491,7184,8,491,
		1,491,1,491,1,491,1,491,1,491,3,491,7191,8,491,1,491,1,491,3,491,7195,
		8,491,1,492,1,492,1,492,5,492,7200,8,492,10,492,12,492,7203,9,492,1,493,
		1,493,3,493,7207,8,493,1,494,1,494,1,494,3,494,7212,8,494,1,495,1,495,
		1,495,1,495,1,496,1,496,1,496,3,496,7221,8,496,1,496,3,496,7224,8,496,
		1,497,1,497,3,497,7228,8,497,1,497,1,497,1,497,3,497,7233,8,497,3,497,
		7235,8,497,1,497,1,497,3,497,7239,8,497,1,498,1,498,3,498,7243,8,498,1,
		499,1,499,1,499,1,500,1,500,1,500,1,501,1,501,1,501,1,502,1,502,3,502,
		7256,8,502,1,502,1,502,3,502,7260,8,502,1,502,3,502,7263,8,502,1,502,1,
		502,3,502,7267,8,502,1,502,1,502,3,502,7271,8,502,1,502,1,502,3,502,7275,
		8,502,1,502,1,502,1,502,1,502,1,502,3,502,7282,8,502,1,502,1,502,3,502,
		7286,8,502,1,502,1,502,3,502,7290,8,502,1,502,1,502,1,502,1,502,1,502,
		1,502,3,502,7298,8,502,1,502,1,502,3,502,7302,8,502,1,503,1,503,1,503,
		5,503,7307,8,503,10,503,12,503,7310,9,503,1,504,1,504,1,504,3,504,7315,
		8,504,1,505,1,505,1,506,1,506,1,507,1,507,3,507,7323,8,507,1,508,1,508,
		1,509,1,509,1,509,1,509,1,510,1,510,1,510,1,510,1,511,1,511,1,511,1,511,
		1,512,1,512,1,512,5,512,7342,8,512,10,512,12,512,7345,9,512,1,513,1,513,
		3,513,7349,8,513,1,514,1,514,1,514,5,514,7354,8,514,10,514,12,514,7357,
		9,514,1,515,1,515,1,516,1,516,1,516,1,516,1,517,1,517,1,517,1,517,1,517,
		1,517,1,517,1,517,1,517,1,517,1,517,1,517,1,517,3,517,7378,8,517,1,518,
		1,518,1,518,1,519,1,519,1,519,1,519,1,519,1,520,1,520,1,520,1,520,1,520,
		1,520,3,520,7394,8,520,1,521,1,521,1,521,1,522,1,522,1,522,4,522,7402,
		8,522,11,522,12,522,7403,1,523,1,523,3,523,7408,8,523,1,523,1,523,1,523,
		4,523,7413,8,523,11,523,12,523,7414,1,523,3,523,7418,8,523,1,523,1,523,
		1,523,1,524,1,524,1,524,1,525,1,525,1,525,3,525,7429,8,525,1,526,1,526,
		1,527,1,527,1,527,1,528,1,528,3,528,7438,8,528,1,528,3,528,7441,8,528,
		1,528,1,528,1,529,1,529,1,529,3,529,7448,8,529,1,530,1,530,1,530,3,530,
		7453,8,530,1,531,1,531,1,531,1,531,1,531,1,532,1,532,1,532,1,532,1,532,
		1,532,1,532,1,533,1,533,1,533,1,533,1,533,1,533,1,533,1,534,1,534,1,534,
		4,534,7477,8,534,11,534,12,534,7478,1,535,1,535,1,535,1,535,3,535,7485,
		8,535,1,536,1,536,1,536,1,536,3,536,7491,8,536,1,536,1,536,3,536,7495,
		8,536,1,537,1,537,1,537,1,537,1,537,1,537,1,538,1,538,3,538,7505,8,538,
		1,539,1,539,3,539,7509,8,539,1,539,1,539,1,540,1,540,1,540,1,540,1,540,
		1,540,1,540,5,540,7520,8,540,10,540,12,540,7523,9,540,1,540,1,540,1,541,
		1,541,1,541,1,541,1,541,1,541,1,541,3,541,7534,8,541,1,542,1,542,1,542,
		1,542,1,542,1,542,1,543,1,543,1,543,1,544,1,544,1,544,1,545,1,545,3,545,
		7550,8,545,1,545,1,545,1,545,1,545,5,545,7556,8,545,10,545,12,545,7559,
		9,545,1,545,1,545,1,545,1,545,1,545,5,545,7566,8,545,10,545,12,545,7569,
		9,545,3,545,7571,8,545,1,546,1,546,1,546,3,546,7576,8,546,1,547,1,547,
		3,547,7580,8,547,1,547,1,547,1,547,1,548,1,548,3,548,7587,8,548,1,548,
		1,548,1,548,3,548,7592,8,548,1,549,1,549,1,550,1,550,1,550,3,550,7599,
		8,550,1,550,1,550,1,550,1,550,5,550,7605,8,550,10,550,12,550,7608,9,550,
		3,550,7610,8,550,1,551,1,551,1,551,3,551,7615,8,551,1,551,1,551,1,551,
		1,551,5,551,7621,8,551,10,551,12,551,7624,9,551,3,551,7626,8,551,1,552,
		1,552,1,552,1,552,1,553,1,553,1,553,1,554,1,554,1,554,1,555,1,555,3,555,
		7640,8,555,1,555,3,555,7643,8,555,1,555,1,555,1,555,1,555,1,556,1,556,
		1,556,1,556,1,556,1,556,1,556,3,556,7656,8,556,1,556,1,556,3,556,7660,
		8,556,3,556,7662,8,556,1,557,1,557,1,557,3,557,7667,8,557,1,558,1,558,
		1,558,3,558,7672,8,558,1,559,1,559,1,559,1,560,1,560,3,560,7679,8,560,
		1,560,1,560,1,561,1,561,3,561,7685,8,561,1,561,1,561,5,561,7689,8,561,
		10,561,12,561,7692,9,561,1,561,1,561,3,561,7696,8,561,1,561,3,561,7699,
		8,561,1,561,1,561,5,561,7703,8,561,10,561,12,561,7706,9,561,1,561,1,561,
		3,561,7710,8,561,1,561,3,561,7713,8,561,1,561,1,561,5,561,7717,8,561,10,
		561,12,561,7720,9,561,1,561,3,561,7723,8,561,1,561,1,561,1,561,1,561,3,
		561,7729,8,561,3,561,7731,8,561,1,561,3,561,7734,8,561,1,561,1,561,5,561,
		7738,8,561,10,561,12,561,7741,9,561,1,561,1,561,1,561,3,561,7746,8,561,
		1,561,1,561,1,561,1,561,1,561,3,561,7753,8,561,3,561,7755,8,561,3,561,
		7757,8,561,1,562,1,562,3,562,7761,8,562,1,563,1,563,5,563,7765,8,563,10,
		563,12,563,7768,9,563,1,563,3,563,7771,8,563,1,563,1,563,3,563,7775,8,
		563,1,563,1,563,1,563,3,563,7780,8,563,1,563,5,563,7783,8,563,10,563,12,
		563,7786,9,563,3,563,7788,8,563,1,564,3,564,7791,8,564,1,564,1,564,1,564,
		1,564,1,564,1,564,1,564,1,564,3,564,7801,8,564,1,564,1,564,1,564,1,564,
		3,564,7807,8,564,1,564,1,564,1,564,1,564,1,564,3,564,7814,8,564,1,564,
		1,564,1,564,3,564,7819,8,564,1,564,1,564,1,564,1,564,1,564,1,564,1,564,
		1,564,1,564,1,564,1,564,3,564,7832,8,564,1,564,1,564,1,564,1,564,1,564,
		1,564,3,564,7840,8,564,1,564,1,564,1,564,1,564,3,564,7846,8,564,1,564,
		1,564,1,564,3,564,7851,8,564,1,565,1,565,1,566,1,566,1,567,1,567,1,567,
		1,568,1,568,3,568,7862,8,568,1,569,1,569,3,569,7866,8,569,1,569,1,569,
		1,569,3,569,7871,8,569,1,569,1,569,3,569,7875,8,569,1,569,3,569,7878,8,
		569,1,570,1,570,1,570,3,570,7883,8,570,1,570,1,570,3,570,7887,8,570,1,
		570,1,570,1,570,1,570,1,570,1,570,3,570,7895,8,570,1,570,1,570,1,570,1,
		570,1,570,1,570,3,570,7903,8,570,3,570,7905,8,570,1,571,1,571,1,571,1,
		571,1,571,1,571,1,571,3,571,7914,8,571,1,572,1,572,1,572,1,572,5,572,7920,
		8,572,10,572,12,572,7923,9,572,1,572,1,572,1,573,1,573,3,573,7929,8,573,
		1,573,3,573,7932,8,573,1,574,1,574,1,574,1,574,5,574,7938,8,574,10,574,
		12,574,7941,9,574,1,574,1,574,1,575,1,575,1,575,1,575,3,575,7949,8,575,
		3,575,7951,8,575,1,576,1,576,1,577,1,577,3,577,7957,8,577,1,578,1,578,
		3,578,7961,8,578,1,578,1,578,1,578,1,578,1,578,1,578,1,578,3,578,7970,
		8,578,1,578,1,578,1,578,1,578,3,578,7976,8,578,1,578,3,578,7979,8,578,
		1,579,1,579,1,580,1,580,1,580,1,581,1,581,1,581,1,581,3,581,7990,8,581,
		1,582,1,582,1,583,1,583,1,583,1,584,1,584,3,584,7999,8,584,1,584,3,584,
		8002,8,584,1,584,1,584,1,584,3,584,8007,8,584,3,584,8009,8,584,1,584,3,
		584,8012,8,584,1,584,3,584,8015,8,584,1,584,1,584,3,584,8019,8,584,1,584,
		3,584,8022,8,584,1,584,1,584,3,584,8026,8,584,1,584,1,584,1,584,3,584,
		8031,8,584,1,584,3,584,8034,8,584,1,584,1,584,3,584,8038,8,584,1,584,3,
		584,8041,8,584,1,584,1,584,3,584,8045,8,584,1,584,1,584,1,584,3,584,8050,
		8,584,1,584,1,584,3,584,8054,8,584,1,584,1,584,1,584,1,584,1,584,1,584,
		1,584,1,584,1,584,1,584,3,584,8066,8,584,1,584,1,584,3,584,8070,8,584,
		1,584,1,584,1,584,1,584,3,584,8076,8,584,1,584,3,584,8079,8,584,1,584,
		1,584,1,584,3,584,8084,8,584,1,584,1,584,3,584,8088,8,584,1,584,1,584,
		3,584,8092,8,584,1,584,1,584,1,584,3,584,8097,8,584,1,584,1,584,1,584,
		1,584,1,584,1,584,1,584,3,584,8106,8,584,1,584,3,584,8109,8,584,1,584,
		1,584,3,584,8113,8,584,1,584,1,584,3,584,8117,8,584,1,584,3,584,8120,8,
		584,1,584,1,584,3,584,8124,8,584,1,584,1,584,3,584,8128,8,584,1,584,1,
		584,1,584,3,584,8133,8,584,1,584,1,584,1,584,3,584,8138,8,584,1,584,1,
		584,1,584,3,584,8143,8,584,1,585,1,585,1,585,3,585,8148,8,585,1,586,1,
		586,1,586,3,586,8153,8,586,3,586,8155,8,586,1,587,1,587,1,587,3,587,8160,
		8,587,1,587,1,587,1,588,4,588,8165,8,588,11,588,12,588,8166,1,589,1,589,
		1,589,1,589,1,589,1,589,3,589,8175,8,589,1,589,1,589,1,589,1,589,3,589,
		8181,8,589,3,589,8183,8,589,1,590,1,590,3,590,8187,8,590,1,590,1,590,3,
		590,8191,8,590,1,591,1,591,3,591,8195,8,591,1,591,1,591,3,591,8199,8,591,
		1,592,1,592,1,592,1,592,1,593,1,593,1,593,1,593,1,594,1,594,1,594,1,594,
		1,594,3,594,8214,8,594,1,595,1,595,1,595,1,595,3,595,8220,8,595,1,596,
		1,596,1,596,1,596,1,596,3,596,8227,8,596,1,597,1,597,3,597,8231,8,597,
		1,597,5,597,8234,8,597,10,597,12,597,8237,9,597,1,598,1,598,3,598,8241,
		8,598,1,598,3,598,8244,8,598,1,599,1,599,3,599,8248,8,599,1,599,3,599,
		8251,8,599,1,600,4,600,8254,8,600,11,600,12,600,8255,1,601,1,601,3,601,
		8260,8,601,1,601,1,601,1,601,1,601,3,601,8266,8,601,1,601,1,601,3,601,
		8270,8,601,1,601,1,601,3,601,8274,8,601,1,601,1,601,1,601,3,601,8279,8,
		601,1,601,1,601,1,601,3,601,8284,8,601,1,601,1,601,1,601,3,601,8289,8,
		601,1,601,1,601,1,601,3,601,8294,8,601,1,601,1,601,1,601,3,601,8299,8,
		601,1,601,1,601,1,601,3,601,8304,8,601,1,601,1,601,1,601,3,601,8309,8,
		601,1,601,1,601,1,601,3,601,8314,8,601,1,601,1,601,1,601,3,601,8319,8,
		601,1,601,1,601,1,601,3,601,8324,8,601,1,601,1,601,1,601,3,601,8329,8,
		601,1,601,1,601,1,601,3,601,8334,8,601,1,601,1,601,1,601,3,601,8339,8,
		601,1,601,1,601,1,601,1,601,1,601,1,601,1,601,1,601,3,601,8349,8,601,1,
		601,1,601,1,601,1,601,3,601,8355,8,601,1,601,1,601,1,601,1,601,3,601,8361,
		8,601,1,601,1,601,1,601,3,601,8366,8,601,1,601,1,601,1,601,1,601,1,601,
		3,601,8373,8,601,1,601,1,601,1,601,3,601,8378,8,601,1,601,1,601,1,601,
		1,601,1,601,1,601,1,601,3,601,8387,8,601,1,601,1,601,1,601,1,601,3,601,
		8393,8,601,1,601,1,601,1,601,3,601,8398,8,601,1,602,1,602,3,602,8402,8,
		602,1,603,3,603,8405,8,603,1,603,1,603,3,603,8409,8,603,1,603,1,603,1,
		604,3,604,8414,8,604,1,604,1,604,3,604,8418,8,604,1,604,1,604,1,605,3,
		605,8423,8,605,1,605,1,605,3,605,8427,8,605,1,605,1,605,1,606,1,606,1,
		606,1,606,1,606,3,606,8436,8,606,1,606,3,606,8439,8,606,1,606,3,606,8442,
		8,606,1,607,3,607,8445,8,607,1,607,1,607,3,607,8449,8,607,1,607,1,607,
		3,607,8453,8,607,1,607,1,607,3,607,8457,8,607,1,607,1,607,1,607,1,607,
		1,607,1,607,1,607,1,607,1,607,1,607,1,607,1,607,1,607,3,607,8472,8,607,
		1,607,3,607,8475,8,607,3,607,8477,8,607,1,608,1,608,1,608,3,608,8482,8,
		608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,8491,8,608,1,608,3,
		608,8494,8,608,1,608,1,608,3,608,8498,8,608,1,609,1,609,1,609,1,609,1,
		610,1,610,1,610,1,610,5,610,8508,8,610,10,610,12,610,8511,9,610,1,610,
		1,610,1,611,1,611,1,611,1,611,1,611,1,611,1,611,3,611,8522,8,611,1,611,
		1,611,1,611,3,611,8527,8,611,1,611,5,611,8530,8,611,10,611,12,611,8533,
		9,611,1,611,1,611,1,611,1,611,5,611,8539,8,611,10,611,12,611,8542,9,611,
		1,611,1,611,3,611,8546,8,611,1,612,1,612,1,612,1,612,1,612,5,612,8553,
		8,612,10,612,12,612,8556,9,612,1,612,1,612,3,612,8560,8,612,1,613,1,613,
		3,613,8564,8,613,1,613,1,613,3,613,8568,8,613,1,613,1,613,3,613,8572,8,
		613,1,613,1,613,1,613,3,613,8577,8,613,1,613,1,613,1,613,3,613,8582,8,
		613,1,613,1,613,1,613,1,613,3,613,8588,8,613,1,613,1,613,1,613,3,613,8593,
		8,613,1,613,3,613,8596,8,613,1,614,1,614,1,614,5,614,8601,8,614,10,614,
		12,614,8604,9,614,1,615,1,615,1,615,1,615,5,615,8610,8,615,10,615,12,615,
		8613,9,615,1,615,1,615,1,616,1,616,3,616,8619,8,616,1,617,1,617,1,617,
		1,617,1,618,1,618,1,618,1,619,1,619,1,619,1,620,1,620,1,620,1,620,1,620,
		3,620,8636,8,620,3,620,8638,8,620,1,621,1,621,1,621,1,621,1,622,1,622,
		1,622,1,622,1,623,3,623,8649,8,623,1,623,1,623,1,624,1,624,1,624,1,625,
		1,625,1,625,1,626,1,626,3,626,8661,8,626,1,627,1,627,1,627,1,627,1,627,
		1,627,1,628,1,628,1,628,5,628,8672,8,628,10,628,12,628,8675,9,628,1,629,
		1,629,1,629,5,629,8680,8,629,10,629,12,629,8683,9,629,1,630,1,630,1,630,
		1,630,3,630,8689,8,630,1,631,1,631,1,631,1,632,1,632,4,632,8696,8,632,
		11,632,12,632,8697,1,633,1,633,1,633,1,633,3,633,8704,8,633,1,633,1,633,
		1,633,1,633,1,633,1,633,3,633,8712,8,633,1,634,1,634,4,634,8716,8,634,
		11,634,12,634,8717,1,635,1,635,1,635,1,635,1,636,1,636,1,636,5,636,8727,
		8,636,10,636,12,636,8730,9,636,1,637,1,637,1,637,5,637,8735,8,637,10,637,
		12,637,8738,9,637,1,638,1,638,1,638,3,638,8743,8,638,1,638,1,638,3,638,
		8747,8,638,1,638,3,638,8750,8,638,1,639,1,639,1,639,1,639,3,639,8756,8,
		639,1,640,1,640,1,640,1,640,1,640,1,640,3,640,8764,8,640,1,641,1,641,1,
		641,1,641,1,642,1,642,1,642,1,642,1,642,1,643,1,643,1,643,1,643,1,644,
		1,644,1,644,1,644,1,644,1,644,1,645,1,645,1,645,1,645,1,645,1,645,1,646,
		1,646,1,646,1,646,1,646,1,646,1,646,1,647,1,647,1,647,1,647,1,647,3,647,
		8803,8,647,1,648,1,648,1,648,1,648,1,649,1,649,1,649,1,649,1,650,1,650,
		1,650,1,650,1,650,1,650,1,650,1,650,1,650,1,650,1,650,1,650,1,650,1,650,
		1,650,3,650,8828,8,650,1,651,1,651,1,651,1,652,1,652,1,652,1,653,1,653,
		3,653,8838,8,653,1,654,1,654,1,654,3,654,8843,8,654,3,654,8845,8,654,1,
		655,1,655,1,655,1,656,1,656,3,656,8852,8,656,1,657,1,657,1,658,1,658,1,
		659,1,659,1,659,1,660,1,660,1,660,3,660,8864,8,660,3,660,8866,8,660,1,
		661,1,661,1,662,1,662,1,663,1,663,1,663,1,663,5,663,8876,8,663,10,663,
		12,663,8879,9,663,1,663,1,663,1,664,1,664,1,665,1,665,3,665,8887,8,665,
		1,666,1,666,1,667,1,667,1,668,1,668,1,668,1,668,1,668,3,668,8898,8,668,
		1,668,1,668,1,669,1,669,1,670,1,670,1,671,1,671,1,672,1,672,1,673,1,673,
		1,674,1,674,1,675,1,675,1,676,1,676,1,677,1,677,3,677,8920,8,677,1,678,
		1,678,3,678,8924,8,678,1,679,1,679,1,680,1,680,1,681,1,681,1,682,1,682,
		1,683,1,683,1,684,1,684,1,685,1,685,1,686,1,686,1,687,1,687,1,688,1,688,
		1,689,1,689,3,689,8948,8,689,1,690,1,690,1,690,1,691,1,691,1,691,1,691,
		1,691,1,691,3,691,8959,8,691,3,691,8961,8,691,1,692,1,692,3,692,8965,8,
		692,1,693,1,693,1,693,5,693,8970,8,693,10,693,12,693,8973,9,693,1,694,
		1,694,1,694,5,694,8978,8,694,10,694,12,694,8981,9,694,1,695,1,695,1,696,
		1,696,3,696,8987,8,696,1,697,1,697,1,698,1,698,3,698,8993,8,698,1,699,
		1,699,1,700,1,700,1,701,1,701,1,702,1,702,1,703,1,703,1,703,3,703,9006,
		8,703,1,704,1,704,3,704,9010,8,704,1,705,1,705,1,705,5,705,9015,8,705,
		10,705,12,705,9018,9,705,1,706,1,706,1,706,1,706,1,707,1,707,3,707,9026,
		8,707,1,708,1,708,1,708,3,708,9031,8,708,3,708,9033,8,708,1,709,1,709,
		1,709,1,710,1,710,1,711,1,711,1,712,1,712,1,713,1,713,1,713,1,713,1,713,
		3,713,9049,8,713,1,714,1,714,1,714,1,714,1,714,3,714,9056,8,714,1,715,
		1,715,1,715,3,715,9061,8,715,1,716,1,716,1,716,1,716,1,716,1,716,3,716,
		9069,8,716,1,716,3,716,9072,8,716,1,717,1,717,1,717,3,717,9077,8,717,1,
		718,1,718,1,719,1,719,1,719,1,719,5,719,9085,8,719,10,719,12,719,9088,
		9,719,1,719,1,719,1,720,1,720,1,720,3,720,9095,8,720,1,721,1,721,1,721,
		3,721,9100,8,721,1,722,1,722,1,722,3,722,9105,8,722,1,723,3,723,9108,8,
		723,1,723,1,723,3,723,9112,8,723,1,723,5,723,9115,8,723,10,723,12,723,
		9118,9,723,1,724,1,724,1,725,1,725,1,725,5,725,9125,8,725,10,725,12,725,
		9128,9,725,1,726,1,726,1,726,3,726,9133,8,726,1,727,1,727,1,728,1,728,
		1,729,1,729,1,730,1,730,1,730,1,730,1,730,1,730,3,730,9147,8,730,1,731,
		1,731,3,731,9151,8,731,1,732,1,732,1,733,1,733,1,733,1,733,1,733,1,733,
		1,734,1,734,3,734,9163,8,734,1,735,1,735,3,735,9167,8,735,1,736,1,736,
		3,736,9171,8,736,1,737,1,737,3,737,9175,8,737,1,738,1,738,1,738,1,739,
		1,739,1,740,1,740,1,741,1,741,1,741,1,741,1,741,1,741,3,741,9190,8,741,
		1,742,1,742,1,742,1,743,1,743,1,744,1,744,1,744,1,744,1,744,1,744,1,744,
		3,744,9204,8,744,1,744,1,744,1,744,1,744,1,744,3,744,9211,8,744,3,744,
		9213,8,744,1,745,1,745,1,746,1,746,1,747,1,747,1,747,1,747,1,747,1,747,
		1,747,1,747,1,747,1,747,1,747,3,747,9230,8,747,1,747,1,747,1,747,3,747,
		9235,8,747,3,747,9237,8,747,1,748,1,748,1,749,1,749,1,749,1,749,1,749,
		3,749,9246,8,749,1,750,1,750,1,750,3,750,9251,8,750,1,750,1,750,1,750,
		3,750,9256,8,750,3,750,9258,8,750,1,751,1,751,1,751,1,751,3,751,9264,8,
		751,1,752,1,752,1,753,1,753,1,754,1,754,1,754,3,754,9273,8,754,1,754,0,
		4,912,914,922,924,755,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
		84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
		124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
		160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
		196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
		232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
		268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
		304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,
		340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
		376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,
		412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,
		448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,
		484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,
		520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,
		556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,
		592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,
		628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,
		664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,
		700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,
		736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,
		772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,
		808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,
		844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,878,
		880,882,884,886,888,890,892,894,896,898,900,902,904,906,908,910,912,914,
		916,918,920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,
		952,954,956,958,960,962,964,966,968,970,972,974,976,978,980,982,984,986,
		988,990,992,994,996,998,1000,1002,1004,1006,1008,1010,1012,1014,1016,1018,
		1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,
		1048,1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,
		1076,1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,
		1104,1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,
		1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,
		1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,
		1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,
		1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,1242,
		1244,1246,1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,1268,1270,
		1272,1274,1276,1278,1280,1282,1284,1286,1288,1290,1292,1294,1296,1298,
		1300,1302,1304,1306,1308,1310,1312,1314,1316,1318,1320,1322,1324,1326,
		1328,1330,1332,1334,1336,1338,1340,1342,1344,1346,1348,1350,1352,1354,
		1356,1358,1360,1362,1364,1366,1368,1370,1372,1374,1376,1378,1380,1382,
		1384,1386,1388,1390,1392,1394,1396,1398,1400,1402,1404,1406,1408,1410,
		1412,1414,1416,1418,1420,1422,1424,1426,1428,1430,1432,1434,1436,1438,
		1440,1442,1444,1446,1448,1450,1452,1454,1456,1458,1460,1462,1464,1466,
		1468,1470,1472,1474,1476,1478,1480,1482,1484,1486,1488,1490,1492,1494,
		1496,1498,1500,1502,1504,1506,1508,0,176,1,0,730,731,2,0,63,63,599,599,
		2,0,93,93,488,488,1,0,653,654,2,0,51,51,184,184,1,0,732,733,2,0,94,94,
		312,312,2,0,177,177,192,192,2,0,264,264,475,475,4,0,164,164,280,280,455,
		455,566,566,2,0,168,168,281,281,2,0,458,458,613,613,2,0,393,393,646,646,
		3,0,359,359,587,587,611,611,2,0,53,53,73,73,3,0,171,171,274,274,623,623,
		2,0,229,229,433,433,2,0,581,581,583,583,3,0,264,264,321,321,449,449,2,
		0,225,225,387,387,4,0,225,225,298,298,387,387,437,437,2,0,6,6,9,12,3,0,
		169,169,255,255,321,321,1,0,635,636,2,0,153,153,661,661,2,0,125,125,321,
		321,2,0,805,805,811,811,2,0,308,308,500,500,2,0,169,169,321,321,2,0,671,
		671,803,803,6,0,57,57,180,180,255,255,542,544,546,546,565,565,2,0,29,29,
		400,400,2,0,3,5,43,43,3,0,450,450,500,500,691,691,2,0,141,141,497,497,
		2,0,64,64,172,172,2,0,520,520,623,623,2,0,302,302,495,495,2,0,140,140,
		271,271,2,0,57,57,180,180,2,0,230,230,264,264,2,0,268,268,295,295,2,0,
		404,404,657,657,3,0,276,276,581,581,583,583,2,0,74,74,553,553,2,0,291,
		291,489,489,2,0,77,77,341,341,2,0,322,322,766,766,2,0,326,326,772,772,
		2,0,323,323,767,767,2,0,343,343,790,790,2,0,329,329,775,775,2,0,330,330,
		776,776,2,0,324,324,769,769,2,0,331,331,778,778,2,0,325,325,770,770,2,
		0,339,339,779,779,2,0,333,333,780,780,2,0,332,332,781,781,2,0,335,335,
		783,783,2,0,336,336,784,784,2,0,337,337,785,785,2,0,338,338,786,786,2,
		0,340,340,787,787,2,0,342,342,789,789,2,0,746,746,788,788,2,0,334,334,
		782,782,2,0,720,720,777,777,2,0,721,721,765,765,2,0,344,344,771,771,2,
		0,743,743,768,768,2,0,744,744,791,791,3,0,401,401,751,752,806,806,2,0,
		327,327,773,773,2,0,328,328,774,774,2,0,539,539,541,541,2,0,466,466,548,
		548,2,0,526,526,762,762,2,0,163,163,184,184,3,0,389,389,549,549,658,658,
		2,0,314,314,620,620,2,0,166,166,727,727,3,0,238,238,440,440,583,583,4,
		0,274,274,460,460,511,511,623,623,13,0,171,171,184,184,205,205,208,208,
		222,222,268,268,441,441,445,445,468,468,522,522,575,575,603,603,625,625,
		4,0,499,499,582,582,627,627,644,644,2,0,139,139,184,184,2,0,166,166,389,
		389,2,0,215,215,449,449,1,0,813,814,5,0,100,100,215,215,219,219,357,357,
		449,449,3,0,215,215,449,449,628,628,2,0,246,246,666,666,2,0,119,119,610,
		610,2,0,235,235,282,282,2,0,267,268,293,293,6,0,57,57,138,138,286,286,
		358,358,533,533,577,577,2,0,127,127,448,448,4,0,257,257,439,439,557,557,
		626,626,5,0,77,77,198,198,200,200,240,240,527,527,2,0,627,627,718,718,
		2,0,172,173,213,213,3,0,218,218,605,605,619,619,2,0,23,23,61,61,2,0,26,
		26,412,412,2,0,57,57,62,62,2,0,6,6,8,13,3,0,16,18,181,181,372,372,1,0,
		14,15,1,0,21,22,2,0,14,15,20,20,2,0,79,80,82,82,2,0,350,350,368,368,5,
		0,558,558,561,561,574,574,640,640,643,643,4,0,686,687,700,700,702,702,
		704,704,2,0,692,692,694,694,2,0,689,689,693,693,2,0,225,225,298,298,2,
		0,718,718,815,815,2,0,264,264,703,703,2,0,52,52,568,568,1,0,155,156,1,
		0,593,594,4,0,154,154,157,157,592,592,595,595,4,0,243,243,309,309,374,
		376,429,430,2,0,1,1,390,390,2,0,1,1,19,19,5,0,158,161,258,260,364,365,
		508,508,663,663,9,0,162,162,261,261,361,361,366,366,373,373,447,447,509,
		509,648,648,664,664,3,0,135,135,210,210,614,614,2,0,143,143,550,550,2,
		0,396,396,501,501,10,0,97,97,107,107,116,116,130,132,148,148,360,360,378,
		378,507,507,567,567,585,585,2,0,564,564,645,645,3,0,166,166,188,188,226,
		226,3,0,166,166,179,179,358,358,3,0,236,236,420,420,525,525,3,0,88,88,
		252,252,504,504,1,0,669,670,2,0,608,608,630,630,5,0,76,76,280,280,355,
		355,528,528,597,597,3,0,164,164,226,227,397,397,1,0,85,86,2,0,317,317,
		354,354,4,0,243,244,309,309,374,376,429,430,3,0,524,524,621,621,665,665,
		1,0,554,556,2,0,104,104,584,584,6,0,121,121,123,123,166,166,188,188,226,
		226,459,459,3,0,225,225,298,298,392,392,2,0,179,179,358,358,2,0,310,310,
		450,450,2,0,348,348,367,367,2,0,153,153,268,268,3,0,272,272,282,282,415,
		415,2,0,551,551,588,588,2,0,399,399,403,403,2,0,312,312,394,394,2,0,820,
		820,822,822,3,0,3,5,44,44,46,47,2,0,3,5,44,44,2,0,3,5,46,47,1,0,44,45,
		2,0,218,218,605,605,2,0,42,42,395,395,1,0,3,5,1,0,6,7,5,0,246,246,312,
		312,516,516,666,666,681,681,3,0,208,208,522,522,722,722,32,0,65,65,74,
		74,90,91,102,102,104,104,118,118,120,120,133,133,163,163,183,183,195,195,
		228,229,251,251,254,254,266,266,277,277,297,297,392,392,433,433,435,435,
		472,472,485,485,496,496,505,505,524,524,526,526,553,553,562,562,606,606,
		615,616,659,659,685,685,9,0,205,205,222,222,389,389,441,441,445,445,468,
		468,476,476,575,575,717,717,157,0,49,50,52,56,59,59,62,62,67,72,78,78,
		81,81,84,86,88,88,94,94,97,98,100,101,106,111,113,114,116,117,119,119,
		121,125,127,128,130,132,134,134,138,138,143,143,148,148,152,154,157,157,
		162,162,167,168,170,170,175,179,186,188,192,192,194,194,196,201,203,204,
		206,207,211,212,214,216,219,220,223,226,233,234,236,236,240,240,242,245,
		248,248,252,252,256,257,261,262,265,265,267,267,270,270,275,276,281,281,
		285,286,288,289,292,292,294,294,298,298,300,300,303,304,309,310,313,313,
		315,316,322,322,324,339,341,344,346,349,351,352,357,361,363,363,366,367,
		369,369,371,371,373,381,383,388,393,393,396,396,398,398,400,400,402,402,
		404,405,408,408,416,422,424,431,436,437,439,439,442,444,447,449,452,452,
		456,459,462,466,469,469,471,471,473,473,477,483,487,487,489,491,493,493,
		497,499,501,502,504,504,506,507,509,510,514,515,517,517,520,520,525,525,
		527,527,529,533,539,541,543,543,545,545,548,548,550,550,552,552,554,557,
		563,563,566,571,576,578,581,582,584,587,589,590,592,595,601,602,607,608,
		610,613,619,619,622,622,624,624,626,628,634,634,636,636,639,639,644,644,
		646,649,654,656,658,658,660,661,664,664,667,670,672,672,677,679,682,683,
		688,688,690,690,697,698,701,701,703,703,705,706,710,716,719,721,723,733,
		735,738,740,740,743,746,753,756,758,760,762,802,4,0,592,592,595,595,739,
		739,741,752,4,0,804,804,806,809,811,811,815,815,54,0,49,49,59,59,65,65,
		72,72,74,74,90,91,102,102,104,104,109,109,118,118,120,120,133,133,163,
		163,183,183,195,195,228,229,233,233,242,242,251,251,254,254,256,256,277,
		277,297,297,392,392,405,405,408,408,416,416,419,419,423,423,431,431,433,
		433,435,435,469,469,472,472,485,485,487,487,496,496,505,505,510,510,517,
		517,524,524,526,526,530,531,553,553,562,562,606,606,615,616,624,624,656,
		656,659,659,667,667,669,670,685,685,728,731,148,0,50,50,52,56,62,62,67,
		71,78,78,81,81,84,86,88,88,94,94,97,98,100,101,106,108,110,111,113,114,
		116,117,119,119,121,125,127,128,130,132,134,134,138,138,143,143,148,148,
		152,154,157,157,162,162,167,168,170,170,175,179,186,188,192,192,194,194,
		196,201,203,204,206,206,211,211,214,216,219,220,223,226,234,234,236,236,
		240,240,243,246,248,248,252,252,257,257,261,262,265,265,267,267,270,270,
		275,276,281,281,285,286,288,289,292,292,294,294,298,298,300,300,303,304,
		309,310,312,313,315,316,322,322,324,339,341,344,346,349,351,352,357,361,
		363,363,366,367,369,369,371,371,373,381,383,388,393,393,396,396,398,398,
		400,400,402,402,417,418,420,422,424,430,436,437,439,439,442,444,447,449,
		452,452,456,459,462,466,471,471,473,473,477,483,489,491,493,493,497,499,
		501,502,504,504,506,507,509,509,514,516,520,520,525,525,527,527,529,529,
		532,533,539,541,543,543,545,545,548,548,550,550,552,552,554,557,563,563,
		566,571,575,578,581,582,584,587,589,590,592,595,601,602,607,613,619,619,
		622,622,626,628,636,636,639,639,644,644,646,649,655,655,658,658,660,661,
		664,664,672,672,677,679,682,684,688,688,690,690,697,698,701,701,703,703,
		705,706,710,716,719,720,724,725,727,727,732,733,735,736,757,757,10337,
		0,1513,1,0,0,0,2,1520,1,0,0,0,4,1600,1,0,0,0,6,1602,1,0,0,0,8,1625,1,0,
		0,0,10,1639,1,0,0,0,12,1642,1,0,0,0,14,1680,1,0,0,0,16,1689,1,0,0,0,18,
		1702,1,0,0,0,20,1704,1,0,0,0,22,1709,1,0,0,0,24,1729,1,0,0,0,26,1738,1,
		0,0,0,28,1740,1,0,0,0,30,1755,1,0,0,0,32,1851,1,0,0,0,34,1855,1,0,0,0,
		36,1871,1,0,0,0,38,2008,1,0,0,0,40,2013,1,0,0,0,42,2015,1,0,0,0,44,2017,
		1,0,0,0,46,2031,1,0,0,0,48,2039,1,0,0,0,50,2055,1,0,0,0,52,2057,1,0,0,
		0,54,2060,1,0,0,0,56,2065,1,0,0,0,58,2067,1,0,0,0,60,2082,1,0,0,0,62,2090,
		1,0,0,0,64,2100,1,0,0,0,66,2102,1,0,0,0,68,2124,1,0,0,0,70,2133,1,0,0,
		0,72,2136,1,0,0,0,74,2149,1,0,0,0,76,2154,1,0,0,0,78,2158,1,0,0,0,80,2197,
		1,0,0,0,82,2199,1,0,0,0,84,2219,1,0,0,0,86,2234,1,0,0,0,88,2237,1,0,0,
		0,90,2262,1,0,0,0,92,2272,1,0,0,0,94,2275,1,0,0,0,96,2280,1,0,0,0,98,2289,
		1,0,0,0,100,2291,1,0,0,0,102,2295,1,0,0,0,104,2307,1,0,0,0,106,2336,1,
		0,0,0,108,2342,1,0,0,0,110,2345,1,0,0,0,112,2375,1,0,0,0,114,2392,1,0,
		0,0,116,2395,1,0,0,0,118,2420,1,0,0,0,120,2423,1,0,0,0,122,2475,1,0,0,
		0,124,2477,1,0,0,0,126,2481,1,0,0,0,128,2490,1,0,0,0,130,2506,1,0,0,0,
		132,2508,1,0,0,0,134,2516,1,0,0,0,136,2542,1,0,0,0,138,2544,1,0,0,0,140,
		2556,1,0,0,0,142,2571,1,0,0,0,144,2573,1,0,0,0,146,2576,1,0,0,0,148,2597,
		1,0,0,0,150,2599,1,0,0,0,152,2605,1,0,0,0,154,2611,1,0,0,0,156,2617,1,
		0,0,0,158,2623,1,0,0,0,160,2629,1,0,0,0,162,2636,1,0,0,0,164,2644,1,0,
		0,0,166,2646,1,0,0,0,168,2652,1,0,0,0,170,2658,1,0,0,0,172,2664,1,0,0,
		0,174,2671,1,0,0,0,176,2689,1,0,0,0,178,2691,1,0,0,0,180,2695,1,0,0,0,
		182,2700,1,0,0,0,184,2719,1,0,0,0,186,2723,1,0,0,0,188,2756,1,0,0,0,190,
		2787,1,0,0,0,192,2804,1,0,0,0,194,2806,1,0,0,0,196,2825,1,0,0,0,198,2831,
		1,0,0,0,200,2837,1,0,0,0,202,2843,1,0,0,0,204,2850,1,0,0,0,206,2859,1,
		0,0,0,208,2876,1,0,0,0,210,2878,1,0,0,0,212,2885,1,0,0,0,214,2895,1,0,
		0,0,216,2909,1,0,0,0,218,2915,1,0,0,0,220,2923,1,0,0,0,222,2929,1,0,0,
		0,224,2937,1,0,0,0,226,2943,1,0,0,0,228,2953,1,0,0,0,230,2957,1,0,0,0,
		232,2963,1,0,0,0,234,2968,1,0,0,0,236,2978,1,0,0,0,238,3021,1,0,0,0,240,
		3026,1,0,0,0,242,3028,1,0,0,0,244,3031,1,0,0,0,246,3061,1,0,0,0,248,3063,
		1,0,0,0,250,3092,1,0,0,0,252,3099,1,0,0,0,254,3103,1,0,0,0,256,3111,1,
		0,0,0,258,3124,1,0,0,0,260,3126,1,0,0,0,262,3144,1,0,0,0,264,3156,1,0,
		0,0,266,3162,1,0,0,0,268,3168,1,0,0,0,270,3220,1,0,0,0,272,3222,1,0,0,
		0,274,3224,1,0,0,0,276,3230,1,0,0,0,278,3232,1,0,0,0,280,3240,1,0,0,0,
		282,3246,1,0,0,0,284,3254,1,0,0,0,286,3263,1,0,0,0,288,3273,1,0,0,0,290,
		3288,1,0,0,0,292,3293,1,0,0,0,294,3298,1,0,0,0,296,3303,1,0,0,0,298,3325,
		1,0,0,0,300,3344,1,0,0,0,302,3347,1,0,0,0,304,3358,1,0,0,0,306,3374,1,
		0,0,0,308,3386,1,0,0,0,310,3388,1,0,0,0,312,3417,1,0,0,0,314,3419,1,0,
		0,0,316,3421,1,0,0,0,318,3424,1,0,0,0,320,3427,1,0,0,0,322,3434,1,0,0,
		0,324,3436,1,0,0,0,326,3466,1,0,0,0,328,3477,1,0,0,0,330,3480,1,0,0,0,
		332,3484,1,0,0,0,334,3493,1,0,0,0,336,3497,1,0,0,0,338,3502,1,0,0,0,340,
		3515,1,0,0,0,342,3520,1,0,0,0,344,3524,1,0,0,0,346,3540,1,0,0,0,348,3542,
		1,0,0,0,350,3560,1,0,0,0,352,3562,1,0,0,0,354,3571,1,0,0,0,356,3583,1,
		0,0,0,358,3604,1,0,0,0,360,3606,1,0,0,0,362,3609,1,0,0,0,364,3613,1,0,
		0,0,366,3615,1,0,0,0,368,3620,1,0,0,0,370,3628,1,0,0,0,372,3637,1,0,0,
		0,374,3640,1,0,0,0,376,3649,1,0,0,0,378,3651,1,0,0,0,380,3670,1,0,0,0,
		382,3672,1,0,0,0,384,3677,1,0,0,0,386,3681,1,0,0,0,388,3695,1,0,0,0,390,
		3698,1,0,0,0,392,3704,1,0,0,0,394,3717,1,0,0,0,396,3725,1,0,0,0,398,3751,
		1,0,0,0,400,3764,1,0,0,0,402,3771,1,0,0,0,404,3773,1,0,0,0,406,3785,1,
		0,0,0,408,3787,1,0,0,0,410,3800,1,0,0,0,412,3823,1,0,0,0,414,3825,1,0,
		0,0,416,3832,1,0,0,0,418,3842,1,0,0,0,420,3877,1,0,0,0,422,3884,1,0,0,
		0,424,3890,1,0,0,0,426,3892,1,0,0,0,428,3896,1,0,0,0,430,3904,1,0,0,0,
		432,3906,1,0,0,0,434,3911,1,0,0,0,436,3915,1,0,0,0,438,3943,1,0,0,0,440,
		3945,1,0,0,0,442,3947,1,0,0,0,444,3955,1,0,0,0,446,3957,1,0,0,0,448,3965,
		1,0,0,0,450,3975,1,0,0,0,452,3978,1,0,0,0,454,4003,1,0,0,0,456,4030,1,
		0,0,0,458,4032,1,0,0,0,460,4041,1,0,0,0,462,4072,1,0,0,0,464,4090,1,0,
		0,0,466,4092,1,0,0,0,468,4106,1,0,0,0,470,4108,1,0,0,0,472,4139,1,0,0,
		0,474,4142,1,0,0,0,476,4173,1,0,0,0,478,4175,1,0,0,0,480,4194,1,0,0,0,
		482,4202,1,0,0,0,484,4204,1,0,0,0,486,4207,1,0,0,0,488,4220,1,0,0,0,490,
		4222,1,0,0,0,492,4229,1,0,0,0,494,4365,1,0,0,0,496,4367,1,0,0,0,498,4369,
		1,0,0,0,500,4371,1,0,0,0,502,4373,1,0,0,0,504,4375,1,0,0,0,506,4377,1,
		0,0,0,508,4379,1,0,0,0,510,4381,1,0,0,0,512,4383,1,0,0,0,514,4385,1,0,
		0,0,516,4387,1,0,0,0,518,4389,1,0,0,0,520,4391,1,0,0,0,522,4393,1,0,0,
		0,524,4395,1,0,0,0,526,4397,1,0,0,0,528,4399,1,0,0,0,530,4401,1,0,0,0,
		532,4403,1,0,0,0,534,4405,1,0,0,0,536,4407,1,0,0,0,538,4409,1,0,0,0,540,
		4411,1,0,0,0,542,4413,1,0,0,0,544,4415,1,0,0,0,546,4419,1,0,0,0,548,4421,
		1,0,0,0,550,4426,1,0,0,0,552,4430,1,0,0,0,554,4446,1,0,0,0,556,4448,1,
		0,0,0,558,4450,1,0,0,0,560,4452,1,0,0,0,562,4465,1,0,0,0,564,4528,1,0,
		0,0,566,4530,1,0,0,0,568,4538,1,0,0,0,570,4546,1,0,0,0,572,4554,1,0,0,
		0,574,4556,1,0,0,0,576,4564,1,0,0,0,578,4588,1,0,0,0,580,4601,1,0,0,0,
		582,4610,1,0,0,0,584,4614,1,0,0,0,586,4618,1,0,0,0,588,4622,1,0,0,0,590,
		4626,1,0,0,0,592,4634,1,0,0,0,594,4641,1,0,0,0,596,4645,1,0,0,0,598,4656,
		1,0,0,0,600,4658,1,0,0,0,602,4662,1,0,0,0,604,4666,1,0,0,0,606,4670,1,
		0,0,0,608,4683,1,0,0,0,610,4685,1,0,0,0,612,4691,1,0,0,0,614,4699,1,0,
		0,0,616,4736,1,0,0,0,618,4738,1,0,0,0,620,4751,1,0,0,0,622,4753,1,0,0,
		0,624,4800,1,0,0,0,626,4883,1,0,0,0,628,4942,1,0,0,0,630,4944,1,0,0,0,
		632,4947,1,0,0,0,634,4959,1,0,0,0,636,4978,1,0,0,0,638,4980,1,0,0,0,640,
		4984,1,0,0,0,642,4989,1,0,0,0,644,5042,1,0,0,0,646,5049,1,0,0,0,648,5051,
		1,0,0,0,650,5058,1,0,0,0,652,5106,1,0,0,0,654,5108,1,0,0,0,656,5111,1,
		0,0,0,658,5114,1,0,0,0,660,5125,1,0,0,0,662,5130,1,0,0,0,664,5133,1,0,
		0,0,666,5148,1,0,0,0,668,5194,1,0,0,0,670,5196,1,0,0,0,672,5246,1,0,0,
		0,674,5264,1,0,0,0,676,5266,1,0,0,0,678,5282,1,0,0,0,680,5297,1,0,0,0,
		682,5322,1,0,0,0,684,5324,1,0,0,0,686,5332,1,0,0,0,688,5378,1,0,0,0,690,
		5380,1,0,0,0,692,5394,1,0,0,0,694,5396,1,0,0,0,696,5411,1,0,0,0,698,5416,
		1,0,0,0,700,5418,1,0,0,0,702,5420,1,0,0,0,704,5434,1,0,0,0,706,5447,1,
		0,0,0,708,5451,1,0,0,0,710,5453,1,0,0,0,712,5458,1,0,0,0,714,5468,1,0,
		0,0,716,5521,1,0,0,0,718,5532,1,0,0,0,720,5534,1,0,0,0,722,5537,1,0,0,
		0,724,5550,1,0,0,0,726,5582,1,0,0,0,728,5590,1,0,0,0,730,5592,1,0,0,0,
		732,5603,1,0,0,0,734,5605,1,0,0,0,736,5616,1,0,0,0,738,5618,1,0,0,0,740,
		5623,1,0,0,0,742,5634,1,0,0,0,744,5645,1,0,0,0,746,5653,1,0,0,0,748,5662,
		1,0,0,0,750,5671,1,0,0,0,752,5676,1,0,0,0,754,5679,1,0,0,0,756,5684,1,
		0,0,0,758,5689,1,0,0,0,760,5694,1,0,0,0,762,5707,1,0,0,0,764,5711,1,0,
		0,0,766,5716,1,0,0,0,768,5723,1,0,0,0,770,5740,1,0,0,0,772,5757,1,0,0,
		0,774,5770,1,0,0,0,776,5776,1,0,0,0,778,5783,1,0,0,0,780,5790,1,0,0,0,
		782,5795,1,0,0,0,784,5800,1,0,0,0,786,5803,1,0,0,0,788,5816,1,0,0,0,790,
		5824,1,0,0,0,792,5830,1,0,0,0,794,5838,1,0,0,0,796,5843,1,0,0,0,798,5848,
		1,0,0,0,800,5851,1,0,0,0,802,5861,1,0,0,0,804,5869,1,0,0,0,806,5874,1,
		0,0,0,808,5879,1,0,0,0,810,5883,1,0,0,0,812,5889,1,0,0,0,814,5894,1,0,
		0,0,816,5899,1,0,0,0,818,5904,1,0,0,0,820,5911,1,0,0,0,822,5918,1,0,0,
		0,824,5924,1,0,0,0,826,5930,1,0,0,0,828,5935,1,0,0,0,830,5945,1,0,0,0,
		832,5949,1,0,0,0,834,5951,1,0,0,0,836,5953,1,0,0,0,838,5956,1,0,0,0,840,
		5971,1,0,0,0,842,6009,1,0,0,0,844,6013,1,0,0,0,846,6015,1,0,0,0,848,6023,
		1,0,0,0,850,6027,1,0,0,0,852,6035,1,0,0,0,854,6044,1,0,0,0,856,6046,1,
		0,0,0,858,6065,1,0,0,0,860,6067,1,0,0,0,862,6069,1,0,0,0,864,6084,1,0,
		0,0,866,6096,1,0,0,0,868,6098,1,0,0,0,870,6106,1,0,0,0,872,6114,1,0,0,
		0,874,6123,1,0,0,0,876,6125,1,0,0,0,878,6143,1,0,0,0,880,6157,1,0,0,0,
		882,6162,1,0,0,0,884,6168,1,0,0,0,886,6170,1,0,0,0,888,6186,1,0,0,0,890,
		6194,1,0,0,0,892,6204,1,0,0,0,894,6217,1,0,0,0,896,6219,1,0,0,0,898,6225,
		1,0,0,0,900,6253,1,0,0,0,902,6263,1,0,0,0,904,6265,1,0,0,0,906,6269,1,
		0,0,0,908,6272,1,0,0,0,910,6275,1,0,0,0,912,6288,1,0,0,0,914,6304,1,0,
		0,0,916,6327,1,0,0,0,918,6329,1,0,0,0,920,6366,1,0,0,0,922,6368,1,0,0,
		0,924,6522,1,0,0,0,926,6535,1,0,0,0,928,6542,1,0,0,0,930,6629,1,0,0,0,
		932,6631,1,0,0,0,934,6685,1,0,0,0,936,6687,1,0,0,0,938,6693,1,0,0,0,940,
		6695,1,0,0,0,942,6702,1,0,0,0,944,6707,1,0,0,0,946,6720,1,0,0,0,948,6726,
		1,0,0,0,950,6728,1,0,0,0,952,6747,1,0,0,0,954,6750,1,0,0,0,956,6759,1,
		0,0,0,958,6761,1,0,0,0,960,6784,1,0,0,0,962,7069,1,0,0,0,964,7071,1,0,
		0,0,966,7097,1,0,0,0,968,7099,1,0,0,0,970,7105,1,0,0,0,972,7107,1,0,0,
		0,974,7122,1,0,0,0,976,7130,1,0,0,0,978,7132,1,0,0,0,980,7161,1,0,0,0,
		982,7194,1,0,0,0,984,7196,1,0,0,0,986,7204,1,0,0,0,988,7211,1,0,0,0,990,
		7213,1,0,0,0,992,7223,1,0,0,0,994,7238,1,0,0,0,996,7240,1,0,0,0,998,7244,
		1,0,0,0,1000,7247,1,0,0,0,1002,7250,1,0,0,0,1004,7301,1,0,0,0,1006,7303,
		1,0,0,0,1008,7314,1,0,0,0,1010,7316,1,0,0,0,1012,7318,1,0,0,0,1014,7322,
		1,0,0,0,1016,7324,1,0,0,0,1018,7326,1,0,0,0,1020,7330,1,0,0,0,1022,7334,
		1,0,0,0,1024,7338,1,0,0,0,1026,7346,1,0,0,0,1028,7350,1,0,0,0,1030,7358,
		1,0,0,0,1032,7360,1,0,0,0,1034,7377,1,0,0,0,1036,7379,1,0,0,0,1038,7382,
		1,0,0,0,1040,7387,1,0,0,0,1042,7395,1,0,0,0,1044,7401,1,0,0,0,1046,7405,
		1,0,0,0,1048,7422,1,0,0,0,1050,7425,1,0,0,0,1052,7430,1,0,0,0,1054,7432,
		1,0,0,0,1056,7435,1,0,0,0,1058,7444,1,0,0,0,1060,7452,1,0,0,0,1062,7454,
		1,0,0,0,1064,7459,1,0,0,0,1066,7466,1,0,0,0,1068,7476,1,0,0,0,1070,7484,
		1,0,0,0,1072,7486,1,0,0,0,1074,7496,1,0,0,0,1076,7504,1,0,0,0,1078,7506,
		1,0,0,0,1080,7512,1,0,0,0,1082,7533,1,0,0,0,1084,7535,1,0,0,0,1086,7541,
		1,0,0,0,1088,7544,1,0,0,0,1090,7547,1,0,0,0,1092,7575,1,0,0,0,1094,7579,
		1,0,0,0,1096,7586,1,0,0,0,1098,7593,1,0,0,0,1100,7595,1,0,0,0,1102,7611,
		1,0,0,0,1104,7627,1,0,0,0,1106,7631,1,0,0,0,1108,7634,1,0,0,0,1110,7637,
		1,0,0,0,1112,7661,1,0,0,0,1114,7663,1,0,0,0,1116,7671,1,0,0,0,1118,7673,
		1,0,0,0,1120,7676,1,0,0,0,1122,7756,1,0,0,0,1124,7758,1,0,0,0,1126,7762,
		1,0,0,0,1128,7850,1,0,0,0,1130,7852,1,0,0,0,1132,7854,1,0,0,0,1134,7856,
		1,0,0,0,1136,7861,1,0,0,0,1138,7877,1,0,0,0,1140,7879,1,0,0,0,1142,7913,
		1,0,0,0,1144,7915,1,0,0,0,1146,7926,1,0,0,0,1148,7933,1,0,0,0,1150,7950,
		1,0,0,0,1152,7952,1,0,0,0,1154,7956,1,0,0,0,1156,7978,1,0,0,0,1158,7980,
		1,0,0,0,1160,7982,1,0,0,0,1162,7989,1,0,0,0,1164,7991,1,0,0,0,1166,7993,
		1,0,0,0,1168,8142,1,0,0,0,1170,8147,1,0,0,0,1172,8154,1,0,0,0,1174,8156,
		1,0,0,0,1176,8164,1,0,0,0,1178,8182,1,0,0,0,1180,8190,1,0,0,0,1182,8198,
		1,0,0,0,1184,8200,1,0,0,0,1186,8204,1,0,0,0,1188,8213,1,0,0,0,1190,8219,
		1,0,0,0,1192,8226,1,0,0,0,1194,8228,1,0,0,0,1196,8243,1,0,0,0,1198,8250,
		1,0,0,0,1200,8253,1,0,0,0,1202,8397,1,0,0,0,1204,8401,1,0,0,0,1206,8404,
		1,0,0,0,1208,8413,1,0,0,0,1210,8422,1,0,0,0,1212,8430,1,0,0,0,1214,8476,
		1,0,0,0,1216,8478,1,0,0,0,1218,8499,1,0,0,0,1220,8503,1,0,0,0,1222,8514,
		1,0,0,0,1224,8559,1,0,0,0,1226,8595,1,0,0,0,1228,8597,1,0,0,0,1230,8605,
		1,0,0,0,1232,8618,1,0,0,0,1234,8620,1,0,0,0,1236,8624,1,0,0,0,1238,8627,
		1,0,0,0,1240,8637,1,0,0,0,1242,8639,1,0,0,0,1244,8643,1,0,0,0,1246,8648,
		1,0,0,0,1248,8652,1,0,0,0,1250,8655,1,0,0,0,1252,8658,1,0,0,0,1254,8662,
		1,0,0,0,1256,8668,1,0,0,0,1258,8676,1,0,0,0,1260,8684,1,0,0,0,1262,8690,
		1,0,0,0,1264,8693,1,0,0,0,1266,8711,1,0,0,0,1268,8713,1,0,0,0,1270,8719,
		1,0,0,0,1272,8723,1,0,0,0,1274,8731,1,0,0,0,1276,8739,1,0,0,0,1278,8751,
		1,0,0,0,1280,8763,1,0,0,0,1282,8765,1,0,0,0,1284,8769,1,0,0,0,1286,8774,
		1,0,0,0,1288,8778,1,0,0,0,1290,8784,1,0,0,0,1292,8790,1,0,0,0,1294,8797,
		1,0,0,0,1296,8804,1,0,0,0,1298,8808,1,0,0,0,1300,8827,1,0,0,0,1302,8829,
		1,0,0,0,1304,8832,1,0,0,0,1306,8835,1,0,0,0,1308,8844,1,0,0,0,1310,8846,
		1,0,0,0,1312,8851,1,0,0,0,1314,8853,1,0,0,0,1316,8855,1,0,0,0,1318,8857,
		1,0,0,0,1320,8865,1,0,0,0,1322,8867,1,0,0,0,1324,8869,1,0,0,0,1326,8871,
		1,0,0,0,1328,8882,1,0,0,0,1330,8886,1,0,0,0,1332,8888,1,0,0,0,1334,8890,
		1,0,0,0,1336,8892,1,0,0,0,1338,8901,1,0,0,0,1340,8903,1,0,0,0,1342,8905,
		1,0,0,0,1344,8907,1,0,0,0,1346,8909,1,0,0,0,1348,8911,1,0,0,0,1350,8913,
		1,0,0,0,1352,8915,1,0,0,0,1354,8919,1,0,0,0,1356,8923,1,0,0,0,1358,8925,
		1,0,0,0,1360,8927,1,0,0,0,1362,8929,1,0,0,0,1364,8931,1,0,0,0,1366,8933,
		1,0,0,0,1368,8935,1,0,0,0,1370,8937,1,0,0,0,1372,8939,1,0,0,0,1374,8941,
		1,0,0,0,1376,8943,1,0,0,0,1378,8947,1,0,0,0,1380,8949,1,0,0,0,1382,8952,
		1,0,0,0,1384,8964,1,0,0,0,1386,8966,1,0,0,0,1388,8974,1,0,0,0,1390,8982,
		1,0,0,0,1392,8986,1,0,0,0,1394,8988,1,0,0,0,1396,8992,1,0,0,0,1398,8994,
		1,0,0,0,1400,8996,1,0,0,0,1402,8998,1,0,0,0,1404,9000,1,0,0,0,1406,9005,
		1,0,0,0,1408,9009,1,0,0,0,1410,9011,1,0,0,0,1412,9019,1,0,0,0,1414,9023,
		1,0,0,0,1416,9027,1,0,0,0,1418,9034,1,0,0,0,1420,9037,1,0,0,0,1422,9039,
		1,0,0,0,1424,9041,1,0,0,0,1426,9048,1,0,0,0,1428,9055,1,0,0,0,1430,9060,
		1,0,0,0,1432,9071,1,0,0,0,1434,9076,1,0,0,0,1436,9078,1,0,0,0,1438,9080,
		1,0,0,0,1440,9094,1,0,0,0,1442,9099,1,0,0,0,1444,9104,1,0,0,0,1446,9111,
		1,0,0,0,1448,9119,1,0,0,0,1450,9121,1,0,0,0,1452,9132,1,0,0,0,1454,9134,
		1,0,0,0,1456,9136,1,0,0,0,1458,9138,1,0,0,0,1460,9146,1,0,0,0,1462,9150,
		1,0,0,0,1464,9152,1,0,0,0,1466,9154,1,0,0,0,1468,9162,1,0,0,0,1470,9166,
		1,0,0,0,1472,9170,1,0,0,0,1474,9174,1,0,0,0,1476,9176,1,0,0,0,1478,9179,
		1,0,0,0,1480,9181,1,0,0,0,1482,9189,1,0,0,0,1484,9191,1,0,0,0,1486,9194,
		1,0,0,0,1488,9212,1,0,0,0,1490,9214,1,0,0,0,1492,9216,1,0,0,0,1494,9236,
		1,0,0,0,1496,9238,1,0,0,0,1498,9245,1,0,0,0,1500,9257,1,0,0,0,1502,9263,
		1,0,0,0,1504,9265,1,0,0,0,1506,9267,1,0,0,0,1508,9272,1,0,0,0,1510,1512,
		3,2,1,0,1511,1510,1,0,0,0,1512,1515,1,0,0,0,1513,1511,1,0,0,0,1513,1514,
		1,0,0,0,1514,1516,1,0,0,0,1515,1513,1,0,0,0,1516,1517,5,0,0,1,1517,1,1,
		0,0,0,1518,1521,3,4,2,0,1519,1521,3,458,229,0,1520,1518,1,0,0,0,1520,1519,
		1,0,0,0,1521,1522,1,0,0,0,1522,1523,5,30,0,0,1523,3,1,0,0,0,1524,1601,
		3,6,3,0,1525,1601,3,82,41,0,1526,1601,3,194,97,0,1527,1601,3,226,113,0,
		1528,1601,3,230,115,0,1529,1601,3,232,116,0,1530,1601,3,234,117,0,1531,
		1601,3,236,118,0,1532,1601,3,242,121,0,1533,1601,3,244,122,0,1534,1601,
		3,248,124,0,1535,1601,3,268,134,0,1536,1601,3,296,148,0,1537,1601,3,298,
		149,0,1538,1601,3,452,226,0,1539,1601,3,454,227,0,1540,1601,3,476,238,
		0,1541,1601,3,608,304,0,1542,1601,3,614,307,0,1543,1601,3,620,310,0,1544,
		1601,3,688,344,0,1545,1601,3,702,351,0,1546,1601,3,704,352,0,1547,1601,
		3,714,357,0,1548,1601,3,738,369,0,1549,1601,3,740,370,0,1550,1601,3,742,
		371,0,1551,1601,3,744,372,0,1552,1601,3,746,373,0,1553,1601,3,748,374,
		0,1554,1601,3,750,375,0,1555,1601,3,752,376,0,1556,1601,3,754,377,0,1557,
		1601,3,756,378,0,1558,1601,3,758,379,0,1559,1601,3,760,380,0,1560,1601,
		3,762,381,0,1561,1601,3,764,382,0,1562,1601,3,766,383,0,1563,1601,3,768,
		384,0,1564,1601,3,770,385,0,1565,1601,3,772,386,0,1566,1601,3,774,387,
		0,1567,1601,3,776,388,0,1568,1601,3,778,389,0,1569,1601,3,780,390,0,1570,
		1601,3,782,391,0,1571,1601,3,784,392,0,1572,1601,3,786,393,0,1573,1601,
		3,788,394,0,1574,1601,3,790,395,0,1575,1601,3,792,396,0,1576,1601,3,794,
		397,0,1577,1601,3,796,398,0,1578,1601,3,798,399,0,1579,1601,3,800,400,
		0,1580,1601,3,802,401,0,1581,1601,3,804,402,0,1582,1601,3,806,403,0,1583,
		1601,3,808,404,0,1584,1601,3,810,405,0,1585,1601,3,812,406,0,1586,1601,
		3,814,407,0,1587,1601,3,816,408,0,1588,1601,3,818,409,0,1589,1601,3,820,
		410,0,1590,1601,3,822,411,0,1591,1601,3,824,412,0,1592,1601,3,826,413,
		0,1593,1601,3,828,414,0,1594,1601,3,874,437,0,1595,1601,3,842,421,0,1596,
		1601,3,894,447,0,1597,1601,3,1090,545,0,1598,1601,3,1100,550,0,1599,1601,
		3,1102,551,0,1600,1524,1,0,0,0,1600,1525,1,0,0,0,1600,1526,1,0,0,0,1600,
		1527,1,0,0,0,1600,1528,1,0,0,0,1600,1529,1,0,0,0,1600,1530,1,0,0,0,1600,
		1531,1,0,0,0,1600,1532,1,0,0,0,1600,1533,1,0,0,0,1600,1534,1,0,0,0,1600,
		1535,1,0,0,0,1600,1536,1,0,0,0,1600,1537,1,0,0,0,1600,1538,1,0,0,0,1600,
		1539,1,0,0,0,1600,1540,1,0,0,0,1600,1541,1,0,0,0,1600,1542,1,0,0,0,1600,
		1543,1,0,0,0,1600,1544,1,0,0,0,1600,1545,1,0,0,0,1600,1546,1,0,0,0,1600,
		1547,1,0,0,0,1600,1548,1,0,0,0,1600,1549,1,0,0,0,1600,1550,1,0,0,0,1600,
		1551,1,0,0,0,1600,1552,1,0,0,0,1600,1553,1,0,0,0,1600,1554,1,0,0,0,1600,
		1555,1,0,0,0,1600,1556,1,0,0,0,1600,1557,1,0,0,0,1600,1558,1,0,0,0,1600,
		1559,1,0,0,0,1600,1560,1,0,0,0,1600,1561,1,0,0,0,1600,1562,1,0,0,0,1600,
		1563,1,0,0,0,1600,1564,1,0,0,0,1600,1565,1,0,0,0,1600,1566,1,0,0,0,1600,
		1567,1,0,0,0,1600,1568,1,0,0,0,1600,1569,1,0,0,0,1600,1570,1,0,0,0,1600,
		1571,1,0,0,0,1600,1572,1,0,0,0,1600,1573,1,0,0,0,1600,1574,1,0,0,0,1600,
		1575,1,0,0,0,1600,1576,1,0,0,0,1600,1577,1,0,0,0,1600,1578,1,0,0,0,1600,
		1579,1,0,0,0,1600,1580,1,0,0,0,1600,1581,1,0,0,0,1600,1582,1,0,0,0,1600,
		1583,1,0,0,0,1600,1584,1,0,0,0,1600,1585,1,0,0,0,1600,1586,1,0,0,0,1600,
		1587,1,0,0,0,1600,1588,1,0,0,0,1600,1589,1,0,0,0,1600,1590,1,0,0,0,1600,
		1591,1,0,0,0,1600,1592,1,0,0,0,1600,1593,1,0,0,0,1600,1594,1,0,0,0,1600,
		1595,1,0,0,0,1600,1596,1,0,0,0,1600,1597,1,0,0,0,1600,1598,1,0,0,0,1600,
		1599,1,0,0,0,1601,5,1,0,0,0,1602,1623,5,58,0,0,1603,1624,3,22,11,0,1604,
		1624,3,8,4,0,1605,1606,5,440,0,0,1606,1608,3,1344,672,0,1607,1609,3,116,
		58,0,1608,1607,1,0,0,0,1608,1609,1,0,0,0,1609,1624,1,0,0,0,1610,1611,5,
		238,0,0,1611,1613,3,1348,674,0,1612,1614,3,116,58,0,1613,1612,1,0,0,0,
		1613,1614,1,0,0,0,1614,1624,1,0,0,0,1615,1624,3,72,36,0,1616,1624,3,12,
		6,0,1617,1624,3,58,29,0,1618,1619,4,3,0,0,1619,1624,3,60,30,0,1620,1624,
		3,14,7,0,1621,1624,3,20,10,0,1622,1624,3,80,40,0,1623,1603,1,0,0,0,1623,
		1604,1,0,0,0,1623,1605,1,0,0,0,1623,1610,1,0,0,0,1623,1615,1,0,0,0,1623,
		1616,1,0,0,0,1623,1617,1,0,0,0,1623,1618,1,0,0,0,1623,1620,1,0,0,0,1623,
		1621,1,0,0,0,1623,1622,1,0,0,0,1624,7,1,0,0,0,1625,1626,5,150,0,0,1626,
		1628,3,1340,670,0,1627,1629,3,10,5,0,1628,1627,1,0,0,0,1629,1630,1,0,0,
		0,1630,1628,1,0,0,0,1630,1631,1,0,0,0,1631,9,1,0,0,0,1632,1640,3,86,43,
		0,1633,1634,5,453,0,0,1634,1636,5,404,0,0,1635,1637,5,6,0,0,1636,1635,
		1,0,0,0,1636,1637,1,0,0,0,1637,1638,1,0,0,0,1638,1640,3,1204,602,0,1639,
		1632,1,0,0,0,1639,1633,1,0,0,0,1640,11,1,0,0,0,1641,1643,3,1234,617,0,
		1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1644,1,0,0,0,1644,1645,5,205,
		0,0,1645,1649,3,1368,684,0,1646,1647,5,401,0,0,1647,1648,5,506,0,0,1648,
		1650,3,1112,556,0,1649,1646,1,0,0,0,1649,1650,1,0,0,0,1650,1657,1,0,0,
		0,1651,1652,5,401,0,0,1652,1654,5,122,0,0,1653,1655,5,390,0,0,1654,1653,
		1,0,0,0,1654,1655,1,0,0,0,1655,1656,1,0,0,0,1656,1658,5,436,0,0,1657,1651,
		1,0,0,0,1657,1658,1,0,0,0,1658,1662,1,0,0,0,1659,1660,5,470,0,0,1660,1661,
		5,599,0,0,1661,1663,3,1408,704,0,1662,1659,1,0,0,0,1662,1663,1,0,0,0,1663,
		1670,1,0,0,0,1664,1671,5,192,0,0,1665,1668,5,177,0,0,1666,1667,5,401,0,
		0,1667,1669,3,606,303,0,1668,1666,1,0,0,0,1668,1669,1,0,0,0,1669,1671,
		1,0,0,0,1670,1664,1,0,0,0,1670,1665,1,0,0,0,1670,1671,1,0,0,0,1671,1674,
		1,0,0,0,1672,1673,5,118,0,0,1673,1675,3,1446,723,0,1674,1672,1,0,0,0,1674,
		1675,1,0,0,0,1675,1678,1,0,0,0,1676,1677,5,183,0,0,1677,1679,3,1034,517,
		0,1678,1676,1,0,0,0,1678,1679,1,0,0,0,1679,13,1,0,0,0,1680,1681,5,315,
		0,0,1681,1682,5,249,0,0,1682,1683,3,1364,682,0,1683,1684,5,51,0,0,1684,
		1685,5,612,0,0,1685,1687,3,1446,723,0,1686,1688,3,16,8,0,1687,1686,1,0,
		0,0,1687,1688,1,0,0,0,1688,15,1,0,0,0,1689,1696,3,18,9,0,1690,1692,5,29,
		0,0,1691,1690,1,0,0,0,1691,1692,1,0,0,0,1692,1693,1,0,0,0,1693,1695,3,
		18,9,0,1694,1691,1,0,0,0,1695,1698,1,0,0,0,1696,1694,1,0,0,0,1696,1697,
		1,0,0,0,1697,17,1,0,0,0,1698,1696,1,0,0,0,1699,1703,3,150,75,0,1700,1703,
		3,162,81,0,1701,1703,3,164,82,0,1702,1699,1,0,0,0,1702,1700,1,0,0,0,1702,
		1701,1,0,0,0,1703,19,1,0,0,0,1704,1705,5,517,0,0,1705,1706,3,1374,687,
		0,1706,1707,3,134,67,0,1707,21,1,0,0,0,1708,1710,3,1314,657,0,1709,1708,
		1,0,0,0,1709,1710,1,0,0,0,1710,1711,1,0,0,0,1711,1712,5,583,0,0,1712,1714,
		3,1384,692,0,1713,1715,3,24,12,0,1714,1713,1,0,0,0,1714,1715,1,0,0,0,1715,
		23,1,0,0,0,1716,1719,3,26,13,0,1717,1720,3,1212,606,0,1718,1720,3,54,27,
		0,1719,1717,1,0,0,0,1719,1718,1,0,0,0,1719,1720,1,0,0,0,1720,1730,1,0,
		0,0,1721,1730,3,1212,606,0,1722,1730,3,54,27,0,1723,1724,3,28,14,0,1724,
		1725,5,29,0,0,1725,1727,1,0,0,0,1726,1723,1,0,0,0,1726,1727,1,0,0,0,1727,
		1728,1,0,0,0,1728,1730,3,30,15,0,1729,1716,1,0,0,0,1729,1721,1,0,0,0,1729,
		1722,1,0,0,0,1729,1726,1,0,0,0,1730,25,1,0,0,0,1731,1739,3,28,14,0,1732,
		1733,3,28,14,0,1733,1734,5,29,0,0,1734,1736,1,0,0,0,1735,1732,1,0,0,0,
		1735,1736,1,0,0,0,1736,1737,1,0,0,0,1737,1739,3,34,17,0,1738,1731,1,0,
		0,0,1738,1735,1,0,0,0,1739,27,1,0,0,0,1740,1745,3,36,18,0,1741,1742,5,
		29,0,0,1742,1744,3,36,18,0,1743,1741,1,0,0,0,1744,1747,1,0,0,0,1745,1743,
		1,0,0,0,1745,1746,1,0,0,0,1746,29,1,0,0,0,1747,1745,1,0,0,0,1748,1749,
		5,178,0,0,1749,1756,5,582,0,0,1750,1751,5,266,0,0,1751,1756,5,582,0,0,
		1752,1756,3,32,16,0,1753,1754,4,15,1,0,1754,1756,7,0,0,0,1755,1748,1,0,
		0,0,1755,1750,1,0,0,0,1755,1752,1,0,0,0,1755,1753,1,0,0,0,1756,31,1,0,
		0,0,1757,1758,5,51,0,0,1758,1760,5,423,0,0,1759,1761,3,1316,658,0,1760,
		1759,1,0,0,0,1760,1761,1,0,0,0,1761,1765,1,0,0,0,1762,1766,3,1220,610,
		0,1763,1764,5,422,0,0,1764,1766,3,1422,711,0,1765,1762,1,0,0,0,1765,1763,
		1,0,0,0,1766,1852,1,0,0,0,1767,1768,5,184,0,0,1768,1769,5,423,0,0,1769,
		1852,3,1410,705,0,1770,1771,5,456,0,0,1771,1773,5,423,0,0,1772,1774,3,
		1316,658,0,1773,1772,1,0,0,0,1773,1774,1,0,0,0,1774,1775,1,0,0,0,1775,
		1852,3,56,28,0,1776,1777,5,406,0,0,1777,1779,5,423,0,0,1778,1780,3,1316,
		658,0,1779,1778,1,0,0,0,1779,1780,1,0,0,0,1780,1781,1,0,0,0,1781,1783,
		3,56,28,0,1782,1784,3,1316,658,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,1784,
		1852,1,0,0,0,1785,1786,5,60,0,0,1786,1788,5,423,0,0,1787,1789,3,1316,658,
		0,1788,1787,1,0,0,0,1788,1789,1,0,0,0,1789,1790,1,0,0,0,1790,1852,3,56,
		28,0,1791,1792,5,105,0,0,1792,1793,5,423,0,0,1793,1797,3,56,28,0,1794,
		1796,3,698,349,0,1795,1794,1,0,0,0,1796,1799,1,0,0,0,1797,1795,1,0,0,0,
		1797,1798,1,0,0,0,1798,1852,1,0,0,0,1799,1797,1,0,0,0,1800,1801,5,472,
		0,0,1801,1803,5,423,0,0,1802,1804,3,1316,658,0,1803,1802,1,0,0,0,1803,
		1804,1,0,0,0,1804,1805,1,0,0,0,1805,1809,3,56,28,0,1806,1808,3,700,350,
		0,1807,1806,1,0,0,0,1808,1811,1,0,0,0,1809,1807,1,0,0,0,1809,1810,1,0,
		0,0,1810,1852,1,0,0,0,1811,1809,1,0,0,0,1812,1813,5,110,0,0,1813,1815,
		5,423,0,0,1814,1816,3,1316,658,0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,
		1817,1,0,0,0,1817,1852,3,1422,711,0,1818,1819,5,606,0,0,1819,1820,5,423,
		0,0,1820,1852,3,56,28,0,1821,1822,5,471,0,0,1822,1824,5,423,0,0,1823,1825,
		3,1316,658,0,1824,1823,1,0,0,0,1824,1825,1,0,0,0,1825,1830,1,0,0,0,1826,
		1827,3,1410,705,0,1827,1828,5,279,0,0,1828,1829,3,1220,610,0,1829,1831,
		1,0,0,0,1830,1826,1,0,0,0,1830,1831,1,0,0,0,1831,1852,1,0,0,0,1832,1833,
		5,207,0,0,1833,1834,5,423,0,0,1834,1835,3,1408,704,0,1835,1836,5,653,0,
		0,1836,1837,5,583,0,0,1837,1839,3,1384,692,0,1838,1840,3,52,26,0,1839,
		1838,1,0,0,0,1839,1840,1,0,0,0,1840,1852,1,0,0,0,1841,1842,5,178,0,0,1842,
		1843,5,423,0,0,1843,1844,3,56,28,0,1844,1845,5,582,0,0,1845,1852,1,0,0,
		0,1846,1847,5,266,0,0,1847,1848,5,423,0,0,1848,1849,3,56,28,0,1849,1850,
		5,582,0,0,1850,1852,1,0,0,0,1851,1757,1,0,0,0,1851,1767,1,0,0,0,1851,1770,
		1,0,0,0,1851,1776,1,0,0,0,1851,1785,1,0,0,0,1851,1791,1,0,0,0,1851,1800,
		1,0,0,0,1851,1812,1,0,0,0,1851,1818,1,0,0,0,1851,1821,1,0,0,0,1851,1832,
		1,0,0,0,1851,1841,1,0,0,0,1851,1846,1,0,0,0,1852,33,1,0,0,0,1853,1856,
		3,38,19,0,1854,1856,3,1200,600,0,1855,1853,1,0,0,0,1855,1854,1,0,0,0,1856,
		1865,1,0,0,0,1857,1861,5,29,0,0,1858,1862,3,38,19,0,1859,1862,3,36,18,
		0,1860,1862,3,1200,600,0,1861,1858,1,0,0,0,1861,1859,1,0,0,0,1861,1860,
		1,0,0,0,1862,1864,1,0,0,0,1863,1857,1,0,0,0,1864,1867,1,0,0,0,1865,1863,
		1,0,0,0,1865,1866,1,0,0,0,1866,35,1,0,0,0,1867,1865,1,0,0,0,1868,1872,
		3,46,23,0,1869,1872,3,48,24,0,1870,1872,3,52,26,0,1871,1868,1,0,0,0,1871,
		1869,1,0,0,0,1871,1870,1,0,0,0,1872,37,1,0,0,0,1873,1875,5,51,0,0,1874,
		1876,5,115,0,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,1889,1,0,0,0,1877,
		1878,3,1408,704,0,1878,1880,3,1126,563,0,1879,1881,3,1116,558,0,1880,1879,
		1,0,0,0,1880,1881,1,0,0,0,1881,1883,1,0,0,0,1882,1884,3,40,20,0,1883,1882,
		1,0,0,0,1883,1884,1,0,0,0,1884,1890,1,0,0,0,1885,1886,5,32,0,0,1886,1887,
		3,90,45,0,1887,1888,5,33,0,0,1888,1890,1,0,0,0,1889,1877,1,0,0,0,1889,
		1885,1,0,0,0,1890,2009,1,0,0,0,1891,1892,5,51,0,0,1892,2009,3,1122,561,
		0,1893,1895,5,99,0,0,1894,1896,5,115,0,0,1895,1894,1,0,0,0,1895,1896,1,
		0,0,0,1896,1897,1,0,0,0,1897,1898,3,1324,662,0,1898,1899,3,1408,704,0,
		1899,1901,3,1126,563,0,1900,1902,3,40,20,0,1901,1900,1,0,0,0,1901,1902,
		1,0,0,0,1902,2009,1,0,0,0,1903,1905,5,371,0,0,1904,1906,5,115,0,0,1905,
		1904,1,0,0,0,1905,1906,1,0,0,0,1906,1907,1,0,0,0,1907,1908,3,1324,662,
		0,1908,1910,3,1126,563,0,1909,1911,3,40,20,0,1910,1909,1,0,0,0,1910,1911,
		1,0,0,0,1911,2009,1,0,0,0,1912,1934,5,184,0,0,1913,1915,5,115,0,0,1914,
		1913,1,0,0,0,1914,1915,1,0,0,0,1915,1916,1,0,0,0,1916,1918,3,1324,662,
		0,1917,1919,3,42,21,0,1918,1917,1,0,0,0,1918,1919,1,0,0,0,1919,1935,1,
		0,0,0,1920,1921,5,231,0,0,1921,1922,5,295,0,0,1922,1935,3,1324,662,0,1923,
		1924,5,438,0,0,1924,1935,5,295,0,0,1925,1926,3,442,221,0,1926,1927,3,1334,
		667,0,1927,1935,1,0,0,0,1928,1929,4,19,2,0,1929,1930,5,105,0,0,1930,1935,
		3,1408,704,0,1931,1932,4,19,3,0,1932,1933,5,129,0,0,1933,1935,3,1408,704,
		0,1934,1914,1,0,0,0,1934,1920,1,0,0,0,1934,1923,1,0,0,0,1934,1925,1,0,
		0,0,1934,1928,1,0,0,0,1934,1931,1,0,0,0,1935,2009,1,0,0,0,1936,1937,5,
		177,0,0,1937,2009,5,293,0,0,1938,1939,5,192,0,0,1939,2009,5,293,0,0,1940,
		1942,5,58,0,0,1941,1943,5,115,0,0,1942,1941,1,0,0,0,1942,1943,1,0,0,0,
		1943,1944,1,0,0,0,1944,1957,3,1324,662,0,1945,1946,5,519,0,0,1946,1950,
		5,166,0,0,1947,1948,4,19,4,0,1948,1951,3,1020,510,0,1949,1951,3,1430,715,
		0,1950,1947,1,0,0,0,1950,1949,1,0,0,0,1951,1958,1,0,0,0,1952,1953,5,184,
		0,0,1953,1958,5,166,0,0,1954,1955,4,19,5,0,1955,1956,5,519,0,0,1956,1958,
		3,1158,579,0,1957,1945,1,0,0,0,1957,1952,1,0,0,0,1957,1954,1,0,0,0,1958,
		2009,1,0,0,0,1959,1960,5,58,0,0,1960,1961,5,268,0,0,1961,1962,3,1334,667,
		0,1962,1963,3,1158,579,0,1963,2009,1,0,0,0,1964,1965,4,19,6,0,1965,1966,
		5,58,0,0,1966,1967,5,105,0,0,1967,1968,3,1408,704,0,1968,1969,3,1120,560,
		0,1969,2009,1,0,0,0,1970,1971,4,19,7,0,1971,1972,5,58,0,0,1972,1973,5,
		129,0,0,1973,1974,3,1408,704,0,1974,1975,3,1120,560,0,1975,2009,1,0,0,
		0,1976,1977,5,470,0,0,1977,1978,5,115,0,0,1978,1979,3,1324,662,0,1979,
		1980,5,599,0,0,1980,1981,3,1408,704,0,1981,2009,1,0,0,0,1982,1984,5,470,
		0,0,1983,1985,7,1,0,0,1984,1983,1,0,0,0,1984,1985,1,0,0,0,1985,1986,1,
		0,0,0,1986,2009,3,1378,689,0,1987,1988,5,470,0,0,1988,1989,3,442,221,0,
		1989,1990,3,1334,667,0,1990,1991,5,599,0,0,1991,1992,3,1332,666,0,1992,
		2009,1,0,0,0,1993,1994,5,136,0,0,1994,1995,5,599,0,0,1995,1999,3,1008,
		504,0,1996,1997,4,19,8,0,1997,2000,5,166,0,0,1998,2000,3,1190,595,0,1999,
		1996,1,0,0,0,1999,1998,1,0,0,0,2000,2002,1,0,0,0,2001,2003,3,1250,625,
		0,2002,2001,1,0,0,0,2002,2003,1,0,0,0,2003,2009,1,0,0,0,2004,2009,5,230,
		0,0,2005,2006,5,411,0,0,2006,2007,5,89,0,0,2007,2009,3,44,22,0,2008,1873,
		1,0,0,0,2008,1891,1,0,0,0,2008,1893,1,0,0,0,2008,1903,1,0,0,0,2008,1912,
		1,0,0,0,2008,1936,1,0,0,0,2008,1938,1,0,0,0,2008,1940,1,0,0,0,2008,1959,
		1,0,0,0,2008,1964,1,0,0,0,2008,1970,1,0,0,0,2008,1976,1,0,0,0,2008,1982,
		1,0,0,0,2008,1987,1,0,0,0,2008,1993,1,0,0,0,2008,2004,1,0,0,0,2008,2005,
		1,0,0,0,2009,39,1,0,0,0,2010,2011,5,53,0,0,2011,2014,3,1408,704,0,2012,
		2014,5,225,0,0,2013,2010,1,0,0,0,2013,2012,1,0,0,0,2014,41,1,0,0,0,2015,
		2016,7,2,0,0,2016,43,1,0,0,0,2017,2019,3,1408,704,0,2018,2020,3,364,182,
		0,2019,2018,1,0,0,0,2019,2020,1,0,0,0,2020,2028,1,0,0,0,2021,2022,5,29,
		0,0,2022,2024,3,1408,704,0,2023,2025,3,364,182,0,2024,2023,1,0,0,0,2024,
		2025,1,0,0,0,2025,2027,1,0,0,0,2026,2021,1,0,0,0,2027,2030,1,0,0,0,2028,
		2026,1,0,0,0,2028,2029,1,0,0,0,2029,45,1,0,0,0,2030,2028,1,0,0,0,2031,
		2033,5,56,0,0,2032,2034,5,6,0,0,2033,2032,1,0,0,0,2033,2034,1,0,0,0,2034,
		2037,1,0,0,0,2035,2038,5,166,0,0,2036,2038,3,1408,704,0,2037,2035,1,0,
		0,0,2037,2036,1,0,0,0,2038,47,1,0,0,0,2039,2041,5,314,0,0,2040,2042,5,
		6,0,0,2041,2040,1,0,0,0,2041,2042,1,0,0,0,2042,2045,1,0,0,0,2043,2046,
		5,166,0,0,2044,2046,3,1408,704,0,2045,2043,1,0,0,0,2045,2044,1,0,0,0,2046,
		49,1,0,0,0,2047,2049,3,46,23,0,2048,2050,3,48,24,0,2049,2048,1,0,0,0,2049,
		2050,1,0,0,0,2050,2056,1,0,0,0,2051,2053,3,48,24,0,2052,2054,3,46,23,0,
		2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,2056,1,0,0,0,2055,2047,1,0,0,
		0,2055,2051,1,0,0,0,2056,51,1,0,0,0,2057,2058,7,3,0,0,2058,2059,5,634,
		0,0,2059,53,1,0,0,0,2060,2061,5,469,0,0,2061,2062,5,421,0,0,2062,55,1,
		0,0,0,2063,2066,5,57,0,0,2064,2066,3,1410,705,0,2065,2063,1,0,0,0,2065,
		2064,1,0,0,0,2066,57,1,0,0,0,2067,2068,5,582,0,0,2068,2080,3,1360,680,
		0,2069,2070,7,4,0,0,2070,2071,5,152,0,0,2071,2073,3,1446,723,0,2072,2074,
		3,66,33,0,2073,2072,1,0,0,0,2073,2074,1,0,0,0,2074,2081,1,0,0,0,2075,2076,
		5,470,0,0,2076,2077,5,599,0,0,2077,2081,3,1408,704,0,2078,2079,4,29,9,
		0,2079,2081,3,66,33,0,2080,2069,1,0,0,0,2080,2075,1,0,0,0,2080,2078,1,
		0,0,0,2081,59,1,0,0,0,2082,2083,5,614,0,0,2083,2084,5,582,0,0,2084,2085,
		3,1360,680,0,2085,2086,5,519,0,0,2086,2088,7,5,0,0,2087,2089,3,62,31,0,
		2088,2087,1,0,0,0,2088,2089,1,0,0,0,2089,61,1,0,0,0,2090,2097,3,64,32,
		0,2091,2093,5,29,0,0,2092,2091,1,0,0,0,2092,2093,1,0,0,0,2093,2094,1,0,
		0,0,2094,2096,3,64,32,0,2095,2092,1,0,0,0,2096,2099,1,0,0,0,2097,2095,
		1,0,0,0,2097,2098,1,0,0,0,2098,63,1,0,0,0,2099,2097,1,0,0,0,2100,2101,
		3,162,81,0,2101,65,1,0,0,0,2102,2109,3,68,34,0,2103,2105,5,29,0,0,2104,
		2103,1,0,0,0,2104,2105,1,0,0,0,2105,2106,1,0,0,0,2106,2108,3,68,34,0,2107,
		2104,1,0,0,0,2108,2111,1,0,0,0,2109,2107,1,0,0,0,2109,2110,1,0,0,0,2110,
		67,1,0,0,0,2111,2109,1,0,0,0,2112,2114,5,270,0,0,2113,2115,5,6,0,0,2114,
		2113,1,0,0,0,2114,2115,1,0,0,0,2115,2116,1,0,0,0,2116,2125,3,1474,737,
		0,2117,2125,3,154,77,0,2118,2125,3,156,78,0,2119,2125,3,162,81,0,2120,
		2125,3,164,82,0,2121,2125,3,170,85,0,2122,2123,4,34,10,0,2123,2125,3,172,
		86,0,2124,2112,1,0,0,0,2124,2117,1,0,0,0,2124,2118,1,0,0,0,2124,2119,1,
		0,0,0,2124,2120,1,0,0,0,2124,2121,1,0,0,0,2124,2122,1,0,0,0,2125,69,1,
		0,0,0,2126,2128,5,270,0,0,2127,2129,5,6,0,0,2128,2127,1,0,0,0,2128,2129,
		1,0,0,0,2129,2130,1,0,0,0,2130,2134,3,1474,737,0,2131,2134,3,154,77,0,
		2132,2134,3,156,78,0,2133,2126,1,0,0,0,2133,2131,1,0,0,0,2133,2132,1,0,
		0,0,2134,71,1,0,0,0,2135,2137,3,178,89,0,2136,2135,1,0,0,0,2136,2137,1,
		0,0,0,2137,2139,1,0,0,0,2138,2140,3,1234,617,0,2139,2138,1,0,0,0,2139,
		2140,1,0,0,0,2140,2142,1,0,0,0,2141,2143,3,180,90,0,2142,2141,1,0,0,0,
		2142,2143,1,0,0,0,2143,2144,1,0,0,0,2144,2145,5,644,0,0,2145,2146,3,1356,
		678,0,2146,2147,3,74,37,0,2147,73,1,0,0,0,2148,2150,3,1326,663,0,2149,
		2148,1,0,0,0,2149,2150,1,0,0,0,2150,2151,1,0,0,0,2151,2152,5,63,0,0,2152,
		2153,3,76,38,0,2153,75,1,0,0,0,2154,2156,3,100,50,0,2155,2157,3,78,39,
		0,2156,2155,1,0,0,0,2156,2157,1,0,0,0,2157,77,1,0,0,0,2158,2160,5,653,
		0,0,2159,2161,7,6,0,0,2160,2159,1,0,0,0,2160,2161,1,0,0,0,2161,2162,1,
		0,0,0,2162,2163,5,105,0,0,2163,2164,5,409,0,0,2164,79,1,0,0,0,2165,2166,
		5,276,0,0,2166,2167,5,498,0,0,2167,2168,3,1468,734,0,2168,2169,5,341,0,
		0,2169,2170,5,295,0,0,2170,2198,1,0,0,0,2171,2195,4,40,11,0,2172,2173,
		5,468,0,0,2173,2187,5,755,0,0,2174,2175,5,392,0,0,2175,2176,5,496,0,0,
		2176,2177,5,401,0,0,2177,2188,5,200,0,0,2178,2179,5,232,0,0,2179,2180,
		5,101,0,0,2180,2185,3,1408,704,0,2181,2182,5,392,0,0,2182,2183,5,496,0,
		0,2183,2184,5,401,0,0,2184,2186,5,200,0,0,2185,2181,1,0,0,0,2185,2186,
		1,0,0,0,2186,2188,1,0,0,0,2187,2174,1,0,0,0,2187,2178,1,0,0,0,2188,2196,
		1,0,0,0,2189,2190,7,7,0,0,2190,2191,3,1408,704,0,2191,2192,3,1408,704,
		0,2192,2196,1,0,0,0,2193,2194,5,468,0,0,2194,2196,5,793,0,0,2195,2172,
		1,0,0,0,2195,2189,1,0,0,0,2195,2193,1,0,0,0,2196,2198,1,0,0,0,2197,2165,
		1,0,0,0,2197,2171,1,0,0,0,2198,81,1,0,0,0,2199,2217,5,139,0,0,2200,2218,
		3,84,42,0,2201,2218,3,88,44,0,2202,2218,3,110,55,0,2203,2218,3,104,52,
		0,2204,2218,3,112,56,0,2205,2218,3,126,63,0,2206,2218,3,174,87,0,2207,
		2218,3,182,91,0,2208,2218,3,120,60,0,2209,2218,3,132,66,0,2210,2218,3,
		138,69,0,2211,2218,3,186,93,0,2212,2218,3,188,94,0,2213,2214,4,41,12,0,
		2214,2218,3,190,95,0,2215,2216,4,41,13,0,2216,2218,3,140,70,0,2217,2200,
		1,0,0,0,2217,2201,1,0,0,0,2217,2202,1,0,0,0,2217,2203,1,0,0,0,2217,2204,
		1,0,0,0,2217,2205,1,0,0,0,2217,2206,1,0,0,0,2217,2207,1,0,0,0,2217,2208,
		1,0,0,0,2217,2209,1,0,0,0,2217,2210,1,0,0,0,2217,2211,1,0,0,0,2217,2212,
		1,0,0,0,2217,2213,1,0,0,0,2217,2215,1,0,0,0,2218,83,1,0,0,0,2219,2221,
		5,150,0,0,2220,2222,3,1242,621,0,2221,2220,1,0,0,0,2221,2222,1,0,0,0,2222,
		2223,1,0,0,0,2223,2227,3,1338,669,0,2224,2226,3,86,43,0,2225,2224,1,0,
		0,0,2226,2229,1,0,0,0,2227,2225,1,0,0,0,2227,2228,1,0,0,0,2228,85,1,0,
		0,0,2229,2227,1,0,0,0,2230,2235,3,1210,605,0,2231,2235,3,1206,603,0,2232,
		2233,4,43,14,0,2233,2235,3,1208,604,0,2234,2230,1,0,0,0,2234,2231,1,0,
		0,0,2234,2232,1,0,0,0,2235,87,1,0,0,0,2236,2238,5,586,0,0,2237,2236,1,
		0,0,0,2237,2238,1,0,0,0,2238,2239,1,0,0,0,2239,2241,5,583,0,0,2240,2242,
		3,1242,621,0,2241,2240,1,0,0,0,2241,2242,1,0,0,0,2242,2243,1,0,0,0,2243,
		2260,3,1378,689,0,2244,2245,5,32,0,0,2245,2246,3,90,45,0,2246,2247,5,33,
		0,0,2247,2249,1,0,0,0,2248,2244,1,0,0,0,2248,2249,1,0,0,0,2249,2251,1,
		0,0,0,2250,2252,3,1196,598,0,2251,2250,1,0,0,0,2251,2252,1,0,0,0,2252,
		2261,1,0,0,0,2253,2254,5,305,0,0,2254,2261,3,1384,692,0,2255,2256,5,32,
		0,0,2256,2257,5,305,0,0,2257,2258,3,1384,692,0,2258,2259,5,33,0,0,2259,
		2261,1,0,0,0,2260,2248,1,0,0,0,2260,2253,1,0,0,0,2260,2255,1,0,0,0,2261,
		89,1,0,0,0,2262,2267,3,92,46,0,2263,2264,5,29,0,0,2264,2266,3,92,46,0,
		2265,2263,1,0,0,0,2266,2269,1,0,0,0,2267,2265,1,0,0,0,2267,2268,1,0,0,
		0,2268,91,1,0,0,0,2269,2267,1,0,0,0,2270,2273,3,1114,557,0,2271,2273,3,
		1122,561,0,2272,2270,1,0,0,0,2272,2271,1,0,0,0,2273,93,1,0,0,0,2274,2276,
		7,8,0,0,2275,2274,1,0,0,0,2275,2276,1,0,0,0,2276,2277,1,0,0,0,2277,2278,
		3,96,48,0,2278,95,1,0,0,0,2279,2281,5,63,0,0,2280,2279,1,0,0,0,2280,2281,
		1,0,0,0,2281,2282,1,0,0,0,2282,2283,3,100,50,0,2283,97,1,0,0,0,2284,2286,
		3,302,151,0,2285,2287,3,378,189,0,2286,2285,1,0,0,0,2286,2287,1,0,0,0,
		2287,2290,1,0,0,0,2288,2290,3,306,153,0,2289,2284,1,0,0,0,2289,2288,1,
		0,0,0,2290,99,1,0,0,0,2291,2293,3,302,151,0,2292,2294,3,378,189,0,2293,
		2292,1,0,0,0,2293,2294,1,0,0,0,2294,101,1,0,0,0,2295,2299,5,139,0,0,2296,
		2300,3,104,52,0,2297,2300,3,110,55,0,2298,2300,3,112,56,0,2299,2296,1,
		0,0,0,2299,2297,1,0,0,0,2299,2298,1,0,0,0,2300,2302,1,0,0,0,2301,2303,
		5,30,0,0,2302,2301,1,0,0,0,2302,2303,1,0,0,0,2303,2304,1,0,0,0,2304,2305,
		5,0,0,1,2305,103,1,0,0,0,2306,2308,3,1234,617,0,2307,2306,1,0,0,0,2307,
		2308,1,0,0,0,2308,2309,1,0,0,0,2309,2311,5,440,0,0,2310,2312,3,1242,621,
		0,2311,2310,1,0,0,0,2311,2312,1,0,0,0,2312,2313,1,0,0,0,2313,2314,3,1342,
		671,0,2314,2323,5,32,0,0,2315,2320,3,1246,623,0,2316,2317,5,29,0,0,2317,
		2319,3,1246,623,0,2318,2316,1,0,0,0,2319,2322,1,0,0,0,2320,2318,1,0,0,
		0,2320,2321,1,0,0,0,2321,2324,1,0,0,0,2322,2320,1,0,0,0,2323,2315,1,0,
		0,0,2323,2324,1,0,0,0,2324,2325,1,0,0,0,2325,2329,5,33,0,0,2326,2328,3,
		114,57,0,2327,2326,1,0,0,0,2328,2331,1,0,0,0,2329,2327,1,0,0,0,2329,2330,
		1,0,0,0,2330,2332,1,0,0,0,2331,2329,1,0,0,0,2332,2333,3,108,54,0,2333,
		105,1,0,0,0,2334,2337,3,1440,720,0,2335,2337,5,825,0,0,2336,2334,1,0,0,
		0,2336,2335,1,0,0,0,2337,107,1,0,0,0,2338,2343,3,1034,517,0,2339,2340,
		4,54,15,0,2340,2341,5,63,0,0,2341,2343,3,106,53,0,2342,2338,1,0,0,0,2342,
		2339,1,0,0,0,2343,109,1,0,0,0,2344,2346,3,1234,617,0,2345,2344,1,0,0,0,
		2345,2346,1,0,0,0,2346,2347,1,0,0,0,2347,2349,5,238,0,0,2348,2350,3,1242,
		621,0,2349,2348,1,0,0,0,2349,2350,1,0,0,0,2350,2351,1,0,0,0,2351,2352,
		3,1346,673,0,2352,2361,5,32,0,0,2353,2358,3,1248,624,0,2354,2355,5,29,
		0,0,2355,2357,3,1248,624,0,2356,2354,1,0,0,0,2357,2360,1,0,0,0,2358,2356,
		1,0,0,0,2358,2359,1,0,0,0,2359,2362,1,0,0,0,2360,2358,1,0,0,0,2361,2353,
		1,0,0,0,2361,2362,1,0,0,0,2362,2363,1,0,0,0,2363,2364,5,33,0,0,2364,2365,
		5,491,0,0,2365,2369,3,1252,626,0,2366,2368,3,114,57,0,2367,2366,1,0,0,
		0,2368,2371,1,0,0,0,2369,2367,1,0,0,0,2369,2370,1,0,0,0,2370,2372,1,0,
		0,0,2371,2369,1,0,0,0,2372,2373,3,108,54,0,2373,111,1,0,0,0,2374,2376,
		5,55,0,0,2375,2374,1,0,0,0,2375,2376,1,0,0,0,2376,2377,1,0,0,0,2377,2379,
		5,238,0,0,2378,2380,3,1242,621,0,2379,2378,1,0,0,0,2379,2380,1,0,0,0,2380,
		2381,1,0,0,0,2381,2382,3,1370,685,0,2382,2383,5,491,0,0,2383,2384,7,9,
		0,0,2384,2385,5,531,0,0,2385,2386,3,1446,723,0,2386,113,1,0,0,0,2387,2393,
		3,118,59,0,2388,2390,5,390,0,0,2389,2388,1,0,0,0,2389,2390,1,0,0,0,2390,
		2391,1,0,0,0,2391,2393,5,174,0,0,2392,2387,1,0,0,0,2392,2389,1,0,0,0,2393,
		115,1,0,0,0,2394,2396,3,114,57,0,2395,2394,1,0,0,0,2396,2397,1,0,0,0,2397,
		2395,1,0,0,0,2397,2398,1,0,0,0,2398,117,1,0,0,0,2399,2400,5,118,0,0,2400,
		2421,3,1446,723,0,2401,2405,5,297,0,0,2402,2406,5,547,0,0,2403,2404,4,
		59,16,0,2404,2406,3,1408,704,0,2405,2402,1,0,0,0,2405,2403,1,0,0,0,2406,
		2421,1,0,0,0,2407,2408,5,392,0,0,2408,2421,5,547,0,0,2409,2410,5,133,0,
		0,2410,2421,5,547,0,0,2411,2412,5,451,0,0,2412,2413,5,547,0,0,2413,2421,
		5,153,0,0,2414,2415,5,370,0,0,2415,2416,5,547,0,0,2416,2421,5,153,0,0,
		2417,2418,5,547,0,0,2418,2419,5,510,0,0,2419,2421,7,10,0,0,2420,2399,1,
		0,0,0,2420,2401,1,0,0,0,2420,2407,1,0,0,0,2420,2409,1,0,0,0,2420,2411,
		1,0,0,0,2420,2414,1,0,0,0,2420,2417,1,0,0,0,2421,119,1,0,0,0,2422,2424,
		3,1314,657,0,2423,2422,1,0,0,0,2423,2424,1,0,0,0,2424,2460,1,0,0,0,2425,
		2427,5,618,0,0,2426,2425,1,0,0,0,2426,2427,1,0,0,0,2427,2428,1,0,0,0,2428,
		2429,5,268,0,0,2429,2431,3,1332,666,0,2430,2432,3,1160,580,0,2431,2430,
		1,0,0,0,2431,2432,1,0,0,0,2432,2433,1,0,0,0,2433,2437,3,124,62,0,2434,
		2436,3,1154,577,0,2435,2434,1,0,0,0,2436,2439,1,0,0,0,2437,2435,1,0,0,
		0,2437,2438,1,0,0,0,2438,2461,1,0,0,0,2439,2437,1,0,0,0,2440,2441,5,237,
		0,0,2441,2442,5,268,0,0,2442,2443,3,1332,666,0,2443,2447,3,124,62,0,2444,
		2446,3,1162,581,0,2445,2444,1,0,0,0,2446,2449,1,0,0,0,2447,2445,1,0,0,
		0,2447,2448,1,0,0,0,2448,2461,1,0,0,0,2449,2447,1,0,0,0,2450,2451,5,534,
		0,0,2451,2452,5,268,0,0,2452,2453,3,1332,666,0,2453,2457,3,124,62,0,2454,
		2456,3,1164,582,0,2455,2454,1,0,0,0,2456,2459,1,0,0,0,2457,2455,1,0,0,
		0,2457,2458,1,0,0,0,2458,2461,1,0,0,0,2459,2457,1,0,0,0,2460,2426,1,0,
		0,0,2460,2440,1,0,0,0,2460,2450,1,0,0,0,2461,2463,1,0,0,0,2462,2464,3,
		50,25,0,2463,2462,1,0,0,0,2463,2464,1,0,0,0,2464,121,1,0,0,0,2465,2476,
		3,1332,666,0,2466,2468,3,1332,666,0,2467,2466,1,0,0,0,2467,2468,1,0,0,
		0,2468,2469,1,0,0,0,2469,2470,5,630,0,0,2470,2476,3,1152,576,0,2471,2472,
		3,1332,666,0,2472,2473,5,608,0,0,2473,2474,3,1152,576,0,2474,2476,1,0,
		0,0,2475,2465,1,0,0,0,2475,2467,1,0,0,0,2475,2471,1,0,0,0,2476,123,1,0,
		0,0,2477,2478,5,401,0,0,2478,2479,3,1384,692,0,2479,2480,3,1148,574,0,
		2480,125,1,0,0,0,2481,2482,5,315,0,0,2482,2483,5,249,0,0,2483,2484,3,1362,
		681,0,2484,2485,5,51,0,0,2485,2486,5,612,0,0,2486,2488,3,1446,723,0,2487,
		2489,3,128,64,0,2488,2487,1,0,0,0,2488,2489,1,0,0,0,2489,127,1,0,0,0,2490,
		2497,3,130,65,0,2491,2493,5,29,0,0,2492,2491,1,0,0,0,2492,2493,1,0,0,0,
		2493,2494,1,0,0,0,2494,2496,3,130,65,0,2495,2492,1,0,0,0,2496,2499,1,0,
		0,0,2497,2495,1,0,0,0,2497,2498,1,0,0,0,2498,129,1,0,0,0,2499,2497,1,0,
		0,0,2500,2507,3,150,75,0,2501,2507,3,152,76,0,2502,2507,3,160,80,0,2503,
		2507,3,162,81,0,2504,2507,3,164,82,0,2505,2507,3,166,83,0,2506,2500,1,
		0,0,0,2506,2501,1,0,0,0,2506,2502,1,0,0,0,2506,2503,1,0,0,0,2506,2504,
		1,0,0,0,2506,2505,1,0,0,0,2507,131,1,0,0,0,2508,2509,5,517,0,0,2509,2510,
		3,1372,686,0,2510,2511,5,231,0,0,2511,2512,5,153,0,0,2512,2513,5,656,0,
		0,2513,2514,3,1468,734,0,2514,2515,3,134,67,0,2515,133,1,0,0,0,2516,2517,
		5,408,0,0,2517,2518,5,32,0,0,2518,2523,3,136,68,0,2519,2520,5,29,0,0,2520,
		2522,3,136,68,0,2521,2519,1,0,0,0,2522,2525,1,0,0,0,2523,2521,1,0,0,0,
		2523,2524,1,0,0,0,2524,2526,1,0,0,0,2525,2523,1,0,0,0,2526,2527,5,33,0,
		0,2527,135,1,0,0,0,2528,2529,5,256,0,0,2529,2543,3,1446,723,0,2530,2531,
		5,150,0,0,2531,2543,3,1446,723,0,2532,2533,5,627,0,0,2533,2543,3,1446,
		723,0,2534,2535,5,424,0,0,2535,2543,3,1446,723,0,2536,2537,5,530,0,0,2537,
		2543,3,1446,723,0,2538,2539,5,416,0,0,2539,2543,3,1446,723,0,2540,2541,
		5,431,0,0,2541,2543,3,1420,710,0,2542,2528,1,0,0,0,2542,2530,1,0,0,0,2542,
		2532,1,0,0,0,2542,2534,1,0,0,0,2542,2536,1,0,0,0,2542,2538,1,0,0,0,2542,
		2540,1,0,0,0,2543,137,1,0,0,0,2544,2545,5,582,0,0,2545,2546,3,1358,679,
		0,2546,2551,3,142,71,0,2547,2548,5,629,0,0,2548,2549,5,315,0,0,2549,2550,
		5,249,0,0,2550,2552,3,1364,682,0,2551,2547,1,0,0,0,2551,2552,1,0,0,0,2552,
		2554,1,0,0,0,2553,2555,3,146,73,0,2554,2553,1,0,0,0,2554,2555,1,0,0,0,
		2555,139,1,0,0,0,2556,2557,5,614,0,0,2557,2558,5,582,0,0,2558,2559,3,1358,
		679,0,2559,2560,5,51,0,0,2560,2562,3,144,72,0,2561,2563,3,62,31,0,2562,
		2561,1,0,0,0,2562,2563,1,0,0,0,2563,141,1,0,0,0,2564,2565,5,51,0,0,2565,
		2572,3,144,72,0,2566,2569,4,71,17,0,2567,2568,5,51,0,0,2568,2570,3,144,
		72,0,2569,2567,1,0,0,0,2569,2570,1,0,0,0,2570,2572,1,0,0,0,2571,2564,1,
		0,0,0,2571,2566,1,0,0,0,2572,143,1,0,0,0,2573,2574,5,152,0,0,2574,2575,
		3,1446,723,0,2575,145,1,0,0,0,2576,2583,3,148,74,0,2577,2579,5,29,0,0,
		2578,2577,1,0,0,0,2578,2579,1,0,0,0,2579,2580,1,0,0,0,2580,2582,3,148,
		74,0,2581,2578,1,0,0,0,2582,2585,1,0,0,0,2583,2581,1,0,0,0,2583,2584,1,
		0,0,0,2584,147,1,0,0,0,2585,2583,1,0,0,0,2586,2598,3,150,75,0,2587,2598,
		3,154,77,0,2588,2598,3,156,78,0,2589,2598,3,158,79,0,2590,2598,3,160,80,
		0,2591,2598,3,162,81,0,2592,2598,3,164,82,0,2593,2598,3,166,83,0,2594,
		2598,3,168,84,0,2595,2596,4,74,18,0,2596,2598,3,170,85,0,2597,2586,1,0,
		0,0,2597,2587,1,0,0,0,2597,2588,1,0,0,0,2597,2589,1,0,0,0,2597,2590,1,
		0,0,0,2597,2591,1,0,0,0,2597,2592,1,0,0,0,2597,2593,1,0,0,0,2597,2594,
		1,0,0,0,2597,2595,1,0,0,0,2598,149,1,0,0,0,2599,2601,5,270,0,0,2600,2602,
		5,6,0,0,2601,2600,1,0,0,0,2601,2602,1,0,0,0,2602,2603,1,0,0,0,2603,2604,
		3,1474,737,0,2604,151,1,0,0,0,2605,2607,7,11,0,0,2606,2608,5,6,0,0,2607,
		2606,1,0,0,0,2607,2608,1,0,0,0,2608,2609,1,0,0,0,2609,2610,3,1474,737,
		0,2610,153,1,0,0,0,2611,2613,5,68,0,0,2612,2614,5,6,0,0,2613,2612,1,0,
		0,0,2613,2614,1,0,0,0,2614,2615,1,0,0,0,2615,2616,3,1474,737,0,2616,155,
		1,0,0,0,2617,2619,5,349,0,0,2618,2620,5,6,0,0,2619,2618,1,0,0,0,2619,2620,
		1,0,0,0,2620,2621,1,0,0,0,2621,2622,3,1474,737,0,2622,157,1,0,0,0,2623,
		2625,5,216,0,0,2624,2626,5,6,0,0,2625,2624,1,0,0,0,2625,2626,1,0,0,0,2626,
		2627,1,0,0,0,2627,2628,3,1474,737,0,2628,159,1,0,0,0,2629,2631,5,388,0,
		0,2630,2632,5,6,0,0,2631,2630,1,0,0,0,2631,2632,1,0,0,0,2632,2633,1,0,
		0,0,2633,2634,3,1422,711,0,2634,161,1,0,0,0,2635,2637,5,563,0,0,2636,2635,
		1,0,0,0,2636,2637,1,0,0,0,2637,2638,1,0,0,0,2638,2640,5,198,0,0,2639,2641,
		5,6,0,0,2640,2639,1,0,0,0,2640,2641,1,0,0,0,2641,2642,1,0,0,0,2642,2643,
		3,1376,688,0,2643,163,1,0,0,0,2644,2645,7,12,0,0,2645,165,1,0,0,0,2646,
		2648,5,118,0,0,2647,2649,5,6,0,0,2648,2647,1,0,0,0,2648,2649,1,0,0,0,2649,
		2650,1,0,0,0,2650,2651,3,1446,723,0,2651,167,1,0,0,0,2652,2654,5,223,0,
		0,2653,2655,5,6,0,0,2654,2653,1,0,0,0,2654,2655,1,0,0,0,2655,2656,1,0,
		0,0,2656,2657,3,1474,737,0,2657,169,1,0,0,0,2658,2660,5,194,0,0,2659,2661,
		5,6,0,0,2660,2659,1,0,0,0,2660,2661,1,0,0,0,2661,2662,1,0,0,0,2662,2663,
		3,1440,720,0,2663,171,1,0,0,0,2664,2666,5,198,0,0,2665,2667,5,6,0,0,2666,
		2665,1,0,0,0,2666,2667,1,0,0,0,2667,2668,1,0,0,0,2668,2669,3,1486,743,
		0,2669,173,1,0,0,0,2670,2672,3,176,88,0,2671,2670,1,0,0,0,2671,2672,1,
		0,0,0,2672,2674,1,0,0,0,2673,2675,3,1234,617,0,2674,2673,1,0,0,0,2674,
		2675,1,0,0,0,2675,2677,1,0,0,0,2676,2678,3,180,90,0,2677,2676,1,0,0,0,
		2677,2678,1,0,0,0,2678,2679,1,0,0,0,2679,2680,5,644,0,0,2680,2681,3,1354,
		677,0,2681,2682,3,74,37,0,2682,175,1,0,0,0,2683,2684,5,412,0,0,2684,2686,
		5,475,0,0,2685,2687,3,178,89,0,2686,2685,1,0,0,0,2686,2687,1,0,0,0,2687,
		2690,1,0,0,0,2688,2690,3,178,89,0,2689,2683,1,0,0,0,2689,2688,1,0,0,0,
		2690,177,1,0,0,0,2691,2692,5,56,0,0,2692,2693,5,6,0,0,2693,2694,7,13,0,
		0,2694,179,1,0,0,0,2695,2696,5,547,0,0,2696,2697,5,510,0,0,2697,2698,7,
		10,0,0,2698,181,1,0,0,0,2699,2701,3,1234,617,0,2700,2699,1,0,0,0,2700,
		2701,1,0,0,0,2701,2702,1,0,0,0,2702,2704,5,603,0,0,2703,2705,3,1242,621,
		0,2704,2703,1,0,0,0,2704,2705,1,0,0,0,2705,2706,1,0,0,0,2706,2707,3,1350,
		675,0,2707,2708,7,14,0,0,2708,2709,7,15,0,0,2709,2710,5,401,0,0,2710,2711,
		3,1384,692,0,2711,2712,5,232,0,0,2712,2713,5,189,0,0,2713,2715,5,503,0,
		0,2714,2716,3,184,92,0,2715,2714,1,0,0,0,2715,2716,1,0,0,0,2716,2717,1,
		0,0,0,2717,2718,3,1034,517,0,2718,183,1,0,0,0,2719,2720,7,16,0,0,2720,
		2721,3,1468,734,0,2721,185,1,0,0,0,2722,2724,3,1234,617,0,2723,2722,1,
		0,0,0,2723,2724,1,0,0,0,2724,2725,1,0,0,0,2725,2727,5,205,0,0,2726,2728,
		3,1242,621,0,2727,2726,1,0,0,0,2727,2728,1,0,0,0,2728,2729,1,0,0,0,2729,
		2730,3,1366,683,0,2730,2731,5,401,0,0,2731,2732,5,506,0,0,2732,2739,3,
		1112,556,0,2733,2734,5,401,0,0,2734,2736,5,122,0,0,2735,2737,5,390,0,0,
		2736,2735,1,0,0,0,2736,2737,1,0,0,0,2737,2738,1,0,0,0,2738,2740,5,436,
		0,0,2739,2733,1,0,0,0,2739,2740,1,0,0,0,2740,2747,1,0,0,0,2741,2748,5,
		192,0,0,2742,2745,5,177,0,0,2743,2744,5,401,0,0,2744,2746,3,606,303,0,
		2745,2743,1,0,0,0,2745,2746,1,0,0,0,2746,2748,1,0,0,0,2747,2741,1,0,0,
		0,2747,2742,1,0,0,0,2747,2748,1,0,0,0,2748,2751,1,0,0,0,2749,2750,5,118,
		0,0,2750,2752,3,1446,723,0,2751,2749,1,0,0,0,2751,2752,1,0,0,0,2752,2753,
		1,0,0,0,2753,2754,5,183,0,0,2754,2755,3,1034,517,0,2755,187,1,0,0,0,2756,
		2758,5,667,0,0,2757,2759,3,1242,621,0,2758,2757,1,0,0,0,2758,2759,1,0,
		0,0,2759,2760,1,0,0,0,2760,2761,3,684,342,0,2761,189,1,0,0,0,2762,2763,
		5,412,0,0,2763,2764,5,475,0,0,2764,2765,5,534,0,0,2765,2766,5,726,0,0,
		2766,2767,5,718,0,0,2767,2771,3,1426,713,0,2768,2770,3,192,96,0,2769,2768,
		1,0,0,0,2770,2773,1,0,0,0,2771,2769,1,0,0,0,2771,2772,1,0,0,0,2772,2788,
		1,0,0,0,2773,2771,1,0,0,0,2774,2775,5,534,0,0,2775,2776,5,726,0,0,2776,
		2778,5,718,0,0,2777,2779,3,1242,621,0,2778,2777,1,0,0,0,2778,2779,1,0,
		0,0,2779,2780,1,0,0,0,2780,2784,3,1426,713,0,2781,2783,3,192,96,0,2782,
		2781,1,0,0,0,2783,2786,1,0,0,0,2784,2782,1,0,0,0,2784,2785,1,0,0,0,2785,
		2788,1,0,0,0,2786,2784,1,0,0,0,2787,2762,1,0,0,0,2787,2774,1,0,0,0,2788,
		191,1,0,0,0,2789,2790,5,380,0,0,2790,2791,5,589,0,0,2791,2805,3,1448,724,
		0,2792,2793,5,723,0,0,2793,2794,5,589,0,0,2794,2805,3,1448,724,0,2795,
		2796,5,725,0,0,2796,2797,3,1448,724,0,2797,2798,5,262,0,0,2798,2799,5,
		89,0,0,2799,2800,3,1426,713,0,2800,2805,1,0,0,0,2801,2802,5,724,0,0,2802,
		2803,5,589,0,0,2803,2805,3,1448,724,0,2804,2789,1,0,0,0,2804,2792,1,0,
		0,0,2804,2795,1,0,0,0,2804,2801,1,0,0,0,2805,193,1,0,0,0,2806,2823,5,184,
		0,0,2807,2824,3,196,98,0,2808,2824,3,198,99,0,2809,2824,3,200,100,0,2810,
		2824,3,202,101,0,2811,2824,3,204,102,0,2812,2824,3,206,103,0,2813,2824,
		3,210,105,0,2814,2824,3,212,106,0,2815,2824,3,214,107,0,2816,2824,3,216,
		108,0,2817,2824,3,218,109,0,2818,2824,3,220,110,0,2819,2820,4,97,19,0,
		2820,2824,3,222,111,0,2821,2822,4,97,20,0,2822,2824,3,224,112,0,2823,2807,
		1,0,0,0,2823,2808,1,0,0,0,2823,2809,1,0,0,0,2823,2810,1,0,0,0,2823,2811,
		1,0,0,0,2823,2812,1,0,0,0,2823,2813,1,0,0,0,2823,2814,1,0,0,0,2823,2815,
		1,0,0,0,2823,2816,1,0,0,0,2823,2817,1,0,0,0,2823,2818,1,0,0,0,2823,2819,
		1,0,0,0,2823,2821,1,0,0,0,2824,195,1,0,0,0,2825,2827,5,150,0,0,2826,2828,
		3,1236,618,0,2827,2826,1,0,0,0,2827,2828,1,0,0,0,2828,2829,1,0,0,0,2829,
		2830,3,1340,670,0,2830,197,1,0,0,0,2831,2833,5,205,0,0,2832,2834,3,1236,
		618,0,2833,2832,1,0,0,0,2833,2834,1,0,0,0,2834,2835,1,0,0,0,2835,2836,
		3,1368,684,0,2836,199,1,0,0,0,2837,2839,5,238,0,0,2838,2840,3,1236,618,
		0,2839,2838,1,0,0,0,2839,2840,1,0,0,0,2840,2841,1,0,0,0,2841,2842,3,1348,
		674,0,2842,201,1,0,0,0,2843,2845,5,440,0,0,2844,2846,3,1236,618,0,2845,
		2844,1,0,0,0,2845,2846,1,0,0,0,2846,2847,1,0,0,0,2847,2848,3,1344,672,
		0,2848,203,1,0,0,0,2849,2851,3,1314,657,0,2850,2849,1,0,0,0,2850,2851,
		1,0,0,0,2851,2852,1,0,0,0,2852,2853,5,268,0,0,2853,2854,3,1334,667,0,2854,
		2855,5,401,0,0,2855,2857,3,1384,692,0,2856,2858,3,50,25,0,2857,2856,1,
		0,0,0,2857,2858,1,0,0,0,2858,205,1,0,0,0,2859,2860,5,315,0,0,2860,2861,
		5,249,0,0,2861,2872,3,1364,682,0,2862,2869,3,208,104,0,2863,2865,5,29,
		0,0,2864,2863,1,0,0,0,2864,2865,1,0,0,0,2865,2866,1,0,0,0,2866,2868,3,
		208,104,0,2867,2864,1,0,0,0,2868,2871,1,0,0,0,2869,2867,1,0,0,0,2869,2870,
		1,0,0,0,2870,2873,1,0,0,0,2871,2869,1,0,0,0,2872,2862,1,0,0,0,2872,2873,
		1,0,0,0,2873,207,1,0,0,0,2874,2877,3,164,82,0,2875,2877,3,162,81,0,2876,
		2874,1,0,0,0,2876,2875,1,0,0,0,2877,209,1,0,0,0,2878,2880,5,517,0,0,2879,
		2881,3,1236,618,0,2880,2879,1,0,0,0,2880,2881,1,0,0,0,2881,2882,1,0,0,
		0,2882,2883,3,1374,687,0,2883,211,1,0,0,0,2884,2886,5,586,0,0,2885,2884,
		1,0,0,0,2885,2886,1,0,0,0,2886,2887,1,0,0,0,2887,2889,7,17,0,0,2888,2890,
		3,1236,618,0,2889,2888,1,0,0,0,2889,2890,1,0,0,0,2890,2891,1,0,0,0,2891,
		2893,3,1386,693,0,2892,2894,7,2,0,0,2893,2892,1,0,0,0,2893,2894,1,0,0,
		0,2894,213,1,0,0,0,2895,2896,5,582,0,0,2896,2907,3,1360,680,0,2897,2904,
		3,208,104,0,2898,2900,5,29,0,0,2899,2898,1,0,0,0,2899,2900,1,0,0,0,2900,
		2901,1,0,0,0,2901,2903,3,208,104,0,2902,2899,1,0,0,0,2903,2906,1,0,0,0,
		2904,2902,1,0,0,0,2904,2905,1,0,0,0,2905,2908,1,0,0,0,2906,2904,1,0,0,
		0,2907,2897,1,0,0,0,2907,2908,1,0,0,0,2908,215,1,0,0,0,2909,2911,5,603,
		0,0,2910,2912,3,1236,618,0,2911,2910,1,0,0,0,2911,2912,1,0,0,0,2912,2913,
		1,0,0,0,2913,2914,3,1352,676,0,2914,217,1,0,0,0,2915,2917,5,644,0,0,2916,
		2918,3,1236,618,0,2917,2916,1,0,0,0,2917,2918,1,0,0,0,2918,2919,1,0,0,
		0,2919,2921,3,1256,628,0,2920,2922,7,2,0,0,2921,2920,1,0,0,0,2921,2922,
		1,0,0,0,2922,219,1,0,0,0,2923,2925,5,667,0,0,2924,2926,3,1236,618,0,2925,
		2924,1,0,0,0,2925,2926,1,0,0,0,2926,2927,1,0,0,0,2927,2928,3,684,342,0,
		2928,221,1,0,0,0,2929,2930,5,534,0,0,2930,2931,5,726,0,0,2931,2933,5,718,
		0,0,2932,2934,3,1236,618,0,2933,2932,1,0,0,0,2933,2934,1,0,0,0,2934,2935,
		1,0,0,0,2935,2936,3,1426,713,0,2936,223,1,0,0,0,2937,2938,5,614,0,0,2938,
		2939,5,582,0,0,2939,2941,3,1360,680,0,2940,2942,3,62,31,0,2941,2940,1,
		0,0,0,2941,2942,1,0,0,0,2942,225,1,0,0,0,2943,2944,5,470,0,0,2944,2945,
		7,17,0,0,2945,2950,3,228,114,0,2946,2947,5,29,0,0,2947,2949,3,228,114,
		0,2948,2946,1,0,0,0,2949,2952,1,0,0,0,2950,2948,1,0,0,0,2950,2951,1,0,
		0,0,2951,227,1,0,0,0,2952,2950,1,0,0,0,2953,2954,3,1384,692,0,2954,2955,
		5,599,0,0,2955,2956,3,1378,689,0,2956,229,1,0,0,0,2957,2959,5,606,0,0,
		2958,2960,5,583,0,0,2959,2958,1,0,0,0,2959,2960,1,0,0,0,2960,2961,1,0,
		0,0,2961,2962,3,1384,692,0,2962,231,1,0,0,0,2963,2964,5,266,0,0,2964,2965,
		5,583,0,0,2965,2966,5,235,0,0,2966,2967,3,1450,725,0,2967,233,1,0,0,0,
		2968,2969,5,92,0,0,2969,2975,3,1344,672,0,2970,2972,5,32,0,0,2971,2973,
		3,1006,503,0,2972,2971,1,0,0,0,2972,2973,1,0,0,0,2973,2974,1,0,0,0,2974,
		2976,5,33,0,0,2975,2970,1,0,0,0,2975,2976,1,0,0,0,2976,235,1,0,0,0,2977,
		2979,3,354,177,0,2978,2977,1,0,0,0,2978,2979,1,0,0,0,2979,2980,1,0,0,0,
		2980,2984,5,171,0,0,2981,2983,3,240,120,0,2982,2981,1,0,0,0,2983,2986,
		1,0,0,0,2984,2982,1,0,0,0,2984,2985,1,0,0,0,2985,3019,1,0,0,0,2986,2984,
		1,0,0,0,2987,3011,5,235,0,0,2988,2989,3,1388,694,0,2989,2990,5,630,0,0,
		2990,2992,3,368,184,0,2991,2993,3,392,196,0,2992,2991,1,0,0,0,2992,2993,
		1,0,0,0,2993,3012,1,0,0,0,2994,2997,3,1384,692,0,2995,2996,4,118,21,0,
		2996,2998,3,434,217,0,2997,2995,1,0,0,0,2997,2998,1,0,0,0,2998,3000,1,
		0,0,0,2999,3001,3,238,119,0,3000,2999,1,0,0,0,3000,3001,1,0,0,0,3001,3003,
		1,0,0,0,3002,3004,3,392,196,0,3003,3002,1,0,0,0,3003,3004,1,0,0,0,3004,
		3006,1,0,0,0,3005,3007,3,362,181,0,3006,3005,1,0,0,0,3006,3007,1,0,0,0,
		3007,3009,1,0,0,0,3008,3010,3,318,159,0,3009,3008,1,0,0,0,3009,3010,1,
		0,0,0,3010,3012,1,0,0,0,3011,2988,1,0,0,0,3011,2994,1,0,0,0,3012,3020,
		1,0,0,0,3013,3014,3,1388,694,0,3014,3015,5,235,0,0,3015,3017,3,368,184,
		0,3016,3018,3,392,196,0,3017,3016,1,0,0,0,3017,3018,1,0,0,0,3018,3020,
		1,0,0,0,3019,2987,1,0,0,0,3019,3013,1,0,0,0,3020,237,1,0,0,0,3021,3022,
		5,423,0,0,3022,3023,5,32,0,0,3023,3024,3,1410,705,0,3024,3025,5,33,0,0,
		3025,239,1,0,0,0,3026,3027,7,18,0,0,3027,241,1,0,0,0,3028,3029,5,183,0,
		0,3029,3030,3,386,193,0,3030,243,1,0,0,0,3031,3049,5,251,0,0,3032,3033,
		3,1384,692,0,3033,3035,5,405,0,0,3034,3036,3,434,217,0,3035,3034,1,0,0,
		0,3035,3036,1,0,0,0,3036,3050,1,0,0,0,3037,3047,3,1408,704,0,3038,3048,
		5,109,0,0,3039,3040,5,453,0,0,3040,3042,3,246,123,0,3041,3043,3,392,196,
		0,3042,3041,1,0,0,0,3042,3043,1,0,0,0,3043,3045,1,0,0,0,3044,3046,3,316,
		158,0,3045,3044,1,0,0,0,3045,3046,1,0,0,0,3046,3048,1,0,0,0,3047,3038,
		1,0,0,0,3047,3039,1,0,0,0,3048,3050,1,0,0,0,3049,3032,1,0,0,0,3049,3037,
		1,0,0,0,3050,245,1,0,0,0,3051,3062,7,19,0,0,3052,3059,3,1408,704,0,3053,
		3060,7,20,0,0,3054,3055,7,21,0,0,3055,3056,5,32,0,0,3056,3057,3,262,131,
		0,3057,3058,5,33,0,0,3058,3060,1,0,0,0,3059,3053,1,0,0,0,3059,3054,1,0,
		0,0,3060,3062,1,0,0,0,3061,3051,1,0,0,0,3061,3052,1,0,0,0,3062,247,1,0,
		0,0,3063,3065,5,274,0,0,3064,3066,3,250,125,0,3065,3064,1,0,0,0,3065,3066,
		1,0,0,0,3066,3068,1,0,0,0,3067,3069,5,264,0,0,3068,3067,1,0,0,0,3068,3069,
		1,0,0,0,3069,3071,1,0,0,0,3070,3072,5,279,0,0,3071,3070,1,0,0,0,3071,3072,
		1,0,0,0,3072,3073,1,0,0,0,3073,3075,3,1384,692,0,3074,3076,3,1318,659,
		0,3075,3074,1,0,0,0,3075,3076,1,0,0,0,3076,3087,1,0,0,0,3077,3079,3,252,
		126,0,3078,3080,3,264,132,0,3079,3078,1,0,0,0,3079,3080,1,0,0,0,3080,3088,
		1,0,0,0,3081,3082,5,519,0,0,3082,3084,3,1258,629,0,3083,3085,3,264,132,
		0,3084,3083,1,0,0,0,3084,3085,1,0,0,0,3085,3088,1,0,0,0,3086,3088,3,258,
		129,0,3087,3077,1,0,0,0,3087,3081,1,0,0,0,3087,3086,1,0,0,0,3088,3090,
		1,0,0,0,3089,3091,3,266,133,0,3090,3089,1,0,0,0,3090,3091,1,0,0,0,3091,
		249,1,0,0,0,3092,3093,7,22,0,0,3093,251,1,0,0,0,3094,3096,5,32,0,0,3095,
		3097,3,254,127,0,3096,3095,1,0,0,0,3096,3097,1,0,0,0,3097,3098,1,0,0,0,
		3098,3100,5,33,0,0,3099,3094,1,0,0,0,3099,3100,1,0,0,0,3100,3101,1,0,0,
		0,3101,3102,3,256,128,0,3102,253,1,0,0,0,3103,3108,3,1330,665,0,3104,3105,
		5,29,0,0,3105,3107,3,1330,665,0,3106,3104,1,0,0,0,3107,3110,1,0,0,0,3108,
		3106,1,0,0,0,3108,3109,1,0,0,0,3109,255,1,0,0,0,3110,3108,1,0,0,0,3111,
		3112,7,23,0,0,3112,3113,3,260,130,0,3113,257,1,0,0,0,3114,3125,3,302,151,
		0,3115,3125,3,306,153,0,3116,3118,5,32,0,0,3117,3119,3,254,127,0,3118,
		3117,1,0,0,0,3118,3119,1,0,0,0,3119,3120,1,0,0,0,3120,3122,5,33,0,0,3121,
		3116,1,0,0,0,3121,3122,1,0,0,0,3122,3123,1,0,0,0,3123,3125,3,100,50,0,
		3124,3114,1,0,0,0,3124,3115,1,0,0,0,3124,3121,1,0,0,0,3125,259,1,0,0,0,
		3126,3128,5,32,0,0,3127,3129,3,262,131,0,3128,3127,1,0,0,0,3128,3129,1,
		0,0,0,3129,3130,1,0,0,0,3130,3139,5,33,0,0,3131,3132,5,29,0,0,3132,3134,
		5,32,0,0,3133,3135,3,262,131,0,3134,3133,1,0,0,0,3134,3135,1,0,0,0,3135,
		3136,1,0,0,0,3136,3138,5,33,0,0,3137,3131,1,0,0,0,3138,3141,1,0,0,0,3139,
		3137,1,0,0,0,3139,3140,1,0,0,0,3140,261,1,0,0,0,3141,3139,1,0,0,0,3142,
		3145,3,912,456,0,3143,3145,5,166,0,0,3144,3142,1,0,0,0,3144,3143,1,0,0,
		0,3145,3153,1,0,0,0,3146,3149,5,29,0,0,3147,3150,3,912,456,0,3148,3150,
		5,166,0,0,3149,3147,1,0,0,0,3149,3148,1,0,0,0,3150,3152,1,0,0,0,3151,3146,
		1,0,0,0,3152,3155,1,0,0,0,3153,3151,1,0,0,0,3153,3154,1,0,0,0,3154,263,
		1,0,0,0,3155,3153,1,0,0,0,3156,3157,4,132,22,0,3157,3158,5,63,0,0,3158,
		3160,3,1408,704,0,3159,3161,3,1326,663,0,3160,3159,1,0,0,0,3160,3161,1,
		0,0,0,3161,265,1,0,0,0,3162,3163,5,401,0,0,3163,3164,5,187,0,0,3164,3165,
		5,295,0,0,3165,3166,5,623,0,0,3166,3167,3,1258,629,0,3167,267,1,0,0,0,
		3168,3169,5,311,0,0,3169,3171,3,270,135,0,3170,3172,3,272,136,0,3171,3170,
		1,0,0,0,3171,3172,1,0,0,0,3172,3174,1,0,0,0,3173,3175,3,274,137,0,3174,
		3173,1,0,0,0,3174,3175,1,0,0,0,3175,3177,1,0,0,0,3176,3178,5,312,0,0,3177,
		3176,1,0,0,0,3177,3178,1,0,0,0,3178,3180,1,0,0,0,3179,3181,3,276,138,0,
		3180,3179,1,0,0,0,3180,3181,1,0,0,0,3181,3182,1,0,0,0,3182,3184,3,1440,
		720,0,3183,3185,3,278,139,0,3184,3183,1,0,0,0,3184,3185,1,0,0,0,3185,3187,
		1,0,0,0,3186,3188,3,280,140,0,3187,3186,1,0,0,0,3187,3188,1,0,0,0,3188,
		3190,1,0,0,0,3189,3191,7,8,0,0,3190,3189,1,0,0,0,3190,3191,1,0,0,0,3191,
		3192,1,0,0,0,3192,3193,5,279,0,0,3193,3194,5,583,0,0,3194,3196,3,1384,
		692,0,3195,3197,3,1318,659,0,3196,3195,1,0,0,0,3196,3197,1,0,0,0,3197,
		3199,1,0,0,0,3198,3200,3,1262,631,0,3199,3198,1,0,0,0,3199,3200,1,0,0,
		0,3200,3202,1,0,0,0,3201,3203,3,282,141,0,3202,3201,1,0,0,0,3202,3203,
		1,0,0,0,3203,3205,1,0,0,0,3204,3206,3,1264,632,0,3205,3204,1,0,0,0,3205,
		3206,1,0,0,0,3206,3208,1,0,0,0,3207,3209,3,1268,634,0,3208,3207,1,0,0,
		0,3208,3209,1,0,0,0,3209,3210,1,0,0,0,3210,3212,3,284,142,0,3211,3213,
		3,292,146,0,3212,3211,1,0,0,0,3212,3213,1,0,0,0,3213,3215,1,0,0,0,3214,
		3216,3,294,147,0,3215,3214,1,0,0,0,3215,3216,1,0,0,0,3216,3218,1,0,0,0,
		3217,3219,3,290,145,0,3218,3217,1,0,0,0,3218,3219,1,0,0,0,3219,269,1,0,
		0,0,3220,3221,7,24,0,0,3221,271,1,0,0,0,3222,3223,7,25,0,0,3223,273,1,
		0,0,0,3224,3225,4,137,23,0,3225,3226,5,235,0,0,3226,275,1,0,0,0,3227,3231,
		5,269,0,0,3228,3229,4,138,24,0,3229,3231,7,26,0,0,3230,3227,1,0,0,0,3230,
		3228,1,0,0,0,3231,277,1,0,0,0,3232,3238,4,139,25,0,3233,3234,5,137,0,0,
		3234,3239,5,3,0,0,3235,3236,3,1406,703,0,3236,3237,5,3,0,0,3237,3239,1,
		0,0,0,3238,3233,1,0,0,0,3238,3235,1,0,0,0,3239,279,1,0,0,0,3240,3241,4,
		140,26,0,3241,3242,5,282,0,0,3242,3243,5,438,0,0,3243,3244,5,295,0,0,3244,
		3245,5,411,0,0,3245,281,1,0,0,0,3246,3247,5,500,0,0,3247,3248,5,262,0,
		0,3248,3249,5,89,0,0,3249,3250,3,1442,721,0,3250,283,1,0,0,0,3251,3252,
		5,264,0,0,3252,3253,5,3,0,0,3253,3255,7,27,0,0,3254,3251,1,0,0,0,3254,
		3255,1,0,0,0,3255,3257,1,0,0,0,3256,3258,3,286,143,0,3257,3256,1,0,0,0,
		3257,3258,1,0,0,0,3258,3261,1,0,0,0,3259,3260,5,519,0,0,3260,3262,3,1258,
		629,0,3261,3259,1,0,0,0,3261,3262,1,0,0,0,3262,285,1,0,0,0,3263,3265,5,
		32,0,0,3264,3266,3,288,144,0,3265,3264,1,0,0,0,3265,3266,1,0,0,0,3266,
		3267,1,0,0,0,3267,3268,5,33,0,0,3268,287,1,0,0,0,3269,3274,3,1328,664,
		0,3270,3271,5,39,0,0,3271,3274,3,1468,734,0,3272,3274,5,41,0,0,3273,3269,
		1,0,0,0,3273,3270,1,0,0,0,3273,3272,1,0,0,0,3274,3285,1,0,0,0,3275,3281,
		5,29,0,0,3276,3282,3,1328,664,0,3277,3278,5,39,0,0,3278,3282,3,1468,734,
		0,3279,3282,5,40,0,0,3280,3282,5,41,0,0,3281,3276,1,0,0,0,3281,3277,1,
		0,0,0,3281,3279,1,0,0,0,3281,3280,1,0,0,0,3282,3284,1,0,0,0,3283,3275,
		1,0,0,0,3284,3287,1,0,0,0,3285,3283,1,0,0,0,3285,3286,1,0,0,0,3286,289,
		1,0,0,0,3287,3285,1,0,0,0,3288,3289,4,145,27,0,3289,3290,5,56,0,0,3290,
		3291,5,6,0,0,3291,3292,5,804,0,0,3292,291,1,0,0,0,3293,3294,4,146,28,0,
		3294,3295,5,810,0,0,3295,3296,5,6,0,0,3296,3297,5,3,0,0,3297,293,1,0,0,
		0,3298,3299,4,147,29,0,3299,3300,5,358,0,0,3300,3301,5,6,0,0,3301,3302,
		3,1474,737,0,3302,295,1,0,0,0,3303,3305,5,475,0,0,3304,3306,7,28,0,0,3305,
		3304,1,0,0,0,3305,3306,1,0,0,0,3306,3308,1,0,0,0,3307,3309,5,279,0,0,3308,
		3307,1,0,0,0,3308,3309,1,0,0,0,3309,3310,1,0,0,0,3310,3312,3,1384,692,
		0,3311,3313,3,1318,659,0,3312,3311,1,0,0,0,3312,3313,1,0,0,0,3313,3318,
		1,0,0,0,3314,3319,3,252,126,0,3315,3316,5,519,0,0,3316,3319,3,1258,629,
		0,3317,3319,3,258,129,0,3318,3314,1,0,0,0,3318,3315,1,0,0,0,3318,3317,
		1,0,0,0,3319,297,1,0,0,0,3320,3322,3,302,151,0,3321,3323,3,378,189,0,3322,
		3321,1,0,0,0,3322,3323,1,0,0,0,3323,3326,1,0,0,0,3324,3326,3,300,150,0,
		3325,3320,1,0,0,0,3325,3324,1,0,0,0,3326,299,1,0,0,0,3327,3328,5,32,0,
		0,3328,3329,3,300,150,0,3329,3330,5,33,0,0,3330,3345,1,0,0,0,3331,3332,
		3,302,151,0,3332,3334,3,324,162,0,3333,3335,3,378,189,0,3334,3333,1,0,
		0,0,3334,3335,1,0,0,0,3335,3345,1,0,0,0,3336,3337,3,302,151,0,3337,3338,
		3,378,189,0,3338,3339,3,324,162,0,3339,3345,1,0,0,0,3340,3341,4,150,30,
		0,3341,3342,3,306,153,0,3342,3343,3,324,162,0,3343,3345,1,0,0,0,3344,3327,
		1,0,0,0,3344,3331,1,0,0,0,3344,3336,1,0,0,0,3344,3340,1,0,0,0,3345,301,
		1,0,0,0,3346,3348,3,354,177,0,3347,3346,1,0,0,0,3347,3348,1,0,0,0,3348,
		3349,1,0,0,0,3349,3351,3,304,152,0,3350,3352,3,362,181,0,3351,3350,1,0,
		0,0,3351,3352,1,0,0,0,3352,3354,1,0,0,0,3353,3355,3,316,158,0,3354,3353,
		1,0,0,0,3354,3355,1,0,0,0,3355,303,1,0,0,0,3356,3359,3,308,154,0,3357,
		3359,3,306,153,0,3358,3356,1,0,0,0,3358,3357,1,0,0,0,3359,3371,1,0,0,0,
		3360,3364,5,617,0,0,3361,3362,4,152,31,0,3362,3364,7,29,0,0,3363,3360,
		1,0,0,0,3363,3361,1,0,0,0,3364,3366,1,0,0,0,3365,3367,3,432,216,0,3366,
		3365,1,0,0,0,3366,3367,1,0,0,0,3367,3368,1,0,0,0,3368,3370,3,304,152,0,
		3369,3363,1,0,0,0,3370,3373,1,0,0,0,3371,3369,1,0,0,0,3371,3372,1,0,0,
		0,3372,305,1,0,0,0,3373,3371,1,0,0,0,3374,3377,5,32,0,0,3375,3378,3,306,
		153,0,3376,3378,3,100,50,0,3377,3375,1,0,0,0,3377,3376,1,0,0,0,3378,3379,
		1,0,0,0,3379,3380,5,33,0,0,3380,307,1,0,0,0,3381,3387,3,310,155,0,3382,
		3383,4,154,32,0,3383,3387,3,370,185,0,3384,3385,4,154,33,0,3385,3387,3,
		372,186,0,3386,3381,1,0,0,0,3386,3382,1,0,0,0,3386,3384,1,0,0,0,3387,309,
		1,0,0,0,3388,3392,5,511,0,0,3389,3391,3,376,188,0,3390,3389,1,0,0,0,3391,
		3394,1,0,0,0,3392,3390,1,0,0,0,3392,3393,1,0,0,0,3393,3395,1,0,0,0,3394,
		3392,1,0,0,0,3395,3397,3,386,193,0,3396,3398,3,324,162,0,3397,3396,1,0,
		0,0,3397,3398,1,0,0,0,3398,3400,1,0,0,0,3399,3401,3,366,183,0,3400,3399,
		1,0,0,0,3400,3401,1,0,0,0,3401,3403,1,0,0,0,3402,3404,3,392,196,0,3403,
		3402,1,0,0,0,3403,3404,1,0,0,0,3404,3406,1,0,0,0,3405,3407,3,358,179,0,
		3406,3405,1,0,0,0,3406,3407,1,0,0,0,3407,3409,1,0,0,0,3408,3410,3,328,
		164,0,3409,3408,1,0,0,0,3409,3410,1,0,0,0,3410,3412,1,0,0,0,3411,3413,
		3,332,166,0,3412,3411,1,0,0,0,3412,3413,1,0,0,0,3413,3415,1,0,0,0,3414,
		3416,3,330,165,0,3415,3414,1,0,0,0,3415,3416,1,0,0,0,3416,311,1,0,0,0,
		3417,3418,3,306,153,0,3418,313,1,0,0,0,3419,3420,7,30,0,0,3420,315,1,0,
		0,0,3421,3422,5,306,0,0,3422,3423,3,320,160,0,3423,317,1,0,0,0,3424,3425,
		5,306,0,0,3425,3426,3,322,161,0,3426,319,1,0,0,0,3427,3430,3,322,161,0,
		3428,3429,7,31,0,0,3429,3431,3,322,161,0,3430,3428,1,0,0,0,3430,3431,1,
		0,0,0,3431,321,1,0,0,0,3432,3435,3,1408,704,0,3433,3435,7,32,0,0,3434,
		3432,1,0,0,0,3434,3433,1,0,0,0,3435,323,1,0,0,0,3436,3464,5,279,0,0,3437,
		3438,5,414,0,0,3438,3440,3,1440,720,0,3439,3441,3,1262,631,0,3440,3439,
		1,0,0,0,3440,3441,1,0,0,0,3441,3443,1,0,0,0,3442,3444,3,1264,632,0,3443,
		3442,1,0,0,0,3443,3444,1,0,0,0,3444,3446,1,0,0,0,3445,3447,3,1268,634,
		0,3446,3445,1,0,0,0,3446,3447,1,0,0,0,3447,3465,1,0,0,0,3448,3449,5,186,
		0,0,3449,3465,3,1440,720,0,3450,3453,3,1468,734,0,3451,3453,3,988,494,
		0,3452,3450,1,0,0,0,3452,3451,1,0,0,0,3453,3461,1,0,0,0,3454,3457,5,29,
		0,0,3455,3458,3,1468,734,0,3456,3458,3,988,494,0,3457,3455,1,0,0,0,3457,
		3456,1,0,0,0,3458,3460,1,0,0,0,3459,3454,1,0,0,0,3460,3463,1,0,0,0,3461,
		3459,1,0,0,0,3461,3462,1,0,0,0,3462,3465,1,0,0,0,3463,3461,1,0,0,0,3464,
		3437,1,0,0,0,3464,3448,1,0,0,0,3464,3452,1,0,0,0,3465,325,1,0,0,0,3466,
		3467,5,440,0,0,3467,3473,5,32,0,0,3468,3471,5,3,0,0,3469,3470,5,29,0,0,
		3470,3472,5,3,0,0,3471,3469,1,0,0,0,3471,3472,1,0,0,0,3472,3474,1,0,0,
		0,3473,3468,1,0,0,0,3473,3474,1,0,0,0,3474,3475,1,0,0,0,3475,3476,5,33,
		0,0,3476,327,1,0,0,0,3477,3478,5,253,0,0,3478,3479,3,912,456,0,3479,329,
		1,0,0,0,3480,3481,4,165,34,0,3481,3482,5,812,0,0,3482,3483,3,912,456,0,
		3483,331,1,0,0,0,3484,3485,5,707,0,0,3485,3490,3,334,167,0,3486,3487,5,
		29,0,0,3487,3489,3,334,167,0,3488,3486,1,0,0,0,3489,3492,1,0,0,0,3490,
		3488,1,0,0,0,3490,3491,1,0,0,0,3491,333,1,0,0,0,3492,3490,1,0,0,0,3493,
		3494,3,1404,702,0,3494,3495,5,63,0,0,3495,3496,3,336,168,0,3496,335,1,
		0,0,0,3497,3498,5,32,0,0,3498,3499,3,338,169,0,3499,3500,5,33,0,0,3500,
		337,1,0,0,0,3501,3503,3,1404,702,0,3502,3501,1,0,0,0,3502,3503,1,0,0,0,
		3503,3507,1,0,0,0,3504,3505,5,423,0,0,3505,3506,5,89,0,0,3506,3508,3,1024,
		512,0,3507,3504,1,0,0,0,3507,3508,1,0,0,0,3508,3510,1,0,0,0,3509,3511,
		3,362,181,0,3510,3509,1,0,0,0,3510,3511,1,0,0,0,3511,3513,1,0,0,0,3512,
		3514,3,340,170,0,3513,3512,1,0,0,0,3513,3514,1,0,0,0,3514,339,1,0,0,0,
		3515,3516,3,342,171,0,3516,3518,3,344,172,0,3517,3519,3,352,176,0,3518,
		3517,1,0,0,0,3518,3519,1,0,0,0,3519,341,1,0,0,0,3520,3521,7,33,0,0,3521,
		343,1,0,0,0,3522,3525,3,346,173,0,3523,3525,3,348,174,0,3524,3522,1,0,
		0,0,3524,3523,1,0,0,0,3525,345,1,0,0,0,3526,3527,5,706,0,0,3527,3541,5,
		701,0,0,3528,3529,3,1424,712,0,3529,3530,5,701,0,0,3530,3541,1,0,0,0,3531,
		3532,5,43,0,0,3532,3541,5,701,0,0,3533,3534,5,278,0,0,3534,3535,3,912,
		456,0,3535,3536,3,1014,507,0,3536,3537,5,701,0,0,3537,3541,1,0,0,0,3538,
		3539,5,143,0,0,3539,3541,5,503,0,0,3540,3526,1,0,0,0,3540,3528,1,0,0,0,
		3540,3531,1,0,0,0,3540,3533,1,0,0,0,3540,3538,1,0,0,0,3541,347,1,0,0,0,
		3542,3543,5,75,0,0,3543,3544,3,350,175,0,3544,3545,5,61,0,0,3545,3546,
		3,350,175,0,3546,349,1,0,0,0,3547,3561,3,346,173,0,3548,3549,5,706,0,0,
		3549,3561,5,690,0,0,3550,3551,3,1424,712,0,3551,3552,5,690,0,0,3552,3561,
		1,0,0,0,3553,3554,5,43,0,0,3554,3561,5,690,0,0,3555,3556,5,278,0,0,3556,
		3557,3,912,456,0,3557,3558,3,1014,507,0,3558,3559,5,690,0,0,3559,3561,
		1,0,0,0,3560,3547,1,0,0,0,3560,3548,1,0,0,0,3560,3550,1,0,0,0,3560,3553,
		1,0,0,0,3560,3555,1,0,0,0,3561,351,1,0,0,0,3562,3569,5,688,0,0,3563,3564,
		5,143,0,0,3564,3570,5,503,0,0,3565,3570,5,249,0,0,3566,3570,5,705,0,0,
		3567,3568,5,392,0,0,3568,3570,5,698,0,0,3569,3563,1,0,0,0,3569,3565,1,
		0,0,0,3569,3566,1,0,0,0,3569,3567,1,0,0,0,3570,353,1,0,0,0,3571,3573,5,
		653,0,0,3572,3574,5,673,0,0,3573,3572,1,0,0,0,3573,3574,1,0,0,0,3574,3575,
		1,0,0,0,3575,3580,3,356,178,0,3576,3577,5,29,0,0,3577,3579,3,356,178,0,
		3578,3576,1,0,0,0,3579,3582,1,0,0,0,3580,3578,1,0,0,0,3580,3581,1,0,0,
		0,3581,355,1,0,0,0,3582,3580,1,0,0,0,3583,3585,3,1408,704,0,3584,3586,
		3,1326,663,0,3585,3584,1,0,0,0,3585,3586,1,0,0,0,3586,3587,1,0,0,0,3587,
		3588,5,63,0,0,3588,3589,3,312,156,0,3589,357,1,0,0,0,3590,3591,5,249,0,
		0,3591,3592,5,89,0,0,3592,3594,3,1024,512,0,3593,3595,3,360,180,0,3594,
		3593,1,0,0,0,3594,3595,1,0,0,0,3595,3605,1,0,0,0,3596,3597,4,179,35,0,
		3597,3598,5,249,0,0,3598,3599,5,89,0,0,3599,3600,7,34,0,0,3600,3601,5,
		32,0,0,3601,3602,3,1028,514,0,3602,3603,5,33,0,0,3603,3605,1,0,0,0,3604,
		3590,1,0,0,0,3604,3596,1,0,0,0,3605,359,1,0,0,0,3606,3607,5,653,0,0,3607,
		3608,5,497,0,0,3608,361,1,0,0,0,3609,3610,5,411,0,0,3610,3611,5,89,0,0,
		3611,3612,3,1024,512,0,3612,363,1,0,0,0,3613,3614,7,35,0,0,3614,365,1,
		0,0,0,3615,3618,5,235,0,0,3616,3619,5,185,0,0,3617,3619,3,368,184,0,3618,
		3616,1,0,0,0,3618,3617,1,0,0,0,3619,367,1,0,0,0,3620,3625,3,394,197,0,
		3621,3622,5,29,0,0,3622,3624,3,394,197,0,3623,3621,1,0,0,0,3624,3627,1,
		0,0,0,3625,3623,1,0,0,0,3625,3626,1,0,0,0,3626,369,1,0,0,0,3627,3625,1,
		0,0,0,3628,3629,5,635,0,0,3629,3634,3,374,187,0,3630,3631,5,29,0,0,3631,
		3633,3,374,187,0,3632,3630,1,0,0,0,3633,3636,1,0,0,0,3634,3632,1,0,0,0,
		3634,3635,1,0,0,0,3635,371,1,0,0,0,3636,3634,1,0,0,0,3637,3638,5,583,0,
		0,3638,3639,3,1384,692,0,3639,373,1,0,0,0,3640,3641,5,503,0,0,3641,3643,
		5,32,0,0,3642,3644,3,262,131,0,3643,3642,1,0,0,0,3643,3644,1,0,0,0,3644,
		3645,1,0,0,0,3645,3646,5,33,0,0,3646,375,1,0,0,0,3647,3650,3,314,157,0,
		3648,3650,5,545,0,0,3649,3647,1,0,0,0,3649,3648,1,0,0,0,3650,377,1,0,0,
		0,3651,3653,4,189,36,0,3652,3654,3,380,190,0,3653,3652,1,0,0,0,3654,3655,
		1,0,0,0,3655,3653,1,0,0,0,3655,3656,1,0,0,0,3656,379,1,0,0,0,3657,3658,
		5,232,0,0,3658,3661,3,382,191,0,3659,3660,5,676,0,0,3660,3662,3,1388,694,
		0,3661,3659,1,0,0,0,3661,3662,1,0,0,0,3662,3664,1,0,0,0,3663,3665,3,384,
		192,0,3664,3663,1,0,0,0,3664,3665,1,0,0,0,3665,3671,1,0,0,0,3666,3667,
		5,314,0,0,3667,3668,5,282,0,0,3668,3669,5,520,0,0,3669,3671,5,369,0,0,
		3670,3657,1,0,0,0,3670,3666,1,0,0,0,3671,381,1,0,0,0,3672,3673,7,36,0,
		0,3673,383,1,0,0,0,3674,3675,5,677,0,0,3675,3678,5,678,0,0,3676,3678,5,
		679,0,0,3677,3674,1,0,0,0,3677,3676,1,0,0,0,3678,385,1,0,0,0,3679,3682,
		3,388,194,0,3680,3682,5,16,0,0,3681,3679,1,0,0,0,3681,3680,1,0,0,0,3682,
		3687,1,0,0,0,3683,3684,5,29,0,0,3684,3686,3,388,194,0,3685,3683,1,0,0,
		0,3686,3689,1,0,0,0,3687,3685,1,0,0,0,3687,3688,1,0,0,0,3688,387,1,0,0,
		0,3689,3687,1,0,0,0,3690,3696,3,1336,668,0,3691,3693,3,912,456,0,3692,
		3694,3,390,195,0,3693,3692,1,0,0,0,3693,3694,1,0,0,0,3694,3696,1,0,0,0,
		3695,3690,1,0,0,0,3695,3691,1,0,0,0,3696,389,1,0,0,0,3697,3699,5,63,0,
		0,3698,3697,1,0,0,0,3698,3699,1,0,0,0,3699,3702,1,0,0,0,3700,3703,3,1408,
		704,0,3701,3703,3,1440,720,0,3702,3700,1,0,0,0,3702,3701,1,0,0,0,3703,
		391,1,0,0,0,3704,3705,5,651,0,0,3705,3706,3,912,456,0,3706,393,1,0,0,0,
		3707,3718,3,406,203,0,3708,3712,5,34,0,0,3709,3710,4,197,37,0,3710,3713,
		3,1408,704,0,3711,3713,5,740,0,0,3712,3709,1,0,0,0,3712,3711,1,0,0,0,3713,
		3714,1,0,0,0,3714,3715,3,396,198,0,3715,3716,5,35,0,0,3716,3718,1,0,0,
		0,3717,3707,1,0,0,0,3717,3708,1,0,0,0,3718,3722,1,0,0,0,3719,3721,3,398,
		199,0,3720,3719,1,0,0,0,3721,3724,1,0,0,0,3722,3720,1,0,0,0,3722,3723,
		1,0,0,0,3723,395,1,0,0,0,3724,3722,1,0,0,0,3725,3729,3,406,203,0,3726,
		3728,3,398,199,0,3727,3726,1,0,0,0,3728,3731,1,0,0,0,3729,3727,1,0,0,0,
		3729,3730,1,0,0,0,3730,397,1,0,0,0,3731,3729,1,0,0,0,3732,3733,3,402,201,
		0,3733,3738,3,394,197,0,3734,3735,5,401,0,0,3735,3739,3,912,456,0,3736,
		3737,5,630,0,0,3737,3739,3,1412,706,0,3738,3734,1,0,0,0,3738,3736,1,0,
		0,0,3738,3739,1,0,0,0,3739,3752,1,0,0,0,3740,3741,3,404,202,0,3741,3746,
		3,394,197,0,3742,3743,5,401,0,0,3743,3747,3,912,456,0,3744,3745,5,630,
		0,0,3745,3747,3,1412,706,0,3746,3742,1,0,0,0,3746,3744,1,0,0,0,3747,3752,
		1,0,0,0,3748,3749,3,400,200,0,3749,3750,3,406,203,0,3750,3752,1,0,0,0,
		3751,3732,1,0,0,0,3751,3740,1,0,0,0,3751,3748,1,0,0,0,3752,399,1,0,0,0,
		3753,3755,5,382,0,0,3754,3756,5,271,0,0,3755,3754,1,0,0,0,3755,3756,1,
		0,0,0,3756,3757,1,0,0,0,3757,3765,5,291,0,0,3758,3759,5,382,0,0,3759,3761,
		7,37,0,0,3760,3762,5,413,0,0,3761,3760,1,0,0,0,3761,3762,1,0,0,0,3762,
		3763,1,0,0,0,3763,3765,5,291,0,0,3764,3753,1,0,0,0,3764,3758,1,0,0,0,3765,
		401,1,0,0,0,3766,3768,7,38,0,0,3767,3766,1,0,0,0,3767,3768,1,0,0,0,3768,
		3769,1,0,0,0,3769,3772,5,291,0,0,3770,3772,5,565,0,0,3771,3767,1,0,0,0,
		3771,3770,1,0,0,0,3772,403,1,0,0,0,3773,3775,7,37,0,0,3774,3776,5,413,
		0,0,3775,3774,1,0,0,0,3775,3776,1,0,0,0,3776,3777,1,0,0,0,3777,3778,5,
		291,0,0,3778,405,1,0,0,0,3779,3786,3,408,204,0,3780,3786,3,410,205,0,3781,
		3786,3,412,206,0,3782,3786,3,414,207,0,3783,3784,4,203,38,0,3784,3786,
		3,416,208,0,3785,3779,1,0,0,0,3785,3780,1,0,0,0,3785,3781,1,0,0,0,3785,
		3782,1,0,0,0,3785,3783,1,0,0,0,3786,407,1,0,0,0,3787,3789,3,1384,692,0,
		3788,3790,3,1318,659,0,3789,3788,1,0,0,0,3789,3790,1,0,0,0,3790,3792,1,
		0,0,0,3791,3793,3,434,217,0,3792,3791,1,0,0,0,3792,3793,1,0,0,0,3793,3795,
		1,0,0,0,3794,3796,3,436,218,0,3795,3794,1,0,0,0,3795,3796,1,0,0,0,3796,
		3798,1,0,0,0,3797,3799,3,940,470,0,3798,3797,1,0,0,0,3798,3799,1,0,0,0,
		3799,409,1,0,0,0,3800,3803,5,32,0,0,3801,3804,3,408,204,0,3802,3804,3,
		410,205,0,3803,3801,1,0,0,0,3803,3802,1,0,0,0,3804,3805,1,0,0,0,3805,3806,
		5,33,0,0,3806,411,1,0,0,0,3807,3809,3,312,156,0,3808,3810,3,434,217,0,
		3809,3808,1,0,0,0,3809,3810,1,0,0,0,3810,3812,1,0,0,0,3811,3813,3,1326,
		663,0,3812,3811,1,0,0,0,3812,3813,1,0,0,0,3813,3824,1,0,0,0,3814,3815,
		4,206,39,0,3815,3816,5,734,0,0,3816,3818,3,312,156,0,3817,3819,3,434,217,
		0,3818,3817,1,0,0,0,3818,3819,1,0,0,0,3819,3821,1,0,0,0,3820,3822,3,1326,
		663,0,3821,3820,1,0,0,0,3821,3822,1,0,0,0,3822,3824,1,0,0,0,3823,3807,
		1,0,0,0,3823,3814,1,0,0,0,3824,413,1,0,0,0,3825,3828,5,32,0,0,3826,3829,
		3,368,184,0,3827,3829,3,414,207,0,3828,3826,1,0,0,0,3828,3827,1,0,0,0,
		3829,3830,1,0,0,0,3830,3831,5,33,0,0,3831,415,1,0,0,0,3832,3833,5,709,
		0,0,3833,3834,5,32,0,0,3834,3835,3,912,456,0,3835,3836,5,29,0,0,3836,3837,
		3,1440,720,0,3837,3838,3,418,209,0,3838,3840,5,33,0,0,3839,3841,3,434,
		217,0,3840,3839,1,0,0,0,3840,3841,1,0,0,0,3841,417,1,0,0,0,3842,3843,5,
		114,0,0,3843,3844,5,32,0,0,3844,3849,3,420,210,0,3845,3846,5,29,0,0,3846,
		3848,3,420,210,0,3847,3845,1,0,0,0,3848,3851,1,0,0,0,3849,3847,1,0,0,0,
		3849,3850,1,0,0,0,3850,3852,1,0,0,0,3851,3849,1,0,0,0,3852,3853,5,33,0,
		0,3853,419,1,0,0,0,3854,3855,3,1408,704,0,3855,3856,5,232,0,0,3856,3857,
		5,711,0,0,3857,3878,1,0,0,0,3858,3859,3,1408,704,0,3859,3862,3,1168,584,
		0,3860,3861,4,210,40,0,3861,3863,3,1250,625,0,3862,3860,1,0,0,0,3862,3863,
		1,0,0,0,3863,3865,1,0,0,0,3864,3866,5,209,0,0,3865,3864,1,0,0,0,3865,3866,
		1,0,0,0,3866,3867,1,0,0,0,3867,3868,5,712,0,0,3868,3870,3,1440,720,0,3869,
		3871,3,424,212,0,3870,3869,1,0,0,0,3870,3871,1,0,0,0,3871,3878,1,0,0,0,
		3872,3873,5,710,0,0,3873,3874,5,712,0,0,3874,3875,3,1440,720,0,3875,3876,
		3,418,209,0,3876,3878,1,0,0,0,3877,3854,1,0,0,0,3877,3858,1,0,0,0,3877,
		3872,1,0,0,0,3878,421,1,0,0,0,3879,3881,3,426,213,0,3880,3882,3,428,214,
		0,3881,3880,1,0,0,0,3881,3882,1,0,0,0,3882,3885,1,0,0,0,3883,3885,3,428,
		214,0,3884,3879,1,0,0,0,3884,3883,1,0,0,0,3885,423,1,0,0,0,3886,3891,3,
		422,211,0,3887,3888,3,428,214,0,3888,3889,3,426,213,0,3889,3891,1,0,0,
		0,3890,3886,1,0,0,0,3890,3887,1,0,0,0,3891,425,1,0,0,0,3892,3893,3,430,
		215,0,3893,3894,5,401,0,0,3894,3895,5,708,0,0,3895,427,1,0,0,0,3896,3897,
		3,430,215,0,3897,3898,5,401,0,0,3898,3899,5,200,0,0,3899,429,1,0,0,0,3900,
		3905,5,200,0,0,3901,3905,5,395,0,0,3902,3903,5,166,0,0,3903,3905,3,1440,
		720,0,3904,3900,1,0,0,0,3904,3901,1,0,0,0,3904,3902,1,0,0,0,3905,431,1,
		0,0,0,3906,3907,7,39,0,0,3907,433,1,0,0,0,3908,3912,5,63,0,0,3909,3910,
		4,217,41,0,3910,3912,5,6,0,0,3911,3908,1,0,0,0,3911,3909,1,0,0,0,3911,
		3912,1,0,0,0,3912,3913,1,0,0,0,3913,3914,3,1408,704,0,3914,435,1,0,0,0,
		3915,3920,3,438,219,0,3916,3917,5,29,0,0,3917,3919,3,438,219,0,3918,3916,
		1,0,0,0,3919,3922,1,0,0,0,3920,3918,1,0,0,0,3920,3921,1,0,0,0,3921,437,
		1,0,0,0,3922,3920,1,0,0,0,3923,3924,3,440,220,0,3924,3926,3,442,221,0,
		3925,3927,3,446,223,0,3926,3925,1,0,0,0,3926,3927,1,0,0,0,3927,3928,1,
		0,0,0,3928,3929,5,32,0,0,3929,3930,3,448,224,0,3930,3931,5,33,0,0,3931,
		3944,1,0,0,0,3932,3933,5,629,0,0,3933,3935,3,442,221,0,3934,3936,3,446,
		223,0,3935,3934,1,0,0,0,3935,3936,1,0,0,0,3936,3937,1,0,0,0,3937,3939,
		5,32,0,0,3938,3940,3,448,224,0,3939,3938,1,0,0,0,3939,3940,1,0,0,0,3940,
		3941,1,0,0,0,3941,3942,5,33,0,0,3942,3944,1,0,0,0,3943,3923,1,0,0,0,3943,
		3932,1,0,0,0,3944,439,1,0,0,0,3945,3946,7,40,0,0,3946,441,1,0,0,0,3947,
		3948,7,41,0,0,3948,443,1,0,0,0,3949,3950,5,438,0,0,3950,3956,5,295,0,0,
		3951,3953,5,618,0,0,3952,3954,3,442,221,0,3953,3952,1,0,0,0,3953,3954,
		1,0,0,0,3954,3956,1,0,0,0,3955,3949,1,0,0,0,3955,3951,1,0,0,0,3956,445,
		1,0,0,0,3957,3963,5,232,0,0,3958,3964,5,291,0,0,3959,3960,5,411,0,0,3960,
		3964,5,89,0,0,3961,3962,5,249,0,0,3962,3964,5,89,0,0,3963,3958,1,0,0,0,
		3963,3959,1,0,0,0,3963,3961,1,0,0,0,3964,447,1,0,0,0,3965,3970,3,450,225,
		0,3966,3967,5,29,0,0,3967,3969,3,450,225,0,3968,3966,1,0,0,0,3969,3972,
		1,0,0,0,3970,3968,1,0,0,0,3970,3971,1,0,0,0,3971,449,1,0,0,0,3972,3970,
		1,0,0,0,3973,3976,3,1408,704,0,3974,3976,5,438,0,0,3975,3973,1,0,0,0,3975,
		3974,1,0,0,0,3976,451,1,0,0,0,3977,3979,3,354,177,0,3978,3977,1,0,0,0,
		3978,3979,1,0,0,0,3979,3980,1,0,0,0,3980,3982,5,623,0,0,3981,3983,5,321,
		0,0,3982,3981,1,0,0,0,3982,3983,1,0,0,0,3983,3985,1,0,0,0,3984,3986,5,
		264,0,0,3985,3984,1,0,0,0,3985,3986,1,0,0,0,3986,3987,1,0,0,0,3987,3988,
		3,368,184,0,3988,3989,5,519,0,0,3989,3991,3,1258,629,0,3990,3992,3,392,
		196,0,3991,3990,1,0,0,0,3991,3992,1,0,0,0,3992,3994,1,0,0,0,3993,3995,
		3,362,181,0,3994,3993,1,0,0,0,3994,3995,1,0,0,0,3995,3997,1,0,0,0,3996,
		3998,3,318,159,0,3997,3996,1,0,0,0,3997,3998,1,0,0,0,3998,453,1,0,0,0,
		3999,4004,3,456,228,0,4000,4004,3,462,231,0,4001,4004,3,464,232,0,4002,
		4004,3,470,235,0,4003,3999,1,0,0,0,4003,4000,1,0,0,0,4003,4001,1,0,0,0,
		4003,4002,1,0,0,0,4004,455,1,0,0,0,4005,4006,5,553,0,0,4006,4010,5,601,
		0,0,4007,4009,3,460,230,0,4008,4007,1,0,0,0,4009,4012,1,0,0,0,4010,4008,
		1,0,0,0,4010,4011,1,0,0,0,4011,4031,1,0,0,0,4012,4010,1,0,0,0,4013,4015,
		5,120,0,0,4014,4016,5,655,0,0,4015,4014,1,0,0,0,4015,4016,1,0,0,0,4016,
		4022,1,0,0,0,4017,4019,5,61,0,0,4018,4020,5,392,0,0,4019,4018,1,0,0,0,
		4019,4020,1,0,0,0,4020,4021,1,0,0,0,4021,4023,5,98,0,0,4022,4017,1,0,0,
		0,4022,4023,1,0,0,0,4023,4028,1,0,0,0,4024,4026,5,392,0,0,4025,4024,1,
		0,0,0,4025,4026,1,0,0,0,4026,4027,1,0,0,0,4027,4029,5,467,0,0,4028,4025,
		1,0,0,0,4028,4029,1,0,0,0,4029,4031,1,0,0,0,4030,4005,1,0,0,0,4030,4013,
		1,0,0,0,4031,457,1,0,0,0,4032,4034,5,74,0,0,4033,4035,5,655,0,0,4034,4033,
		1,0,0,0,4034,4035,1,0,0,0,4035,459,1,0,0,0,4036,4037,5,653,0,0,4037,4038,
		5,128,0,0,4038,4042,5,529,0,0,4039,4040,5,453,0,0,4040,4042,7,42,0,0,4041,
		4036,1,0,0,0,4041,4039,1,0,0,0,4042,461,1,0,0,0,4043,4044,5,505,0,0,4044,
		4073,3,1408,704,0,4045,4047,5,496,0,0,4046,4048,5,655,0,0,4047,4046,1,
		0,0,0,4047,4048,1,0,0,0,4048,4067,1,0,0,0,4049,4051,5,599,0,0,4050,4052,
		5,505,0,0,4051,4050,1,0,0,0,4051,4052,1,0,0,0,4052,4053,1,0,0,0,4053,4068,
		3,1408,704,0,4054,4056,5,61,0,0,4055,4057,5,392,0,0,4056,4055,1,0,0,0,
		4056,4057,1,0,0,0,4057,4058,1,0,0,0,4058,4060,5,98,0,0,4059,4054,1,0,0,
		0,4059,4060,1,0,0,0,4060,4065,1,0,0,0,4061,4063,5,392,0,0,4062,4061,1,
		0,0,0,4062,4063,1,0,0,0,4063,4064,1,0,0,0,4064,4066,5,467,0,0,4065,4062,
		1,0,0,0,4065,4066,1,0,0,0,4066,4068,1,0,0,0,4067,4049,1,0,0,0,4067,4059,
		1,0,0,0,4068,4073,1,0,0,0,4069,4070,5,467,0,0,4070,4071,5,505,0,0,4071,
		4073,3,1408,704,0,4072,4043,1,0,0,0,4072,4045,1,0,0,0,4072,4069,1,0,0,
		0,4073,463,1,0,0,0,4074,4075,5,314,0,0,4075,4076,7,17,0,0,4076,4081,3,
		466,233,0,4077,4078,5,29,0,0,4078,4080,3,466,233,0,4079,4077,1,0,0,0,4080,
		4083,1,0,0,0,4081,4079,1,0,0,0,4081,4082,1,0,0,0,4082,4091,1,0,0,0,4083,
		4081,1,0,0,0,4084,4085,5,314,0,0,4085,4086,5,276,0,0,4086,4087,5,232,0,
		0,4087,4091,5,72,0,0,4088,4089,5,620,0,0,4089,4091,7,43,0,0,4090,4074,
		1,0,0,0,4090,4084,1,0,0,0,4090,4088,1,0,0,0,4091,465,1,0,0,0,4092,4094,
		3,1384,692,0,4093,4095,3,434,217,0,4094,4093,1,0,0,0,4094,4095,1,0,0,0,
		4095,4096,1,0,0,0,4096,4097,3,468,234,0,4097,467,1,0,0,0,4098,4100,5,453,
		0,0,4099,4101,5,312,0,0,4100,4099,1,0,0,0,4100,4101,1,0,0,0,4101,4107,
		1,0,0,0,4102,4104,5,321,0,0,4103,4102,1,0,0,0,4103,4104,1,0,0,0,4104,4105,
		1,0,0,0,4105,4107,5,657,0,0,4106,4098,1,0,0,0,4106,4103,1,0,0,0,4107,469,
		1,0,0,0,4108,4137,5,659,0,0,4109,4110,7,44,0,0,4110,4112,3,474,237,0,4111,
		4113,7,45,0,0,4112,4111,1,0,0,0,4112,4113,1,0,0,0,4113,4138,1,0,0,0,4114,
		4115,5,195,0,0,4115,4121,3,474,237,0,4116,4119,5,576,0,0,4117,4118,5,232,
		0,0,4118,4120,5,363,0,0,4119,4117,1,0,0,0,4119,4120,1,0,0,0,4120,4122,
		1,0,0,0,4121,4116,1,0,0,0,4121,4122,1,0,0,0,4122,4138,1,0,0,0,4123,4124,
		5,435,0,0,4124,4138,3,474,237,0,4125,4126,5,120,0,0,4126,4129,3,474,237,
		0,4127,4128,5,402,0,0,4128,4130,5,425,0,0,4129,4127,1,0,0,0,4129,4130,
		1,0,0,0,4130,4138,1,0,0,0,4131,4132,5,496,0,0,4132,4138,3,474,237,0,4133,
		4135,5,457,0,0,4134,4136,3,472,236,0,4135,4134,1,0,0,0,4135,4136,1,0,0,
		0,4136,4138,1,0,0,0,4137,4109,1,0,0,0,4137,4114,1,0,0,0,4137,4123,1,0,
		0,0,4137,4125,1,0,0,0,4137,4131,1,0,0,0,4137,4133,1,0,0,0,4138,471,1,0,
		0,0,4139,4140,5,136,0,0,4140,4141,5,660,0,0,4141,473,1,0,0,0,4142,4149,
		3,1442,721,0,4143,4144,5,29,0,0,4144,4147,3,1442,721,0,4145,4146,5,29,
		0,0,4146,4148,3,1420,710,0,4147,4145,1,0,0,0,4147,4148,1,0,0,0,4148,4150,
		1,0,0,0,4149,4143,1,0,0,0,4149,4150,1,0,0,0,4150,475,1,0,0,0,4151,4152,
		5,446,0,0,4152,4174,3,478,239,0,4153,4174,3,490,245,0,4154,4155,5,485,
		0,0,4155,4160,3,480,240,0,4156,4157,5,29,0,0,4157,4159,3,480,240,0,4158,
		4156,1,0,0,0,4159,4162,1,0,0,0,4160,4158,1,0,0,0,4160,4161,1,0,0,0,4161,
		4174,1,0,0,0,4162,4160,1,0,0,0,4163,4164,5,485,0,0,4164,4166,5,666,0,0,
		4165,4167,3,1238,619,0,4166,4165,1,0,0,0,4166,4167,1,0,0,0,4167,4174,1,
		0,0,0,4168,4174,3,576,288,0,4169,4174,3,578,289,0,4170,4174,3,562,281,
		0,4171,4174,3,486,243,0,4172,4174,3,594,297,0,4173,4151,1,0,0,0,4173,4153,
		1,0,0,0,4173,4154,1,0,0,0,4173,4163,1,0,0,0,4173,4168,1,0,0,0,4173,4169,
		1,0,0,0,4173,4170,1,0,0,0,4173,4171,1,0,0,0,4173,4172,1,0,0,0,4174,477,
		1,0,0,0,4175,4176,7,46,0,0,4176,4181,5,316,0,0,4177,4178,5,599,0,0,4178,
		4182,3,1446,723,0,4179,4180,5,73,0,0,4180,4182,3,912,456,0,4181,4177,1,
		0,0,0,4181,4179,1,0,0,0,4182,479,1,0,0,0,4183,4185,3,482,241,0,4184,4186,
		3,484,242,0,4185,4184,1,0,0,0,4185,4186,1,0,0,0,4186,4195,1,0,0,0,4187,
		4189,3,606,303,0,4188,4190,5,57,0,0,4189,4188,1,0,0,0,4189,4190,1,0,0,
		0,4190,4192,1,0,0,0,4191,4193,3,1032,516,0,4192,4191,1,0,0,0,4192,4193,
		1,0,0,0,4193,4195,1,0,0,0,4194,4183,1,0,0,0,4194,4187,1,0,0,0,4195,481,
		1,0,0,0,4196,4203,5,341,0,0,4197,4198,4,241,42,0,4198,4199,5,77,0,0,4199,
		4200,5,316,0,0,4200,4201,5,61,0,0,4201,4203,5,809,0,0,4202,4196,1,0,0,
		0,4202,4197,1,0,0,0,4203,483,1,0,0,0,4204,4205,5,599,0,0,4205,4206,3,1426,
		713,0,4206,485,1,0,0,0,4207,4211,5,311,0,0,4208,4212,5,153,0,0,4209,4210,
		5,583,0,0,4210,4212,3,1384,692,0,4211,4208,1,0,0,0,4211,4209,1,0,0,0,4212,
		4213,1,0,0,0,4213,4214,5,235,0,0,4214,4215,5,341,0,0,4215,487,1,0,0,0,
		4216,4221,5,341,0,0,4217,4218,4,244,43,0,4218,4219,5,476,0,0,4219,4221,
		5,533,0,0,4220,4216,1,0,0,0,4220,4217,1,0,0,0,4221,489,1,0,0,0,4222,4223,
		5,99,0,0,4223,4224,3,488,244,0,4224,4225,5,599,0,0,4225,4227,3,492,246,
		0,4226,4228,3,1032,516,0,4227,4226,1,0,0,0,4227,4228,1,0,0,0,4228,491,
		1,0,0,0,4229,4234,3,494,247,0,4230,4231,5,29,0,0,4231,4233,3,494,247,0,
		4232,4230,1,0,0,0,4233,4236,1,0,0,0,4234,4232,1,0,0,0,4234,4235,1,0,0,
		0,4235,493,1,0,0,0,4236,4234,1,0,0,0,4237,4238,3,498,249,0,4238,4239,5,
		6,0,0,4239,4240,3,1448,724,0,4240,4366,1,0,0,0,4241,4242,5,737,0,0,4242,
		4243,5,6,0,0,4243,4366,3,1448,724,0,4244,4245,3,500,250,0,4245,4246,5,
		6,0,0,4246,4247,3,1448,724,0,4247,4366,1,0,0,0,4248,4249,3,502,251,0,4249,
		4250,5,6,0,0,4250,4251,3,1448,724,0,4251,4366,1,0,0,0,4252,4253,3,504,
		252,0,4253,4254,5,6,0,0,4254,4255,3,1448,724,0,4255,4366,1,0,0,0,4256,
		4257,3,506,253,0,4257,4258,5,6,0,0,4258,4259,3,1420,710,0,4259,4366,1,
		0,0,0,4260,4261,3,508,254,0,4261,4262,5,6,0,0,4262,4263,3,1420,710,0,4263,
		4366,1,0,0,0,4264,4265,3,510,255,0,4265,4266,5,6,0,0,4266,4267,3,1420,
		710,0,4267,4366,1,0,0,0,4268,4269,3,512,256,0,4269,4270,5,6,0,0,4270,4271,
		3,1420,710,0,4271,4366,1,0,0,0,4272,4273,3,514,257,0,4273,4274,5,6,0,0,
		4274,4275,3,1420,710,0,4275,4366,1,0,0,0,4276,4277,3,516,258,0,4277,4278,
		5,6,0,0,4278,4279,3,1448,724,0,4279,4366,1,0,0,0,4280,4281,3,518,259,0,
		4281,4282,5,6,0,0,4282,4283,3,1448,724,0,4283,4366,1,0,0,0,4284,4285,3,
		530,265,0,4285,4286,5,6,0,0,4286,4287,3,1448,724,0,4287,4366,1,0,0,0,4288,
		4289,3,534,267,0,4289,4290,5,6,0,0,4290,4291,3,1448,724,0,4291,4366,1,
		0,0,0,4292,4293,3,532,266,0,4293,4294,5,6,0,0,4294,4295,3,552,276,0,4295,
		4366,1,0,0,0,4296,4297,3,520,260,0,4297,4298,5,6,0,0,4298,4299,3,1448,
		724,0,4299,4366,1,0,0,0,4300,4301,3,526,263,0,4301,4302,5,6,0,0,4302,4303,
		3,1448,724,0,4303,4366,1,0,0,0,4304,4305,3,528,264,0,4305,4306,5,6,0,0,
		4306,4307,3,1420,710,0,4307,4366,1,0,0,0,4308,4309,3,522,261,0,4309,4310,
		5,6,0,0,4310,4311,3,1446,723,0,4311,4366,1,0,0,0,4312,4313,3,524,262,0,
		4313,4314,5,6,0,0,4314,4315,3,1448,724,0,4315,4366,1,0,0,0,4316,4317,3,
		536,268,0,4317,4318,5,6,0,0,4318,4319,3,1448,724,0,4319,4366,1,0,0,0,4320,
		4321,3,538,269,0,4321,4322,5,6,0,0,4322,4323,3,1420,710,0,4323,4366,1,
		0,0,0,4324,4325,3,540,270,0,4325,4326,5,6,0,0,4326,4327,3,1420,710,0,4327,
		4366,1,0,0,0,4328,4329,5,265,0,0,4329,4330,5,6,0,0,4330,4366,3,560,280,
		0,4331,4332,3,542,271,0,4332,4333,5,6,0,0,4333,4334,3,1440,720,0,4334,
		4366,1,0,0,0,4335,4336,3,544,272,0,4336,4337,5,6,0,0,4337,4338,3,1420,
		710,0,4338,4366,1,0,0,0,4339,4340,3,496,248,0,4340,4341,5,6,0,0,4341,4342,
		3,1420,710,0,4342,4366,1,0,0,0,4343,4344,5,745,0,0,4344,4345,5,6,0,0,4345,
		4366,3,546,273,0,4346,4347,5,747,0,0,4347,4348,5,6,0,0,4348,4366,3,1420,
		710,0,4349,4350,5,750,0,0,4350,4351,5,6,0,0,4351,4366,3,548,274,0,4352,
		4353,4,247,44,0,4353,4354,5,759,0,0,4354,4355,5,6,0,0,4355,4366,3,1422,
		711,0,4356,4357,4,247,45,0,4357,4358,5,764,0,0,4358,4359,5,6,0,0,4359,
		4366,3,550,275,0,4360,4361,4,247,46,0,4361,4362,5,802,0,0,4362,4363,5,
		6,0,0,4363,4366,3,1422,711,0,4364,4366,3,554,277,0,4365,4237,1,0,0,0,4365,
		4241,1,0,0,0,4365,4244,1,0,0,0,4365,4248,1,0,0,0,4365,4252,1,0,0,0,4365,
		4256,1,0,0,0,4365,4260,1,0,0,0,4365,4264,1,0,0,0,4365,4268,1,0,0,0,4365,
		4272,1,0,0,0,4365,4276,1,0,0,0,4365,4280,1,0,0,0,4365,4284,1,0,0,0,4365,
		4288,1,0,0,0,4365,4292,1,0,0,0,4365,4296,1,0,0,0,4365,4300,1,0,0,0,4365,
		4304,1,0,0,0,4365,4308,1,0,0,0,4365,4312,1,0,0,0,4365,4316,1,0,0,0,4365,
		4320,1,0,0,0,4365,4324,1,0,0,0,4365,4328,1,0,0,0,4365,4331,1,0,0,0,4365,
		4335,1,0,0,0,4365,4339,1,0,0,0,4365,4343,1,0,0,0,4365,4346,1,0,0,0,4365,
		4349,1,0,0,0,4365,4352,1,0,0,0,4365,4356,1,0,0,0,4365,4360,1,0,0,0,4365,
		4364,1,0,0,0,4366,495,1,0,0,0,4367,4368,7,47,0,0,4368,497,1,0,0,0,4369,
		4370,7,48,0,0,4370,499,1,0,0,0,4371,4372,7,49,0,0,4372,501,1,0,0,0,4373,
		4374,7,50,0,0,4374,503,1,0,0,0,4375,4376,7,51,0,0,4376,505,1,0,0,0,4377,
		4378,7,52,0,0,4378,507,1,0,0,0,4379,4380,7,53,0,0,4380,509,1,0,0,0,4381,
		4382,7,54,0,0,4382,511,1,0,0,0,4383,4384,7,55,0,0,4384,513,1,0,0,0,4385,
		4386,7,56,0,0,4386,515,1,0,0,0,4387,4388,7,57,0,0,4388,517,1,0,0,0,4389,
		4390,7,58,0,0,4390,519,1,0,0,0,4391,4392,7,59,0,0,4392,521,1,0,0,0,4393,
		4394,7,60,0,0,4394,523,1,0,0,0,4395,4396,7,61,0,0,4396,525,1,0,0,0,4397,
		4398,7,62,0,0,4398,527,1,0,0,0,4399,4400,7,63,0,0,4400,529,1,0,0,0,4401,
		4402,7,64,0,0,4402,531,1,0,0,0,4403,4404,7,65,0,0,4404,533,1,0,0,0,4405,
		4406,7,66,0,0,4406,535,1,0,0,0,4407,4408,7,67,0,0,4408,537,1,0,0,0,4409,
		4410,7,68,0,0,4410,539,1,0,0,0,4411,4412,7,69,0,0,4412,541,1,0,0,0,4413,
		4414,7,70,0,0,4414,543,1,0,0,0,4415,4416,7,71,0,0,4416,545,1,0,0,0,4417,
		4420,3,1306,653,0,4418,4420,5,395,0,0,4419,4417,1,0,0,0,4419,4418,1,0,
		0,0,4420,547,1,0,0,0,4421,4422,7,72,0,0,4422,549,1,0,0,0,4423,4427,5,752,
		0,0,4424,4427,5,312,0,0,4425,4427,3,1440,720,0,4426,4423,1,0,0,0,4426,
		4424,1,0,0,0,4426,4425,1,0,0,0,4427,551,1,0,0,0,4428,4431,3,1448,724,0,
		4429,4431,5,395,0,0,4430,4428,1,0,0,0,4430,4429,1,0,0,0,4431,553,1,0,0,
		0,4432,4433,3,556,278,0,4433,4434,5,6,0,0,4434,4435,3,1448,724,0,4435,
		4447,1,0,0,0,4436,4437,3,558,279,0,4437,4438,5,6,0,0,4438,4439,3,1424,
		712,0,4439,4447,1,0,0,0,4440,4441,5,464,0,0,4441,4442,5,6,0,0,4442,4447,
		3,1448,724,0,4443,4444,5,465,0,0,4444,4445,5,6,0,0,4445,4447,3,1420,710,
		0,4446,4432,1,0,0,0,4446,4436,1,0,0,0,4446,4440,1,0,0,0,4446,4443,1,0,
		0,0,4447,555,1,0,0,0,4448,4449,7,73,0,0,4449,557,1,0,0,0,4450,4451,7,74,
		0,0,4451,559,1,0,0,0,4452,4461,5,32,0,0,4453,4458,3,1420,710,0,4454,4455,
		5,29,0,0,4455,4457,3,1420,710,0,4456,4454,1,0,0,0,4457,4460,1,0,0,0,4458,
		4456,1,0,0,0,4458,4459,1,0,0,0,4459,4462,1,0,0,0,4460,4458,1,0,0,0,4461,
		4453,1,0,0,0,4461,4462,1,0,0,0,4462,4463,1,0,0,0,4463,4464,5,33,0,0,4464,
		561,1,0,0,0,4465,4466,5,99,0,0,4466,4467,5,476,0,0,4467,4468,5,224,0,0,
		4468,4473,3,564,282,0,4469,4470,5,29,0,0,4470,4472,3,564,282,0,4471,4469,
		1,0,0,0,4472,4475,1,0,0,0,4473,4471,1,0,0,0,4473,4474,1,0,0,0,4474,4477,
		1,0,0,0,4475,4473,1,0,0,0,4476,4478,3,1032,516,0,4477,4476,1,0,0,0,4477,
		4478,1,0,0,0,4478,563,1,0,0,0,4479,4480,5,477,0,0,4480,4481,5,6,0,0,4481,
		4483,5,32,0,0,4482,4484,3,566,283,0,4483,4482,1,0,0,0,4483,4484,1,0,0,
		0,4484,4485,1,0,0,0,4485,4529,5,33,0,0,4486,4487,5,478,0,0,4487,4488,5,
		6,0,0,4488,4490,5,32,0,0,4489,4491,3,566,283,0,4490,4489,1,0,0,0,4490,
		4491,1,0,0,0,4491,4492,1,0,0,0,4492,4529,5,33,0,0,4493,4494,5,479,0,0,
		4494,4495,5,6,0,0,4495,4497,5,32,0,0,4496,4498,3,568,284,0,4497,4496,1,
		0,0,0,4497,4498,1,0,0,0,4498,4499,1,0,0,0,4499,4529,5,33,0,0,4500,4501,
		5,480,0,0,4501,4502,5,6,0,0,4502,4504,5,32,0,0,4503,4505,3,568,284,0,4504,
		4503,1,0,0,0,4504,4505,1,0,0,0,4505,4506,1,0,0,0,4506,4529,5,33,0,0,4507,
		4508,5,481,0,0,4508,4509,5,6,0,0,4509,4511,5,32,0,0,4510,4512,3,570,285,
		0,4511,4510,1,0,0,0,4511,4512,1,0,0,0,4512,4513,1,0,0,0,4513,4529,5,33,
		0,0,4514,4515,5,482,0,0,4515,4516,5,6,0,0,4516,4518,5,32,0,0,4517,4519,
		3,570,285,0,4518,4517,1,0,0,0,4518,4519,1,0,0,0,4519,4520,1,0,0,0,4520,
		4529,5,33,0,0,4521,4522,5,483,0,0,4522,4523,5,6,0,0,4523,4525,5,32,0,0,
		4524,4526,3,574,287,0,4525,4524,1,0,0,0,4525,4526,1,0,0,0,4526,4527,1,
		0,0,0,4527,4529,5,33,0,0,4528,4479,1,0,0,0,4528,4486,1,0,0,0,4528,4493,
		1,0,0,0,4528,4500,1,0,0,0,4528,4507,1,0,0,0,4528,4514,1,0,0,0,4528,4521,
		1,0,0,0,4529,565,1,0,0,0,4530,4535,3,1340,670,0,4531,4532,5,29,0,0,4532,
		4534,3,1340,670,0,4533,4531,1,0,0,0,4534,4537,1,0,0,0,4535,4533,1,0,0,
		0,4535,4536,1,0,0,0,4536,567,1,0,0,0,4537,4535,1,0,0,0,4538,4543,3,1380,
		690,0,4539,4540,5,29,0,0,4540,4542,3,1380,690,0,4541,4539,1,0,0,0,4542,
		4545,1,0,0,0,4543,4541,1,0,0,0,4543,4544,1,0,0,0,4544,569,1,0,0,0,4545,
		4543,1,0,0,0,4546,4551,3,572,286,0,4547,4548,5,29,0,0,4548,4550,3,572,
		286,0,4549,4547,1,0,0,0,4550,4553,1,0,0,0,4551,4549,1,0,0,0,4551,4552,
		1,0,0,0,4552,571,1,0,0,0,4553,4551,1,0,0,0,4554,4555,3,1448,724,0,4555,
		573,1,0,0,0,4556,4561,3,1254,627,0,4557,4558,5,29,0,0,4558,4560,3,1254,
		627,0,4559,4557,1,0,0,0,4560,4563,1,0,0,0,4561,4559,1,0,0,0,4561,4562,
		1,0,0,0,4562,575,1,0,0,0,4563,4561,1,0,0,0,4564,4565,5,553,0,0,4565,4567,
		3,606,303,0,4566,4568,3,590,295,0,4567,4566,1,0,0,0,4567,4568,1,0,0,0,
		4568,4571,1,0,0,0,4569,4570,5,622,0,0,4570,4572,3,580,290,0,4571,4569,
		1,0,0,0,4571,4572,1,0,0,0,4572,4574,1,0,0,0,4573,4575,3,582,291,0,4574,
		4573,1,0,0,0,4574,4575,1,0,0,0,4575,4577,1,0,0,0,4576,4578,3,584,292,0,
		4577,4576,1,0,0,0,4577,4578,1,0,0,0,4578,4580,1,0,0,0,4579,4581,3,586,
		293,0,4580,4579,1,0,0,0,4580,4581,1,0,0,0,4581,4583,1,0,0,0,4582,4584,
		3,588,294,0,4583,4582,1,0,0,0,4583,4584,1,0,0,0,4584,4586,1,0,0,0,4585,
		4587,3,1032,516,0,4586,4585,1,0,0,0,4586,4587,1,0,0,0,4587,577,1,0,0,0,
		4588,4589,5,562,0,0,4589,4591,3,606,303,0,4590,4592,3,590,295,0,4591,4590,
		1,0,0,0,4591,4592,1,0,0,0,4592,4594,1,0,0,0,4593,4595,3,1032,516,0,4594,
		4593,1,0,0,0,4594,4595,1,0,0,0,4595,579,1,0,0,0,4596,4602,3,554,277,0,
		4597,4598,7,75,0,0,4598,4599,5,6,0,0,4599,4602,3,1442,721,0,4600,4602,
		5,540,0,0,4601,4596,1,0,0,0,4601,4597,1,0,0,0,4601,4600,1,0,0,0,4602,4607,
		1,0,0,0,4603,4604,5,29,0,0,4604,4606,3,554,277,0,4605,4603,1,0,0,0,4606,
		4609,1,0,0,0,4607,4605,1,0,0,0,4607,4608,1,0,0,0,4608,581,1,0,0,0,4609,
		4607,1,0,0,0,4610,4611,5,627,0,0,4611,4612,5,6,0,0,4612,4613,3,1442,721,
		0,4613,583,1,0,0,0,4614,4615,5,424,0,0,4615,4616,5,6,0,0,4616,4617,3,1442,
		721,0,4617,585,1,0,0,0,4618,4619,5,167,0,0,4619,4620,5,6,0,0,4620,4621,
		3,1442,721,0,4621,587,1,0,0,0,4622,4623,5,427,0,0,4623,4624,5,6,0,0,4624,
		4625,3,1442,721,0,4625,589,1,0,0,0,4626,4631,3,592,296,0,4627,4628,5,29,
		0,0,4628,4630,3,592,296,0,4629,4627,1,0,0,0,4630,4633,1,0,0,0,4631,4629,
		1,0,0,0,4631,4632,1,0,0,0,4632,591,1,0,0,0,4633,4631,1,0,0,0,4634,4635,
		7,76,0,0,4635,593,1,0,0,0,4636,4638,5,553,0,0,4637,4639,3,596,298,0,4638,
		4637,1,0,0,0,4638,4639,1,0,0,0,4639,4642,1,0,0,0,4640,4642,5,562,0,0,4641,
		4636,1,0,0,0,4641,4640,1,0,0,0,4642,4643,1,0,0,0,4643,4644,5,242,0,0,4644,
		595,1,0,0,0,4645,4650,3,598,299,0,4646,4647,5,29,0,0,4647,4649,3,598,299,
		0,4648,4646,1,0,0,0,4649,4652,1,0,0,0,4650,4648,1,0,0,0,4650,4651,1,0,
		0,0,4651,597,1,0,0,0,4652,4650,1,0,0,0,4653,4657,3,600,300,0,4654,4657,
		3,602,301,0,4655,4657,3,604,302,0,4656,4653,1,0,0,0,4656,4654,1,0,0,0,
		4656,4655,1,0,0,0,4657,599,1,0,0,0,4658,4659,5,627,0,0,4659,4660,5,6,0,
		0,4660,4661,3,1448,724,0,4661,601,1,0,0,0,4662,4663,5,424,0,0,4663,4664,
		5,6,0,0,4664,4665,3,1448,724,0,4665,603,1,0,0,0,4666,4667,5,167,0,0,4667,
		4668,5,6,0,0,4668,4669,3,1448,724,0,4669,605,1,0,0,0,4670,4671,7,77,0,
		0,4671,607,1,0,0,0,4672,4673,5,435,0,0,4673,4674,3,1408,704,0,4674,4677,
		5,235,0,0,4675,4678,3,1446,723,0,4676,4678,3,988,494,0,4677,4675,1,0,0,
		0,4677,4676,1,0,0,0,4678,4684,1,0,0,0,4679,4684,3,610,305,0,4680,4681,
		7,78,0,0,4681,4682,5,435,0,0,4682,4684,3,1408,704,0,4683,4672,1,0,0,0,
		4683,4679,1,0,0,0,4683,4680,1,0,0,0,4684,609,1,0,0,0,4685,4686,5,208,0,
		0,4686,4689,3,1408,704,0,4687,4688,5,630,0,0,4688,4690,3,612,306,0,4689,
		4687,1,0,0,0,4689,4690,1,0,0,0,4690,611,1,0,0,0,4691,4696,3,988,494,0,
		4692,4693,5,29,0,0,4693,4695,3,988,494,0,4694,4692,1,0,0,0,4695,4698,1,
		0,0,0,4696,4694,1,0,0,0,4696,4697,1,0,0,0,4697,613,1,0,0,0,4698,4696,1,
		0,0,0,4699,4724,5,685,0,0,4700,4701,5,312,0,0,4701,4702,5,153,0,0,4702,
		4704,5,176,0,0,4703,4705,3,1478,739,0,4704,4703,1,0,0,0,4704,4705,1,0,
		0,0,4705,4706,1,0,0,0,4706,4725,3,1440,720,0,4707,4710,5,684,0,0,4708,
		4709,5,232,0,0,4709,4711,5,476,0,0,4710,4708,1,0,0,0,4710,4711,1,0,0,0,
		4711,4725,1,0,0,0,4712,4713,4,307,47,0,4713,4714,5,276,0,0,4714,4715,5,
		235,0,0,4715,4716,3,1308,654,0,4716,4717,5,31,0,0,4717,4718,3,1420,710,
		0,4718,4719,5,262,0,0,4719,4720,5,89,0,0,4720,4722,3,1440,720,0,4721,4723,
		3,616,308,0,4722,4721,1,0,0,0,4722,4723,1,0,0,0,4723,4725,1,0,0,0,4724,
		4700,1,0,0,0,4724,4707,1,0,0,0,4724,4712,1,0,0,0,4725,615,1,0,0,0,4726,
		4737,3,618,309,0,4727,4728,5,153,0,0,4728,4730,5,176,0,0,4729,4731,3,1478,
		739,0,4730,4729,1,0,0,0,4730,4731,1,0,0,0,4731,4732,1,0,0,0,4732,4734,
		3,1440,720,0,4733,4735,3,618,309,0,4734,4733,1,0,0,0,4734,4735,1,0,0,0,
		4735,4737,1,0,0,0,4736,4726,1,0,0,0,4736,4727,1,0,0,0,4737,617,1,0,0,0,
		4738,4740,5,484,0,0,4739,4741,5,392,0,0,4740,4739,1,0,0,0,4740,4741,1,
		0,0,0,4741,4742,1,0,0,0,4742,4743,5,549,0,0,4743,619,1,0,0,0,4744,4752,
		3,622,311,0,4745,4752,3,632,316,0,4746,4752,3,648,324,0,4747,4752,3,650,
		325,0,4748,4752,3,664,332,0,4749,4752,3,666,333,0,4750,4752,3,682,341,
		0,4751,4744,1,0,0,0,4751,4745,1,0,0,0,4751,4746,1,0,0,0,4751,4747,1,0,
		0,0,4751,4748,1,0,0,0,4751,4749,1,0,0,0,4751,4750,1,0,0,0,4752,621,1,0,
		0,0,4753,4754,5,58,0,0,4754,4756,5,627,0,0,4755,4757,3,1236,618,0,4756,
		4755,1,0,0,0,4756,4757,1,0,0,0,4757,4798,1,0,0,0,4758,4759,4,311,48,0,
		4759,4763,3,1274,637,0,4760,4761,4,311,49,0,4761,4763,3,624,312,0,4762,
		4758,1,0,0,0,4762,4760,1,0,0,0,4763,4764,1,0,0,0,4764,4765,3,634,317,0,
		4765,4799,1,0,0,0,4766,4783,3,630,315,0,4767,4770,3,1284,642,0,4768,4770,
		3,1282,641,0,4769,4767,1,0,0,0,4769,4768,1,0,0,0,4770,4772,1,0,0,0,4771,
		4773,3,1304,652,0,4772,4771,1,0,0,0,4772,4773,1,0,0,0,4773,4775,1,0,0,
		0,4774,4776,3,1296,648,0,4775,4774,1,0,0,0,4775,4776,1,0,0,0,4776,4784,
		1,0,0,0,4777,4778,5,178,0,0,4778,4779,5,736,0,0,4779,4784,5,424,0,0,4780,
		4782,3,1300,650,0,4781,4780,1,0,0,0,4781,4782,1,0,0,0,4782,4784,1,0,0,
		0,4783,4769,1,0,0,0,4783,4777,1,0,0,0,4783,4781,1,0,0,0,4784,4799,1,0,
		0,0,4785,4796,3,1308,654,0,4786,4787,5,166,0,0,4787,4791,5,667,0,0,4788,
		4792,5,57,0,0,4789,4792,5,389,0,0,4790,4792,3,684,342,0,4791,4788,1,0,
		0,0,4791,4789,1,0,0,0,4791,4790,1,0,0,0,4792,4797,1,0,0,0,4793,4795,3,
		1300,650,0,4794,4793,1,0,0,0,4794,4795,1,0,0,0,4795,4797,1,0,0,0,4796,
		4786,1,0,0,0,4796,4794,1,0,0,0,4797,4799,1,0,0,0,4798,4762,1,0,0,0,4798,
		4766,1,0,0,0,4798,4785,1,0,0,0,4799,623,1,0,0,0,4800,4805,3,626,313,0,
		4801,4802,5,29,0,0,4802,4804,3,626,313,0,4803,4801,1,0,0,0,4804,4807,1,
		0,0,0,4805,4803,1,0,0,0,4805,4806,1,0,0,0,4806,625,1,0,0,0,4807,4805,1,
		0,0,0,4808,4809,4,313,50,0,4809,4884,3,628,314,0,4810,4811,4,313,51,0,
		4811,4881,3,1308,654,0,4812,4821,3,1282,641,0,4813,4814,5,475,0,0,4814,
		4816,3,1440,720,0,4815,4817,3,1296,648,0,4816,4815,1,0,0,0,4816,4817,1,
		0,0,0,4817,4822,1,0,0,0,4818,4820,3,1296,648,0,4819,4818,1,0,0,0,4819,
		4820,1,0,0,0,4820,4822,1,0,0,0,4821,4813,1,0,0,0,4821,4819,1,0,0,0,4822,
		4882,1,0,0,0,4823,4832,3,1284,642,0,4824,4826,3,1296,648,0,4825,4824,1,
		0,0,0,4825,4826,1,0,0,0,4826,4833,1,0,0,0,4827,4828,5,475,0,0,4828,4830,
		3,1440,720,0,4829,4831,3,1296,648,0,4830,4829,1,0,0,0,4830,4831,1,0,0,
		0,4831,4833,1,0,0,0,4832,4825,1,0,0,0,4832,4827,1,0,0,0,4833,4882,1,0,
		0,0,4834,4882,3,1286,643,0,4835,4837,3,1288,644,0,4836,4838,3,1296,648,
		0,4837,4836,1,0,0,0,4837,4838,1,0,0,0,4838,4882,1,0,0,0,4839,4848,3,1290,
		645,0,4840,4841,5,475,0,0,4841,4843,3,1440,720,0,4842,4844,3,1296,648,
		0,4843,4842,1,0,0,0,4843,4844,1,0,0,0,4844,4849,1,0,0,0,4845,4847,3,1296,
		648,0,4846,4845,1,0,0,0,4846,4847,1,0,0,0,4847,4849,1,0,0,0,4848,4840,
		1,0,0,0,4848,4846,1,0,0,0,4849,4882,1,0,0,0,4850,4852,3,1292,646,0,4851,
		4853,3,1296,648,0,4852,4851,1,0,0,0,4852,4853,1,0,0,0,4853,4882,1,0,0,
		0,4854,4856,3,1298,649,0,4855,4854,1,0,0,0,4855,4856,1,0,0,0,4856,4882,
		1,0,0,0,4857,4858,5,51,0,0,4858,4859,3,1302,651,0,4859,4864,3,1280,640,
		0,4860,4861,5,51,0,0,4861,4862,3,1302,651,0,4862,4863,3,1280,640,0,4863,
		4865,1,0,0,0,4864,4860,1,0,0,0,4864,4865,1,0,0,0,4865,4882,1,0,0,0,4866,
		4867,5,371,0,0,4867,4868,3,1302,651,0,4868,4873,3,1280,640,0,4869,4870,
		5,371,0,0,4870,4871,3,1302,651,0,4871,4872,3,1280,640,0,4872,4874,1,0,
		0,0,4873,4869,1,0,0,0,4873,4874,1,0,0,0,4874,4882,1,0,0,0,4875,4876,5,
		184,0,0,4876,4879,3,1302,651,0,4877,4878,5,184,0,0,4878,4880,3,1302,651,
		0,4879,4877,1,0,0,0,4879,4880,1,0,0,0,4880,4882,1,0,0,0,4881,4812,1,0,
		0,0,4881,4823,1,0,0,0,4881,4834,1,0,0,0,4881,4835,1,0,0,0,4881,4839,1,
		0,0,0,4881,4850,1,0,0,0,4881,4855,1,0,0,0,4881,4857,1,0,0,0,4881,4866,
		1,0,0,0,4881,4875,1,0,0,0,4882,4884,1,0,0,0,4883,4808,1,0,0,0,4883,4810,
		1,0,0,0,4884,627,1,0,0,0,4885,4886,3,1308,654,0,4886,4887,5,262,0,0,4887,
		4907,5,89,0,0,4888,4889,3,1442,721,0,4889,4890,5,475,0,0,4890,4892,3,1442,
		721,0,4891,4893,3,1296,648,0,4892,4891,1,0,0,0,4892,4893,1,0,0,0,4893,
		4908,1,0,0,0,4894,4896,3,1442,721,0,4895,4897,3,1296,648,0,4896,4895,1,
		0,0,0,4896,4897,1,0,0,0,4897,4908,1,0,0,0,4898,4899,5,742,0,0,4899,4902,
		5,424,0,0,4900,4901,5,475,0,0,4901,4903,3,1442,721,0,4902,4900,1,0,0,0,
		4902,4903,1,0,0,0,4903,4905,1,0,0,0,4904,4906,3,1296,648,0,4905,4904,1,
		0,0,0,4905,4906,1,0,0,0,4906,4908,1,0,0,0,4907,4888,1,0,0,0,4907,4894,
		1,0,0,0,4907,4898,1,0,0,0,4908,4943,1,0,0,0,4909,4910,3,1308,654,0,4910,
		4911,5,262,0,0,4911,4912,5,653,0,0,4912,4936,3,1468,734,0,4913,4914,5,
		89,0,0,4914,4915,3,1442,721,0,4915,4916,5,475,0,0,4916,4918,3,1442,721,
		0,4917,4919,3,1296,648,0,4918,4917,1,0,0,0,4918,4919,1,0,0,0,4919,4937,
		1,0,0,0,4920,4921,5,63,0,0,4921,4923,3,1444,722,0,4922,4924,3,1296,648,
		0,4923,4922,1,0,0,0,4923,4924,1,0,0,0,4924,4937,1,0,0,0,4925,4926,5,89,
		0,0,4926,4928,3,1442,721,0,4927,4929,3,1296,648,0,4928,4927,1,0,0,0,4928,
		4929,1,0,0,0,4929,4937,1,0,0,0,4930,4931,5,89,0,0,4931,4932,5,742,0,0,
		4932,4934,5,424,0,0,4933,4935,3,1296,648,0,4934,4933,1,0,0,0,4934,4935,
		1,0,0,0,4935,4937,1,0,0,0,4936,4913,1,0,0,0,4936,4920,1,0,0,0,4936,4925,
		1,0,0,0,4936,4930,1,0,0,0,4936,4937,1,0,0,0,4937,4943,1,0,0,0,4938,4940,
		3,1308,654,0,4939,4941,3,1298,649,0,4940,4939,1,0,0,0,4940,4941,1,0,0,
		0,4941,4943,1,0,0,0,4942,4885,1,0,0,0,4942,4909,1,0,0,0,4942,4938,1,0,
		0,0,4943,629,1,0,0,0,4944,4945,5,627,0,0,4945,4946,3,1476,738,0,4946,631,
		1,0,0,0,4947,4948,5,139,0,0,4948,4950,5,627,0,0,4949,4951,3,1242,621,0,
		4950,4949,1,0,0,0,4950,4951,1,0,0,0,4951,4952,1,0,0,0,4952,4954,3,1274,
		637,0,4953,4955,3,638,319,0,4954,4953,1,0,0,0,4954,4955,1,0,0,0,4955,4956,
		1,0,0,0,4956,4957,3,634,317,0,4957,633,1,0,0,0,4958,4960,3,640,320,0,4959,
		4958,1,0,0,0,4959,4960,1,0,0,0,4960,4962,1,0,0,0,4961,4963,3,642,321,0,
		4962,4961,1,0,0,0,4962,4963,1,0,0,0,4963,4967,1,0,0,0,4964,4966,3,644,
		322,0,4965,4964,1,0,0,0,4966,4969,1,0,0,0,4967,4965,1,0,0,0,4967,4968,
		1,0,0,0,4968,4972,1,0,0,0,4969,4967,1,0,0,0,4970,4971,4,317,52,0,4971,
		4973,3,636,318,0,4972,4970,1,0,0,0,4972,4973,1,0,0,0,4973,635,1,0,0,0,
		4974,4975,5,756,0,0,4975,4979,3,1440,720,0,4976,4977,5,118,0,0,4977,4979,
		3,1440,720,0,4978,4974,1,0,0,0,4978,4976,1,0,0,0,4979,637,1,0,0,0,4980,
		4981,5,166,0,0,4981,4982,5,667,0,0,4982,4983,3,684,342,0,4983,639,1,0,
		0,0,4984,4987,5,484,0,0,4985,4988,3,676,338,0,4986,4988,7,79,0,0,4987,
		4985,1,0,0,0,4987,4986,1,0,0,0,4988,641,1,0,0,0,4989,4998,5,653,0,0,4990,
		4991,5,347,0,0,4991,4999,3,1420,710,0,4992,4993,5,351,0,0,4993,4999,3,
		1420,710,0,4994,4995,5,346,0,0,4995,4999,3,1420,710,0,4996,4997,5,352,
		0,0,4997,4999,3,1420,710,0,4998,4990,1,0,0,0,4998,4992,1,0,0,0,4998,4994,
		1,0,0,0,4998,4996,1,0,0,0,4999,5000,1,0,0,0,5000,4998,1,0,0,0,5000,5001,
		1,0,0,0,5001,643,1,0,0,0,5002,5003,5,49,0,0,5003,5043,7,80,0,0,5004,5033,
		5,424,0,0,5005,5012,5,212,0,0,5006,5007,5,278,0,0,5007,5008,3,1422,711,
		0,5008,5009,5,162,0,0,5009,5013,1,0,0,0,5010,5013,5,385,0,0,5011,5013,
		5,166,0,0,5012,5006,1,0,0,0,5012,5010,1,0,0,0,5012,5011,1,0,0,0,5012,5013,
		1,0,0,0,5013,5034,1,0,0,0,5014,5017,5,713,0,0,5015,5018,3,1422,711,0,5016,
		5018,5,166,0,0,5017,5015,1,0,0,0,5017,5016,1,0,0,0,5018,5034,1,0,0,0,5019,
		5020,5,714,0,0,5020,5025,5,278,0,0,5021,5022,3,1422,711,0,5022,5023,5,
		162,0,0,5023,5026,1,0,0,0,5024,5026,5,166,0,0,5025,5021,1,0,0,0,5025,5024,
		1,0,0,0,5026,5034,1,0,0,0,5027,5028,4,322,53,0,5028,5029,5,484,0,0,5029,
		5031,5,143,0,0,5030,5032,7,81,0,0,5031,5030,1,0,0,0,5031,5032,1,0,0,0,
		5032,5034,1,0,0,0,5033,5005,1,0,0,0,5033,5014,1,0,0,0,5033,5019,1,0,0,
		0,5033,5027,1,0,0,0,5034,5043,1,0,0,0,5035,5036,5,749,0,0,5036,5043,3,
		1422,711,0,5037,5040,5,748,0,0,5038,5041,3,1422,711,0,5039,5041,5,706,
		0,0,5040,5038,1,0,0,0,5040,5039,1,0,0,0,5041,5043,1,0,0,0,5042,5002,1,
		0,0,0,5042,5004,1,0,0,0,5042,5035,1,0,0,0,5042,5037,1,0,0,0,5043,645,1,
		0,0,0,5044,5050,1,0,0,0,5045,5046,5,756,0,0,5046,5050,3,1440,720,0,5047,
		5048,5,118,0,0,5048,5050,3,1440,720,0,5049,5044,1,0,0,0,5049,5045,1,0,
		0,0,5049,5047,1,0,0,0,5050,647,1,0,0,0,5051,5052,5,184,0,0,5052,5054,5,
		627,0,0,5053,5055,3,1236,618,0,5054,5053,1,0,0,0,5054,5055,1,0,0,0,5055,
		5056,1,0,0,0,5056,5057,3,1272,636,0,5057,649,1,0,0,0,5058,5100,5,247,0,
		0,5059,5060,3,670,335,0,5060,5061,5,599,0,0,5061,5065,3,1272,636,0,5062,
		5063,5,653,0,0,5063,5064,5,668,0,0,5064,5066,5,409,0,0,5065,5062,1,0,0,
		0,5065,5066,1,0,0,0,5066,5101,1,0,0,0,5067,5073,3,670,335,0,5068,5070,
		5,57,0,0,5069,5071,5,439,0,0,5070,5069,1,0,0,0,5070,5071,1,0,0,0,5071,
		5073,1,0,0,0,5072,5067,1,0,0,0,5072,5068,1,0,0,0,5073,5074,1,0,0,0,5074,
		5076,5,401,0,0,5075,5077,3,668,334,0,5076,5075,1,0,0,0,5076,5077,1,0,0,
		0,5077,5078,1,0,0,0,5078,5079,3,674,337,0,5079,5080,5,599,0,0,5080,5082,
		3,652,326,0,5081,5083,3,662,331,0,5082,5081,1,0,0,0,5082,5083,1,0,0,0,
		5083,5085,1,0,0,0,5084,5086,3,654,327,0,5085,5084,1,0,0,0,5085,5086,1,
		0,0,0,5086,5088,1,0,0,0,5087,5089,3,660,330,0,5088,5087,1,0,0,0,5088,5089,
		1,0,0,0,5089,5101,1,0,0,0,5090,5091,5,445,0,0,5091,5092,5,401,0,0,5092,
		5093,3,1308,654,0,5093,5094,5,599,0,0,5094,5098,3,652,326,0,5095,5096,
		5,653,0,0,5096,5097,5,247,0,0,5097,5099,5,409,0,0,5098,5095,1,0,0,0,5098,
		5099,1,0,0,0,5099,5101,1,0,0,0,5100,5059,1,0,0,0,5100,5072,1,0,0,0,5100,
		5090,1,0,0,0,5101,651,1,0,0,0,5102,5103,4,326,54,0,5103,5107,3,1274,637,
		0,5104,5105,4,326,55,0,5105,5107,3,1272,636,0,5106,5102,1,0,0,0,5106,5104,
		1,0,0,0,5107,653,1,0,0,0,5108,5109,5,653,0,0,5109,5110,3,680,340,0,5110,
		655,1,0,0,0,5111,5112,5,671,0,0,5112,5113,3,684,342,0,5113,657,1,0,0,0,
		5114,5115,5,653,0,0,5115,5123,5,667,0,0,5116,5124,3,684,342,0,5117,5119,
		5,57,0,0,5118,5120,3,656,328,0,5119,5118,1,0,0,0,5119,5120,1,0,0,0,5120,
		5124,1,0,0,0,5121,5124,5,389,0,0,5122,5124,5,166,0,0,5123,5116,1,0,0,0,
		5123,5117,1,0,0,0,5123,5121,1,0,0,0,5123,5122,1,0,0,0,5124,659,1,0,0,0,
		5125,5126,5,63,0,0,5126,5128,5,627,0,0,5127,5129,3,658,329,0,5128,5127,
		1,0,0,0,5128,5129,1,0,0,0,5129,661,1,0,0,0,5130,5131,4,331,56,0,5131,5132,
		3,640,320,0,5132,663,1,0,0,0,5133,5134,5,470,0,0,5134,5135,5,627,0,0,5135,
		5136,3,1308,654,0,5136,5137,5,599,0,0,5137,5145,3,1308,654,0,5138,5139,
		5,29,0,0,5139,5140,3,1308,654,0,5140,5141,5,599,0,0,5141,5142,3,1308,654,
		0,5142,5144,1,0,0,0,5143,5138,1,0,0,0,5144,5147,1,0,0,0,5145,5143,1,0,
		0,0,5145,5146,1,0,0,0,5146,665,1,0,0,0,5147,5145,1,0,0,0,5148,5151,5,494,
		0,0,5149,5150,4,333,57,0,5150,5152,3,1236,618,0,5151,5149,1,0,0,0,5151,
		5152,1,0,0,0,5152,5188,1,0,0,0,5153,5154,3,670,335,0,5154,5155,5,235,0,
		0,5155,5156,3,1272,636,0,5156,5189,1,0,0,0,5157,5158,3,670,335,0,5158,
		5160,5,401,0,0,5159,5161,3,668,334,0,5160,5159,1,0,0,0,5160,5161,1,0,0,
		0,5161,5162,1,0,0,0,5162,5163,3,674,337,0,5163,5164,5,235,0,0,5164,5165,
		3,1272,636,0,5165,5189,1,0,0,0,5166,5168,5,57,0,0,5167,5169,5,439,0,0,
		5168,5167,1,0,0,0,5168,5169,1,0,0,0,5169,5178,1,0,0,0,5170,5172,5,401,
		0,0,5171,5173,3,668,334,0,5172,5171,1,0,0,0,5172,5173,1,0,0,0,5173,5174,
		1,0,0,0,5174,5179,3,674,337,0,5175,5176,5,29,0,0,5176,5177,5,247,0,0,5177,
		5179,5,409,0,0,5178,5170,1,0,0,0,5178,5175,1,0,0,0,5179,5180,1,0,0,0,5180,
		5181,5,235,0,0,5181,5189,3,1272,636,0,5182,5183,5,445,0,0,5183,5184,5,
		401,0,0,5184,5185,3,1308,654,0,5185,5186,5,235,0,0,5186,5187,3,1272,636,
		0,5187,5189,1,0,0,0,5188,5153,1,0,0,0,5188,5157,1,0,0,0,5188,5166,1,0,
		0,0,5188,5182,1,0,0,0,5189,5192,1,0,0,0,5190,5191,4,333,58,0,5191,5193,
		3,1244,622,0,5192,5190,1,0,0,0,5192,5193,1,0,0,0,5193,667,1,0,0,0,5194,
		5195,7,82,0,0,5195,669,1,0,0,0,5196,5201,3,672,336,0,5197,5198,5,29,0,
		0,5198,5200,3,672,336,0,5199,5197,1,0,0,0,5200,5203,1,0,0,0,5201,5199,
		1,0,0,0,5201,5202,1,0,0,0,5202,671,1,0,0,0,5203,5201,1,0,0,0,5204,5206,
		3,1472,736,0,5205,5207,3,1326,663,0,5206,5205,1,0,0,0,5206,5207,1,0,0,
		0,5207,5215,1,0,0,0,5208,5212,3,1472,736,0,5209,5213,5,40,0,0,5210,5211,
		5,39,0,0,5211,5213,3,1468,734,0,5212,5209,1,0,0,0,5212,5210,1,0,0,0,5213,
		5215,1,0,0,0,5214,5204,1,0,0,0,5214,5208,1,0,0,0,5215,5247,1,0,0,0,5216,
		5218,7,83,0,0,5217,5219,3,1326,663,0,5218,5217,1,0,0,0,5218,5219,1,0,0,
		0,5219,5247,1,0,0,0,5220,5247,7,84,0,0,5221,5222,5,247,0,0,5222,5247,5,
		409,0,0,5223,5224,5,521,0,0,5224,5247,5,151,0,0,5225,5229,5,139,0,0,5226,
		5227,5,586,0,0,5227,5230,5,581,0,0,5228,5230,7,85,0,0,5229,5226,1,0,0,
		0,5229,5228,1,0,0,0,5229,5230,1,0,0,0,5230,5247,1,0,0,0,5231,5232,5,314,
		0,0,5232,5247,5,581,0,0,5233,5236,5,476,0,0,5234,5237,5,108,0,0,5235,5237,
		3,606,303,0,5236,5234,1,0,0,0,5236,5235,1,0,0,0,5237,5247,1,0,0,0,5238,
		5239,5,521,0,0,5239,5247,5,644,0,0,5240,5242,5,58,0,0,5241,5243,5,499,
		0,0,5242,5241,1,0,0,0,5242,5243,1,0,0,0,5243,5247,1,0,0,0,5244,5245,7,
		86,0,0,5245,5247,5,667,0,0,5246,5214,1,0,0,0,5246,5216,1,0,0,0,5246,5220,
		1,0,0,0,5246,5221,1,0,0,0,5246,5223,1,0,0,0,5246,5225,1,0,0,0,5246,5231,
		1,0,0,0,5246,5233,1,0,0,0,5246,5238,1,0,0,0,5246,5240,1,0,0,0,5246,5244,
		1,0,0,0,5247,673,1,0,0,0,5248,5251,5,16,0,0,5249,5250,5,28,0,0,5250,5252,
		5,16,0,0,5251,5249,1,0,0,0,5251,5252,1,0,0,0,5252,5265,1,0,0,0,5253,5256,
		3,1340,670,0,5254,5255,5,28,0,0,5255,5257,5,16,0,0,5256,5254,1,0,0,0,5256,
		5257,1,0,0,0,5257,5265,1,0,0,0,5258,5265,3,1384,692,0,5259,5260,4,337,
		59,0,5260,5261,3,1340,670,0,5261,5262,5,28,0,0,5262,5263,3,1384,692,0,
		5263,5265,1,0,0,0,5264,5248,1,0,0,0,5264,5253,1,0,0,0,5264,5258,1,0,0,
		0,5264,5259,1,0,0,0,5265,675,1,0,0,0,5266,5273,3,678,339,0,5267,5269,5,
		61,0,0,5268,5267,1,0,0,0,5268,5269,1,0,0,0,5269,5270,1,0,0,0,5270,5272,
		3,678,339,0,5271,5268,1,0,0,0,5272,5275,1,0,0,0,5273,5271,1,0,0,0,5273,
		5274,1,0,0,0,5274,677,1,0,0,0,5275,5273,1,0,0,0,5276,5277,5,106,0,0,5277,
		5283,3,1442,721,0,5278,5279,5,289,0,0,5279,5283,3,1442,721,0,5280,5281,
		5,569,0,0,5281,5283,3,1442,721,0,5282,5276,1,0,0,0,5282,5278,1,0,0,0,5282,
		5280,1,0,0,0,5283,679,1,0,0,0,5284,5285,5,247,0,0,5285,5298,5,409,0,0,
		5286,5295,4,340,60,0,5287,5288,5,347,0,0,5288,5296,3,1420,710,0,5289,5290,
		5,351,0,0,5290,5296,3,1420,710,0,5291,5292,5,346,0,0,5292,5296,3,1420,
		710,0,5293,5294,5,352,0,0,5294,5296,3,1420,710,0,5295,5287,1,0,0,0,5295,
		5289,1,0,0,0,5295,5291,1,0,0,0,5295,5293,1,0,0,0,5296,5298,1,0,0,0,5297,
		5284,1,0,0,0,5297,5286,1,0,0,0,5298,681,1,0,0,0,5299,5300,5,519,0,0,5300,
		5301,5,667,0,0,5301,5323,3,684,342,0,5302,5303,5,519,0,0,5303,5304,5,667,
		0,0,5304,5323,7,87,0,0,5305,5306,5,519,0,0,5306,5307,5,166,0,0,5307,5311,
		5,667,0,0,5308,5312,3,684,342,0,5309,5312,5,389,0,0,5310,5312,5,57,0,0,
		5311,5308,1,0,0,0,5311,5309,1,0,0,0,5311,5310,1,0,0,0,5312,5313,1,0,0,
		0,5313,5314,5,599,0,0,5314,5323,3,684,342,0,5315,5316,5,519,0,0,5316,5317,
		5,667,0,0,5317,5320,5,57,0,0,5318,5319,5,671,0,0,5319,5321,3,684,342,0,
		5320,5318,1,0,0,0,5320,5321,1,0,0,0,5321,5323,1,0,0,0,5322,5299,1,0,0,
		0,5322,5302,1,0,0,0,5322,5305,1,0,0,0,5322,5315,1,0,0,0,5323,683,1,0,0,
		0,5324,5329,3,686,343,0,5325,5326,5,29,0,0,5326,5328,3,686,343,0,5327,
		5325,1,0,0,0,5328,5331,1,0,0,0,5329,5327,1,0,0,0,5329,5330,1,0,0,0,5330,
		685,1,0,0,0,5331,5329,1,0,0,0,5332,5334,3,1472,736,0,5333,5335,3,988,494,
		0,5334,5333,1,0,0,0,5334,5335,1,0,0,0,5335,687,1,0,0,0,5336,5338,5,60,
		0,0,5337,5339,3,1316,658,0,5338,5337,1,0,0,0,5338,5339,1,0,0,0,5339,5340,
		1,0,0,0,5340,5341,5,583,0,0,5341,5343,3,1386,693,0,5342,5344,3,696,348,
		0,5343,5342,1,0,0,0,5343,5344,1,0,0,0,5344,5379,1,0,0,0,5345,5346,5,105,
		0,0,5346,5347,5,583,0,0,5347,5351,3,1386,693,0,5348,5350,3,698,349,0,5349,
		5348,1,0,0,0,5350,5353,1,0,0,0,5351,5349,1,0,0,0,5351,5352,1,0,0,0,5352,
		5379,1,0,0,0,5353,5351,1,0,0,0,5354,5355,5,104,0,0,5355,5356,5,583,0,0,
		5356,5358,3,1386,693,0,5357,5359,7,88,0,0,5358,5357,1,0,0,0,5358,5359,
		1,0,0,0,5359,5379,1,0,0,0,5360,5362,5,406,0,0,5361,5363,3,1316,658,0,5362,
		5361,1,0,0,0,5362,5363,1,0,0,0,5363,5364,1,0,0,0,5364,5365,5,583,0,0,5365,
		5379,3,1386,693,0,5366,5368,5,472,0,0,5367,5369,3,1316,658,0,5368,5367,
		1,0,0,0,5368,5369,1,0,0,0,5369,5370,1,0,0,0,5370,5371,5,583,0,0,5371,5375,
		3,1386,693,0,5372,5374,3,700,350,0,5373,5372,1,0,0,0,5374,5377,1,0,0,0,
		5375,5373,1,0,0,0,5375,5376,1,0,0,0,5376,5379,1,0,0,0,5377,5375,1,0,0,
		0,5378,5336,1,0,0,0,5378,5345,1,0,0,0,5378,5354,1,0,0,0,5378,5360,1,0,
		0,0,5378,5366,1,0,0,0,5379,689,1,0,0,0,5380,5381,4,345,61,0,5381,5382,
		7,89,0,0,5382,5383,5,623,0,0,5383,691,1,0,0,0,5384,5386,3,694,347,0,5385,
		5384,1,0,0,0,5385,5386,1,0,0,0,5386,5388,1,0,0,0,5387,5389,3,690,345,0,
		5388,5387,1,0,0,0,5388,5389,1,0,0,0,5389,5395,1,0,0,0,5390,5391,4,346,
		62,0,5391,5392,5,630,0,0,5392,5393,5,153,0,0,5393,5395,3,1440,720,0,5394,
		5385,1,0,0,0,5394,5390,1,0,0,0,5395,693,1,0,0,0,5396,5397,4,347,63,0,5397,
		5398,5,653,0,0,5398,5399,5,3,0,0,5399,5400,5,683,0,0,5400,695,1,0,0,0,
		5401,5402,5,623,0,0,5402,5403,5,682,0,0,5403,5404,5,401,0,0,5404,5405,
		3,1410,705,0,5405,5406,3,692,346,0,5406,5412,1,0,0,0,5407,5408,5,184,0,
		0,5408,5409,5,682,0,0,5409,5410,5,401,0,0,5410,5412,3,1410,705,0,5411,
		5401,1,0,0,0,5411,5407,1,0,0,0,5412,697,1,0,0,0,5413,5414,5,232,0,0,5414,
		5417,5,624,0,0,5415,5417,7,90,0,0,5416,5413,1,0,0,0,5416,5415,1,0,0,0,
		5417,699,1,0,0,0,5418,5419,7,91,0,0,5419,701,1,0,0,0,5420,5432,5,616,0,
		0,5421,5422,5,428,0,0,5422,5433,3,1398,699,0,5423,5424,5,672,0,0,5424,
		5429,3,1400,700,0,5425,5426,5,29,0,0,5426,5428,3,1400,700,0,5427,5425,
		1,0,0,0,5428,5431,1,0,0,0,5429,5427,1,0,0,0,5429,5430,1,0,0,0,5430,5433,
		1,0,0,0,5431,5429,1,0,0,0,5432,5421,1,0,0,0,5432,5423,1,0,0,0,5433,703,
		1,0,0,0,5434,5445,5,277,0,0,5435,5436,5,428,0,0,5436,5437,3,1408,704,0,
		5437,5438,5,531,0,0,5438,5439,3,1440,720,0,5439,5446,1,0,0,0,5440,5441,
		5,672,0,0,5441,5443,3,1450,725,0,5442,5444,3,712,356,0,5443,5442,1,0,0,
		0,5443,5444,1,0,0,0,5444,5446,1,0,0,0,5445,5435,1,0,0,0,5445,5440,1,0,
		0,0,5446,705,1,0,0,0,5447,5448,7,92,0,0,5448,707,1,0,0,0,5449,5452,3,912,
		456,0,5450,5452,5,401,0,0,5451,5449,1,0,0,0,5451,5450,1,0,0,0,5452,709,
		1,0,0,0,5453,5454,3,706,353,0,5454,5455,3,994,497,0,5455,5456,3,1478,739,
		0,5456,5457,3,708,354,0,5457,711,1,0,0,0,5458,5459,4,356,64,0,5459,5460,
		5,519,0,0,5460,5465,3,710,355,0,5461,5462,5,29,0,0,5462,5464,3,710,355,
		0,5463,5461,1,0,0,0,5464,5467,1,0,0,0,5465,5463,1,0,0,0,5465,5466,1,0,
		0,0,5466,713,1,0,0,0,5467,5465,1,0,0,0,5468,5469,5,519,0,0,5469,5470,3,
		716,358,0,5470,715,1,0,0,0,5471,5472,3,726,363,0,5472,5473,3,724,362,0,
		5473,5522,1,0,0,0,5474,5475,5,601,0,0,5475,5522,3,718,359,0,5476,5477,
		3,1480,740,0,5477,5478,3,732,366,0,5478,5522,1,0,0,0,5479,5482,5,424,0,
		0,5480,5481,5,232,0,0,5481,5483,3,1308,654,0,5482,5480,1,0,0,0,5482,5483,
		1,0,0,0,5483,5484,1,0,0,0,5484,5505,3,1478,739,0,5485,5487,3,1442,721,
		0,5486,5488,3,1304,652,0,5487,5486,1,0,0,0,5487,5488,1,0,0,0,5488,5490,
		1,0,0,0,5489,5491,3,1296,648,0,5490,5489,1,0,0,0,5490,5491,1,0,0,0,5491,
		5506,1,0,0,0,5492,5494,3,1442,721,0,5493,5495,3,1304,652,0,5494,5493,1,
		0,0,0,5494,5495,1,0,0,0,5495,5497,1,0,0,0,5496,5498,3,1296,648,0,5497,
		5496,1,0,0,0,5497,5498,1,0,0,0,5498,5506,1,0,0,0,5499,5500,4,358,65,0,
		5500,5501,5,424,0,0,5501,5502,5,32,0,0,5502,5503,3,1442,721,0,5503,5504,
		5,33,0,0,5504,5506,1,0,0,0,5505,5485,1,0,0,0,5505,5492,1,0,0,0,5505,5499,
		1,0,0,0,5506,5522,1,0,0,0,5507,5508,4,358,66,0,5508,5511,5,424,0,0,5509,
		5510,5,232,0,0,5510,5512,3,1308,654,0,5511,5509,1,0,0,0,5511,5512,1,0,
		0,0,5512,5513,1,0,0,0,5513,5514,5,599,0,0,5514,5516,5,742,0,0,5515,5517,
		3,1304,652,0,5516,5515,1,0,0,0,5516,5517,1,0,0,0,5517,5519,1,0,0,0,5518,
		5520,3,1296,648,0,5519,5518,1,0,0,0,5519,5520,1,0,0,0,5520,5522,1,0,0,
		0,5521,5471,1,0,0,0,5521,5474,1,0,0,0,5521,5476,1,0,0,0,5521,5479,1,0,
		0,0,5521,5507,1,0,0,0,5522,717,1,0,0,0,5523,5525,3,720,360,0,5524,5526,
		3,722,361,0,5525,5524,1,0,0,0,5525,5526,1,0,0,0,5526,5533,1,0,0,0,5527,
		5530,3,722,361,0,5528,5529,5,29,0,0,5529,5531,3,720,360,0,5530,5528,1,
		0,0,0,5530,5531,1,0,0,0,5531,5533,1,0,0,0,5532,5523,1,0,0,0,5532,5527,
		1,0,0,0,5533,719,1,0,0,0,5534,5535,5,453,0,0,5535,5536,7,42,0,0,5536,721,
		1,0,0,0,5537,5538,5,288,0,0,5538,5544,5,304,0,0,5539,5540,5,473,0,0,5540,
		5545,5,453,0,0,5541,5542,5,453,0,0,5542,5545,7,93,0,0,5543,5545,5,514,
		0,0,5544,5539,1,0,0,0,5544,5541,1,0,0,0,5544,5543,1,0,0,0,5545,723,1,0,
		0,0,5546,5547,5,29,0,0,5547,5549,3,728,364,0,5548,5546,1,0,0,0,5549,5552,
		1,0,0,0,5550,5548,1,0,0,0,5550,5551,1,0,0,0,5551,725,1,0,0,0,5552,5550,
		1,0,0,0,5553,5554,3,994,497,0,5554,5555,3,1478,739,0,5555,5556,3,736,368,
		0,5556,5583,1,0,0,0,5557,5583,3,1262,631,0,5558,5559,3,988,494,0,5559,
		5560,3,1478,739,0,5560,5561,3,912,456,0,5561,5583,1,0,0,0,5562,5564,5,
		41,0,0,5563,5565,3,1484,742,0,5564,5563,1,0,0,0,5564,5565,1,0,0,0,5565,
		5566,1,0,0,0,5566,5567,3,994,497,0,5567,5568,3,1478,739,0,5568,5569,3,
		736,368,0,5569,5583,1,0,0,0,5570,5580,5,379,0,0,5571,5572,3,1478,739,0,
		5572,5573,3,912,456,0,5573,5581,1,0,0,0,5574,5576,3,1190,595,0,5575,5577,
		3,1250,625,0,5576,5575,1,0,0,0,5576,5577,1,0,0,0,5577,5581,1,0,0,0,5578,
		5579,4,363,67,0,5579,5581,5,166,0,0,5580,5571,1,0,0,0,5580,5574,1,0,0,
		0,5580,5578,1,0,0,0,5581,5583,1,0,0,0,5582,5553,1,0,0,0,5582,5557,1,0,
		0,0,5582,5558,1,0,0,0,5582,5562,1,0,0,0,5582,5570,1,0,0,0,5583,727,1,0,
		0,0,5584,5585,3,1480,740,0,5585,5586,3,994,497,0,5586,5587,3,1478,739,
		0,5587,5588,3,736,368,0,5588,5591,1,0,0,0,5589,5591,3,726,363,0,5590,5584,
		1,0,0,0,5590,5589,1,0,0,0,5591,729,1,0,0,0,5592,5594,5,41,0,0,5593,5595,
		3,1484,742,0,5594,5593,1,0,0,0,5594,5595,1,0,0,0,5595,5596,1,0,0,0,5596,
		5597,3,994,497,0,5597,731,1,0,0,0,5598,5599,3,734,367,0,5599,5600,3,724,
		362,0,5600,5604,1,0,0,0,5601,5602,5,601,0,0,5602,5604,3,718,359,0,5603,
		5598,1,0,0,0,5603,5601,1,0,0,0,5604,733,1,0,0,0,5605,5606,3,994,497,0,
		5606,5607,3,1478,739,0,5607,5608,3,736,368,0,5608,735,1,0,0,0,5609,5617,
		3,912,456,0,5610,5617,5,166,0,0,5611,5617,5,401,0,0,5612,5617,5,57,0,0,
		5613,5617,5,77,0,0,5614,5617,5,503,0,0,5615,5617,5,718,0,0,5616,5609,1,
		0,0,0,5616,5610,1,0,0,0,5616,5611,1,0,0,0,5616,5612,1,0,0,0,5616,5613,
		1,0,0,0,5616,5614,1,0,0,0,5616,5615,1,0,0,0,5617,737,1,0,0,0,5618,5619,
		5,521,0,0,5619,5621,5,151,0,0,5620,5622,3,1312,656,0,5621,5620,1,0,0,0,
		5621,5622,1,0,0,0,5622,739,1,0,0,0,5623,5625,5,521,0,0,5624,5626,3,830,
		415,0,5625,5624,1,0,0,0,5625,5626,1,0,0,0,5626,5627,1,0,0,0,5627,5629,
		5,581,0,0,5628,5630,3,836,418,0,5629,5628,1,0,0,0,5629,5630,1,0,0,0,5630,
		5632,1,0,0,0,5631,5633,3,1312,656,0,5632,5631,1,0,0,0,5632,5633,1,0,0,
		0,5633,741,1,0,0,0,5634,5636,5,521,0,0,5635,5637,5,236,0,0,5636,5635,1,
		0,0,0,5636,5637,1,0,0,0,5637,5638,1,0,0,0,5638,5640,5,602,0,0,5639,5641,
		3,836,418,0,5640,5639,1,0,0,0,5640,5641,1,0,0,0,5641,5643,1,0,0,0,5642,
		5644,3,1312,656,0,5643,5642,1,0,0,0,5643,5644,1,0,0,0,5644,743,1,0,0,0,
		5645,5646,5,521,0,0,5646,5648,5,204,0,0,5647,5649,3,836,418,0,5648,5647,
		1,0,0,0,5648,5649,1,0,0,0,5649,5651,1,0,0,0,5650,5652,3,1312,656,0,5651,
		5650,1,0,0,0,5651,5652,1,0,0,0,5652,745,1,0,0,0,5653,5654,5,521,0,0,5654,
		5655,5,583,0,0,5655,5657,5,557,0,0,5656,5658,3,836,418,0,5657,5656,1,0,
		0,0,5657,5658,1,0,0,0,5658,5660,1,0,0,0,5659,5661,3,1312,656,0,5660,5659,
		1,0,0,0,5660,5661,1,0,0,0,5661,747,1,0,0,0,5662,5663,5,521,0,0,5663,5664,
		5,405,0,0,5664,5666,5,581,0,0,5665,5667,3,836,418,0,5666,5665,1,0,0,0,
		5666,5667,1,0,0,0,5667,5669,1,0,0,0,5668,5670,3,1312,656,0,5669,5668,1,
		0,0,0,5669,5670,1,0,0,0,5670,749,1,0,0,0,5671,5672,4,375,68,0,5672,5673,
		5,521,0,0,5673,5674,5,807,0,0,5674,5675,3,4,2,0,5675,751,1,0,0,0,5676,
		5677,5,521,0,0,5677,5678,5,426,0,0,5678,753,1,0,0,0,5679,5680,5,521,0,
		0,5680,5681,5,198,0,0,5681,5682,3,832,416,0,5682,5683,5,316,0,0,5683,755,
		1,0,0,0,5684,5685,5,521,0,0,5685,5686,5,198,0,0,5686,5687,3,832,416,0,
		5687,5688,5,377,0,0,5688,757,1,0,0,0,5689,5690,5,521,0,0,5690,5691,5,198,
		0,0,5691,5692,3,832,416,0,5692,5693,5,557,0,0,5693,759,1,0,0,0,5694,5696,
		5,521,0,0,5695,5697,3,830,415,0,5696,5695,1,0,0,0,5696,5697,1,0,0,0,5697,
		5698,1,0,0,0,5698,5699,5,114,0,0,5699,5700,7,94,0,0,5700,5702,3,1384,692,
		0,5701,5703,3,836,418,0,5702,5701,1,0,0,0,5702,5703,1,0,0,0,5703,5705,
		1,0,0,0,5704,5706,3,1312,656,0,5705,5704,1,0,0,0,5705,5706,1,0,0,0,5706,
		761,1,0,0,0,5707,5708,5,521,0,0,5708,5709,7,46,0,0,5709,5710,5,316,0,0,
		5710,763,1,0,0,0,5711,5712,5,521,0,0,5712,5713,5,77,0,0,5713,5714,5,808,
		0,0,5714,5715,5,557,0,0,5715,765,1,0,0,0,5716,5721,5,521,0,0,5717,5718,
		3,606,303,0,5718,5719,5,257,0,0,5719,5722,1,0,0,0,5720,5722,5,763,0,0,
		5721,5717,1,0,0,0,5721,5720,1,0,0,0,5722,767,1,0,0,0,5723,5724,5,521,0,
		0,5724,5725,5,78,0,0,5725,5728,5,204,0,0,5726,5727,5,282,0,0,5727,5729,
		3,1442,721,0,5728,5726,1,0,0,0,5728,5729,1,0,0,0,5729,5732,1,0,0,0,5730,
		5731,5,235,0,0,5731,5733,3,1424,712,0,5732,5730,1,0,0,0,5732,5733,1,0,
		0,0,5733,5735,1,0,0,0,5734,5736,3,316,158,0,5735,5734,1,0,0,0,5735,5736,
		1,0,0,0,5736,5738,1,0,0,0,5737,5739,3,1032,516,0,5738,5737,1,0,0,0,5738,
		5739,1,0,0,0,5739,769,1,0,0,0,5740,5741,5,521,0,0,5741,5742,5,463,0,0,
		5742,5745,5,204,0,0,5743,5744,5,282,0,0,5744,5746,3,1442,721,0,5745,5743,
		1,0,0,0,5745,5746,1,0,0,0,5746,5749,1,0,0,0,5747,5748,5,235,0,0,5748,5750,
		3,1424,712,0,5749,5747,1,0,0,0,5749,5750,1,0,0,0,5750,5752,1,0,0,0,5751,
		5753,3,316,158,0,5752,5751,1,0,0,0,5752,5753,1,0,0,0,5753,5755,1,0,0,0,
		5754,5756,3,1032,516,0,5755,5754,1,0,0,0,5755,5756,1,0,0,0,5756,771,1,
		0,0,0,5757,5759,5,521,0,0,5758,5760,5,215,0,0,5759,5758,1,0,0,0,5759,5760,
		1,0,0,0,5760,5761,1,0,0,0,5761,5762,7,95,0,0,5762,5763,3,834,417,0,5763,
		5765,3,1384,692,0,5764,5766,3,836,418,0,5765,5764,1,0,0,0,5765,5766,1,
		0,0,0,5766,5768,1,0,0,0,5767,5769,3,392,196,0,5768,5767,1,0,0,0,5768,5769,
		1,0,0,0,5769,773,1,0,0,0,5770,5772,5,521,0,0,5771,5773,5,563,0,0,5772,
		5771,1,0,0,0,5772,5773,1,0,0,0,5773,5774,1,0,0,0,5774,5775,5,197,0,0,5775,
		775,1,0,0,0,5776,5777,5,521,0,0,5777,5778,5,137,0,0,5778,5779,5,32,0,0,
		5779,5780,5,16,0,0,5780,5781,5,33,0,0,5781,5782,5,647,0,0,5782,777,1,0,
		0,0,5783,5784,5,521,0,0,5784,5785,5,137,0,0,5785,5786,5,32,0,0,5786,5787,
		5,16,0,0,5787,5788,5,33,0,0,5788,5789,5,201,0,0,5789,779,1,0,0,0,5790,
		5791,5,521,0,0,5791,5793,5,647,0,0,5792,5794,3,316,158,0,5793,5792,1,0,
		0,0,5793,5794,1,0,0,0,5794,781,1,0,0,0,5795,5796,5,521,0,0,5796,5798,5,
		201,0,0,5797,5799,3,316,158,0,5798,5797,1,0,0,0,5798,5799,1,0,0,0,5799,
		783,1,0,0,0,5800,5801,5,521,0,0,5801,5802,5,444,0,0,5802,785,1,0,0,0,5803,
		5804,5,521,0,0,5804,5806,5,443,0,0,5805,5807,3,838,419,0,5806,5805,1,0,
		0,0,5806,5807,1,0,0,0,5807,5811,1,0,0,0,5808,5809,5,232,0,0,5809,5810,
		5,448,0,0,5810,5812,5,3,0,0,5811,5808,1,0,0,0,5811,5812,1,0,0,0,5812,5814,
		1,0,0,0,5813,5815,3,316,158,0,5814,5813,1,0,0,0,5814,5815,1,0,0,0,5815,
		787,1,0,0,0,5816,5818,5,521,0,0,5817,5819,3,1480,740,0,5818,5817,1,0,0,
		0,5818,5819,1,0,0,0,5819,5820,1,0,0,0,5820,5822,5,557,0,0,5821,5823,3,
		1312,656,0,5822,5821,1,0,0,0,5822,5823,1,0,0,0,5823,789,1,0,0,0,5824,5826,
		5,521,0,0,5825,5827,5,236,0,0,5826,5825,1,0,0,0,5826,5827,1,0,0,0,5827,
		5828,1,0,0,0,5828,5829,5,442,0,0,5829,791,1,0,0,0,5830,5832,5,521,0,0,
		5831,5833,3,1480,740,0,5832,5831,1,0,0,0,5832,5833,1,0,0,0,5833,5834,1,
		0,0,0,5834,5836,5,639,0,0,5835,5837,3,1312,656,0,5836,5835,1,0,0,0,5836,
		5837,1,0,0,0,5837,793,1,0,0,0,5838,5839,5,521,0,0,5839,5841,3,1008,504,
		0,5840,5842,3,1312,656,0,5841,5840,1,0,0,0,5841,5842,1,0,0,0,5842,795,
		1,0,0,0,5843,5844,5,521,0,0,5844,5846,5,113,0,0,5845,5847,3,1312,656,0,
		5846,5845,1,0,0,0,5846,5847,1,0,0,0,5847,797,1,0,0,0,5848,5849,5,521,0,
		0,5849,5850,5,439,0,0,5850,799,1,0,0,0,5851,5852,5,521,0,0,5852,5859,5,
		248,0,0,5853,5854,5,232,0,0,5854,5857,3,1308,654,0,5855,5856,5,630,0,0,
		5856,5858,3,1272,636,0,5857,5855,1,0,0,0,5857,5858,1,0,0,0,5858,5860,1,
		0,0,0,5859,5853,1,0,0,0,5859,5860,1,0,0,0,5860,801,1,0,0,0,5861,5862,5,
		521,0,0,5862,5863,5,139,0,0,5863,5865,5,150,0,0,5864,5866,3,1242,621,0,
		5865,5864,1,0,0,0,5865,5866,1,0,0,0,5866,5867,1,0,0,0,5867,5868,3,1340,
		670,0,5868,803,1,0,0,0,5869,5870,5,521,0,0,5870,5871,5,139,0,0,5871,5872,
		5,583,0,0,5872,5873,3,1384,692,0,5873,805,1,0,0,0,5874,5875,5,521,0,0,
		5875,5876,5,139,0,0,5876,5877,5,644,0,0,5877,5878,3,1356,678,0,5878,807,
		1,0,0,0,5879,5880,5,521,0,0,5880,5881,5,341,0,0,5881,5882,5,557,0,0,5882,
		809,1,0,0,0,5883,5884,5,521,0,0,5884,5885,3,606,303,0,5885,5887,5,557,
		0,0,5886,5888,3,1032,516,0,5887,5886,1,0,0,0,5887,5888,1,0,0,0,5888,811,
		1,0,0,0,5889,5890,5,521,0,0,5890,5891,5,139,0,0,5891,5892,5,440,0,0,5892,
		5893,3,1344,672,0,5893,813,1,0,0,0,5894,5895,5,521,0,0,5895,5896,5,139,
		0,0,5896,5897,5,238,0,0,5897,5898,3,1348,674,0,5898,815,1,0,0,0,5899,5900,
		5,521,0,0,5900,5901,5,139,0,0,5901,5902,5,603,0,0,5902,5903,3,1352,676,
		0,5903,817,1,0,0,0,5904,5905,5,521,0,0,5905,5906,5,139,0,0,5906,5907,5,
		440,0,0,5907,5909,5,557,0,0,5908,5910,3,1312,656,0,5909,5908,1,0,0,0,5909,
		5910,1,0,0,0,5910,819,1,0,0,0,5911,5912,5,521,0,0,5912,5913,5,139,0,0,
		5913,5914,5,238,0,0,5914,5916,5,557,0,0,5915,5917,3,1312,656,0,5916,5915,
		1,0,0,0,5916,5917,1,0,0,0,5917,821,1,0,0,0,5918,5919,5,521,0,0,5919,5920,
		5,139,0,0,5920,5921,5,440,0,0,5921,5922,5,111,0,0,5922,5923,3,1344,672,
		0,5923,823,1,0,0,0,5924,5925,5,521,0,0,5925,5926,5,139,0,0,5926,5927,5,
		238,0,0,5927,5928,5,111,0,0,5928,5929,3,1348,674,0,5929,825,1,0,0,0,5930,
		5931,5,521,0,0,5931,5932,5,139,0,0,5932,5933,5,205,0,0,5933,5934,3,1368,
		684,0,5934,827,1,0,0,0,5935,5936,5,521,0,0,5936,5937,5,139,0,0,5937,5938,
		5,627,0,0,5938,5939,3,1308,654,0,5939,829,1,0,0,0,5940,5946,5,236,0,0,
		5941,5943,5,215,0,0,5942,5944,5,236,0,0,5943,5942,1,0,0,0,5943,5944,1,
		0,0,0,5944,5946,1,0,0,0,5945,5940,1,0,0,0,5945,5941,1,0,0,0,5946,831,1,
		0,0,0,5947,5950,3,1376,688,0,5948,5950,5,57,0,0,5949,5947,1,0,0,0,5949,
		5948,1,0,0,0,5950,833,1,0,0,0,5951,5952,7,94,0,0,5952,835,1,0,0,0,5953,
		5954,3,834,417,0,5954,5955,3,1408,704,0,5955,837,1,0,0,0,5956,5961,3,840,
		420,0,5957,5958,5,29,0,0,5958,5960,3,840,420,0,5959,5957,1,0,0,0,5960,
		5963,1,0,0,0,5961,5959,1,0,0,0,5961,5962,1,0,0,0,5962,839,1,0,0,0,5963,
		5961,1,0,0,0,5964,5965,5,84,0,0,5965,5972,5,285,0,0,5966,5967,5,134,0,
		0,5967,5972,5,578,0,0,5968,5969,5,418,0,0,5969,5972,5,220,0,0,5970,5972,
		7,96,0,0,5971,5964,1,0,0,0,5971,5966,1,0,0,0,5971,5968,1,0,0,0,5971,5970,
		1,0,0,0,5972,841,1,0,0,0,5973,5974,5,78,0,0,5974,6010,3,1446,723,0,5975,
		5976,5,91,0,0,5976,5977,5,268,0,0,5977,5978,3,844,422,0,5978,5981,5,282,
		0,0,5979,5982,3,1408,704,0,5980,5982,5,166,0,0,5981,5979,1,0,0,0,5981,
		5980,1,0,0,0,5982,6010,1,0,0,0,5983,5985,5,228,0,0,5984,5986,3,1316,658,
		0,5985,5984,1,0,0,0,5985,5986,1,0,0,0,5986,5996,1,0,0,0,5987,5997,3,862,
		431,0,5988,5993,3,858,429,0,5989,5990,5,29,0,0,5990,5992,3,858,429,0,5991,
		5989,1,0,0,0,5992,5995,1,0,0,0,5993,5991,1,0,0,0,5993,5994,1,0,0,0,5994,
		5997,1,0,0,0,5995,5993,1,0,0,0,5996,5987,1,0,0,0,5996,5988,1,0,0,0,5997,
		6010,1,0,0,0,5998,6000,5,296,0,0,5999,6001,7,97,0,0,6000,5999,1,0,0,0,
		6000,6001,1,0,0,0,6001,6002,1,0,0,0,6002,6010,3,912,456,0,6003,6004,5,
		311,0,0,6004,6005,5,268,0,0,6005,6006,5,279,0,0,6006,6007,5,91,0,0,6007,
		6010,3,866,433,0,6008,6010,5,522,0,0,6009,5973,1,0,0,0,6009,5975,1,0,0,
		0,6009,5983,1,0,0,0,6009,5998,1,0,0,0,6009,6003,1,0,0,0,6009,6008,1,0,
		0,0,6010,843,1,0,0,0,6011,6014,3,846,423,0,6012,6014,3,850,425,0,6013,
		6011,1,0,0,0,6013,6012,1,0,0,0,6014,845,1,0,0,0,6015,6020,3,848,424,0,
		6016,6017,5,29,0,0,6017,6019,3,848,424,0,6018,6016,1,0,0,0,6019,6022,1,
		0,0,0,6020,6018,1,0,0,0,6020,6021,1,0,0,0,6021,847,1,0,0,0,6022,6020,1,
		0,0,0,6023,6025,3,1384,692,0,6024,6026,3,852,426,0,6025,6024,1,0,0,0,6025,
		6026,1,0,0,0,6026,849,1,0,0,0,6027,6028,3,1384,692,0,6028,6029,5,423,0,
		0,6029,6030,5,32,0,0,6030,6031,3,56,28,0,6031,6033,5,33,0,0,6032,6034,
		3,852,426,0,6033,6032,1,0,0,0,6033,6034,1,0,0,0,6034,851,1,0,0,0,6035,
		6036,3,442,221,0,6036,6038,5,32,0,0,6037,6039,3,856,428,0,6038,6037,1,
		0,0,0,6038,6039,1,0,0,0,6039,6040,1,0,0,0,6040,6041,5,33,0,0,6041,853,
		1,0,0,0,6042,6045,3,1408,704,0,6043,6045,5,438,0,0,6044,6042,1,0,0,0,6044,
		6043,1,0,0,0,6045,855,1,0,0,0,6046,6051,3,854,427,0,6047,6048,5,29,0,0,
		6048,6050,3,854,427,0,6049,6047,1,0,0,0,6050,6053,1,0,0,0,6051,6049,1,
		0,0,0,6051,6052,1,0,0,0,6052,857,1,0,0,0,6053,6051,1,0,0,0,6054,6066,7,
		98,0,0,6055,6057,3,860,430,0,6056,6055,1,0,0,0,6056,6057,1,0,0,0,6057,
		6058,1,0,0,0,6058,6066,5,316,0,0,6059,6060,5,462,0,0,6060,6062,5,316,0,
		0,6061,6063,3,1032,516,0,6062,6061,1,0,0,0,6062,6063,1,0,0,0,6063,6066,
		1,0,0,0,6064,6066,5,407,0,0,6065,6054,1,0,0,0,6065,6056,1,0,0,0,6065,6059,
		1,0,0,0,6065,6064,1,0,0,0,6066,859,1,0,0,0,6067,6068,7,99,0,0,6068,861,
		1,0,0,0,6069,6077,7,17,0,0,6070,6071,5,653,0,0,6071,6072,5,453,0,0,6072,
		6078,5,314,0,0,6073,6075,3,1410,705,0,6074,6076,3,864,432,0,6075,6074,
		1,0,0,0,6075,6076,1,0,0,0,6076,6078,1,0,0,0,6077,6070,1,0,0,0,6077,6073,
		1,0,0,0,6077,6078,1,0,0,0,6078,863,1,0,0,0,6079,6080,5,232,0,0,6080,6085,
		5,214,0,0,6081,6082,5,653,0,0,6082,6083,5,453,0,0,6083,6085,5,314,0,0,
		6084,6079,1,0,0,0,6084,6081,1,0,0,0,6085,865,1,0,0,0,6086,6087,3,1384,
		692,0,6087,6089,3,872,436,0,6088,6090,3,852,426,0,6089,6088,1,0,0,0,6089,
		6090,1,0,0,0,6090,6093,1,0,0,0,6091,6092,5,264,0,0,6092,6094,5,300,0,0,
		6093,6091,1,0,0,0,6093,6094,1,0,0,0,6094,6097,1,0,0,0,6095,6097,3,868,
		434,0,6096,6086,1,0,0,0,6096,6095,1,0,0,0,6097,867,1,0,0,0,6098,6103,3,
		870,435,0,6099,6100,5,29,0,0,6100,6102,3,870,435,0,6101,6099,1,0,0,0,6102,
		6105,1,0,0,0,6103,6101,1,0,0,0,6103,6104,1,0,0,0,6104,869,1,0,0,0,6105,
		6103,1,0,0,0,6106,6108,3,1384,692,0,6107,6109,3,852,426,0,6108,6107,1,
		0,0,0,6108,6109,1,0,0,0,6109,6112,1,0,0,0,6110,6111,5,264,0,0,6111,6113,
		5,300,0,0,6112,6110,1,0,0,0,6112,6113,1,0,0,0,6113,871,1,0,0,0,6114,6115,
		5,423,0,0,6115,6116,5,32,0,0,6116,6117,3,56,28,0,6117,6118,5,33,0,0,6118,
		873,1,0,0,0,6119,6124,3,876,438,0,6120,6124,3,886,443,0,6121,6124,3,888,
		444,0,6122,6124,3,892,446,0,6123,6119,1,0,0,0,6123,6120,1,0,0,0,6123,6121,
		1,0,0,0,6123,6122,1,0,0,0,6124,875,1,0,0,0,6125,6126,5,139,0,0,6126,6127,
		5,717,0,0,6127,6128,5,249,0,0,6128,6129,3,1408,704,0,6129,6131,5,608,0,
		0,6130,6132,3,1478,739,0,6131,6130,1,0,0,0,6131,6132,1,0,0,0,6132,6133,
		1,0,0,0,6133,6135,7,100,0,0,6134,6136,3,878,439,0,6135,6134,1,0,0,0,6135,
		6136,1,0,0,0,6136,6138,1,0,0,0,6137,6139,3,882,441,0,6138,6137,1,0,0,0,
		6138,6139,1,0,0,0,6139,6141,1,0,0,0,6140,6142,3,884,442,0,6141,6140,1,
		0,0,0,6141,6142,1,0,0,0,6142,877,1,0,0,0,6143,6145,5,719,0,0,6144,6146,
		3,1478,739,0,6145,6144,1,0,0,0,6145,6146,1,0,0,0,6146,6147,1,0,0,0,6147,
		6154,3,880,440,0,6148,6150,5,29,0,0,6149,6148,1,0,0,0,6149,6150,1,0,0,
		0,6150,6151,1,0,0,0,6151,6153,3,880,440,0,6152,6149,1,0,0,0,6153,6156,
		1,0,0,0,6154,6152,1,0,0,0,6154,6155,1,0,0,0,6155,879,1,0,0,0,6156,6154,
		1,0,0,0,6157,6160,5,3,0,0,6158,6159,5,15,0,0,6159,6161,5,3,0,0,6160,6158,
		1,0,0,0,6160,6161,1,0,0,0,6161,881,1,0,0,0,6162,6164,5,716,0,0,6163,6165,
		3,1478,739,0,6164,6163,1,0,0,0,6164,6165,1,0,0,0,6165,6166,1,0,0,0,6166,
		6167,5,3,0,0,6167,883,1,0,0,0,6168,6169,7,7,0,0,6169,885,1,0,0,0,6170,
		6171,5,58,0,0,6171,6172,5,717,0,0,6172,6173,5,249,0,0,6173,6175,3,1402,
		701,0,6174,6176,3,878,439,0,6175,6174,1,0,0,0,6175,6176,1,0,0,0,6176,6178,
		1,0,0,0,6177,6179,3,882,441,0,6178,6177,1,0,0,0,6178,6179,1,0,0,0,6179,
		6181,1,0,0,0,6180,6182,3,884,442,0,6181,6180,1,0,0,0,6181,6182,1,0,0,0,
		6182,6184,1,0,0,0,6183,6185,5,230,0,0,6184,6183,1,0,0,0,6184,6185,1,0,
		0,0,6185,887,1,0,0,0,6186,6187,5,519,0,0,6187,6188,5,717,0,0,6188,6189,
		5,249,0,0,6189,6192,3,1408,704,0,6190,6191,5,232,0,0,6191,6193,3,890,445,
		0,6192,6190,1,0,0,0,6192,6193,1,0,0,0,6193,889,1,0,0,0,6194,6201,3,1422,
		711,0,6195,6197,5,29,0,0,6196,6195,1,0,0,0,6196,6197,1,0,0,0,6197,6198,
		1,0,0,0,6198,6200,3,1422,711,0,6199,6196,1,0,0,0,6200,6203,1,0,0,0,6201,
		6199,1,0,0,0,6201,6202,1,0,0,0,6202,891,1,0,0,0,6203,6201,1,0,0,0,6204,
		6205,5,184,0,0,6205,6206,5,717,0,0,6206,6207,5,249,0,0,6207,6209,3,1402,
		701,0,6208,6210,5,230,0,0,6209,6208,1,0,0,0,6209,6210,1,0,0,0,6210,893,
		1,0,0,0,6211,6218,3,896,448,0,6212,6218,3,898,449,0,6213,6218,3,906,453,
		0,6214,6218,3,908,454,0,6215,6216,4,447,69,0,6216,6218,3,910,455,0,6217,
		6211,1,0,0,0,6217,6212,1,0,0,0,6217,6213,1,0,0,0,6217,6214,1,0,0,0,6217,
		6215,1,0,0,0,6218,895,1,0,0,0,6219,6220,7,101,0,0,6220,6223,3,1384,692,
		0,6221,6224,3,1442,721,0,6222,6224,3,1328,664,0,6223,6221,1,0,0,0,6223,
		6222,1,0,0,0,6223,6224,1,0,0,0,6224,897,1,0,0,0,6225,6227,7,101,0,0,6226,
		6228,3,900,450,0,6227,6226,1,0,0,0,6227,6228,1,0,0,0,6228,6233,1,0,0,0,
		6229,6230,4,449,70,0,6230,6231,5,232,0,0,6231,6232,5,150,0,0,6232,6234,
		3,1468,734,0,6233,6229,1,0,0,0,6233,6234,1,0,0,0,6234,6235,1,0,0,0,6235,
		6236,3,902,451,0,6236,899,1,0,0,0,6237,6238,5,233,0,0,6238,6239,5,6,0,
		0,6239,6242,3,1468,734,0,6240,6241,4,450,71,0,6241,6243,3,904,452,0,6242,
		6240,1,0,0,0,6242,6243,1,0,0,0,6243,6254,1,0,0,0,6244,6245,4,450,72,0,
		6245,6254,5,215,0,0,6246,6247,4,450,73,0,6247,6254,5,60,0,0,6248,6249,
		4,450,74,0,6249,6250,5,60,0,0,6250,6251,5,233,0,0,6251,6252,5,6,0,0,6252,
		6254,3,1468,734,0,6253,6237,1,0,0,0,6253,6244,1,0,0,0,6253,6246,1,0,0,
		0,6253,6248,1,0,0,0,6254,901,1,0,0,0,6255,6264,3,298,149,0,6256,6264,3,
		236,118,0,6257,6264,3,248,124,0,6258,6264,3,296,148,0,6259,6264,3,452,
		226,0,6260,6261,5,232,0,0,6261,6262,5,127,0,0,6262,6264,3,1422,711,0,6263,
		6255,1,0,0,0,6263,6256,1,0,0,0,6263,6257,1,0,0,0,6263,6258,1,0,0,0,6263,
		6259,1,0,0,0,6263,6260,1,0,0,0,6264,903,1,0,0,0,6265,6266,5,279,0,0,6266,
		6267,5,39,0,0,6267,6268,3,1468,734,0,6268,905,1,0,0,0,6269,6270,5,254,
		0,0,6270,6271,3,1468,734,0,6271,907,1,0,0,0,6272,6273,5,629,0,0,6273,6274,
		3,1340,670,0,6274,909,1,0,0,0,6275,6276,5,722,0,0,6276,911,1,0,0,0,6277,
		6278,6,456,-1,0,6278,6284,3,914,457,0,6279,6281,5,287,0,0,6280,6282,3,
		1010,505,0,6281,6280,1,0,0,0,6281,6282,1,0,0,0,6282,6283,1,0,0,0,6283,
		6285,7,102,0,0,6284,6279,1,0,0,0,6284,6285,1,0,0,0,6285,6289,1,0,0,0,6286,
		6287,5,390,0,0,6287,6289,3,912,456,4,6288,6277,1,0,0,0,6288,6286,1,0,0,
		0,6289,6301,1,0,0,0,6290,6291,10,3,0,0,6291,6292,7,103,0,0,6292,6300,3,
		912,456,4,6293,6294,10,2,0,0,6294,6295,5,662,0,0,6295,6300,3,912,456,3,
		6296,6297,10,1,0,0,6297,6298,7,104,0,0,6298,6300,3,912,456,2,6299,6290,
		1,0,0,0,6299,6293,1,0,0,0,6299,6296,1,0,0,0,6300,6303,1,0,0,0,6301,6299,
		1,0,0,0,6301,6302,1,0,0,0,6302,913,1,0,0,0,6303,6301,1,0,0,0,6304,6305,
		6,457,-1,0,6305,6306,3,918,459,0,6306,6324,1,0,0,0,6307,6308,10,3,0,0,
		6308,6310,5,287,0,0,6309,6311,3,1010,505,0,6310,6309,1,0,0,0,6310,6311,
		1,0,0,0,6311,6312,1,0,0,0,6312,6323,5,395,0,0,6313,6314,10,2,0,0,6314,
		6315,3,916,458,0,6315,6316,3,918,459,0,6316,6323,1,0,0,0,6317,6318,10,
		1,0,0,6318,6319,3,916,458,0,6319,6320,7,105,0,0,6320,6321,3,312,156,0,
		6321,6323,1,0,0,0,6322,6307,1,0,0,0,6322,6313,1,0,0,0,6322,6317,1,0,0,
		0,6323,6326,1,0,0,0,6324,6322,1,0,0,0,6324,6325,1,0,0,0,6325,915,1,0,0,
		0,6326,6324,1,0,0,0,6327,6328,7,106,0,0,6328,917,1,0,0,0,6329,6343,3,922,
		461,0,6330,6332,3,1010,505,0,6331,6330,1,0,0,0,6331,6332,1,0,0,0,6332,
		6333,1,0,0,0,6333,6344,3,920,460,0,6334,6335,4,459,81,0,6335,6337,5,741,
		0,0,6336,6338,5,676,0,0,6337,6336,1,0,0,0,6337,6338,1,0,0,0,6338,6339,
		1,0,0,0,6339,6344,3,1022,511,0,6340,6341,5,532,0,0,6341,6342,5,305,0,0,
		6342,6344,3,922,461,0,6343,6331,1,0,0,0,6343,6334,1,0,0,0,6343,6340,1,
		0,0,0,6343,6344,1,0,0,0,6344,919,1,0,0,0,6345,6351,5,282,0,0,6346,6352,
		3,312,156,0,6347,6348,5,32,0,0,6348,6349,3,1006,503,0,6349,6350,5,33,0,
		0,6350,6352,1,0,0,0,6351,6346,1,0,0,0,6351,6347,1,0,0,0,6352,6367,1,0,
		0,0,6353,6354,5,75,0,0,6354,6355,3,922,461,0,6355,6356,5,61,0,0,6356,6357,
		3,918,459,0,6357,6367,1,0,0,0,6358,6359,5,305,0,0,6359,6362,3,924,462,
		0,6360,6361,5,203,0,0,6361,6363,3,924,462,0,6362,6360,1,0,0,0,6362,6363,
		1,0,0,0,6363,6367,1,0,0,0,6364,6365,5,461,0,0,6365,6367,3,922,461,0,6366,
		6345,1,0,0,0,6366,6353,1,0,0,0,6366,6358,1,0,0,0,6366,6364,1,0,0,0,6367,
		921,1,0,0,0,6368,6369,6,461,-1,0,6369,6370,3,924,462,0,6370,6397,1,0,0,
		0,6371,6372,10,7,0,0,6372,6373,5,25,0,0,6373,6396,3,922,461,8,6374,6375,
		10,6,0,0,6375,6376,7,107,0,0,6376,6396,3,922,461,7,6377,6378,10,5,0,0,
		6378,6379,7,108,0,0,6379,6396,3,922,461,6,6380,6381,10,3,0,0,6381,6382,
		7,109,0,0,6382,6396,3,922,461,4,6383,6384,10,2,0,0,6384,6385,5,24,0,0,
		6385,6396,3,922,461,3,6386,6387,10,1,0,0,6387,6388,5,27,0,0,6388,6396,
		3,922,461,2,6389,6390,10,4,0,0,6390,6391,7,108,0,0,6391,6392,5,278,0,0,
		6392,6393,3,912,456,0,6393,6394,3,1014,507,0,6394,6396,1,0,0,0,6395,6371,
		1,0,0,0,6395,6374,1,0,0,0,6395,6377,1,0,0,0,6395,6380,1,0,0,0,6395,6383,
		1,0,0,0,6395,6386,1,0,0,0,6395,6389,1,0,0,0,6396,6399,1,0,0,0,6397,6395,
		1,0,0,0,6397,6398,1,0,0,0,6398,923,1,0,0,0,6399,6397,1,0,0,0,6400,6401,
		6,462,-1,0,6401,6403,3,1328,664,0,6402,6404,3,928,464,0,6403,6402,1,0,
		0,0,6403,6404,1,0,0,0,6404,6523,1,0,0,0,6405,6523,3,962,481,0,6406,6523,
		3,982,491,0,6407,6523,3,1434,717,0,6408,6523,5,43,0,0,6409,6523,3,992,
		496,0,6410,6523,3,990,495,0,6411,6523,3,930,465,0,6412,6523,3,932,466,
		0,6413,6523,3,934,467,0,6414,6415,7,110,0,0,6415,6523,3,924,462,15,6416,
		6417,3,1012,506,0,6417,6418,3,924,462,14,6418,6523,1,0,0,0,6419,6421,5,
		503,0,0,6420,6419,1,0,0,0,6420,6421,1,0,0,0,6421,6422,1,0,0,0,6422,6423,
		5,32,0,0,6423,6424,3,1006,503,0,6424,6425,5,33,0,0,6425,6523,1,0,0,0,6426,
		6428,5,209,0,0,6427,6426,1,0,0,0,6427,6428,1,0,0,0,6428,6429,1,0,0,0,6429,
		6523,3,312,156,0,6430,6431,5,34,0,0,6431,6432,3,1408,704,0,6432,6433,3,
		912,456,0,6433,6434,5,35,0,0,6434,6523,1,0,0,0,6435,6436,5,345,0,0,6436,
		6437,3,956,478,0,6437,6438,5,54,0,0,6438,6439,5,32,0,0,6439,6441,3,922,
		461,0,6440,6442,3,960,480,0,6441,6440,1,0,0,0,6441,6442,1,0,0,0,6442,6443,
		1,0,0,0,6443,6444,5,33,0,0,6444,6523,1,0,0,0,6445,6446,5,77,0,0,6446,6523,
		3,924,462,9,6447,6448,5,96,0,0,6448,6449,5,32,0,0,6449,6452,3,912,456,
		0,6450,6451,5,67,0,0,6451,6453,5,312,0,0,6452,6450,1,0,0,0,6452,6453,1,
		0,0,0,6453,6454,1,0,0,0,6454,6455,5,63,0,0,6455,6457,3,1004,502,0,6456,
		6458,3,926,463,0,6457,6456,1,0,0,0,6457,6458,1,0,0,0,6458,6459,1,0,0,0,
		6459,6460,5,33,0,0,6460,6523,1,0,0,0,6461,6462,5,96,0,0,6462,6463,5,32,
		0,0,6463,6464,3,912,456,0,6464,6465,5,67,0,0,6465,6466,5,595,0,0,6466,
		6468,5,760,0,0,6467,6469,5,278,0,0,6468,6467,1,0,0,0,6468,6469,1,0,0,0,
		6469,6470,1,0,0,0,6470,6471,3,1440,720,0,6471,6472,5,63,0,0,6472,6473,
		5,154,0,0,6473,6474,3,1186,593,0,6474,6475,5,33,0,0,6475,6523,1,0,0,0,
		6476,6478,5,95,0,0,6477,6479,3,912,456,0,6478,6477,1,0,0,0,6478,6479,1,
		0,0,0,6479,6483,1,0,0,0,6480,6481,3,998,499,0,6481,6482,3,1000,500,0,6482,
		6484,1,0,0,0,6483,6480,1,0,0,0,6484,6485,1,0,0,0,6485,6483,1,0,0,0,6485,
		6486,1,0,0,0,6486,6488,1,0,0,0,6487,6489,3,1002,501,0,6488,6487,1,0,0,
		0,6488,6489,1,0,0,0,6489,6490,1,0,0,0,6490,6491,5,195,0,0,6491,6523,1,
		0,0,0,6492,6493,5,136,0,0,6493,6494,5,32,0,0,6494,6495,3,912,456,0,6495,
		6496,5,29,0,0,6496,6497,3,1004,502,0,6497,6498,5,33,0,0,6498,6523,1,0,
		0,0,6499,6500,5,136,0,0,6500,6501,5,32,0,0,6501,6502,3,912,456,0,6502,
		6503,5,630,0,0,6503,6504,3,1190,595,0,6504,6505,5,33,0,0,6505,6523,1,0,
		0,0,6506,6507,5,166,0,0,6507,6508,5,32,0,0,6508,6509,3,1416,708,0,6509,
		6510,5,33,0,0,6510,6523,1,0,0,0,6511,6512,5,635,0,0,6512,6513,5,32,0,0,
		6513,6514,3,1416,708,0,6514,6515,5,33,0,0,6515,6523,1,0,0,0,6516,6517,
		5,278,0,0,6517,6518,3,912,456,0,6518,6519,3,1014,507,0,6519,6520,5,14,
		0,0,6520,6521,3,912,456,0,6521,6523,1,0,0,0,6522,6400,1,0,0,0,6522,6405,
		1,0,0,0,6522,6406,1,0,0,0,6522,6407,1,0,0,0,6522,6408,1,0,0,0,6522,6409,
		1,0,0,0,6522,6410,1,0,0,0,6522,6411,1,0,0,0,6522,6412,1,0,0,0,6522,6413,
		1,0,0,0,6522,6414,1,0,0,0,6522,6416,1,0,0,0,6522,6420,1,0,0,0,6522,6427,
		1,0,0,0,6522,6430,1,0,0,0,6522,6435,1,0,0,0,6522,6445,1,0,0,0,6522,6447,
		1,0,0,0,6522,6461,1,0,0,0,6522,6476,1,0,0,0,6522,6492,1,0,0,0,6522,6499,
		1,0,0,0,6522,6506,1,0,0,0,6522,6511,1,0,0,0,6522,6516,1,0,0,0,6523,6532,
		1,0,0,0,6524,6525,10,16,0,0,6525,6526,5,2,0,0,6526,6531,3,924,462,17,6527,
		6528,10,24,0,0,6528,6529,5,112,0,0,6529,6531,3,1468,734,0,6530,6524,1,
		0,0,0,6530,6527,1,0,0,0,6531,6534,1,0,0,0,6532,6530,1,0,0,0,6532,6533,
		1,0,0,0,6533,925,1,0,0,0,6534,6532,1,0,0,0,6535,6536,4,463,91,0,6536,6537,
		5,739,0,0,6537,927,1,0,0,0,6538,6539,5,37,0,0,6539,6543,3,1440,720,0,6540,
		6541,5,38,0,0,6541,6543,3,1440,720,0,6542,6538,1,0,0,0,6542,6540,1,0,0,
		0,6543,929,1,0,0,0,6544,6545,5,71,0,0,6545,6547,5,32,0,0,6546,6548,5,180,
		0,0,6547,6546,1,0,0,0,6547,6548,1,0,0,0,6548,6549,1,0,0,0,6549,6550,3,
		954,477,0,6550,6552,5,33,0,0,6551,6553,3,942,471,0,6552,6551,1,0,0,0,6552,
		6553,1,0,0,0,6553,6630,1,0,0,0,6554,6555,7,111,0,0,6555,6556,5,32,0,0,
		6556,6557,3,954,477,0,6557,6559,5,33,0,0,6558,6560,3,942,471,0,6559,6558,
		1,0,0,0,6559,6560,1,0,0,0,6560,6630,1,0,0,0,6561,6630,3,952,476,0,6562,
		6563,5,792,0,0,6563,6565,5,32,0,0,6564,6566,5,180,0,0,6565,6564,1,0,0,
		0,6565,6566,1,0,0,0,6566,6567,1,0,0,0,6567,6568,3,954,477,0,6568,6570,
		5,33,0,0,6569,6571,3,942,471,0,6570,6569,1,0,0,0,6570,6571,1,0,0,0,6571,
		6630,1,0,0,0,6572,6573,5,137,0,0,6573,6581,5,32,0,0,6574,6576,5,57,0,0,
		6575,6574,1,0,0,0,6575,6576,1,0,0,0,6576,6577,1,0,0,0,6577,6582,5,16,0,
		0,6578,6582,3,954,477,0,6579,6580,5,180,0,0,6580,6582,3,1006,503,0,6581,
		6575,1,0,0,0,6581,6578,1,0,0,0,6581,6579,1,0,0,0,6582,6583,1,0,0,0,6583,
		6585,5,33,0,0,6584,6586,3,942,471,0,6585,6584,1,0,0,0,6585,6586,1,0,0,
		0,6586,6630,1,0,0,0,6587,6588,7,112,0,0,6588,6590,5,32,0,0,6589,6591,5,
		180,0,0,6590,6589,1,0,0,0,6590,6591,1,0,0,0,6591,6592,1,0,0,0,6592,6593,
		3,954,477,0,6593,6595,5,33,0,0,6594,6596,3,942,471,0,6595,6594,1,0,0,0,
		6595,6596,1,0,0,0,6596,6630,1,0,0,0,6597,6598,7,113,0,0,6598,6599,5,32,
		0,0,6599,6600,3,954,477,0,6600,6602,5,33,0,0,6601,6603,3,942,471,0,6602,
		6601,1,0,0,0,6602,6603,1,0,0,0,6603,6630,1,0,0,0,6604,6605,5,574,0,0,6605,
		6606,5,32,0,0,6606,6607,5,180,0,0,6607,6608,3,954,477,0,6608,6610,5,33,
		0,0,6609,6611,3,942,471,0,6610,6609,1,0,0,0,6610,6611,1,0,0,0,6611,6630,
		1,0,0,0,6612,6613,5,250,0,0,6613,6615,5,32,0,0,6614,6616,5,180,0,0,6615,
		6614,1,0,0,0,6615,6616,1,0,0,0,6616,6617,1,0,0,0,6617,6619,3,1006,503,
		0,6618,6620,3,362,181,0,6619,6618,1,0,0,0,6619,6620,1,0,0,0,6620,6623,
		1,0,0,0,6621,6622,5,513,0,0,6622,6624,3,1442,721,0,6623,6621,1,0,0,0,6623,
		6624,1,0,0,0,6624,6625,1,0,0,0,6625,6627,5,33,0,0,6626,6628,3,942,471,
		0,6627,6626,1,0,0,0,6627,6628,1,0,0,0,6628,6630,1,0,0,0,6629,6544,1,0,
		0,0,6629,6554,1,0,0,0,6629,6561,1,0,0,0,6629,6562,1,0,0,0,6629,6572,1,
		0,0,0,6629,6587,1,0,0,0,6629,6597,1,0,0,0,6629,6604,1,0,0,0,6629,6612,
		1,0,0,0,6630,931,1,0,0,0,6631,6632,5,680,0,0,6632,6633,5,32,0,0,6633,6634,
		3,1006,503,0,6634,6635,5,33,0,0,6635,933,1,0,0,0,6636,6637,7,114,0,0,6637,
		6638,3,1476,738,0,6638,6639,3,942,471,0,6639,6686,1,0,0,0,6640,6647,5,
		696,0,0,6641,6642,5,32,0,0,6642,6643,3,946,473,0,6643,6644,5,33,0,0,6644,
		6648,1,0,0,0,6645,6646,4,467,92,0,6646,6648,3,1022,511,0,6647,6641,1,0,
		0,0,6647,6645,1,0,0,0,6648,6649,1,0,0,0,6649,6650,3,942,471,0,6650,6686,
		1,0,0,0,6651,6652,7,115,0,0,6652,6653,5,32,0,0,6653,6655,3,912,456,0,6654,
		6656,3,944,472,0,6655,6654,1,0,0,0,6655,6656,1,0,0,0,6656,6657,1,0,0,0,
		6657,6659,5,33,0,0,6658,6660,3,950,475,0,6659,6658,1,0,0,0,6659,6660,1,
		0,0,0,6660,6661,1,0,0,0,6661,6662,3,942,471,0,6662,6686,1,0,0,0,6663,6664,
		7,116,0,0,6664,6666,3,1020,510,0,6665,6667,3,950,475,0,6666,6665,1,0,0,
		0,6666,6667,1,0,0,0,6667,6668,1,0,0,0,6668,6669,3,942,471,0,6669,6686,
		1,0,0,0,6670,6671,5,695,0,0,6671,6672,5,32,0,0,6672,6673,3,912,456,0,6673,
		6674,5,29,0,0,6674,6675,3,924,462,0,6675,6678,5,33,0,0,6676,6677,5,235,
		0,0,6677,6679,7,117,0,0,6678,6676,1,0,0,0,6678,6679,1,0,0,0,6679,6681,
		1,0,0,0,6680,6682,3,950,475,0,6681,6680,1,0,0,0,6681,6682,1,0,0,0,6682,
		6683,1,0,0,0,6683,6684,3,942,471,0,6684,6686,1,0,0,0,6685,6636,1,0,0,0,
		6685,6640,1,0,0,0,6685,6651,1,0,0,0,6685,6663,1,0,0,0,6685,6670,1,0,0,
		0,6686,935,1,0,0,0,6687,6688,7,118,0,0,6688,937,1,0,0,0,6689,6694,3,1424,
		712,0,6690,6691,5,39,0,0,6691,6694,3,1468,734,0,6692,6694,5,43,0,0,6693,
		6689,1,0,0,0,6693,6690,1,0,0,0,6693,6692,1,0,0,0,6694,939,1,0,0,0,6695,
		6696,4,470,93,0,6696,6697,5,816,0,0,6697,6698,3,936,468,0,6698,6699,5,
		32,0,0,6699,6700,3,938,469,0,6700,6701,5,33,0,0,6701,941,1,0,0,0,6702,
		6705,5,699,0,0,6703,6706,3,1404,702,0,6704,6706,3,336,168,0,6705,6703,
		1,0,0,0,6705,6704,1,0,0,0,6706,943,1,0,0,0,6707,6712,5,29,0,0,6708,6713,
		3,1424,712,0,6709,6713,5,43,0,0,6710,6711,4,472,94,0,6711,6713,3,946,473,
		0,6712,6708,1,0,0,0,6712,6709,1,0,0,0,6712,6710,1,0,0,0,6713,6716,1,0,
		0,0,6714,6715,5,29,0,0,6715,6717,3,912,456,0,6716,6714,1,0,0,0,6716,6717,
		1,0,0,0,6717,945,1,0,0,0,6718,6721,3,1458,729,0,6719,6721,3,948,474,0,
		6720,6718,1,0,0,0,6720,6719,1,0,0,0,6721,947,1,0,0,0,6722,6727,5,43,0,
		0,6723,6727,3,1408,704,0,6724,6725,5,39,0,0,6725,6727,3,1468,734,0,6726,
		6722,1,0,0,0,6726,6723,1,0,0,0,6726,6724,1,0,0,0,6727,949,1,0,0,0,6728,
		6729,7,119,0,0,6729,6730,5,697,0,0,6730,951,1,0,0,0,6731,6732,5,675,0,
		0,6732,6733,5,32,0,0,6733,6734,3,954,477,0,6734,6736,5,33,0,0,6735,6737,
		3,942,471,0,6736,6735,1,0,0,0,6736,6737,1,0,0,0,6737,6748,1,0,0,0,6738,
		6739,5,674,0,0,6739,6740,5,32,0,0,6740,6741,3,954,477,0,6741,6742,5,29,
		0,0,6742,6743,3,954,477,0,6743,6745,5,33,0,0,6744,6746,3,942,471,0,6745,
		6744,1,0,0,0,6745,6746,1,0,0,0,6746,6748,1,0,0,0,6747,6731,1,0,0,0,6747,
		6738,1,0,0,0,6748,953,1,0,0,0,6749,6751,5,57,0,0,6750,6749,1,0,0,0,6750,
		6751,1,0,0,0,6751,6752,1,0,0,0,6752,6753,3,912,456,0,6753,955,1,0,0,0,
		6754,6760,3,958,479,0,6755,6756,5,32,0,0,6756,6757,3,958,479,0,6757,6758,
		5,33,0,0,6758,6760,1,0,0,0,6759,6754,1,0,0,0,6759,6755,1,0,0,0,6760,957,
		1,0,0,0,6761,6766,3,1416,708,0,6762,6763,5,29,0,0,6763,6765,3,1416,708,
		0,6764,6762,1,0,0,0,6765,6768,1,0,0,0,6766,6764,1,0,0,0,6766,6767,1,0,
		0,0,6767,959,1,0,0,0,6768,6766,1,0,0,0,6769,6770,5,282,0,0,6770,6771,5,
		85,0,0,6771,6785,5,369,0,0,6772,6773,5,282,0,0,6773,6774,5,382,0,0,6774,
		6775,5,297,0,0,6775,6779,5,369,0,0,6776,6777,5,653,0,0,6777,6778,5,448,
		0,0,6778,6780,5,211,0,0,6779,6776,1,0,0,0,6779,6780,1,0,0,0,6780,6785,
		1,0,0,0,6781,6782,5,653,0,0,6782,6783,5,448,0,0,6783,6785,5,211,0,0,6784,
		6769,1,0,0,0,6784,6772,1,0,0,0,6784,6781,1,0,0,0,6785,961,1,0,0,0,6786,
		6787,5,103,0,0,6787,6788,5,32,0,0,6788,6791,3,1006,503,0,6789,6790,5,630,
		0,0,6790,6792,3,1190,595,0,6791,6789,1,0,0,0,6791,6792,1,0,0,0,6792,6793,
		1,0,0,0,6793,6794,5,33,0,0,6794,7070,1,0,0,0,6795,6797,5,146,0,0,6796,
		6798,3,1476,738,0,6797,6796,1,0,0,0,6797,6798,1,0,0,0,6798,7070,1,0,0,
		0,6799,6800,5,157,0,0,6800,7070,3,1020,510,0,6801,6802,5,162,0,0,6802,
		7070,3,1020,510,0,6803,6804,5,261,0,0,6804,7070,3,1020,510,0,6805,6806,
		5,274,0,0,6806,6807,5,32,0,0,6807,6808,3,912,456,0,6808,6809,5,29,0,0,
		6809,6810,3,912,456,0,6810,6811,5,29,0,0,6811,6812,3,912,456,0,6812,6813,
		5,29,0,0,6813,6814,3,912,456,0,6814,6815,5,33,0,0,6815,7070,1,0,0,0,6816,
		6817,5,278,0,0,6817,6818,5,32,0,0,6818,6821,3,912,456,0,6819,6820,5,29,
		0,0,6820,6822,3,912,456,0,6821,6819,1,0,0,0,6822,6823,1,0,0,0,6823,6821,
		1,0,0,0,6823,6824,1,0,0,0,6824,6825,1,0,0,0,6825,6826,5,33,0,0,6826,7070,
		1,0,0,0,6827,6828,5,754,0,0,6828,6829,5,32,0,0,6829,6830,3,924,462,0,6830,
		6831,5,29,0,0,6831,6833,3,1446,723,0,6832,6834,3,964,482,0,6833,6832,1,
		0,0,0,6833,6834,1,0,0,0,6834,6835,1,0,0,0,6835,6836,3,422,211,0,6836,6837,
		5,33,0,0,6837,7070,1,0,0,0,6838,6839,5,302,0,0,6839,6840,5,32,0,0,6840,
		6841,3,912,456,0,6841,6842,5,29,0,0,6842,6843,3,912,456,0,6843,6844,5,
		33,0,0,6844,7070,1,0,0,0,6845,6846,5,366,0,0,6846,7070,3,1020,510,0,6847,
		6848,5,373,0,0,6848,7070,3,1020,510,0,6849,6850,5,495,0,0,6850,6851,5,
		32,0,0,6851,6852,3,912,456,0,6852,6853,5,29,0,0,6853,6854,3,912,456,0,
		6854,6855,5,33,0,0,6855,7070,1,0,0,0,6856,6857,5,509,0,0,6857,7070,3,1020,
		510,0,6858,6859,5,595,0,0,6859,7070,3,1020,510,0,6860,6861,5,592,0,0,6861,
		6862,5,32,0,0,6862,6865,3,912,456,0,6863,6864,5,29,0,0,6864,6866,3,912,
		456,0,6865,6863,1,0,0,0,6865,6866,1,0,0,0,6866,6867,1,0,0,0,6867,6868,
		5,33,0,0,6868,7070,1,0,0,0,6869,7070,3,978,489,0,6870,7070,3,630,315,0,
		6871,6872,5,635,0,0,6872,7070,3,1020,510,0,6873,6874,5,664,0,0,6874,7070,
		3,1020,510,0,6875,6876,7,120,0,0,6876,6877,5,32,0,0,6877,6878,3,912,456,
		0,6878,6884,5,29,0,0,6879,6885,3,912,456,0,6880,6881,5,278,0,0,6881,6882,
		3,912,456,0,6882,6883,3,1014,507,0,6883,6885,1,0,0,0,6884,6879,1,0,0,0,
		6884,6880,1,0,0,0,6885,6886,1,0,0,0,6886,6887,5,33,0,0,6887,7070,1,0,0,
		0,6888,6890,5,142,0,0,6889,6891,3,1476,738,0,6890,6889,1,0,0,0,6890,6891,
		1,0,0,0,6891,7070,1,0,0,0,6892,6894,5,149,0,0,6893,6895,3,968,484,0,6894,
		6893,1,0,0,0,6894,6895,1,0,0,0,6895,7070,1,0,0,0,6896,6897,7,121,0,0,6897,
		6898,5,32,0,0,6898,6899,3,912,456,0,6899,6900,5,29,0,0,6900,6901,5,278,
		0,0,6901,6902,3,912,456,0,6902,6903,3,1014,507,0,6903,6904,5,33,0,0,6904,
		7070,1,0,0,0,6905,6906,5,217,0,0,6906,6907,5,32,0,0,6907,6908,3,1014,507,
		0,6908,6909,5,235,0,0,6909,6910,3,912,456,0,6910,6911,5,33,0,0,6911,7070,
		1,0,0,0,6912,6913,5,245,0,0,6913,6914,5,32,0,0,6914,6915,3,976,488,0,6915,
		6916,5,29,0,0,6916,6917,3,912,456,0,6917,6918,5,33,0,0,6918,7070,1,0,0,
		0,6919,6920,4,481,95,0,6920,6921,5,808,0,0,6921,6922,5,32,0,0,6922,6925,
		3,912,456,0,6923,6924,5,29,0,0,6924,6926,3,912,456,0,6925,6923,1,0,0,0,
		6925,6926,1,0,0,0,6926,6927,1,0,0,0,6927,6928,5,33,0,0,6928,7070,1,0,0,
		0,6929,6931,5,391,0,0,6930,6932,3,968,484,0,6931,6930,1,0,0,0,6931,6932,
		1,0,0,0,6932,7070,1,0,0,0,6933,6934,5,432,0,0,6934,6935,5,32,0,0,6935,
		6936,3,922,461,0,6936,6937,5,282,0,0,6937,6938,3,912,456,0,6938,6939,5,
		33,0,0,6939,7070,1,0,0,0,6940,7070,3,980,490,0,6941,6943,5,579,0,0,6942,
		6944,3,968,484,0,6943,6942,1,0,0,0,6943,6944,1,0,0,0,6944,7070,1,0,0,0,
		6945,6946,7,122,0,0,6946,6947,5,32,0,0,6947,6948,3,1016,508,0,6948,6949,
		5,29,0,0,6949,6950,3,912,456,0,6950,6951,5,29,0,0,6951,6952,3,912,456,
		0,6952,6953,5,33,0,0,6953,7070,1,0,0,0,6954,6956,5,631,0,0,6955,6957,3,
		1476,738,0,6956,6955,1,0,0,0,6956,6957,1,0,0,0,6957,7070,1,0,0,0,6958,
		6960,5,633,0,0,6959,6961,3,968,484,0,6960,6959,1,0,0,0,6960,6961,1,0,0,
		0,6961,7070,1,0,0,0,6962,6964,5,632,0,0,6963,6965,3,968,484,0,6964,6963,
		1,0,0,0,6964,6965,1,0,0,0,6965,7070,1,0,0,0,6966,6967,5,65,0,0,6967,7070,
		3,1020,510,0,6968,6969,5,102,0,0,6969,7070,3,1020,510,0,6970,6971,5,110,
		0,0,6971,7070,3,1018,509,0,6972,6973,5,113,0,0,6973,7070,3,1020,510,0,
		6974,6975,5,150,0,0,6975,7070,3,1476,738,0,6976,6977,5,263,0,0,6977,6978,
		5,32,0,0,6978,6979,3,912,456,0,6979,6980,5,29,0,0,6980,6981,3,912,456,
		0,6981,6982,5,29,0,0,6982,6983,3,912,456,0,6983,6984,5,33,0,0,6984,7070,
		1,0,0,0,6985,6986,5,233,0,0,6986,6987,5,32,0,0,6987,6988,3,912,456,0,6988,
		6989,5,29,0,0,6989,6992,3,912,456,0,6990,6991,5,29,0,0,6991,6993,3,912,
		456,0,6992,6990,1,0,0,0,6992,6993,1,0,0,0,6993,6994,1,0,0,0,6994,6995,
		5,33,0,0,6995,7070,1,0,0,0,6996,6997,5,361,0,0,6997,7070,3,1020,510,0,
		6998,6999,5,372,0,0,6999,7000,5,32,0,0,7000,7001,3,912,456,0,7001,7002,
		5,29,0,0,7002,7003,3,912,456,0,7003,7004,5,33,0,0,7004,7070,1,0,0,0,7005,
		7006,4,481,96,0,7006,7007,5,424,0,0,7007,7070,3,1020,510,0,7008,7009,5,
		447,0,0,7009,7070,3,1020,510,0,7010,7011,5,474,0,0,7011,7012,5,32,0,0,
		7012,7013,3,912,456,0,7013,7014,5,29,0,0,7014,7015,3,912,456,0,7015,7016,
		5,33,0,0,7016,7070,1,0,0,0,7017,7018,5,475,0,0,7018,7019,5,32,0,0,7019,
		7020,3,912,456,0,7020,7021,5,29,0,0,7021,7022,3,912,456,0,7022,7023,5,
		29,0,0,7023,7024,3,912,456,0,7024,7025,5,33,0,0,7025,7070,1,0,0,0,7026,
		7027,5,493,0,0,7027,7070,3,1020,510,0,7028,7029,5,501,0,0,7029,7070,3,
		1476,738,0,7030,7031,5,606,0,0,7031,7032,5,32,0,0,7032,7033,3,912,456,
		0,7033,7034,5,29,0,0,7034,7035,3,912,456,0,7035,7036,5,33,0,0,7036,7070,
		1,0,0,0,7037,7038,5,648,0,0,7038,7039,5,32,0,0,7039,7042,3,912,456,0,7040,
		7041,5,29,0,0,7041,7043,3,912,456,0,7042,7040,1,0,0,0,7042,7043,1,0,0,
		0,7043,7044,1,0,0,0,7044,7045,5,33,0,0,7045,7070,1,0,0,0,7046,7047,5,649,
		0,0,7047,7048,5,32,0,0,7048,7064,3,912,456,0,7049,7050,5,63,0,0,7050,7051,
		5,103,0,0,7051,7053,3,1184,592,0,7052,7049,1,0,0,0,7052,7053,1,0,0,0,7053,
		7065,1,0,0,0,7054,7055,5,63,0,0,7055,7056,5,77,0,0,7056,7065,3,1184,592,
		0,7057,7058,5,29,0,0,7058,7059,3,1420,710,0,7059,7060,5,29,0,0,7060,7061,
		3,1420,710,0,7061,7062,5,29,0,0,7062,7063,3,1420,710,0,7063,7065,1,0,0,
		0,7064,7052,1,0,0,0,7064,7054,1,0,0,0,7064,7057,1,0,0,0,7065,7066,1,0,
		0,0,7066,7067,5,33,0,0,7067,7070,1,0,0,0,7068,7070,3,966,483,0,7069,6786,
		1,0,0,0,7069,6795,1,0,0,0,7069,6799,1,0,0,0,7069,6801,1,0,0,0,7069,6803,
		1,0,0,0,7069,6805,1,0,0,0,7069,6816,1,0,0,0,7069,6827,1,0,0,0,7069,6838,
		1,0,0,0,7069,6845,1,0,0,0,7069,6847,1,0,0,0,7069,6849,1,0,0,0,7069,6856,
		1,0,0,0,7069,6858,1,0,0,0,7069,6860,1,0,0,0,7069,6869,1,0,0,0,7069,6870,
		1,0,0,0,7069,6871,1,0,0,0,7069,6873,1,0,0,0,7069,6875,1,0,0,0,7069,6888,
		1,0,0,0,7069,6892,1,0,0,0,7069,6896,1,0,0,0,7069,6905,1,0,0,0,7069,6912,
		1,0,0,0,7069,6919,1,0,0,0,7069,6929,1,0,0,0,7069,6933,1,0,0,0,7069,6940,
		1,0,0,0,7069,6941,1,0,0,0,7069,6945,1,0,0,0,7069,6954,1,0,0,0,7069,6958,
		1,0,0,0,7069,6962,1,0,0,0,7069,6966,1,0,0,0,7069,6968,1,0,0,0,7069,6970,
		1,0,0,0,7069,6972,1,0,0,0,7069,6974,1,0,0,0,7069,6976,1,0,0,0,7069,6985,
		1,0,0,0,7069,6996,1,0,0,0,7069,6998,1,0,0,0,7069,7005,1,0,0,0,7069,7008,
		1,0,0,0,7069,7010,1,0,0,0,7069,7017,1,0,0,0,7069,7026,1,0,0,0,7069,7028,
		1,0,0,0,7069,7030,1,0,0,0,7069,7037,1,0,0,0,7069,7046,1,0,0,0,7069,7068,
		1,0,0,0,7070,963,1,0,0,0,7071,7072,5,753,0,0,7072,7073,3,1004,502,0,7073,
		965,1,0,0,0,7074,7075,5,243,0,0,7075,7077,5,32,0,0,7076,7078,3,1006,503,
		0,7077,7076,1,0,0,0,7077,7078,1,0,0,0,7078,7079,1,0,0,0,7079,7098,5,33,
		0,0,7080,7081,5,309,0,0,7081,7098,3,1018,509,0,7082,7083,5,374,0,0,7083,
		7098,3,1018,509,0,7084,7085,5,375,0,0,7085,7098,3,1018,509,0,7086,7087,
		5,376,0,0,7087,7098,3,1018,509,0,7088,7089,5,429,0,0,7089,7090,5,32,0,
		0,7090,7091,3,912,456,0,7091,7092,5,29,0,0,7092,7093,3,912,456,0,7093,
		7094,5,33,0,0,7094,7098,1,0,0,0,7095,7096,5,430,0,0,7096,7098,3,1018,509,
		0,7097,7074,1,0,0,0,7097,7080,1,0,0,0,7097,7082,1,0,0,0,7097,7084,1,0,
		0,0,7097,7086,1,0,0,0,7097,7088,1,0,0,0,7097,7095,1,0,0,0,7098,967,1,0,
		0,0,7099,7101,5,32,0,0,7100,7102,3,970,485,0,7101,7100,1,0,0,0,7101,7102,
		1,0,0,0,7102,7103,1,0,0,0,7103,7104,5,33,0,0,7104,969,1,0,0,0,7105,7106,
		5,3,0,0,7106,971,1,0,0,0,7107,7120,5,304,0,0,7108,7109,3,1422,711,0,7109,
		7110,5,15,0,0,7110,7111,3,1422,711,0,7111,7121,1,0,0,0,7112,7117,3,974,
		487,0,7113,7114,5,29,0,0,7114,7116,3,974,487,0,7115,7113,1,0,0,0,7116,
		7119,1,0,0,0,7117,7115,1,0,0,0,7117,7118,1,0,0,0,7118,7121,1,0,0,0,7119,
		7117,1,0,0,0,7120,7108,1,0,0,0,7120,7112,1,0,0,0,7121,973,1,0,0,0,7122,
		7128,3,1422,711,0,7123,7125,7,35,0,0,7124,7126,5,493,0,0,7125,7124,1,0,
		0,0,7125,7126,1,0,0,0,7126,7129,1,0,0,0,7127,7129,5,493,0,0,7128,7123,
		1,0,0,0,7128,7127,1,0,0,0,7128,7129,1,0,0,0,7129,975,1,0,0,0,7130,7131,
		7,123,0,0,7131,977,1,0,0,0,7132,7133,5,604,0,0,7133,7157,5,32,0,0,7134,
		7137,3,912,456,0,7135,7136,5,235,0,0,7136,7138,3,912,456,0,7137,7135,1,
		0,0,0,7137,7138,1,0,0,0,7138,7158,1,0,0,0,7139,7141,5,299,0,0,7140,7142,
		3,912,456,0,7141,7140,1,0,0,0,7141,7142,1,0,0,0,7142,7143,1,0,0,0,7143,
		7144,5,235,0,0,7144,7158,3,912,456,0,7145,7147,5,600,0,0,7146,7148,3,912,
		456,0,7147,7146,1,0,0,0,7147,7148,1,0,0,0,7148,7149,1,0,0,0,7149,7150,
		5,235,0,0,7150,7158,3,912,456,0,7151,7153,5,87,0,0,7152,7154,3,912,456,
		0,7153,7152,1,0,0,0,7153,7154,1,0,0,0,7154,7155,1,0,0,0,7155,7156,5,235,
		0,0,7156,7158,3,912,456,0,7157,7134,1,0,0,0,7157,7139,1,0,0,0,7157,7145,
		1,0,0,0,7157,7151,1,0,0,0,7158,7159,1,0,0,0,7159,7160,5,33,0,0,7160,979,
		1,0,0,0,7161,7162,5,573,0,0,7162,7163,5,32,0,0,7163,7176,3,912,456,0,7164,
		7165,5,29,0,0,7165,7168,3,912,456,0,7166,7167,5,29,0,0,7167,7169,3,912,
		456,0,7168,7166,1,0,0,0,7168,7169,1,0,0,0,7169,7177,1,0,0,0,7170,7171,
		5,235,0,0,7171,7174,3,912,456,0,7172,7173,5,232,0,0,7173,7175,3,912,456,
		0,7174,7172,1,0,0,0,7174,7175,1,0,0,0,7175,7177,1,0,0,0,7176,7164,1,0,
		0,0,7176,7170,1,0,0,0,7177,7178,1,0,0,0,7178,7179,5,33,0,0,7179,981,1,
		0,0,0,7180,7181,3,1406,703,0,7181,7183,5,32,0,0,7182,7184,3,984,492,0,
		7183,7182,1,0,0,0,7183,7184,1,0,0,0,7184,7185,1,0,0,0,7185,7186,5,33,0,
		0,7186,7195,1,0,0,0,7187,7188,3,1414,707,0,7188,7190,5,32,0,0,7189,7191,
		3,1006,503,0,7190,7189,1,0,0,0,7190,7191,1,0,0,0,7191,7192,1,0,0,0,7192,
		7193,5,33,0,0,7193,7195,1,0,0,0,7194,7180,1,0,0,0,7194,7187,1,0,0,0,7195,
		983,1,0,0,0,7196,7201,3,986,493,0,7197,7198,5,29,0,0,7198,7200,3,986,493,
		0,7199,7197,1,0,0,0,7200,7203,1,0,0,0,7201,7199,1,0,0,0,7201,7202,1,0,
		0,0,7202,985,1,0,0,0,7203,7201,1,0,0,0,7204,7206,3,912,456,0,7205,7207,
		3,390,195,0,7206,7205,1,0,0,0,7206,7207,1,0,0,0,7207,987,1,0,0,0,7208,
		7209,5,39,0,0,7209,7212,3,1468,734,0,7210,7212,5,40,0,0,7211,7208,1,0,
		0,0,7211,7210,1,0,0,0,7212,989,1,0,0,0,7213,7214,3,988,494,0,7214,7215,
		5,7,0,0,7215,7216,3,912,456,0,7216,991,1,0,0,0,7217,7224,3,988,494,0,7218,
		7220,5,41,0,0,7219,7221,3,1482,741,0,7220,7219,1,0,0,0,7220,7221,1,0,0,
		0,7221,7222,1,0,0,0,7222,7224,3,996,498,0,7223,7217,1,0,0,0,7223,7218,
		1,0,0,0,7224,993,1,0,0,0,7225,7227,3,1408,704,0,7226,7228,3,1418,709,0,
		7227,7226,1,0,0,0,7227,7228,1,0,0,0,7228,7235,1,0,0,0,7229,7230,4,497,
		97,0,7230,7232,3,1470,735,0,7231,7233,3,1418,709,0,7232,7231,1,0,0,0,7232,
		7233,1,0,0,0,7233,7235,1,0,0,0,7234,7225,1,0,0,0,7234,7229,1,0,0,0,7235,
		7239,1,0,0,0,7236,7237,5,166,0,0,7237,7239,3,1418,709,0,7238,7234,1,0,
		0,0,7238,7236,1,0,0,0,7239,995,1,0,0,0,7240,7242,3,1468,734,0,7241,7243,
		3,1418,709,0,7242,7241,1,0,0,0,7242,7243,1,0,0,0,7243,997,1,0,0,0,7244,
		7245,5,650,0,0,7245,7246,3,912,456,0,7246,999,1,0,0,0,7247,7248,5,591,
		0,0,7248,7249,3,912,456,0,7249,1001,1,0,0,0,7250,7251,5,190,0,0,7251,7252,
		3,912,456,0,7252,1003,1,0,0,0,7253,7255,5,77,0,0,7254,7256,3,1174,587,
		0,7255,7254,1,0,0,0,7255,7256,1,0,0,0,7256,7302,1,0,0,0,7257,7259,5,103,
		0,0,7258,7260,3,1174,587,0,7259,7258,1,0,0,0,7259,7260,1,0,0,0,7260,7262,
		1,0,0,0,7261,7263,3,1178,589,0,7262,7261,1,0,0,0,7262,7263,1,0,0,0,7263,
		7302,1,0,0,0,7264,7266,3,1170,585,0,7265,7267,3,1174,587,0,7266,7265,1,
		0,0,0,7266,7267,1,0,0,0,7267,7302,1,0,0,0,7268,7270,5,524,0,0,7269,7271,
		5,280,0,0,7270,7269,1,0,0,0,7270,7271,1,0,0,0,7271,7302,1,0,0,0,7272,7274,
		5,621,0,0,7273,7275,5,280,0,0,7274,7273,1,0,0,0,7274,7275,1,0,0,0,7275,
		7302,1,0,0,0,7276,7302,5,157,0,0,7277,7278,4,502,98,0,7278,7302,5,664,
		0,0,7279,7281,5,595,0,0,7280,7282,3,1186,593,0,7281,7280,1,0,0,0,7281,
		7282,1,0,0,0,7282,7302,1,0,0,0,7283,7285,5,154,0,0,7284,7286,3,1186,593,
		0,7285,7284,1,0,0,0,7285,7286,1,0,0,0,7286,7302,1,0,0,0,7287,7289,5,164,
		0,0,7288,7290,3,1462,731,0,7289,7288,1,0,0,0,7289,7290,1,0,0,0,7290,7302,
		1,0,0,0,7291,7302,5,292,0,0,7292,7293,4,502,99,0,7293,7302,3,1172,586,
		0,7294,7295,4,502,100,0,7295,7297,5,227,0,0,7296,7298,3,1464,732,0,7297,
		7296,1,0,0,0,7297,7298,1,0,0,0,7298,7302,1,0,0,0,7299,7300,4,502,101,0,
		7300,7302,7,124,0,0,7301,7253,1,0,0,0,7301,7257,1,0,0,0,7301,7264,1,0,
		0,0,7301,7268,1,0,0,0,7301,7272,1,0,0,0,7301,7276,1,0,0,0,7301,7277,1,
		0,0,0,7301,7279,1,0,0,0,7301,7283,1,0,0,0,7301,7287,1,0,0,0,7301,7291,
		1,0,0,0,7301,7292,1,0,0,0,7301,7294,1,0,0,0,7301,7299,1,0,0,0,7302,1005,
		1,0,0,0,7303,7308,3,912,456,0,7304,7305,5,29,0,0,7305,7307,3,912,456,0,
		7306,7304,1,0,0,0,7307,7310,1,0,0,0,7308,7306,1,0,0,0,7308,7309,1,0,0,
		0,7309,1007,1,0,0,0,7310,7308,1,0,0,0,7311,7312,5,103,0,0,7312,7315,5,
		519,0,0,7313,7315,5,102,0,0,7314,7311,1,0,0,0,7314,7313,1,0,0,0,7315,1009,
		1,0,0,0,7316,7317,7,125,0,0,7317,1011,1,0,0,0,7318,7319,7,126,0,0,7319,
		1013,1,0,0,0,7320,7323,3,1016,508,0,7321,7323,7,127,0,0,7322,7320,1,0,
		0,0,7322,7321,1,0,0,0,7323,1015,1,0,0,0,7324,7325,7,128,0,0,7325,1017,
		1,0,0,0,7326,7327,5,32,0,0,7327,7328,3,1006,503,0,7328,7329,5,33,0,0,7329,
		1019,1,0,0,0,7330,7331,5,32,0,0,7331,7332,3,912,456,0,7332,7333,5,33,0,
		0,7333,1021,1,0,0,0,7334,7335,5,32,0,0,7335,7336,3,924,462,0,7336,7337,
		5,33,0,0,7337,1023,1,0,0,0,7338,7343,3,1026,513,0,7339,7340,5,29,0,0,7340,
		7342,3,1026,513,0,7341,7339,1,0,0,0,7342,7345,1,0,0,0,7343,7341,1,0,0,
		0,7343,7344,1,0,0,0,7344,1025,1,0,0,0,7345,7343,1,0,0,0,7346,7348,3,912,
		456,0,7347,7349,3,364,182,0,7348,7347,1,0,0,0,7348,7349,1,0,0,0,7349,1027,
		1,0,0,0,7350,7355,3,1030,515,0,7351,7352,5,29,0,0,7352,7354,3,1030,515,
		0,7353,7351,1,0,0,0,7354,7357,1,0,0,0,7355,7353,1,0,0,0,7355,7356,1,0,
		0,0,7356,1029,1,0,0,0,7357,7355,1,0,0,0,7358,7359,3,912,456,0,7359,1031,
		1,0,0,0,7360,7361,5,232,0,0,7361,7362,5,101,0,0,7362,7363,3,1448,724,0,
		7363,1033,1,0,0,0,7364,7378,3,4,2,0,7365,7378,3,1036,518,0,7366,7378,3,
		1038,519,0,7367,7378,3,1046,523,0,7368,7378,3,1050,525,0,7369,7378,3,1052,
		526,0,7370,7378,3,1058,529,0,7371,7378,3,1060,530,0,7372,7378,3,1088,544,
		0,7373,7378,3,1086,543,0,7374,7378,3,1106,553,0,7375,7378,3,1110,555,0,
		7376,7378,3,1108,554,0,7377,7364,1,0,0,0,7377,7365,1,0,0,0,7377,7366,1,
		0,0,0,7377,7367,1,0,0,0,7377,7368,1,0,0,0,7377,7369,1,0,0,0,7377,7370,
		1,0,0,0,7377,7371,1,0,0,0,7377,7372,1,0,0,0,7377,7373,1,0,0,0,7377,7374,
		1,0,0,0,7377,7375,1,0,0,0,7377,7376,1,0,0,0,7378,1035,1,0,0,0,7379,7380,
		5,492,0,0,7380,7381,3,912,456,0,7381,1037,1,0,0,0,7382,7383,5,263,0,0,
		7383,7384,3,1040,520,0,7384,7385,5,195,0,0,7385,7386,5,263,0,0,7386,1039,
		1,0,0,0,7387,7388,3,912,456,0,7388,7393,3,1042,521,0,7389,7390,5,191,0,
		0,7390,7394,3,1040,520,0,7391,7392,5,190,0,0,7392,7394,3,1044,522,0,7393,
		7389,1,0,0,0,7393,7391,1,0,0,0,7393,7394,1,0,0,0,7394,1041,1,0,0,0,7395,
		7396,5,591,0,0,7396,7397,3,1044,522,0,7397,1043,1,0,0,0,7398,7399,3,1034,
		517,0,7399,7400,5,30,0,0,7400,7402,1,0,0,0,7401,7398,1,0,0,0,7402,7403,
		1,0,0,0,7403,7401,1,0,0,0,7403,7404,1,0,0,0,7404,1045,1,0,0,0,7405,7407,
		5,95,0,0,7406,7408,3,912,456,0,7407,7406,1,0,0,0,7407,7408,1,0,0,0,7408,
		7412,1,0,0,0,7409,7410,3,998,499,0,7410,7411,3,1042,521,0,7411,7413,1,
		0,0,0,7412,7409,1,0,0,0,7413,7414,1,0,0,0,7414,7412,1,0,0,0,7414,7415,
		1,0,0,0,7415,7417,1,0,0,0,7416,7418,3,1048,524,0,7417,7416,1,0,0,0,7417,
		7418,1,0,0,0,7418,7419,1,0,0,0,7419,7420,5,195,0,0,7420,7421,5,95,0,0,
		7421,1047,1,0,0,0,7422,7423,5,190,0,0,7423,7424,3,1044,522,0,7424,1049,
		1,0,0,0,7425,7426,3,1054,527,0,7426,7428,3,1056,528,0,7427,7429,3,1394,
		697,0,7428,7427,1,0,0,0,7428,7429,1,0,0,0,7429,1051,1,0,0,0,7430,7431,
		3,1056,528,0,7431,1053,1,0,0,0,7432,7433,3,1392,696,0,7433,7434,5,31,0,
		0,7434,1055,1,0,0,0,7435,7437,5,74,0,0,7436,7438,3,1068,534,0,7437,7436,
		1,0,0,0,7437,7438,1,0,0,0,7438,7440,1,0,0,0,7439,7441,3,1044,522,0,7440,
		7439,1,0,0,0,7440,7441,1,0,0,0,7441,7442,1,0,0,0,7442,7443,5,195,0,0,7443,
		1057,1,0,0,0,7444,7445,3,1054,527,0,7445,7447,3,1060,530,0,7446,7448,3,
		1394,697,0,7447,7446,1,0,0,0,7447,7448,1,0,0,0,7448,1059,1,0,0,0,7449,
		7453,3,1062,531,0,7450,7453,3,1064,532,0,7451,7453,3,1066,533,0,7452,7449,
		1,0,0,0,7452,7450,1,0,0,0,7452,7451,1,0,0,0,7453,1061,1,0,0,0,7454,7455,
		5,320,0,0,7455,7456,3,1044,522,0,7456,7457,5,195,0,0,7457,7458,5,320,0,
		0,7458,1063,1,0,0,0,7459,7460,5,652,0,0,7460,7461,3,912,456,0,7461,7462,
		5,183,0,0,7462,7463,3,1044,522,0,7463,7464,5,195,0,0,7464,7465,5,652,0,
		0,7465,1065,1,0,0,0,7466,7467,5,474,0,0,7467,7468,3,1044,522,0,7468,7469,
		5,622,0,0,7469,7470,3,912,456,0,7470,7471,5,195,0,0,7471,7472,5,474,0,
		0,7472,1067,1,0,0,0,7473,7474,3,1070,535,0,7474,7475,5,30,0,0,7475,7477,
		1,0,0,0,7476,7473,1,0,0,0,7477,7478,1,0,0,0,7478,7476,1,0,0,0,7478,7479,
		1,0,0,0,7479,1069,1,0,0,0,7480,7485,3,1072,536,0,7481,7485,3,1074,537,
		0,7482,7485,3,1080,540,0,7483,7485,3,1084,542,0,7484,7480,1,0,0,0,7484,
		7481,1,0,0,0,7484,7482,1,0,0,0,7484,7483,1,0,0,0,7485,1071,1,0,0,0,7486,
		7487,5,165,0,0,7487,7488,3,1410,705,0,7488,7490,3,1168,584,0,7489,7491,
		3,1250,625,0,7490,7489,1,0,0,0,7490,7491,1,0,0,0,7491,7494,1,0,0,0,7492,
		7493,5,166,0,0,7493,7495,3,912,456,0,7494,7492,1,0,0,0,7494,7495,1,0,0,
		0,7495,1073,1,0,0,0,7496,7497,5,165,0,0,7497,7498,3,1408,704,0,7498,7499,
		5,126,0,0,7499,7500,5,232,0,0,7500,7501,3,1076,538,0,7501,1075,1,0,0,0,
		7502,7505,3,1420,710,0,7503,7505,3,1078,539,0,7504,7502,1,0,0,0,7504,7503,
		1,0,0,0,7505,1077,1,0,0,0,7506,7508,5,537,0,0,7507,7509,5,636,0,0,7508,
		7507,1,0,0,0,7508,7509,1,0,0,0,7509,7510,1,0,0,0,7510,7511,3,1446,723,
		0,7511,1079,1,0,0,0,7512,7513,5,165,0,0,7513,7514,7,129,0,0,7514,7515,
		5,251,0,0,7515,7516,5,232,0,0,7516,7521,3,1082,541,0,7517,7518,5,29,0,
		0,7518,7520,3,1082,541,0,7519,7517,1,0,0,0,7520,7523,1,0,0,0,7521,7519,
		1,0,0,0,7521,7522,1,0,0,0,7522,7524,1,0,0,0,7523,7521,1,0,0,0,7524,7525,
		3,1034,517,0,7525,1081,1,0,0,0,7526,7534,3,1076,538,0,7527,7534,3,1408,
		704,0,7528,7534,5,538,0,0,7529,7530,3,1010,505,0,7530,7531,5,234,0,0,7531,
		7534,1,0,0,0,7532,7534,5,536,0,0,7533,7526,1,0,0,0,7533,7527,1,0,0,0,7533,
		7528,1,0,0,0,7533,7529,1,0,0,0,7533,7532,1,0,0,0,7534,1083,1,0,0,0,7535,
		7536,5,165,0,0,7536,7537,3,1408,704,0,7537,7538,5,147,0,0,7538,7539,5,
		232,0,0,7539,7540,3,298,149,0,7540,1085,1,0,0,0,7541,7542,5,290,0,0,7542,
		7543,3,1394,697,0,7543,1087,1,0,0,0,7544,7545,5,301,0,0,7545,7546,3,1394,
		697,0,7546,1089,1,0,0,0,7547,7549,5,239,0,0,7548,7550,7,130,0,0,7549,7548,
		1,0,0,0,7549,7550,1,0,0,0,7550,7551,1,0,0,0,7551,7570,5,175,0,0,7552,7557,
		3,1094,547,0,7553,7554,5,29,0,0,7554,7556,3,1094,547,0,7555,7553,1,0,0,
		0,7556,7559,1,0,0,0,7557,7555,1,0,0,0,7557,7558,1,0,0,0,7558,7571,1,0,
		0,0,7559,7557,1,0,0,0,7560,7561,5,126,0,0,7561,7562,3,1092,546,0,7562,
		7567,3,1096,548,0,7563,7564,5,29,0,0,7564,7566,3,1096,548,0,7565,7563,
		1,0,0,0,7566,7569,1,0,0,0,7567,7565,1,0,0,0,7567,7568,1,0,0,0,7568,7571,
		1,0,0,0,7569,7567,1,0,0,0,7570,7552,1,0,0,0,7570,7560,1,0,0,0,7571,1091,
		1,0,0,0,7572,7576,3,1432,716,0,7573,7576,3,992,496,0,7574,7576,3,1414,
		707,0,7575,7572,1,0,0,0,7575,7573,1,0,0,0,7575,7574,1,0,0,0,7576,1093,
		1,0,0,0,7577,7580,3,988,494,0,7578,7580,3,1408,704,0,7579,7577,1,0,0,0,
		7579,7578,1,0,0,0,7580,7581,1,0,0,0,7581,7582,5,6,0,0,7582,7583,7,131,
		0,0,7583,1095,1,0,0,0,7584,7587,3,988,494,0,7585,7587,3,1408,704,0,7586,
		7584,1,0,0,0,7586,7585,1,0,0,0,7587,7588,1,0,0,0,7588,7591,5,6,0,0,7589,
		7592,3,1098,549,0,7590,7592,5,490,0,0,7591,7589,1,0,0,0,7591,7590,1,0,
		0,0,7592,1097,1,0,0,0,7593,7594,7,132,0,0,7594,1099,1,0,0,0,7595,7598,
		5,523,0,0,7596,7599,3,1408,704,0,7597,7599,3,1078,539,0,7598,7596,1,0,
		0,0,7598,7597,1,0,0,0,7599,7609,1,0,0,0,7600,7601,5,519,0,0,7601,7606,
		3,1104,552,0,7602,7603,5,29,0,0,7603,7605,3,1104,552,0,7604,7602,1,0,0,
		0,7605,7608,1,0,0,0,7606,7604,1,0,0,0,7606,7607,1,0,0,0,7607,7610,1,0,
		0,0,7608,7606,1,0,0,0,7609,7600,1,0,0,0,7609,7610,1,0,0,0,7610,1101,1,
		0,0,0,7611,7614,5,486,0,0,7612,7615,3,1408,704,0,7613,7615,3,1078,539,
		0,7614,7612,1,0,0,0,7614,7613,1,0,0,0,7614,7615,1,0,0,0,7615,7625,1,0,
		0,0,7616,7617,5,519,0,0,7617,7622,3,1104,552,0,7618,7619,5,29,0,0,7619,
		7621,3,1104,552,0,7620,7618,1,0,0,0,7621,7624,1,0,0,0,7622,7620,1,0,0,
		0,7622,7623,1,0,0,0,7623,7626,1,0,0,0,7624,7622,1,0,0,0,7625,7616,1,0,
		0,0,7625,7626,1,0,0,0,7626,1103,1,0,0,0,7627,7628,3,1098,549,0,7628,7629,
		5,6,0,0,7629,7630,3,1092,546,0,7630,1105,1,0,0,0,7631,7632,5,405,0,0,7632,
		7633,3,1408,704,0,7633,1107,1,0,0,0,7634,7635,5,109,0,0,7635,7636,3,1408,
		704,0,7636,1109,1,0,0,0,7637,7642,5,221,0,0,7638,7640,5,387,0,0,7639,7638,
		1,0,0,0,7639,7640,1,0,0,0,7640,7641,1,0,0,0,7641,7643,5,235,0,0,7642,7639,
		1,0,0,0,7642,7643,1,0,0,0,7643,7644,1,0,0,0,7644,7645,3,1408,704,0,7645,
		7646,5,279,0,0,7646,7647,3,1410,705,0,7647,1111,1,0,0,0,7648,7649,5,67,
		0,0,7649,7662,3,912,456,0,7650,7651,5,206,0,0,7651,7652,3,912,456,0,7652,
		7655,3,1014,507,0,7653,7654,5,552,0,0,7654,7656,3,912,456,0,7655,7653,
		1,0,0,0,7655,7656,1,0,0,0,7656,7659,1,0,0,0,7657,7658,5,196,0,0,7658,7660,
		3,912,456,0,7659,7657,1,0,0,0,7659,7660,1,0,0,0,7660,7662,1,0,0,0,7661,
		7648,1,0,0,0,7661,7650,1,0,0,0,7662,1113,1,0,0,0,7663,7664,3,1322,661,
		0,7664,7666,3,1126,563,0,7665,7667,3,1116,558,0,7666,7665,1,0,0,0,7666,
		7667,1,0,0,0,7667,1115,1,0,0,0,7668,7669,4,558,102,0,7669,7672,3,1118,
		559,0,7670,7672,3,1140,570,0,7671,7668,1,0,0,0,7671,7670,1,0,0,0,7672,
		1117,1,0,0,0,7673,7674,5,105,0,0,7674,7675,3,1020,510,0,7675,1119,1,0,
		0,0,7676,7678,4,560,103,0,7677,7679,5,390,0,0,7678,7677,1,0,0,0,7678,7679,
		1,0,0,0,7679,7680,1,0,0,0,7680,7681,5,738,0,0,7681,1121,1,0,0,0,7682,7684,
		7,41,0,0,7683,7685,3,122,61,0,7684,7683,1,0,0,0,7684,7685,1,0,0,0,7685,
		7686,1,0,0,0,7686,7690,3,1148,574,0,7687,7689,3,1154,577,0,7688,7687,1,
		0,0,0,7689,7692,1,0,0,0,7690,7688,1,0,0,0,7690,7691,1,0,0,0,7691,7757,
		1,0,0,0,7692,7690,1,0,0,0,7693,7695,5,237,0,0,7694,7696,3,442,221,0,7695,
		7694,1,0,0,0,7695,7696,1,0,0,0,7696,7698,1,0,0,0,7697,7699,3,1332,666,
		0,7698,7697,1,0,0,0,7698,7699,1,0,0,0,7699,7700,1,0,0,0,7700,7704,3,1148,
		574,0,7701,7703,3,1162,581,0,7702,7701,1,0,0,0,7703,7706,1,0,0,0,7704,
		7702,1,0,0,0,7704,7705,1,0,0,0,7705,7757,1,0,0,0,7706,7704,1,0,0,0,7707,
		7709,5,534,0,0,7708,7710,3,442,221,0,7709,7708,1,0,0,0,7709,7710,1,0,0,
		0,7710,7712,1,0,0,0,7711,7713,3,1332,666,0,7712,7711,1,0,0,0,7712,7713,
		1,0,0,0,7713,7714,1,0,0,0,7714,7718,3,1148,574,0,7715,7717,3,1164,582,
		0,7716,7715,1,0,0,0,7717,7720,1,0,0,0,7718,7716,1,0,0,0,7718,7719,1,0,
		0,0,7719,7757,1,0,0,0,7720,7718,1,0,0,0,7721,7723,3,1124,562,0,7722,7721,
		1,0,0,0,7722,7723,1,0,0,0,7723,7754,1,0,0,0,7724,7725,5,438,0,0,7725,7731,
		5,295,0,0,7726,7728,5,618,0,0,7727,7729,3,442,221,0,7728,7727,1,0,0,0,
		7728,7729,1,0,0,0,7729,7731,1,0,0,0,7730,7724,1,0,0,0,7730,7726,1,0,0,
		0,7731,7733,1,0,0,0,7732,7734,3,122,61,0,7733,7732,1,0,0,0,7733,7734,1,
		0,0,0,7734,7735,1,0,0,0,7735,7739,3,1148,574,0,7736,7738,3,1154,577,0,
		7737,7736,1,0,0,0,7738,7741,1,0,0,0,7739,7737,1,0,0,0,7739,7740,1,0,0,
		0,7740,7755,1,0,0,0,7741,7739,1,0,0,0,7742,7743,5,231,0,0,7743,7745,5,
		295,0,0,7744,7746,3,1332,666,0,7745,7744,1,0,0,0,7745,7746,1,0,0,0,7746,
		7747,1,0,0,0,7747,7748,3,1144,572,0,7748,7749,3,1140,570,0,7749,7755,1,
		0,0,0,7750,7752,3,1118,559,0,7751,7753,3,1120,560,0,7752,7751,1,0,0,0,
		7752,7753,1,0,0,0,7753,7755,1,0,0,0,7754,7730,1,0,0,0,7754,7742,1,0,0,
		0,7754,7750,1,0,0,0,7755,7757,1,0,0,0,7756,7682,1,0,0,0,7756,7693,1,0,
		0,0,7756,7707,1,0,0,0,7756,7722,1,0,0,0,7757,1123,1,0,0,0,7758,7760,5,
		129,0,0,7759,7761,3,1408,704,0,7760,7759,1,0,0,0,7760,7761,1,0,0,0,7761,
		1125,1,0,0,0,7762,7787,3,1168,584,0,7763,7765,3,1128,564,0,7764,7763,1,
		0,0,0,7765,7768,1,0,0,0,7766,7764,1,0,0,0,7766,7767,1,0,0,0,7767,7788,
		1,0,0,0,7768,7766,1,0,0,0,7769,7771,3,1250,625,0,7770,7769,1,0,0,0,7770,
		7771,1,0,0,0,7771,7774,1,0,0,0,7772,7773,5,241,0,0,7773,7775,5,59,0,0,
		7774,7772,1,0,0,0,7774,7775,1,0,0,0,7775,7776,1,0,0,0,7776,7777,5,63,0,
		0,7777,7779,3,1020,510,0,7778,7780,7,133,0,0,7779,7778,1,0,0,0,7779,7780,
		1,0,0,0,7780,7784,1,0,0,0,7781,7783,3,1128,564,0,7782,7781,1,0,0,0,7783,
		7786,1,0,0,0,7784,7782,1,0,0,0,7784,7785,1,0,0,0,7785,7788,1,0,0,0,7786,
		7784,1,0,0,0,7787,7766,1,0,0,0,7787,7770,1,0,0,0,7788,1127,1,0,0,0,7789,
		7791,5,390,0,0,7790,7789,1,0,0,0,7790,7791,1,0,0,0,7791,7792,1,0,0,0,7792,
		7851,3,1456,728,0,7793,7794,4,564,104,0,7794,7795,5,390,0,0,7795,7851,
		5,728,0,0,7796,7800,5,166,0,0,7797,7801,3,1136,568,0,7798,7799,4,564,105,
		0,7799,7801,3,1020,510,0,7800,7797,1,0,0,0,7800,7798,1,0,0,0,7801,7851,
		1,0,0,0,7802,7803,5,401,0,0,7803,7804,5,623,0,0,7804,7806,5,391,0,0,7805,
		7807,3,968,484,0,7806,7805,1,0,0,0,7806,7807,1,0,0,0,7807,7851,1,0,0,0,
		7808,7851,5,69,0,0,7809,7810,5,515,0,0,7810,7811,5,166,0,0,7811,7851,5,
		636,0,0,7812,7814,5,438,0,0,7813,7812,1,0,0,0,7813,7814,1,0,0,0,7814,7815,
		1,0,0,0,7815,7851,5,295,0,0,7816,7818,5,618,0,0,7817,7819,5,295,0,0,7818,
		7817,1,0,0,0,7818,7819,1,0,0,0,7819,7851,1,0,0,0,7820,7821,5,118,0,0,7821,
		7851,3,1446,723,0,7822,7851,3,1250,625,0,7823,7824,5,117,0,0,7824,7851,
		3,1130,565,0,7825,7826,5,563,0,0,7826,7851,3,1132,566,0,7827,7828,5,715,
		0,0,7828,7851,3,1426,713,0,7829,7831,4,564,106,0,7830,7832,3,1124,562,
		0,7831,7830,1,0,0,0,7831,7832,1,0,0,0,7832,7833,1,0,0,0,7833,7851,3,1118,
		559,0,7834,7835,4,564,107,0,7835,7851,3,1120,560,0,7836,7837,4,564,108,
		0,7837,7839,5,757,0,0,7838,7840,5,6,0,0,7839,7838,1,0,0,0,7839,7840,1,
		0,0,0,7840,7841,1,0,0,0,7841,7851,3,1486,743,0,7842,7843,4,564,109,0,7843,
		7845,5,758,0,0,7844,7846,5,6,0,0,7845,7844,1,0,0,0,7845,7846,1,0,0,0,7846,
		7847,1,0,0,0,7847,7851,3,1486,743,0,7848,7849,4,564,110,0,7849,7851,3,
		1158,579,0,7850,7790,1,0,0,0,7850,7793,1,0,0,0,7850,7796,1,0,0,0,7850,
		7802,1,0,0,0,7850,7808,1,0,0,0,7850,7809,1,0,0,0,7850,7813,1,0,0,0,7850,
		7816,1,0,0,0,7850,7820,1,0,0,0,7850,7822,1,0,0,0,7850,7823,1,0,0,0,7850,
		7825,1,0,0,0,7850,7827,1,0,0,0,7850,7829,1,0,0,0,7850,7834,1,0,0,0,7850,
		7836,1,0,0,0,7850,7842,1,0,0,0,7850,7848,1,0,0,0,7851,1129,1,0,0,0,7852,
		7853,7,134,0,0,7853,1131,1,0,0,0,7854,7855,7,135,0,0,7855,1133,1,0,0,0,
		7856,7857,5,391,0,0,7857,7858,3,1188,594,0,7858,1135,1,0,0,0,7859,7862,
		3,1134,567,0,7860,7862,3,1430,715,0,7861,7859,1,0,0,0,7861,7860,1,0,0,
		0,7862,1137,1,0,0,0,7863,7865,5,618,0,0,7864,7866,5,295,0,0,7865,7864,
		1,0,0,0,7865,7866,1,0,0,0,7866,7878,1,0,0,0,7867,7868,5,118,0,0,7868,7878,
		3,1442,721,0,7869,7871,3,1010,505,0,7870,7869,1,0,0,0,7870,7871,1,0,0,
		0,7871,7872,1,0,0,0,7872,7878,5,395,0,0,7873,7875,5,438,0,0,7874,7873,
		1,0,0,0,7874,7875,1,0,0,0,7875,7876,1,0,0,0,7876,7878,5,295,0,0,7877,7863,
		1,0,0,0,7877,7867,1,0,0,0,7877,7870,1,0,0,0,7877,7874,1,0,0,0,7878,1139,
		1,0,0,0,7879,7880,5,460,0,0,7880,7882,3,1384,692,0,7881,7883,3,1412,706,
		0,7882,7881,1,0,0,0,7882,7883,1,0,0,0,7883,7886,1,0,0,0,7884,7885,5,345,
		0,0,7885,7887,7,136,0,0,7886,7884,1,0,0,0,7886,7887,1,0,0,0,7887,7904,
		1,0,0,0,7888,7889,5,401,0,0,7889,7890,5,623,0,0,7890,7894,3,1142,571,0,
		7891,7892,5,401,0,0,7892,7893,5,171,0,0,7893,7895,3,1142,571,0,7894,7891,
		1,0,0,0,7894,7895,1,0,0,0,7895,7905,1,0,0,0,7896,7897,5,401,0,0,7897,7898,
		5,171,0,0,7898,7902,3,1142,571,0,7899,7900,5,401,0,0,7900,7901,5,623,0,
		0,7901,7903,3,1142,571,0,7902,7899,1,0,0,0,7902,7903,1,0,0,0,7903,7905,
		1,0,0,0,7904,7888,1,0,0,0,7904,7896,1,0,0,0,7904,7905,1,0,0,0,7905,1141,
		1,0,0,0,7906,7914,7,2,0,0,7907,7908,5,519,0,0,7908,7914,3,1456,728,0,7909,
		7910,5,519,0,0,7910,7914,5,166,0,0,7911,7912,5,392,0,0,7912,7914,5,50,
		0,0,7913,7906,1,0,0,0,7913,7907,1,0,0,0,7913,7909,1,0,0,0,7913,7911,1,
		0,0,0,7914,1143,1,0,0,0,7915,7916,5,32,0,0,7916,7921,3,1146,573,0,7917,
		7918,5,29,0,0,7918,7920,3,1146,573,0,7919,7917,1,0,0,0,7920,7923,1,0,0,
		0,7921,7919,1,0,0,0,7921,7922,1,0,0,0,7922,7924,1,0,0,0,7923,7921,1,0,
		0,0,7924,7925,5,33,0,0,7925,1145,1,0,0,0,7926,7928,3,1408,704,0,7927,7929,
		3,1174,587,0,7928,7927,1,0,0,0,7928,7929,1,0,0,0,7929,7931,1,0,0,0,7930,
		7932,3,364,182,0,7931,7930,1,0,0,0,7931,7932,1,0,0,0,7932,1147,1,0,0,0,
		7933,7934,5,32,0,0,7934,7939,3,1150,575,0,7935,7936,5,29,0,0,7936,7938,
		3,1150,575,0,7937,7935,1,0,0,0,7938,7941,1,0,0,0,7939,7937,1,0,0,0,7939,
		7940,1,0,0,0,7940,7942,1,0,0,0,7941,7939,1,0,0,0,7942,7943,5,33,0,0,7943,
		1149,1,0,0,0,7944,7951,3,1146,573,0,7945,7946,4,575,111,0,7946,7948,3,
		1020,510,0,7947,7949,3,364,182,0,7948,7947,1,0,0,0,7948,7949,1,0,0,0,7949,
		7951,1,0,0,0,7950,7944,1,0,0,0,7950,7945,1,0,0,0,7951,1151,1,0,0,0,7952,
		7953,7,137,0,0,7953,1153,1,0,0,0,7954,7957,3,1156,578,0,7955,7957,3,1160,
		580,0,7956,7954,1,0,0,0,7956,7955,1,0,0,0,7957,1155,1,0,0,0,7958,7960,
		5,294,0,0,7959,7961,5,6,0,0,7960,7959,1,0,0,0,7960,7961,1,0,0,0,7961,7962,
		1,0,0,0,7962,7979,3,1420,710,0,7963,7964,5,118,0,0,7964,7979,3,1446,723,
		0,7965,7979,3,1158,579,0,7966,7967,4,578,112,0,7967,7969,5,757,0,0,7968,
		7970,5,6,0,0,7969,7968,1,0,0,0,7969,7970,1,0,0,0,7970,7971,1,0,0,0,7971,
		7979,3,1486,743,0,7972,7973,4,578,113,0,7973,7975,5,758,0,0,7974,7976,
		5,6,0,0,7975,7974,1,0,0,0,7975,7976,1,0,0,0,7976,7977,1,0,0,0,7977,7979,
		3,1486,743,0,7978,7958,1,0,0,0,7978,7963,1,0,0,0,7978,7965,1,0,0,0,7978,
		7966,1,0,0,0,7978,7972,1,0,0,0,7979,1157,1,0,0,0,7980,7981,7,138,0,0,7981,
		1159,1,0,0,0,7982,7983,7,139,0,0,7983,7984,3,1152,576,0,7984,1161,1,0,
		0,0,7985,7990,3,1156,578,0,7986,7987,5,653,0,0,7987,7988,5,419,0,0,7988,
		7990,3,1408,704,0,7989,7985,1,0,0,0,7989,7986,1,0,0,0,7990,1163,1,0,0,
		0,7991,7992,3,1156,578,0,7992,1165,1,0,0,0,7993,7994,3,1168,584,0,7994,
		7995,5,0,0,1,7995,1167,1,0,0,0,7996,7998,7,140,0,0,7997,7999,3,1174,587,
		0,7998,7997,1,0,0,0,7998,7999,1,0,0,0,7999,8001,1,0,0,0,8000,8002,3,1176,
		588,0,8001,8000,1,0,0,0,8001,8002,1,0,0,0,8002,8143,1,0,0,0,8003,8009,
		5,455,0,0,8004,8006,5,182,0,0,8005,8007,5,434,0,0,8006,8005,1,0,0,0,8006,
		8007,1,0,0,0,8007,8009,1,0,0,0,8008,8003,1,0,0,0,8008,8004,1,0,0,0,8009,
		8011,1,0,0,0,8010,8012,3,1466,733,0,8011,8010,1,0,0,0,8011,8012,1,0,0,
		0,8012,8014,1,0,0,0,8013,8015,3,1176,588,0,8014,8013,1,0,0,0,8014,8015,
		1,0,0,0,8015,8143,1,0,0,0,8016,8018,7,141,0,0,8017,8019,3,1462,731,0,8018,
		8017,1,0,0,0,8018,8019,1,0,0,0,8019,8021,1,0,0,0,8020,8022,3,1176,588,
		0,8021,8020,1,0,0,0,8021,8022,1,0,0,0,8022,8143,1,0,0,0,8023,8025,5,81,
		0,0,8024,8026,3,1174,587,0,8025,8024,1,0,0,0,8025,8026,1,0,0,0,8026,8143,
		1,0,0,0,8027,8143,7,142,0,0,8028,8030,5,103,0,0,8029,8031,3,1174,587,0,
		8030,8029,1,0,0,0,8030,8031,1,0,0,0,8031,8033,1,0,0,0,8032,8034,3,1178,
		589,0,8033,8032,1,0,0,0,8033,8034,1,0,0,0,8034,8143,1,0,0,0,8035,8037,
		3,1170,585,0,8036,8038,3,1174,587,0,8037,8036,1,0,0,0,8037,8038,1,0,0,
		0,8038,8040,1,0,0,0,8039,8041,5,77,0,0,8040,8039,1,0,0,0,8040,8041,1,0,
		0,0,8041,8143,1,0,0,0,8042,8044,5,77,0,0,8043,8045,3,1174,587,0,8044,8043,
		1,0,0,0,8044,8045,1,0,0,0,8045,8143,1,0,0,0,8046,8047,5,103,0,0,8047,8050,
		5,641,0,0,8048,8050,5,638,0,0,8049,8046,1,0,0,0,8049,8048,1,0,0,0,8050,
		8051,1,0,0,0,8051,8053,3,1174,587,0,8052,8054,3,1178,589,0,8053,8052,1,
		0,0,0,8053,8054,1,0,0,0,8054,8143,1,0,0,0,8055,8056,5,381,0,0,8056,8066,
		5,638,0,0,8057,8066,5,398,0,0,8058,8059,5,383,0,0,8059,8066,5,638,0,0,
		8060,8061,5,381,0,0,8061,8062,5,103,0,0,8062,8066,5,641,0,0,8063,8064,
		5,383,0,0,8064,8066,5,641,0,0,8065,8055,1,0,0,0,8065,8057,1,0,0,0,8065,
		8058,1,0,0,0,8065,8060,1,0,0,0,8065,8063,1,0,0,0,8066,8067,1,0,0,0,8067,
		8069,3,1174,587,0,8068,8070,5,77,0,0,8069,8068,1,0,0,0,8069,8070,1,0,0,
		0,8070,8143,1,0,0,0,8071,8072,5,637,0,0,8072,8143,3,1174,587,0,8073,8075,
		5,664,0,0,8074,8076,3,1174,587,0,8075,8074,1,0,0,0,8075,8076,1,0,0,0,8076,
		8078,1,0,0,0,8077,8079,3,1176,588,0,8078,8077,1,0,0,0,8078,8079,1,0,0,
		0,8079,8143,1,0,0,0,8080,8143,5,157,0,0,8081,8083,5,595,0,0,8082,8084,
		3,1186,593,0,8083,8082,1,0,0,0,8083,8084,1,0,0,0,8084,8143,1,0,0,0,8085,
		8087,5,592,0,0,8086,8088,3,1186,593,0,8087,8086,1,0,0,0,8087,8088,1,0,
		0,0,8088,8143,1,0,0,0,8089,8091,5,154,0,0,8090,8092,3,1186,593,0,8091,
		8090,1,0,0,0,8091,8092,1,0,0,0,8092,8143,1,0,0,0,8093,8143,5,596,0,0,8094,
		8096,5,83,0,0,8095,8097,3,1174,587,0,8096,8095,1,0,0,0,8096,8097,1,0,0,
		0,8097,8143,1,0,0,0,8098,8143,7,143,0,0,8099,8100,5,319,0,0,8100,8143,
		5,637,0,0,8101,8105,5,319,0,0,8102,8103,5,103,0,0,8103,8106,5,641,0,0,
		8104,8106,5,638,0,0,8105,8102,1,0,0,0,8105,8104,1,0,0,0,8105,8106,1,0,
		0,0,8106,8108,1,0,0,0,8107,8109,3,1178,589,0,8108,8107,1,0,0,0,8108,8109,
		1,0,0,0,8109,8143,1,0,0,0,8110,8112,5,598,0,0,8111,8113,3,1178,589,0,8112,
		8111,1,0,0,0,8112,8113,1,0,0,0,8113,8143,1,0,0,0,8114,8116,5,589,0,0,8115,
		8117,3,1174,587,0,8116,8115,1,0,0,0,8116,8117,1,0,0,0,8117,8119,1,0,0,
		0,8118,8120,3,1178,589,0,8119,8118,1,0,0,0,8119,8120,1,0,0,0,8120,8143,
		1,0,0,0,8121,8123,5,356,0,0,8122,8124,3,1178,589,0,8123,8122,1,0,0,0,8123,
		8124,1,0,0,0,8124,8143,1,0,0,0,8125,8127,5,318,0,0,8126,8128,3,1178,589,
		0,8127,8126,1,0,0,0,8127,8128,1,0,0,0,8128,8143,1,0,0,0,8129,8130,5,199,
		0,0,8130,8132,3,1438,719,0,8131,8133,3,1178,589,0,8132,8131,1,0,0,0,8132,
		8133,1,0,0,0,8133,8143,1,0,0,0,8134,8135,5,519,0,0,8135,8137,3,1438,719,
		0,8136,8138,3,1178,589,0,8137,8136,1,0,0,0,8137,8138,1,0,0,0,8138,8143,
		1,0,0,0,8139,8143,5,515,0,0,8140,8143,5,292,0,0,8141,8143,7,144,0,0,8142,
		7996,1,0,0,0,8142,8008,1,0,0,0,8142,8016,1,0,0,0,8142,8023,1,0,0,0,8142,
		8027,1,0,0,0,8142,8028,1,0,0,0,8142,8035,1,0,0,0,8142,8042,1,0,0,0,8142,
		8049,1,0,0,0,8142,8065,1,0,0,0,8142,8071,1,0,0,0,8142,8073,1,0,0,0,8142,
		8080,1,0,0,0,8142,8081,1,0,0,0,8142,8085,1,0,0,0,8142,8089,1,0,0,0,8142,
		8093,1,0,0,0,8142,8094,1,0,0,0,8142,8098,1,0,0,0,8142,8099,1,0,0,0,8142,
		8101,1,0,0,0,8142,8110,1,0,0,0,8142,8114,1,0,0,0,8142,8121,1,0,0,0,8142,
		8125,1,0,0,0,8142,8129,1,0,0,0,8142,8134,1,0,0,0,8142,8139,1,0,0,0,8142,
		8140,1,0,0,0,8142,8141,1,0,0,0,8143,1169,1,0,0,0,8144,8148,5,383,0,0,8145,
		8146,5,381,0,0,8146,8148,5,103,0,0,8147,8144,1,0,0,0,8147,8145,1,0,0,0,
		8148,1171,1,0,0,0,8149,8155,5,455,0,0,8150,8152,5,182,0,0,8151,8153,5,
		434,0,0,8152,8151,1,0,0,0,8152,8153,1,0,0,0,8153,8155,1,0,0,0,8154,8149,
		1,0,0,0,8154,8150,1,0,0,0,8155,1173,1,0,0,0,8156,8159,5,32,0,0,8157,8160,
		3,1426,713,0,8158,8160,5,46,0,0,8159,8157,1,0,0,0,8159,8158,1,0,0,0,8160,
		8161,1,0,0,0,8161,8162,5,33,0,0,8162,1175,1,0,0,0,8163,8165,7,145,0,0,
		8164,8163,1,0,0,0,8165,8166,1,0,0,0,8166,8164,1,0,0,0,8166,8167,1,0,0,
		0,8167,1177,1,0,0,0,8168,8183,3,1180,590,0,8169,8183,3,1182,591,0,8170,
		8183,5,90,0,0,8171,8172,3,1008,504,0,8172,8174,3,1190,595,0,8173,8175,
		5,77,0,0,8174,8173,1,0,0,0,8174,8175,1,0,0,0,8175,8183,1,0,0,0,8176,8180,
		5,77,0,0,8177,8178,3,1008,504,0,8178,8179,3,1190,595,0,8179,8181,1,0,0,
		0,8180,8177,1,0,0,0,8180,8181,1,0,0,0,8181,8183,1,0,0,0,8182,8168,1,0,
		0,0,8182,8169,1,0,0,0,8182,8170,1,0,0,0,8182,8171,1,0,0,0,8182,8176,1,
		0,0,0,8183,1179,1,0,0,0,8184,8186,5,65,0,0,8185,8187,5,77,0,0,8186,8185,
		1,0,0,0,8186,8187,1,0,0,0,8187,8191,1,0,0,0,8188,8189,5,77,0,0,8189,8191,
		5,65,0,0,8190,8184,1,0,0,0,8190,8188,1,0,0,0,8191,1181,1,0,0,0,8192,8194,
		5,615,0,0,8193,8195,5,77,0,0,8194,8193,1,0,0,0,8194,8195,1,0,0,0,8195,
		8199,1,0,0,0,8196,8197,5,77,0,0,8197,8199,5,615,0,0,8198,8192,1,0,0,0,
		8198,8196,1,0,0,0,8199,1183,1,0,0,0,8200,8201,5,32,0,0,8201,8202,3,1422,
		711,0,8202,8203,5,33,0,0,8203,1185,1,0,0,0,8204,8205,5,32,0,0,8205,8206,
		5,3,0,0,8206,8207,5,33,0,0,8207,1187,1,0,0,0,8208,8214,1,0,0,0,8209,8214,
		3,1476,738,0,8210,8211,5,32,0,0,8211,8212,5,3,0,0,8212,8214,5,33,0,0,8213,
		8208,1,0,0,0,8213,8209,1,0,0,0,8213,8210,1,0,0,0,8214,1189,1,0,0,0,8215,
		8220,3,1468,734,0,8216,8220,5,77,0,0,8217,8218,4,595,114,0,8218,8220,5,
		166,0,0,8219,8215,1,0,0,0,8219,8216,1,0,0,0,8219,8217,1,0,0,0,8220,1191,
		1,0,0,0,8221,8227,3,1468,734,0,8222,8223,4,596,115,0,8223,8227,5,166,0,
		0,8224,8225,4,596,116,0,8225,8227,5,77,0,0,8226,8221,1,0,0,0,8226,8222,
		1,0,0,0,8226,8224,1,0,0,0,8227,1193,1,0,0,0,8228,8235,3,1202,601,0,8229,
		8231,5,29,0,0,8230,8229,1,0,0,0,8230,8231,1,0,0,0,8231,8232,1,0,0,0,8232,
		8234,3,1202,601,0,8233,8230,1,0,0,0,8234,8237,1,0,0,0,8235,8233,1,0,0,
		0,8235,8236,1,0,0,0,8236,1195,1,0,0,0,8237,8235,1,0,0,0,8238,8240,3,1194,
		597,0,8239,8241,3,1198,599,0,8240,8239,1,0,0,0,8240,8241,1,0,0,0,8241,
		8244,1,0,0,0,8242,8244,3,1198,599,0,8243,8238,1,0,0,0,8243,8242,1,0,0,
		0,8244,1197,1,0,0,0,8245,8247,3,1212,606,0,8246,8248,3,94,47,0,8247,8246,
		1,0,0,0,8247,8248,1,0,0,0,8248,8251,1,0,0,0,8249,8251,3,94,47,0,8250,8245,
		1,0,0,0,8250,8249,1,0,0,0,8251,1199,1,0,0,0,8252,8254,3,1202,601,0,8253,
		8252,1,0,0,0,8254,8255,1,0,0,0,8255,8253,1,0,0,0,8255,8256,1,0,0,0,8256,
		1201,1,0,0,0,8257,8259,5,198,0,0,8258,8260,5,6,0,0,8259,8258,1,0,0,0,8259,
		8260,1,0,0,0,8260,8261,1,0,0,0,8261,8398,3,1376,688,0,8262,8263,4,601,
		117,0,8263,8265,5,729,0,0,8264,8266,3,1478,739,0,8265,8264,1,0,0,0,8265,
		8266,1,0,0,0,8266,8269,1,0,0,0,8267,8270,5,395,0,0,8268,8270,3,1468,734,
		0,8269,8267,1,0,0,0,8269,8268,1,0,0,0,8270,8398,1,0,0,0,8271,8273,5,348,
		0,0,8272,8274,5,6,0,0,8273,8272,1,0,0,0,8273,8274,1,0,0,0,8274,8275,1,
		0,0,0,8275,8398,3,1424,712,0,8276,8278,5,367,0,0,8277,8279,5,6,0,0,8278,
		8277,1,0,0,0,8278,8279,1,0,0,0,8279,8280,1,0,0,0,8280,8398,3,1424,712,
		0,8281,8283,5,70,0,0,8282,8284,5,6,0,0,8283,8282,1,0,0,0,8283,8284,1,0,
		0,0,8284,8285,1,0,0,0,8285,8398,3,1424,712,0,8286,8288,5,424,0,0,8287,
		8289,5,6,0,0,8288,8287,1,0,0,0,8288,8289,1,0,0,0,8289,8290,1,0,0,0,8290,
		8398,3,1440,720,0,8291,8293,5,118,0,0,8292,8294,5,6,0,0,8293,8292,1,0,
		0,0,8293,8294,1,0,0,0,8294,8295,1,0,0,0,8295,8398,3,1440,720,0,8296,8298,
		5,124,0,0,8297,8299,5,6,0,0,8298,8297,1,0,0,0,8298,8299,1,0,0,0,8299,8300,
		1,0,0,0,8300,8398,3,1442,721,0,8301,8303,5,194,0,0,8302,8304,5,6,0,0,8303,
		8302,1,0,0,0,8303,8304,1,0,0,0,8304,8305,1,0,0,0,8305,8398,3,1442,721,
		0,8306,8308,5,69,0,0,8307,8309,5,6,0,0,8308,8307,1,0,0,0,8308,8309,1,0,
		0,0,8309,8310,1,0,0,0,8310,8398,3,1424,712,0,8311,8313,5,417,0,0,8312,
		8314,5,6,0,0,8313,8312,1,0,0,0,8313,8314,1,0,0,0,8314,8315,1,0,0,0,8315,
		8398,3,1204,602,0,8316,8318,7,146,0,0,8317,8319,5,6,0,0,8318,8317,1,0,
		0,0,8318,8319,1,0,0,0,8319,8320,1,0,0,0,8320,8398,3,1204,602,0,8321,8323,
		7,147,0,0,8322,8324,5,6,0,0,8323,8322,1,0,0,0,8323,8324,1,0,0,0,8324,8325,
		1,0,0,0,8325,8398,3,1420,710,0,8326,8328,5,170,0,0,8327,8329,5,6,0,0,8328,
		8327,1,0,0,0,8328,8329,1,0,0,0,8329,8330,1,0,0,0,8330,8398,3,1420,710,
		0,8331,8333,5,502,0,0,8332,8334,5,6,0,0,8333,8332,1,0,0,0,8333,8334,1,
		0,0,0,8334,8335,1,0,0,0,8335,8398,7,148,0,0,8336,8338,5,617,0,0,8337,8339,
		5,6,0,0,8338,8337,1,0,0,0,8338,8339,1,0,0,0,8339,8340,1,0,0,0,8340,8341,
		5,32,0,0,8341,8342,3,1386,693,0,8342,8343,5,33,0,0,8343,8398,1,0,0,0,8344,
		8398,3,1210,605,0,8345,8398,3,1206,603,0,8346,8348,5,275,0,0,8347,8349,
		5,6,0,0,8348,8347,1,0,0,0,8348,8349,1,0,0,0,8349,8350,1,0,0,0,8350,8398,
		7,149,0,0,8351,8352,5,153,0,0,8352,8354,5,176,0,0,8353,8355,5,6,0,0,8354,
		8353,1,0,0,0,8354,8355,1,0,0,0,8355,8356,1,0,0,0,8356,8398,3,1442,721,
		0,8357,8358,5,268,0,0,8358,8360,5,176,0,0,8359,8361,5,6,0,0,8360,8359,
		1,0,0,0,8360,8361,1,0,0,0,8361,8362,1,0,0,0,8362,8398,3,1442,721,0,8363,
		8365,5,582,0,0,8364,8366,5,6,0,0,8365,8364,1,0,0,0,8365,8366,1,0,0,0,8366,
		8367,1,0,0,0,8367,8398,3,1408,704,0,8368,8369,5,563,0,0,8369,8398,7,150,
		0,0,8370,8372,5,127,0,0,8371,8373,5,6,0,0,8372,8371,1,0,0,0,8372,8373,
		1,0,0,0,8373,8374,1,0,0,0,8374,8398,3,1442,721,0,8375,8377,5,294,0,0,8376,
		8378,5,6,0,0,8377,8376,1,0,0,0,8377,8378,1,0,0,0,8378,8379,1,0,0,0,8379,
		8398,3,1424,712,0,8380,8381,4,601,118,0,8381,8382,5,553,0,0,8382,8398,
		5,601,0,0,8383,8384,4,601,119,0,8384,8386,5,757,0,0,8385,8387,5,6,0,0,
		8386,8385,1,0,0,0,8386,8387,1,0,0,0,8387,8388,1,0,0,0,8388,8398,3,1486,
		743,0,8389,8390,4,601,120,0,8390,8392,5,758,0,0,8391,8393,5,6,0,0,8392,
		8391,1,0,0,0,8392,8393,1,0,0,0,8393,8394,1,0,0,0,8394,8398,3,1486,743,
		0,8395,8396,4,601,121,0,8396,8398,3,154,77,0,8397,8257,1,0,0,0,8397,8262,
		1,0,0,0,8397,8271,1,0,0,0,8397,8276,1,0,0,0,8397,8281,1,0,0,0,8397,8286,
		1,0,0,0,8397,8291,1,0,0,0,8397,8296,1,0,0,0,8397,8301,1,0,0,0,8397,8306,
		1,0,0,0,8397,8311,1,0,0,0,8397,8316,1,0,0,0,8397,8321,1,0,0,0,8397,8326,
		1,0,0,0,8397,8331,1,0,0,0,8397,8336,1,0,0,0,8397,8344,1,0,0,0,8397,8345,
		1,0,0,0,8397,8346,1,0,0,0,8397,8351,1,0,0,0,8397,8357,1,0,0,0,8397,8363,
		1,0,0,0,8397,8368,1,0,0,0,8397,8370,1,0,0,0,8397,8375,1,0,0,0,8397,8380,
		1,0,0,0,8397,8383,1,0,0,0,8397,8389,1,0,0,0,8397,8395,1,0,0,0,8398,1203,
		1,0,0,0,8399,8402,3,1420,710,0,8400,8402,5,166,0,0,8401,8399,1,0,0,0,8401,
		8400,1,0,0,0,8402,1205,1,0,0,0,8403,8405,5,166,0,0,8404,8403,1,0,0,0,8404,
		8405,1,0,0,0,8405,8406,1,0,0,0,8406,8408,5,112,0,0,8407,8409,5,6,0,0,8408,
		8407,1,0,0,0,8408,8409,1,0,0,0,8409,8410,1,0,0,0,8410,8411,3,1192,596,
		0,8411,1207,1,0,0,0,8412,8414,5,166,0,0,8413,8412,1,0,0,0,8413,8414,1,
		0,0,0,8414,8415,1,0,0,0,8415,8417,5,194,0,0,8416,8418,5,6,0,0,8417,8416,
		1,0,0,0,8417,8418,1,0,0,0,8418,8419,1,0,0,0,8419,8420,3,1440,720,0,8420,
		1209,1,0,0,0,8421,8423,5,166,0,0,8422,8421,1,0,0,0,8422,8423,1,0,0,0,8423,
		8424,1,0,0,0,8424,8426,3,1008,504,0,8425,8427,5,6,0,0,8426,8425,1,0,0,
		0,8426,8427,1,0,0,0,8427,8428,1,0,0,0,8428,8429,3,1190,595,0,8429,1211,
		1,0,0,0,8430,8431,5,423,0,0,8431,8432,5,89,0,0,8432,8435,3,1214,607,0,
		8433,8434,5,422,0,0,8434,8436,3,1422,711,0,8435,8433,1,0,0,0,8435,8436,
		1,0,0,0,8436,8438,1,0,0,0,8437,8439,3,1216,608,0,8438,8437,1,0,0,0,8438,
		8439,1,0,0,0,8439,8441,1,0,0,0,8440,8442,3,1220,610,0,8441,8440,1,0,0,
		0,8441,8442,1,0,0,0,8442,1213,1,0,0,0,8443,8445,5,307,0,0,8444,8443,1,
		0,0,0,8444,8445,1,0,0,0,8445,8446,1,0,0,0,8446,8448,5,295,0,0,8447,8449,
		3,1218,609,0,8448,8447,1,0,0,0,8448,8449,1,0,0,0,8449,8450,1,0,0,0,8450,
		8452,5,32,0,0,8451,8453,3,1410,705,0,8452,8451,1,0,0,0,8452,8453,1,0,0,
		0,8453,8454,1,0,0,0,8454,8477,5,33,0,0,8455,8457,5,307,0,0,8456,8455,1,
		0,0,0,8456,8457,1,0,0,0,8457,8458,1,0,0,0,8458,8459,5,252,0,0,8459,8460,
		5,32,0,0,8460,8461,3,922,461,0,8461,8462,5,33,0,0,8462,8477,1,0,0,0,8463,
		8474,7,151,0,0,8464,8465,5,32,0,0,8465,8466,3,922,461,0,8466,8467,5,33,
		0,0,8467,8475,1,0,0,0,8468,8469,5,114,0,0,8469,8471,5,32,0,0,8470,8472,
		3,1410,705,0,8471,8470,1,0,0,0,8471,8472,1,0,0,0,8472,8473,1,0,0,0,8473,
		8475,5,33,0,0,8474,8464,1,0,0,0,8474,8468,1,0,0,0,8475,8477,1,0,0,0,8476,
		8444,1,0,0,0,8476,8456,1,0,0,0,8476,8463,1,0,0,0,8477,1215,1,0,0,0,8478,
		8479,5,571,0,0,8479,8481,5,89,0,0,8480,8482,5,307,0,0,8481,8480,1,0,0,
		0,8481,8482,1,0,0,0,8482,8493,1,0,0,0,8483,8484,5,252,0,0,8484,8485,5,
		32,0,0,8485,8486,3,922,461,0,8486,8487,5,33,0,0,8487,8494,1,0,0,0,8488,
		8490,5,295,0,0,8489,8491,3,1218,609,0,8490,8489,1,0,0,0,8490,8491,1,0,
		0,0,8491,8492,1,0,0,0,8492,8494,3,1412,706,0,8493,8483,1,0,0,0,8493,8488,
		1,0,0,0,8494,8497,1,0,0,0,8495,8496,5,570,0,0,8496,8498,3,1422,711,0,8497,
		8495,1,0,0,0,8497,8498,1,0,0,0,8498,1217,1,0,0,0,8499,8500,5,56,0,0,8500,
		8501,5,6,0,0,8501,8502,3,1422,711,0,8502,1219,1,0,0,0,8503,8504,5,32,0,
		0,8504,8509,3,1222,611,0,8505,8506,5,29,0,0,8506,8508,3,1222,611,0,8507,
		8505,1,0,0,0,8508,8511,1,0,0,0,8509,8507,1,0,0,0,8509,8510,1,0,0,0,8510,
		8512,1,0,0,0,8511,8509,1,0,0,0,8512,8513,5,33,0,0,8513,1221,1,0,0,0,8514,
		8515,5,423,0,0,8515,8526,3,1408,704,0,8516,8517,5,635,0,0,8517,8518,5,
		303,0,0,8518,8521,5,590,0,0,8519,8522,3,1230,615,0,8520,8522,5,353,0,0,
		8521,8519,1,0,0,0,8521,8520,1,0,0,0,8522,8527,1,0,0,0,8523,8524,5,635,
		0,0,8524,8525,5,282,0,0,8525,8527,3,1224,612,0,8526,8516,1,0,0,0,8526,
		8523,1,0,0,0,8526,8527,1,0,0,0,8527,8531,1,0,0,0,8528,8530,3,1226,613,
		0,8529,8528,1,0,0,0,8530,8533,1,0,0,0,8531,8529,1,0,0,0,8531,8532,1,0,
		0,0,8532,8545,1,0,0,0,8533,8531,1,0,0,0,8534,8535,5,32,0,0,8535,8540,3,
		1228,614,0,8536,8537,5,29,0,0,8537,8539,3,1228,614,0,8538,8536,1,0,0,0,
		8539,8542,1,0,0,0,8540,8538,1,0,0,0,8540,8541,1,0,0,0,8541,8543,1,0,0,
		0,8542,8540,1,0,0,0,8543,8544,5,33,0,0,8544,8546,1,0,0,0,8545,8534,1,0,
		0,0,8545,8546,1,0,0,0,8546,1223,1,0,0,0,8547,8560,3,1230,615,0,8548,8549,
		5,32,0,0,8549,8554,3,1230,615,0,8550,8551,5,29,0,0,8551,8553,3,1230,615,
		0,8552,8550,1,0,0,0,8553,8556,1,0,0,0,8554,8552,1,0,0,0,8554,8555,1,0,
		0,0,8555,8557,1,0,0,0,8556,8554,1,0,0,0,8557,8558,5,33,0,0,8558,8560,1,
		0,0,0,8559,8547,1,0,0,0,8559,8548,1,0,0,0,8560,1225,1,0,0,0,8561,8563,
		5,582,0,0,8562,8564,5,6,0,0,8563,8562,1,0,0,0,8563,8564,1,0,0,0,8564,8565,
		1,0,0,0,8565,8596,3,1408,704,0,8566,8568,5,563,0,0,8567,8566,1,0,0,0,8567,
		8568,1,0,0,0,8568,8569,1,0,0,0,8569,8571,5,198,0,0,8570,8572,5,6,0,0,8571,
		8570,1,0,0,0,8571,8572,1,0,0,0,8572,8573,1,0,0,0,8573,8596,3,1376,688,
		0,8574,8576,5,388,0,0,8575,8577,5,6,0,0,8576,8575,1,0,0,0,8576,8577,1,
		0,0,0,8577,8578,1,0,0,0,8578,8596,3,1422,711,0,8579,8581,7,152,0,0,8580,
		8582,5,6,0,0,8581,8580,1,0,0,0,8581,8582,1,0,0,0,8582,8583,1,0,0,0,8583,
		8596,3,1422,711,0,8584,8585,7,153,0,0,8585,8587,5,176,0,0,8586,8588,5,
		6,0,0,8587,8586,1,0,0,0,8587,8588,1,0,0,0,8588,8589,1,0,0,0,8589,8596,
		3,1446,723,0,8590,8592,5,118,0,0,8591,8593,5,6,0,0,8592,8591,1,0,0,0,8592,
		8593,1,0,0,0,8593,8594,1,0,0,0,8594,8596,3,1446,723,0,8595,8561,1,0,0,
		0,8595,8567,1,0,0,0,8595,8574,1,0,0,0,8595,8579,1,0,0,0,8595,8584,1,0,
		0,0,8595,8590,1,0,0,0,8596,1227,1,0,0,0,8597,8598,5,571,0,0,8598,8602,
		3,1468,734,0,8599,8601,3,1226,613,0,8600,8599,1,0,0,0,8601,8604,1,0,0,
		0,8602,8600,1,0,0,0,8602,8603,1,0,0,0,8603,1229,1,0,0,0,8604,8602,1,0,
		0,0,8605,8606,5,32,0,0,8606,8611,3,1232,616,0,8607,8608,5,29,0,0,8608,
		8610,3,1232,616,0,8609,8607,1,0,0,0,8610,8613,1,0,0,0,8611,8609,1,0,0,
		0,8611,8612,1,0,0,0,8612,8614,1,0,0,0,8613,8611,1,0,0,0,8614,8615,5,33,
		0,0,8615,1231,1,0,0,0,8616,8619,3,922,461,0,8617,8619,5,353,0,0,8618,8616,
		1,0,0,0,8618,8617,1,0,0,0,8619,1233,1,0,0,0,8620,8621,5,168,0,0,8621,8622,
		5,6,0,0,8622,8623,3,1308,654,0,8623,1235,1,0,0,0,8624,8625,5,263,0,0,8625,
		8626,5,209,0,0,8626,1237,1,0,0,0,8627,8628,3,1236,618,0,8628,8629,3,1240,
		620,0,8629,1239,1,0,0,0,8630,8638,3,1408,704,0,8631,8635,4,620,122,0,8632,
		8636,3,1414,707,0,8633,8634,5,166,0,0,8634,8636,3,1418,709,0,8635,8632,
		1,0,0,0,8635,8633,1,0,0,0,8636,8638,1,0,0,0,8637,8630,1,0,0,0,8637,8631,
		1,0,0,0,8638,1241,1,0,0,0,8639,8640,5,263,0,0,8640,8641,3,1010,505,0,8641,
		8642,5,209,0,0,8642,1243,1,0,0,0,8643,8644,5,264,0,0,8644,8645,5,619,0,
		0,8645,8646,5,627,0,0,8646,1245,1,0,0,0,8647,8649,7,154,0,0,8648,8647,
		1,0,0,0,8648,8649,1,0,0,0,8649,8650,1,0,0,0,8650,8651,3,1248,624,0,8651,
		1247,1,0,0,0,8652,8653,3,1390,695,0,8653,8654,3,1252,626,0,8654,1249,1,
		0,0,0,8655,8656,5,112,0,0,8656,8657,3,1192,596,0,8657,1251,1,0,0,0,8658,
		8660,3,1168,584,0,8659,8661,3,1250,625,0,8660,8659,1,0,0,0,8660,8661,1,
		0,0,0,8661,1253,1,0,0,0,8662,8663,5,32,0,0,8663,8664,3,1340,670,0,8664,
		8665,5,29,0,0,8665,8666,3,1340,670,0,8666,8667,5,33,0,0,8667,1255,1,0,
		0,0,8668,8673,3,1356,678,0,8669,8670,5,29,0,0,8670,8672,3,1356,678,0,8671,
		8669,1,0,0,0,8672,8675,1,0,0,0,8673,8671,1,0,0,0,8673,8674,1,0,0,0,8674,
		1257,1,0,0,0,8675,8673,1,0,0,0,8676,8681,3,1260,630,0,8677,8678,5,29,0,
		0,8678,8680,3,1260,630,0,8679,8677,1,0,0,0,8680,8683,1,0,0,0,8681,8679,
		1,0,0,0,8681,8682,1,0,0,0,8682,1259,1,0,0,0,8683,8681,1,0,0,0,8684,8685,
		3,1328,664,0,8685,8688,5,6,0,0,8686,8689,3,912,456,0,8687,8689,5,166,0,
		0,8688,8686,1,0,0,0,8688,8687,1,0,0,0,8689,1261,1,0,0,0,8690,8691,3,1008,
		504,0,8691,8692,3,1190,595,0,8692,1263,1,0,0,0,8693,8695,5,114,0,0,8694,
		8696,3,1266,633,0,8695,8694,1,0,0,0,8696,8697,1,0,0,0,8697,8695,1,0,0,
		0,8697,8698,1,0,0,0,8698,1265,1,0,0,0,8699,8700,5,588,0,0,8700,8701,5,
		89,0,0,8701,8712,3,1442,721,0,8702,8704,5,410,0,0,8703,8702,1,0,0,0,8703,
		8704,1,0,0,0,8704,8705,1,0,0,0,8705,8706,5,193,0,0,8706,8707,5,89,0,0,
		8707,8712,3,1442,721,0,8708,8709,5,202,0,0,8709,8710,5,89,0,0,8710,8712,
		3,1442,721,0,8711,8699,1,0,0,0,8711,8703,1,0,0,0,8711,8708,1,0,0,0,8712,
		1267,1,0,0,0,8713,8715,5,308,0,0,8714,8716,3,1270,635,0,8715,8714,1,0,
		0,0,8716,8717,1,0,0,0,8717,8715,1,0,0,0,8717,8718,1,0,0,0,8718,1269,1,
		0,0,0,8719,8720,7,155,0,0,8720,8721,5,89,0,0,8721,8722,3,1442,721,0,8722,
		1271,1,0,0,0,8723,8728,3,1308,654,0,8724,8725,5,29,0,0,8725,8727,3,1308,
		654,0,8726,8724,1,0,0,0,8727,8730,1,0,0,0,8728,8726,1,0,0,0,8728,8729,
		1,0,0,0,8729,1273,1,0,0,0,8730,8728,1,0,0,0,8731,8736,3,1276,638,0,8732,
		8733,5,29,0,0,8733,8735,3,1276,638,0,8734,8732,1,0,0,0,8735,8738,1,0,0,
		0,8736,8734,1,0,0,0,8736,8737,1,0,0,0,8737,1275,1,0,0,0,8738,8736,1,0,
		0,0,8739,8749,3,1308,654,0,8740,8742,3,1280,640,0,8741,8743,3,1278,639,
		0,8742,8741,1,0,0,0,8742,8743,1,0,0,0,8743,8750,1,0,0,0,8744,8746,3,1286,
		643,0,8745,8747,3,1294,647,0,8746,8745,1,0,0,0,8746,8747,1,0,0,0,8747,
		8750,1,0,0,0,8748,8750,3,1278,639,0,8749,8740,1,0,0,0,8749,8744,1,0,0,
		0,8749,8748,1,0,0,0,8749,8750,1,0,0,0,8750,1277,1,0,0,0,8751,8752,5,61,
		0,0,8752,8755,3,1280,640,0,8753,8754,5,61,0,0,8754,8756,3,1280,640,0,8755,
		8753,1,0,0,0,8755,8756,1,0,0,0,8756,1279,1,0,0,0,8757,8764,3,1282,641,
		0,8758,8764,3,1284,642,0,8759,8764,3,1286,643,0,8760,8764,3,1288,644,0,
		8761,8764,3,1290,645,0,8762,8764,3,1292,646,0,8763,8757,1,0,0,0,8763,8758,
		1,0,0,0,8763,8759,1,0,0,0,8763,8760,1,0,0,0,8763,8761,1,0,0,0,8763,8762,
		1,0,0,0,8764,1281,1,0,0,0,8765,8766,5,262,0,0,8766,8767,5,89,0,0,8767,
		8768,3,1440,720,0,8768,1283,1,0,0,0,8769,8770,5,262,0,0,8770,8771,5,89,
		0,0,8771,8772,5,742,0,0,8772,8773,5,424,0,0,8773,1285,1,0,0,0,8774,8775,
		5,262,0,0,8775,8776,5,653,0,0,8776,8777,3,1468,734,0,8777,1287,1,0,0,0,
		8778,8779,5,262,0,0,8779,8780,5,653,0,0,8780,8781,3,1468,734,0,8781,8782,
		5,63,0,0,8782,8783,3,1444,722,0,8783,1289,1,0,0,0,8784,8785,5,262,0,0,
		8785,8786,5,653,0,0,8786,8787,3,1468,734,0,8787,8788,5,89,0,0,8788,8789,
		3,1440,720,0,8789,1291,1,0,0,0,8790,8791,5,262,0,0,8791,8792,5,653,0,0,
		8792,8793,3,1468,734,0,8793,8794,5,89,0,0,8794,8795,5,742,0,0,8795,8796,
		5,424,0,0,8796,1293,1,0,0,0,8797,8798,5,800,0,0,8798,8802,5,794,0,0,8799,
		8803,3,1284,642,0,8800,8803,3,1288,644,0,8801,8803,3,1282,641,0,8802,8799,
		1,0,0,0,8802,8800,1,0,0,0,8802,8801,1,0,0,0,8803,1295,1,0,0,0,8804,8805,
		5,735,0,0,8805,8806,5,143,0,0,8806,8807,5,424,0,0,8807,1297,1,0,0,0,8808,
		8809,5,178,0,0,8809,8810,5,736,0,0,8810,8811,5,424,0,0,8811,1299,1,0,0,
		0,8812,8813,3,1302,651,0,8813,8814,5,797,0,0,8814,8815,5,798,0,0,8815,
		8828,1,0,0,0,8816,8817,3,1302,651,0,8817,8818,5,799,0,0,8818,8828,1,0,
		0,0,8819,8820,3,1302,651,0,8820,8821,5,796,0,0,8821,8822,5,798,0,0,8822,
		8823,5,519,0,0,8823,8824,5,801,0,0,8824,8825,5,63,0,0,8825,8826,3,1444,
		722,0,8826,8828,1,0,0,0,8827,8812,1,0,0,0,8827,8816,1,0,0,0,8827,8819,
		1,0,0,0,8828,1301,1,0,0,0,8829,8830,3,1452,726,0,8830,8831,5,795,0,0,8831,
		1303,1,0,0,0,8832,8833,5,475,0,0,8833,8834,3,1442,721,0,8834,1305,1,0,
		0,0,8835,8837,3,1468,734,0,8836,8838,3,988,494,0,8837,8836,1,0,0,0,8837,
		8838,1,0,0,0,8838,1307,1,0,0,0,8839,8845,3,1306,653,0,8840,8842,5,146,
		0,0,8841,8843,3,1476,738,0,8842,8841,1,0,0,0,8842,8843,1,0,0,0,8843,8845,
		1,0,0,0,8844,8839,1,0,0,0,8844,8840,1,0,0,0,8845,1309,1,0,0,0,8846,8847,
		5,305,0,0,8847,8848,3,1440,720,0,8848,1311,1,0,0,0,8849,8852,3,1310,655,
		0,8850,8852,3,392,196,0,8851,8849,1,0,0,0,8851,8850,1,0,0,0,8852,1313,
		1,0,0,0,8853,8854,7,156,0,0,8854,1315,1,0,0,0,8855,8856,7,157,0,0,8856,
		1317,1,0,0,0,8857,8858,5,423,0,0,8858,8859,3,1412,706,0,8859,1319,1,0,
		0,0,8860,8866,3,1418,709,0,8861,8863,3,1414,707,0,8862,8864,3,1418,709,
		0,8863,8862,1,0,0,0,8863,8864,1,0,0,0,8864,8866,1,0,0,0,8865,8860,1,0,
		0,0,8865,8861,1,0,0,0,8866,1321,1,0,0,0,8867,8868,3,1408,704,0,8868,1323,
		1,0,0,0,8869,8870,3,1408,704,0,8870,1325,1,0,0,0,8871,8872,5,32,0,0,8872,
		8877,3,1324,662,0,8873,8874,5,29,0,0,8874,8876,3,1324,662,0,8875,8873,
		1,0,0,0,8876,8879,1,0,0,0,8877,8875,1,0,0,0,8877,8878,1,0,0,0,8878,8880,
		1,0,0,0,8879,8877,1,0,0,0,8880,8881,5,33,0,0,8881,1327,1,0,0,0,8882,8883,
		3,1320,660,0,8883,1329,1,0,0,0,8884,8887,3,1328,664,0,8885,8887,3,1336,
		668,0,8886,8884,1,0,0,0,8886,8885,1,0,0,0,8887,1331,1,0,0,0,8888,8889,
		3,1408,704,0,8889,1333,1,0,0,0,8890,8891,3,1320,660,0,8891,1335,1,0,0,
		0,8892,8893,3,1408,704,0,8893,8897,5,28,0,0,8894,8895,3,1408,704,0,8895,
		8896,5,28,0,0,8896,8898,1,0,0,0,8897,8894,1,0,0,0,8897,8898,1,0,0,0,8898,
		8899,1,0,0,0,8899,8900,5,16,0,0,8900,1337,1,0,0,0,8901,8902,3,1408,704,
		0,8902,1339,1,0,0,0,8903,8904,3,1408,704,0,8904,1341,1,0,0,0,8905,8906,
		3,1414,707,0,8906,1343,1,0,0,0,8907,8908,3,1414,707,0,8908,1345,1,0,0,
		0,8909,8910,3,1414,707,0,8910,1347,1,0,0,0,8911,8912,3,1414,707,0,8912,
		1349,1,0,0,0,8913,8914,3,1414,707,0,8914,1351,1,0,0,0,8915,8916,3,1414,
		707,0,8916,1353,1,0,0,0,8917,8920,3,1414,707,0,8918,8920,3,1418,709,0,
		8919,8917,1,0,0,0,8919,8918,1,0,0,0,8920,1355,1,0,0,0,8921,8924,3,1414,
		707,0,8922,8924,3,1418,709,0,8923,8921,1,0,0,0,8923,8922,1,0,0,0,8924,
		1357,1,0,0,0,8925,8926,3,1408,704,0,8926,1359,1,0,0,0,8927,8928,3,1408,
		704,0,8928,1361,1,0,0,0,8929,8930,3,1408,704,0,8930,1363,1,0,0,0,8931,
		8932,3,1408,704,0,8932,1365,1,0,0,0,8933,8934,3,1414,707,0,8934,1367,1,
		0,0,0,8935,8936,3,1414,707,0,8936,1369,1,0,0,0,8937,8938,3,1408,704,0,
		8938,1371,1,0,0,0,8939,8940,3,1468,734,0,8940,1373,1,0,0,0,8941,8942,3,
		1468,734,0,8942,1375,1,0,0,0,8943,8944,3,1468,734,0,8944,1377,1,0,0,0,
		8945,8948,3,1414,707,0,8946,8948,3,1418,709,0,8947,8945,1,0,0,0,8947,8946,
		1,0,0,0,8948,1379,1,0,0,0,8949,8950,3,1340,670,0,8950,8951,3,1418,709,
		0,8951,1381,1,0,0,0,8952,8960,3,1408,704,0,8953,8954,5,28,0,0,8954,8961,
		5,16,0,0,8955,8958,3,1418,709,0,8956,8957,5,28,0,0,8957,8959,5,16,0,0,
		8958,8956,1,0,0,0,8958,8959,1,0,0,0,8959,8961,1,0,0,0,8960,8953,1,0,0,
		0,8960,8955,1,0,0,0,8960,8961,1,0,0,0,8961,1383,1,0,0,0,8962,8965,3,1414,
		707,0,8963,8965,3,1418,709,0,8964,8962,1,0,0,0,8964,8963,1,0,0,0,8965,
		1385,1,0,0,0,8966,8971,3,1384,692,0,8967,8968,5,29,0,0,8968,8970,3,1384,
		692,0,8969,8967,1,0,0,0,8970,8973,1,0,0,0,8971,8969,1,0,0,0,8971,8972,
		1,0,0,0,8972,1387,1,0,0,0,8973,8971,1,0,0,0,8974,8979,3,1382,691,0,8975,
		8976,5,29,0,0,8976,8978,3,1382,691,0,8977,8975,1,0,0,0,8978,8981,1,0,0,
		0,8979,8977,1,0,0,0,8979,8980,1,0,0,0,8980,1389,1,0,0,0,8981,8979,1,0,
		0,0,8982,8983,3,1408,704,0,8983,1391,1,0,0,0,8984,8987,3,1406,703,0,8985,
		8987,3,1494,747,0,8986,8984,1,0,0,0,8986,8985,1,0,0,0,8987,1393,1,0,0,
		0,8988,8989,3,1392,696,0,8989,1395,1,0,0,0,8990,8993,3,1406,703,0,8991,
		8993,3,1500,750,0,8992,8990,1,0,0,0,8992,8991,1,0,0,0,8993,1397,1,0,0,
		0,8994,8995,3,1408,704,0,8995,1399,1,0,0,0,8996,8997,3,1440,720,0,8997,
		1401,1,0,0,0,8998,8999,3,1408,704,0,8999,1403,1,0,0,0,9000,9001,3,1408,
		704,0,9001,1405,1,0,0,0,9002,9006,7,158,0,0,9003,9004,4,703,123,0,9004,
		9006,5,823,0,0,9005,9002,1,0,0,0,9005,9003,1,0,0,0,9006,1407,1,0,0,0,9007,
		9010,3,1406,703,0,9008,9010,3,1488,744,0,9009,9007,1,0,0,0,9009,9008,1,
		0,0,0,9010,1409,1,0,0,0,9011,9016,3,1408,704,0,9012,9013,5,29,0,0,9013,
		9015,3,1408,704,0,9014,9012,1,0,0,0,9015,9018,1,0,0,0,9016,9014,1,0,0,
		0,9016,9017,1,0,0,0,9017,1411,1,0,0,0,9018,9016,1,0,0,0,9019,9020,5,32,
		0,0,9020,9021,3,1410,705,0,9021,9022,5,33,0,0,9022,1413,1,0,0,0,9023,9025,
		3,1408,704,0,9024,9026,3,1418,709,0,9025,9024,1,0,0,0,9025,9026,1,0,0,
		0,9026,1415,1,0,0,0,9027,9032,3,1408,704,0,9028,9030,3,1418,709,0,9029,
		9031,3,1418,709,0,9030,9029,1,0,0,0,9030,9031,1,0,0,0,9031,9033,1,0,0,
		0,9032,9028,1,0,0,0,9032,9033,1,0,0,0,9033,1417,1,0,0,0,9034,9035,5,28,
		0,0,9035,9036,3,1408,704,0,9036,1419,1,0,0,0,9037,9038,7,159,0,0,9038,
		1421,1,0,0,0,9039,9040,7,160,0,0,9040,1423,1,0,0,0,9041,9042,7,161,0,0,
		9042,1425,1,0,0,0,9043,9049,5,3,0,0,9044,9045,4,713,124,0,9045,9049,5,
		44,0,0,9046,9049,5,5,0,0,9047,9049,5,4,0,0,9048,9043,1,0,0,0,9048,9044,
		1,0,0,0,9048,9046,1,0,0,0,9048,9047,1,0,0,0,9049,1427,1,0,0,0,9050,9056,
		3,1432,716,0,9051,9052,5,14,0,0,9052,9056,3,1420,710,0,9053,9054,5,15,
		0,0,9054,9056,3,1420,710,0,9055,9050,1,0,0,0,9055,9051,1,0,0,0,9055,9053,
		1,0,0,0,9056,1429,1,0,0,0,9057,9061,3,1428,714,0,9058,9059,4,715,125,0,
		9059,9061,3,1436,718,0,9060,9057,1,0,0,0,9060,9058,1,0,0,0,9061,1431,1,
		0,0,0,9062,9072,3,1446,723,0,9063,9072,3,1452,726,0,9064,9072,3,1460,730,
		0,9065,9072,3,1456,728,0,9066,9072,3,1454,727,0,9067,9069,5,819,0,0,9068,
		9067,1,0,0,0,9068,9069,1,0,0,0,9069,9070,1,0,0,0,9070,9072,7,162,0,0,9071,
		9062,1,0,0,0,9071,9063,1,0,0,0,9071,9064,1,0,0,0,9071,9065,1,0,0,0,9071,
		9066,1,0,0,0,9071,9068,1,0,0,0,9072,1433,1,0,0,0,9073,9077,3,1432,716,
		0,9074,9075,4,717,126,0,9075,9077,3,1436,718,0,9076,9073,1,0,0,0,9076,
		9074,1,0,0,0,9077,1435,1,0,0,0,9078,9079,5,395,0,0,9079,1437,1,0,0,0,9080,
		9081,5,32,0,0,9081,9086,3,1442,721,0,9082,9083,5,29,0,0,9083,9085,3,1442,
		721,0,9084,9082,1,0,0,0,9085,9088,1,0,0,0,9086,9084,1,0,0,0,9086,9087,
		1,0,0,0,9087,9089,1,0,0,0,9088,9086,1,0,0,0,9089,9090,5,33,0,0,9090,1439,
		1,0,0,0,9091,9095,5,824,0,0,9092,9093,4,720,127,0,9093,9095,5,823,0,0,
		9094,9091,1,0,0,0,9094,9092,1,0,0,0,9095,1441,1,0,0,0,9096,9100,3,1440,
		720,0,9097,9100,5,44,0,0,9098,9100,5,45,0,0,9099,9096,1,0,0,0,9099,9097,
		1,0,0,0,9099,9098,1,0,0,0,9100,1443,1,0,0,0,9101,9105,3,1440,720,0,9102,
		9103,4,722,128,0,9103,9105,5,44,0,0,9104,9101,1,0,0,0,9104,9102,1,0,0,
		0,9105,1445,1,0,0,0,9106,9108,5,819,0,0,9107,9106,1,0,0,0,9107,9108,1,
		0,0,0,9108,9109,1,0,0,0,9109,9112,3,1440,720,0,9110,9112,5,821,0,0,9111,
		9107,1,0,0,0,9111,9110,1,0,0,0,9112,9116,1,0,0,0,9113,9115,3,1440,720,
		0,9114,9113,1,0,0,0,9115,9118,1,0,0,0,9116,9114,1,0,0,0,9116,9117,1,0,
		0,0,9117,1447,1,0,0,0,9118,9116,1,0,0,0,9119,9120,3,1440,720,0,9120,1449,
		1,0,0,0,9121,9126,3,1440,720,0,9122,9123,5,29,0,0,9123,9125,3,1440,720,
		0,9124,9122,1,0,0,0,9125,9128,1,0,0,0,9126,9124,1,0,0,0,9126,9127,1,0,
		0,0,9127,1451,1,0,0,0,9128,9126,1,0,0,0,9129,9133,3,1458,729,0,9130,9133,
		5,46,0,0,9131,9133,5,47,0,0,9132,9129,1,0,0,0,9132,9130,1,0,0,0,9132,9131,
		1,0,0,0,9133,1453,1,0,0,0,9134,9135,7,163,0,0,9135,1455,1,0,0,0,9136,9137,
		7,164,0,0,9137,1457,1,0,0,0,9138,9139,7,165,0,0,9139,1459,1,0,0,0,9140,
		9141,5,157,0,0,9141,9147,5,824,0,0,9142,9143,5,595,0,0,9143,9147,5,824,
		0,0,9144,9145,5,592,0,0,9145,9147,5,824,0,0,9146,9140,1,0,0,0,9146,9142,
		1,0,0,0,9146,9144,1,0,0,0,9147,1461,1,0,0,0,9148,9151,3,1174,587,0,9149,
		9151,3,1466,733,0,9150,9148,1,0,0,0,9150,9149,1,0,0,0,9151,1463,1,0,0,
		0,9152,9153,3,1466,733,0,9153,1465,1,0,0,0,9154,9155,5,32,0,0,9155,9156,
		5,3,0,0,9156,9157,5,29,0,0,9157,9158,5,3,0,0,9158,9159,5,33,0,0,9159,1467,
		1,0,0,0,9160,9163,3,1408,704,0,9161,9163,3,1440,720,0,9162,9160,1,0,0,
		0,9162,9161,1,0,0,0,9163,1469,1,0,0,0,9164,9167,3,1406,703,0,9165,9167,
		3,1502,751,0,9166,9164,1,0,0,0,9166,9165,1,0,0,0,9167,1471,1,0,0,0,9168,
		9171,3,1396,698,0,9169,9171,3,1440,720,0,9170,9168,1,0,0,0,9170,9169,1,
		0,0,0,9171,1473,1,0,0,0,9172,9175,3,1426,713,0,9173,9175,3,1406,703,0,
		9174,9172,1,0,0,0,9174,9173,1,0,0,0,9175,1475,1,0,0,0,9176,9177,5,32,0,
		0,9177,9178,5,33,0,0,9178,1477,1,0,0,0,9179,9180,7,166,0,0,9180,1479,1,
		0,0,0,9181,9182,7,167,0,0,9182,1481,1,0,0,0,9183,9184,5,246,0,0,9184,9190,
		5,28,0,0,9185,9186,5,312,0,0,9186,9190,5,28,0,0,9187,9188,5,516,0,0,9188,
		9190,5,28,0,0,9189,9183,1,0,0,0,9189,9185,1,0,0,0,9189,9187,1,0,0,0,9190,
		1483,1,0,0,0,9191,9192,7,167,0,0,9192,9193,5,28,0,0,9193,1485,1,0,0,0,
		9194,9195,3,1440,720,0,9195,1487,1,0,0,0,9196,9203,4,744,129,0,9197,9204,
		3,1494,747,0,9198,9204,3,1506,753,0,9199,9204,5,208,0,0,9200,9204,5,522,
		0,0,9201,9202,4,744,130,0,9202,9204,5,722,0,0,9203,9197,1,0,0,0,9203,9198,
		1,0,0,0,9203,9199,1,0,0,0,9203,9200,1,0,0,0,9203,9201,1,0,0,0,9204,9213,
		1,0,0,0,9205,9211,3,1498,749,0,9206,9211,3,1490,745,0,9207,9211,3,1492,
		746,0,9208,9211,3,1496,748,0,9209,9211,3,1504,752,0,9210,9205,1,0,0,0,
		9210,9206,1,0,0,0,9210,9207,1,0,0,0,9210,9208,1,0,0,0,9210,9209,1,0,0,
		0,9211,9213,1,0,0,0,9212,9196,1,0,0,0,9212,9210,1,0,0,0,9213,1489,1,0,
		0,0,9214,9215,7,168,0,0,9215,1491,1,0,0,0,9216,9217,7,169,0,0,9217,1493,
		1,0,0,0,9218,9229,4,747,131,0,9219,9230,3,1508,754,0,9220,9230,5,205,0,
		0,9221,9230,5,222,0,0,9222,9230,5,389,0,0,9223,9230,5,441,0,0,9224,9230,
		5,445,0,0,9225,9230,5,468,0,0,9226,9230,5,476,0,0,9227,9230,5,717,0,0,
		9228,9230,5,575,0,0,9229,9219,1,0,0,0,9229,9220,1,0,0,0,9229,9221,1,0,
		0,0,9229,9222,1,0,0,0,9229,9223,1,0,0,0,9229,9224,1,0,0,0,9229,9225,1,
		0,0,0,9229,9226,1,0,0,0,9229,9227,1,0,0,0,9229,9228,1,0,0,0,9230,9237,
		1,0,0,0,9231,9235,3,1498,749,0,9232,9235,3,1496,748,0,9233,9235,3,1504,
		752,0,9234,9231,1,0,0,0,9234,9232,1,0,0,0,9234,9233,1,0,0,0,9235,9237,
		1,0,0,0,9236,9218,1,0,0,0,9236,9234,1,0,0,0,9237,1495,1,0,0,0,9238,9239,
		7,170,0,0,9239,1497,1,0,0,0,9240,9246,7,171,0,0,9241,9242,4,749,132,0,
		9242,9246,7,172,0,0,9243,9244,4,749,133,0,9244,9246,7,173,0,0,9245,9240,
		1,0,0,0,9245,9241,1,0,0,0,9245,9243,1,0,0,0,9246,1499,1,0,0,0,9247,9250,
		4,750,134,0,9248,9251,3,1508,754,0,9249,9251,3,1506,753,0,9250,9248,1,
		0,0,0,9250,9249,1,0,0,0,9251,9258,1,0,0,0,9252,9256,3,1498,749,0,9253,
		9256,3,1492,746,0,9254,9256,3,1504,752,0,9255,9252,1,0,0,0,9255,9253,1,
		0,0,0,9255,9254,1,0,0,0,9256,9258,1,0,0,0,9257,9247,1,0,0,0,9257,9255,
		1,0,0,0,9258,1501,1,0,0,0,9259,9264,3,1498,749,0,9260,9264,3,1490,745,
		0,9261,9264,3,1492,746,0,9262,9264,3,1496,748,0,9263,9259,1,0,0,0,9263,
		9260,1,0,0,0,9263,9261,1,0,0,0,9263,9262,1,0,0,0,9264,1503,1,0,0,0,9265,
		9266,7,167,0,0,9266,1505,1,0,0,0,9267,9268,7,174,0,0,9268,1507,1,0,0,0,
		9269,9273,7,175,0,0,9270,9271,4,754,135,0,9271,9273,5,668,0,0,9272,9269,
		1,0,0,0,9272,9270,1,0,0,0,9273,1509,1,0,0,0,1176,1513,1520,1600,1608,1613,
		1623,1630,1636,1639,1642,1649,1654,1657,1662,1668,1670,1674,1678,1687,
		1691,1696,1702,1709,1714,1719,1726,1729,1735,1738,1745,1755,1760,1765,
		1773,1779,1783,1788,1797,1803,1809,1815,1824,1830,1839,1851,1855,1861,
		1865,1871,1875,1880,1883,1889,1895,1901,1905,1910,1914,1918,1934,1942,
		1950,1957,1984,1999,2002,2008,2013,2019,2024,2028,2033,2037,2041,2045,
		2049,2053,2055,2065,2073,2080,2088,2092,2097,2104,2109,2114,2124,2128,
		2133,2136,2139,2142,2149,2156,2160,2185,2187,2195,2197,2217,2221,2227,
		2234,2237,2241,2248,2251,2260,2267,2272,2275,2280,2286,2289,2293,2299,
		2302,2307,2311,2320,2323,2329,2336,2342,2345,2349,2358,2361,2369,2375,
		2379,2389,2392,2397,2405,2420,2423,2426,2431,2437,2447,2457,2460,2463,
		2467,2475,2488,2492,2497,2506,2523,2542,2551,2554,2562,2569,2571,2578,
		2583,2597,2601,2607,2613,2619,2625,2631,2636,2640,2648,2654,2660,2666,
		2671,2674,2677,2686,2689,2700,2704,2715,2723,2727,2736,2739,2745,2747,
		2751,2758,2771,2778,2784,2787,2804,2823,2827,2833,2839,2845,2850,2857,
		2864,2869,2872,2876,2880,2885,2889,2893,2899,2904,2907,2911,2917,2921,
		2925,2933,2941,2950,2959,2972,2975,2978,2984,2992,2997,3000,3003,3006,
		3009,3011,3017,3019,3035,3042,3045,3047,3049,3059,3061,3065,3068,3071,
		3075,3079,3084,3087,3090,3096,3099,3108,3118,3121,3124,3128,3134,3139,
		3144,3149,3153,3160,3171,3174,3177,3180,3184,3187,3190,3196,3199,3202,
		3205,3208,3212,3215,3218,3230,3238,3254,3257,3261,3265,3273,3281,3285,
		3305,3308,3312,3318,3322,3325,3334,3344,3347,3351,3354,3358,3363,3366,
		3371,3377,3386,3392,3397,3400,3403,3406,3409,3412,3415,3430,3434,3440,
		3443,3446,3452,3457,3461,3464,3471,3473,3490,3502,3507,3510,3513,3518,
		3524,3540,3560,3569,3573,3580,3585,3594,3604,3618,3625,3634,3643,3649,
		3655,3661,3664,3670,3677,3681,3687,3693,3695,3698,3702,3712,3717,3722,
		3729,3738,3746,3751,3755,3761,3764,3767,3771,3775,3785,3789,3792,3795,
		3798,3803,3809,3812,3818,3821,3823,3828,3840,3849,3862,3865,3870,3877,
		3881,3884,3890,3904,3911,3920,3926,3935,3939,3943,3953,3955,3963,3970,
		3975,3978,3982,3985,3991,3994,3997,4003,4010,4015,4019,4022,4025,4028,
		4030,4034,4041,4047,4051,4056,4059,4062,4065,4067,4072,4081,4090,4094,
		4100,4103,4106,4112,4119,4121,4129,4135,4137,4147,4149,4160,4166,4173,
		4181,4185,4189,4192,4194,4202,4211,4220,4227,4234,4365,4419,4426,4430,
		4446,4458,4461,4473,4477,4483,4490,4497,4504,4511,4518,4525,4528,4535,
		4543,4551,4561,4567,4571,4574,4577,4580,4583,4586,4591,4594,4601,4607,
		4631,4638,4641,4650,4656,4677,4683,4689,4696,4704,4710,4722,4724,4730,
		4734,4736,4740,4751,4756,4762,4769,4772,4775,4781,4783,4791,4794,4796,
		4798,4805,4816,4819,4821,4825,4830,4832,4837,4843,4846,4848,4852,4855,
		4864,4873,4879,4881,4883,4892,4896,4902,4905,4907,4918,4923,4928,4934,
		4936,4940,4942,4950,4954,4959,4962,4967,4972,4978,4987,4998,5000,5012,
		5017,5025,5031,5033,5040,5042,5049,5054,5065,5070,5072,5076,5082,5085,
		5088,5098,5100,5106,5119,5123,5128,5145,5151,5160,5168,5172,5178,5188,
		5192,5201,5206,5212,5214,5218,5229,5236,5242,5246,5251,5256,5264,5268,
		5273,5282,5295,5297,5311,5320,5322,5329,5334,5338,5343,5351,5358,5362,
		5368,5375,5378,5385,5388,5394,5411,5416,5429,5432,5443,5445,5451,5465,
		5482,5487,5490,5494,5497,5505,5511,5516,5519,5521,5525,5530,5532,5544,
		5550,5564,5576,5580,5582,5590,5594,5603,5616,5621,5625,5629,5632,5636,
		5640,5643,5648,5651,5657,5660,5666,5669,5696,5702,5705,5721,5728,5732,
		5735,5738,5745,5749,5752,5755,5759,5765,5768,5772,5793,5798,5806,5811,
		5814,5818,5822,5826,5832,5836,5841,5846,5857,5859,5865,5887,5909,5916,
		5943,5945,5949,5961,5971,5981,5985,5993,5996,6000,6009,6013,6020,6025,
		6033,6038,6044,6051,6056,6062,6065,6075,6077,6084,6089,6093,6096,6103,
		6108,6112,6123,6131,6135,6138,6141,6145,6149,6154,6160,6164,6175,6178,
		6181,6184,6192,6196,6201,6209,6217,6223,6227,6233,6242,6253,6263,6281,
		6284,6288,6299,6301,6310,6322,6324,6331,6337,6343,6351,6362,6366,6395,
		6397,6403,6420,6427,6441,6452,6457,6468,6478,6485,6488,6522,6530,6532,
		6542,6547,6552,6559,6565,6570,6575,6581,6585,6590,6595,6602,6610,6615,
		6619,6623,6627,6629,6647,6655,6659,6666,6678,6681,6685,6693,6705,6712,
		6716,6720,6726,6736,6745,6747,6750,6759,6766,6779,6784,6791,6797,6823,
		6833,6865,6884,6890,6894,6925,6931,6943,6956,6960,6964,6992,7042,7052,
		7064,7069,7077,7097,7101,7117,7120,7125,7128,7137,7141,7147,7153,7157,
		7168,7174,7176,7183,7190,7194,7201,7206,7211,7220,7223,7227,7232,7234,
		7238,7242,7255,7259,7262,7266,7270,7274,7281,7285,7289,7297,7301,7308,
		7314,7322,7343,7348,7355,7377,7393,7403,7407,7414,7417,7428,7437,7440,
		7447,7452,7478,7484,7490,7494,7504,7508,7521,7533,7549,7557,7567,7570,
		7575,7579,7586,7591,7598,7606,7609,7614,7622,7625,7639,7642,7655,7659,
		7661,7666,7671,7678,7684,7690,7695,7698,7704,7709,7712,7718,7722,7728,
		7730,7733,7739,7745,7752,7754,7756,7760,7766,7770,7774,7779,7784,7787,
		7790,7800,7806,7813,7818,7831,7839,7845,7850,7861,7865,7870,7874,7877,
		7882,7886,7894,7902,7904,7913,7921,7928,7931,7939,7948,7950,7956,7960,
		7969,7975,7978,7989,7998,8001,8006,8008,8011,8014,8018,8021,8025,8030,
		8033,8037,8040,8044,8049,8053,8065,8069,8075,8078,8083,8087,8091,8096,
		8105,8108,8112,8116,8119,8123,8127,8132,8137,8142,8147,8152,8154,8159,
		8166,8174,8180,8182,8186,8190,8194,8198,8213,8219,8226,8230,8235,8240,
		8243,8247,8250,8255,8259,8265,8269,8273,8278,8283,8288,8293,8298,8303,
		8308,8313,8318,8323,8328,8333,8338,8348,8354,8360,8365,8372,8377,8386,
		8392,8397,8401,8404,8408,8413,8417,8422,8426,8435,8438,8441,8444,8448,
		8452,8456,8471,8474,8476,8481,8490,8493,8497,8509,8521,8526,8531,8540,
		8545,8554,8559,8563,8567,8571,8576,8581,8587,8592,8595,8602,8611,8618,
		8635,8637,8648,8660,8673,8681,8688,8697,8703,8711,8717,8728,8736,8742,
		8746,8749,8755,8763,8802,8827,8837,8842,8844,8851,8863,8865,8877,8886,
		8897,8919,8923,8947,8958,8960,8964,8971,8979,8986,8992,9005,9009,9016,
		9025,9030,9032,9048,9055,9060,9068,9071,9076,9086,9094,9099,9104,9107,
		9111,9116,9126,9132,9146,9150,9162,9166,9170,9174,9189,9203,9210,9212,
		9229,9234,9236,9245,9250,9255,9257,9263,9272
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
