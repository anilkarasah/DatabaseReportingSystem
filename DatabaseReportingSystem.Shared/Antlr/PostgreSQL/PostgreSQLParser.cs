//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./PostgreSQLParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class PostgreSQLParser : PostgreSQLParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Dollar=1, OPEN_PAREN=2, CLOSE_PAREN=3, OPEN_BRACKET=4, CLOSE_BRACKET=5, 
		COMMA=6, SEMI=7, COLON=8, STAR=9, EQUAL=10, DOT=11, PLUS=12, MINUS=13, 
		SLASH=14, CARET=15, LT=16, GT=17, LESS_LESS=18, GREATER_GREATER=19, COLON_EQUALS=20, 
		LESS_EQUALS=21, EQUALS_GREATER=22, GREATER_EQUALS=23, DOT_DOT=24, NOT_EQUALS=25, 
		TYPECAST=26, PERCENT=27, PARAM=28, Operator=29, JSON=30, JSON_ARRAY=31, 
		JSON_ARRAYAGG=32, JSON_EXISTS=33, JSON_OBJECT=34, JSON_OBJECTAGG=35, JSON_QUERY=36, 
		JSON_SCALAR=37, JSON_SERIALIZE=38, JSON_TABLE=39, JSON_VALUE=40, MERGE_ACTION=41, 
		SYSTEM_USER=42, ABSENT=43, ASENSITIVE=44, ATOMIC=45, BREADTH=46, COMPRESSION=47, 
		CONDITIONAL=48, DEPTH=49, EMPTY_P=50, FINALIZE=51, INDENT=52, KEEP=53, 
		KEYS=54, NESTED=55, OMIT=56, PARAMETER=57, PATH=58, PLAN=59, QUOTES=60, 
		SCALAR=61, SOURCE=62, STRING_P=63, TARGET=64, UNCONDITIONAL=65, PERIOD=66, 
		FORMAT_LA=67, ALL=68, ANALYSE=69, ANALYZE=70, AND=71, ANY=72, ARRAY=73, 
		AS=74, ASC=75, ASYMMETRIC=76, BOTH=77, CASE=78, CAST=79, CHECK=80, COLLATE=81, 
		COLUMN=82, CONSTRAINT=83, CREATE=84, CURRENT_CATALOG=85, CURRENT_DATE=86, 
		CURRENT_ROLE=87, CURRENT_TIME=88, CURRENT_TIMESTAMP=89, CURRENT_USER=90, 
		DEFAULT=91, DEFERRABLE=92, DESC=93, DISTINCT=94, DO=95, ELSE=96, EXCEPT=97, 
		FALSE_P=98, FETCH=99, FOR=100, FOREIGN=101, FROM=102, GRANT=103, GROUP_P=104, 
		HAVING=105, IN_P=106, INITIALLY=107, INTERSECT=108, INTO=109, LATERAL_P=110, 
		LEADING=111, LIMIT=112, LOCALTIME=113, LOCALTIMESTAMP=114, NOT=115, NULL_P=116, 
		OFFSET=117, ON=118, ONLY=119, OR=120, ORDER=121, PLACING=122, PRIMARY=123, 
		REFERENCES=124, RETURNING=125, SELECT=126, SESSION_USER=127, SOME=128, 
		SYMMETRIC=129, TABLE=130, THEN=131, TO=132, TRAILING=133, TRUE_P=134, 
		UNION=135, UNIQUE=136, USER=137, USING=138, VARIADIC=139, WHEN=140, WHERE=141, 
		WINDOW=142, WITH=143, AUTHORIZATION=144, BINARY=145, COLLATION=146, CONCURRENTLY=147, 
		CROSS=148, CURRENT_SCHEMA=149, FREEZE=150, FULL=151, ILIKE=152, INNER_P=153, 
		IS=154, ISNULL=155, JOIN=156, LEFT=157, LIKE=158, NATURAL=159, NOTNULL=160, 
		OUTER_P=161, OVER=162, OVERLAPS=163, RIGHT=164, SIMILAR=165, VERBOSE=166, 
		ABORT_P=167, ABSOLUTE_P=168, ACCESS=169, ACTION=170, ADD_P=171, ADMIN=172, 
		AFTER=173, AGGREGATE=174, ALSO=175, ALTER=176, ALWAYS=177, ASSERTION=178, 
		ASSIGNMENT=179, AT=180, ATTRIBUTE=181, BACKWARD=182, BEFORE=183, BEGIN_P=184, 
		BY=185, CACHE=186, CALLED=187, CASCADE=188, CASCADED=189, CATALOG=190, 
		CHAIN=191, CHARACTERISTICS=192, CHECKPOINT=193, CLASS=194, CLOSE=195, 
		CLUSTER=196, COMMENT=197, COMMENTS=198, COMMIT=199, COMMITTED=200, CONFIGURATION=201, 
		CONNECTION=202, CONSTRAINTS=203, CONTENT_P=204, CONTINUE_P=205, CONVERSION_P=206, 
		COPY=207, COST=208, CSV=209, CURSOR=210, CYCLE=211, DATA_P=212, DATABASE=213, 
		DAY_P=214, DEALLOCATE=215, DECLARE=216, DEFAULTS=217, DEFERRED=218, DEFINER=219, 
		DELETE_P=220, DELIMITER=221, DELIMITERS=222, DICTIONARY=223, DISABLE_P=224, 
		DISCARD=225, DOCUMENT_P=226, DOMAIN_P=227, DOUBLE_P=228, DROP=229, EACH=230, 
		ENABLE_P=231, ENCODING=232, ENCRYPTED=233, ENUM_P=234, ESCAPE=235, EVENT=236, 
		EXCLUDE=237, EXCLUDING=238, EXCLUSIVE=239, EXECUTE=240, EXPLAIN=241, EXTENSION=242, 
		EXTERNAL=243, FAMILY=244, FIRST_P=245, FOLLOWING=246, FORCE=247, FORWARD=248, 
		FUNCTION=249, FUNCTIONS=250, GLOBAL=251, GRANTED=252, HANDLER=253, HEADER_P=254, 
		HOLD=255, HOUR_P=256, IDENTITY_P=257, IF_P=258, IMMEDIATE=259, IMMUTABLE=260, 
		IMPLICIT_P=261, INCLUDING=262, INCREMENT=263, INDEX=264, INDEXES=265, 
		INHERIT=266, INHERITS=267, INLINE_P=268, INSENSITIVE=269, INSERT=270, 
		INSTEAD=271, INVOKER=272, ISOLATION=273, KEY=274, LABEL=275, LANGUAGE=276, 
		LARGE_P=277, LAST_P=278, LEAKPROOF=279, LEVEL=280, LISTEN=281, LOAD=282, 
		LOCAL=283, LOCATION=284, LOCK_P=285, MAPPING=286, MATCH=287, MATCHED=288, 
		MATERIALIZED=289, MAXVALUE=290, MERGE=291, MINUTE_P=292, MINVALUE=293, 
		MODE=294, MONTH_P=295, MOVE=296, NAME_P=297, NAMES=298, NEXT=299, NO=300, 
		NOTHING=301, NOTIFY=302, NOWAIT=303, NULLS_P=304, OBJECT_P=305, OF=306, 
		OFF=307, OIDS=308, OPERATOR=309, OPTION=310, OPTIONS=311, OWNED=312, OWNER=313, 
		PARSER=314, PARTIAL=315, PARTITION=316, PASSING=317, PASSWORD=318, PLANS=319, 
		PRECEDING=320, PREPARE=321, PREPARED=322, PRESERVE=323, PRIOR=324, PRIVILEGES=325, 
		PROCEDURAL=326, PROCEDURE=327, PROGRAM=328, QUOTE=329, RANGE=330, READ=331, 
		REASSIGN=332, RECHECK=333, RECURSIVE=334, REF=335, REFRESH=336, REINDEX=337, 
		RELATIVE_P=338, RELEASE=339, RENAME=340, REPEATABLE=341, REPLACE=342, 
		REPLICA=343, RESET=344, RESTART=345, RESTRICT=346, RETURNS=347, REVOKE=348, 
		ROLE=349, ROLLBACK=350, ROWS=351, RULE=352, SAVEPOINT=353, SCHEMA=354, 
		SCROLL=355, SEARCH=356, SECOND_P=357, SECURITY=358, SEQUENCE=359, SEQUENCES=360, 
		SERIALIZABLE=361, SERVER=362, SESSION=363, SET=364, SHARE=365, SHOW=366, 
		SIMPLE=367, SNAPSHOT=368, STABLE=369, STANDALONE_P=370, START=371, STATEMENT=372, 
		STATISTICS=373, STDIN=374, STDOUT=375, STORAGE=376, STRICT_P=377, STRIP_P=378, 
		SYSID=379, SYSTEM_P=380, TABLES=381, TABLESPACE=382, TEMP=383, TEMPLATE=384, 
		TEMPORARY=385, TEXT_P=386, TRANSACTION=387, TRIGGER=388, TRUNCATE=389, 
		TRUSTED=390, TYPE_P=391, TYPES_P=392, UNBOUNDED=393, UNCOMMITTED=394, 
		UNENCRYPTED=395, UNKNOWN=396, UNLISTEN=397, UNLOGGED=398, UNTIL=399, UPDATE=400, 
		VACUUM=401, VALID=402, VALIDATE=403, VALIDATOR=404, VARYING=405, VERSION_P=406, 
		VIEW=407, VOLATILE=408, WHITESPACE_P=409, WITHOUT=410, WORK=411, WRAPPER=412, 
		WRITE=413, XML_P=414, YEAR_P=415, YES_P=416, ZONE=417, BETWEEN=418, BIGINT=419, 
		BIT=420, BOOLEAN_P=421, CHAR_P=422, CHARACTER=423, COALESCE=424, DEC=425, 
		DECIMAL_P=426, EXISTS=427, EXTRACT=428, FLOAT_P=429, GREATEST=430, INOUT=431, 
		INT_P=432, INTEGER=433, INTERVAL=434, LEAST=435, NATIONAL=436, NCHAR=437, 
		NONE=438, NULLIF=439, NUMERIC=440, OVERLAY=441, POSITION=442, PRECISION=443, 
		REAL=444, ROW=445, SETOF=446, SMALLINT=447, SUBSTRING=448, TIME=449, TIMESTAMP=450, 
		TREAT=451, TRIM=452, VALUES=453, VARCHAR=454, XMLATTRIBUTES=455, XMLCOMMENT=456, 
		XMLAGG=457, XML_IS_WELL_FORMED=458, XML_IS_WELL_FORMED_DOCUMENT=459, XML_IS_WELL_FORMED_CONTENT=460, 
		XPATH=461, XPATH_EXISTS=462, XMLCONCAT=463, XMLELEMENT=464, XMLEXISTS=465, 
		XMLFOREST=466, XMLPARSE=467, XMLPI=468, XMLROOT=469, XMLSERIALIZE=470, 
		CALL=471, CURRENT_P=472, ATTACH=473, DETACH=474, EXPRESSION=475, GENERATED=476, 
		LOGGED=477, STORED=478, INCLUDE=479, ROUTINE=480, TRANSFORM=481, IMPORT_P=482, 
		POLICY=483, METHOD=484, REFERENCING=485, NEW=486, OLD=487, VALUE_P=488, 
		SUBSCRIPTION=489, PUBLICATION=490, OUT_P=491, END_P=492, ROUTINES=493, 
		SCHEMAS=494, PROCEDURES=495, INPUT_P=496, SUPPORT=497, PARALLEL=498, SQL_P=499, 
		DEPENDS=500, OVERRIDING=501, CONFLICT=502, SKIP_P=503, LOCKED=504, TIES=505, 
		ROLLUP=506, CUBE=507, GROUPING=508, SETS=509, TABLESAMPLE=510, ORDINALITY=511, 
		XMLTABLE=512, COLUMNS=513, XMLNAMESPACES=514, ROWTYPE=515, NORMALIZED=516, 
		WITHIN=517, FILTER=518, GROUPS=519, OTHERS=520, NFC=521, NFD=522, NFKC=523, 
		NFKD=524, UESCAPE=525, VIEWS=526, NORMALIZE=527, DUMP=528, ERROR=529, 
		USE_VARIABLE=530, USE_COLUMN=531, CONSTANT=532, PERFORM=533, GET=534, 
		DIAGNOSTICS=535, STACKED=536, ELSIF=537, WHILE=538, FOREACH=539, SLICE=540, 
		EXIT=541, RETURN=542, RAISE=543, SQLSTATE=544, DEBUG=545, INFO=546, NOTICE=547, 
		WARNING=548, EXCEPTION=549, ASSERT=550, LOOP=551, OPEN=552, FORMAT=553, 
		Identifier=554, QuotedIdentifier=555, UnterminatedQuotedIdentifier=556, 
		InvalidQuotedIdentifier=557, InvalidUnterminatedQuotedIdentifier=558, 
		UnicodeQuotedIdentifier=559, UnterminatedUnicodeQuotedIdentifier=560, 
		InvalidUnicodeQuotedIdentifier=561, InvalidUnterminatedUnicodeQuotedIdentifier=562, 
		StringConstant=563, UnterminatedStringConstant=564, UnicodeEscapeStringConstant=565, 
		UnterminatedUnicodeEscapeStringConstant=566, BeginDollarStringConstant=567, 
		BinaryStringConstant=568, UnterminatedBinaryStringConstant=569, InvalidBinaryStringConstant=570, 
		InvalidUnterminatedBinaryStringConstant=571, HexadecimalStringConstant=572, 
		UnterminatedHexadecimalStringConstant=573, InvalidHexadecimalStringConstant=574, 
		InvalidUnterminatedHexadecimalStringConstant=575, Integral=576, BinaryIntegral=577, 
		OctalIntegral=578, HexadecimalIntegral=579, NumericFail=580, Numeric=581, 
		PLSQLVARIABLENAME=582, PLSQLIDENTIFIER=583, Whitespace=584, Newline=585, 
		LineComment=586, BlockComment=587, UnterminatedBlockComment=588, ErrorCharacter=589, 
		EscapeStringConstant=590, UnterminatedEscapeStringConstant=591, InvalidEscapeStringConstant=592, 
		InvalidUnterminatedEscapeStringConstant=593, AfterEscapeStringConstantMode_NotContinued=594, 
		AfterEscapeStringConstantWithNewlineMode_NotContinued=595, DollarText=596, 
		EndDollarStringConstant=597, MetaCommand=598, AfterEscapeStringConstantWithNewlineMode_Continued=599;
	public const int
		RULE_root = 0, RULE_stmtblock = 1, RULE_stmtmulti = 2, RULE_stmt = 3, 
		RULE_callstmt = 4, RULE_createrolestmt = 5, RULE_with_ = 6, RULE_optrolelist = 7, 
		RULE_alteroptrolelist = 8, RULE_alteroptroleelem = 9, RULE_createoptroleelem = 10, 
		RULE_createuserstmt = 11, RULE_alterrolestmt = 12, RULE_in_database_ = 13, 
		RULE_alterrolesetstmt = 14, RULE_droprolestmt = 15, RULE_creategroupstmt = 16, 
		RULE_altergroupstmt = 17, RULE_add_drop = 18, RULE_createschemastmt = 19, 
		RULE_optschemaname = 20, RULE_optschemaeltlist = 21, RULE_schema_stmt = 22, 
		RULE_variablesetstmt = 23, RULE_set_rest = 24, RULE_generic_set = 25, 
		RULE_set_rest_more = 26, RULE_var_name = 27, RULE_var_list = 28, RULE_var_value = 29, 
		RULE_iso_level = 30, RULE_boolean_or_string_ = 31, RULE_zone_value = 32, 
		RULE_encoding_ = 33, RULE_nonreservedword_or_sconst = 34, RULE_variableresetstmt = 35, 
		RULE_reset_rest = 36, RULE_generic_reset = 37, RULE_setresetclause = 38, 
		RULE_functionsetresetclause = 39, RULE_variableshowstmt = 40, RULE_constraintssetstmt = 41, 
		RULE_constraints_set_list = 42, RULE_constraints_set_mode = 43, RULE_checkpointstmt = 44, 
		RULE_discardstmt = 45, RULE_altertablestmt = 46, RULE_alter_table_cmds = 47, 
		RULE_partition_cmd = 48, RULE_index_partition_cmd = 49, RULE_alter_table_cmd = 50, 
		RULE_alter_column_default = 51, RULE_drop_behavior_ = 52, RULE_collate_clause_ = 53, 
		RULE_alter_using = 54, RULE_replica_identity = 55, RULE_reloptions = 56, 
		RULE_reloptions_ = 57, RULE_reloption_list = 58, RULE_reloption_elem = 59, 
		RULE_alter_identity_column_option_list = 60, RULE_alter_identity_column_option = 61, 
		RULE_partitionboundspec = 62, RULE_hash_partbound_elem = 63, RULE_hash_partbound = 64, 
		RULE_altercompositetypestmt = 65, RULE_alter_type_cmds = 66, RULE_alter_type_cmd = 67, 
		RULE_closeportalstmt = 68, RULE_copystmt = 69, RULE_copy_from = 70, RULE_program_ = 71, 
		RULE_copy_file_name = 72, RULE_copy_options = 73, RULE_copy_opt_list = 74, 
		RULE_copy_opt_item = 75, RULE_binary_ = 76, RULE_copy_delimiter = 77, 
		RULE_using_ = 78, RULE_copy_generic_opt_list = 79, RULE_copy_generic_opt_elem = 80, 
		RULE_copy_generic_opt_arg = 81, RULE_copy_generic_opt_arg_list = 82, RULE_copy_generic_opt_arg_list_item = 83, 
		RULE_createstmt = 84, RULE_opttemp = 85, RULE_opttableelementlist = 86, 
		RULE_opttypedtableelementlist = 87, RULE_tableelementlist = 88, RULE_typedtableelementlist = 89, 
		RULE_tableelement = 90, RULE_typedtableelement = 91, RULE_columnDef = 92, 
		RULE_columnOptions = 93, RULE_colquallist = 94, RULE_colconstraint = 95, 
		RULE_colconstraintelem = 96, RULE_generated_when = 97, RULE_constraintattr = 98, 
		RULE_tablelikeclause = 99, RULE_tablelikeoptionlist = 100, RULE_tablelikeoption = 101, 
		RULE_tableconstraint = 102, RULE_constraintelem = 103, RULE_no_inherit_ = 104, 
		RULE_column_list_ = 105, RULE_columnlist = 106, RULE_columnElem = 107, 
		RULE_c_include_ = 108, RULE_key_match = 109, RULE_exclusionconstraintlist = 110, 
		RULE_exclusionconstraintelem = 111, RULE_exclusionwhereclause = 112, RULE_key_actions = 113, 
		RULE_key_update = 114, RULE_key_delete = 115, RULE_key_action = 116, RULE_optinherit = 117, 
		RULE_optpartitionspec = 118, RULE_partitionspec = 119, RULE_part_params = 120, 
		RULE_part_elem = 121, RULE_table_access_method_clause = 122, RULE_optwith = 123, 
		RULE_oncommitoption = 124, RULE_opttablespace = 125, RULE_optconstablespace = 126, 
		RULE_existingindex = 127, RULE_createstatsstmt = 128, RULE_alterstatsstmt = 129, 
		RULE_createasstmt = 130, RULE_create_as_target = 131, RULE_with_data_ = 132, 
		RULE_creatematviewstmt = 133, RULE_create_mv_target = 134, RULE_optnolog = 135, 
		RULE_refreshmatviewstmt = 136, RULE_createseqstmt = 137, RULE_alterseqstmt = 138, 
		RULE_optseqoptlist = 139, RULE_optparenthesizedseqoptlist = 140, RULE_seqoptlist = 141, 
		RULE_seqoptelem = 142, RULE_by_ = 143, RULE_numericonly = 144, RULE_numericonly_list = 145, 
		RULE_createplangstmt = 146, RULE_trusted_ = 147, RULE_handler_name = 148, 
		RULE_inline_handler_ = 149, RULE_validator_clause = 150, RULE_validator_ = 151, 
		RULE_procedural_ = 152, RULE_createtablespacestmt = 153, RULE_opttablespaceowner = 154, 
		RULE_droptablespacestmt = 155, RULE_createextensionstmt = 156, RULE_create_extension_opt_list = 157, 
		RULE_create_extension_opt_item = 158, RULE_alterextensionstmt = 159, RULE_alter_extension_opt_list = 160, 
		RULE_alter_extension_opt_item = 161, RULE_alterextensioncontentsstmt = 162, 
		RULE_createfdwstmt = 163, RULE_fdw_option = 164, RULE_fdw_options = 165, 
		RULE_fdw_options_ = 166, RULE_alterfdwstmt = 167, RULE_create_generic_options = 168, 
		RULE_generic_option_list = 169, RULE_alter_generic_options = 170, RULE_alter_generic_option_list = 171, 
		RULE_alter_generic_option_elem = 172, RULE_generic_option_elem = 173, 
		RULE_generic_option_name = 174, RULE_generic_option_arg = 175, RULE_createforeignserverstmt = 176, 
		RULE_type_ = 177, RULE_foreign_server_version = 178, RULE_foreign_server_version_ = 179, 
		RULE_alterforeignserverstmt = 180, RULE_createforeigntablestmt = 181, 
		RULE_importforeignschemastmt = 182, RULE_import_qualification_type = 183, 
		RULE_import_qualification = 184, RULE_createusermappingstmt = 185, RULE_auth_ident = 186, 
		RULE_dropusermappingstmt = 187, RULE_alterusermappingstmt = 188, RULE_createpolicystmt = 189, 
		RULE_alterpolicystmt = 190, RULE_rowsecurityoptionalexpr = 191, RULE_rowsecurityoptionalwithcheck = 192, 
		RULE_rowsecuritydefaulttorole = 193, RULE_rowsecurityoptionaltorole = 194, 
		RULE_rowsecuritydefaultpermissive = 195, RULE_rowsecuritydefaultforcmd = 196, 
		RULE_row_security_cmd = 197, RULE_createamstmt = 198, RULE_am_type = 199, 
		RULE_createtrigstmt = 200, RULE_triggeractiontime = 201, RULE_triggerevents = 202, 
		RULE_triggeroneevent = 203, RULE_triggerreferencing = 204, RULE_triggertransitions = 205, 
		RULE_triggertransition = 206, RULE_transitionoldornew = 207, RULE_transitionrowortable = 208, 
		RULE_transitionrelname = 209, RULE_triggerforspec = 210, RULE_triggerforopteach = 211, 
		RULE_triggerfortype = 212, RULE_triggerwhen = 213, RULE_function_or_procedure = 214, 
		RULE_triggerfuncargs = 215, RULE_triggerfuncarg = 216, RULE_optconstrfromtable = 217, 
		RULE_constraintattributespec = 218, RULE_constraintattributeElem = 219, 
		RULE_createeventtrigstmt = 220, RULE_event_trigger_when_list = 221, RULE_event_trigger_when_item = 222, 
		RULE_event_trigger_value_list = 223, RULE_altereventtrigstmt = 224, RULE_enable_trigger = 225, 
		RULE_createassertionstmt = 226, RULE_definestmt = 227, RULE_definition = 228, 
		RULE_def_list = 229, RULE_def_elem = 230, RULE_def_arg = 231, RULE_old_aggr_definition = 232, 
		RULE_old_aggr_list = 233, RULE_old_aggr_elem = 234, RULE_enum_val_list_ = 235, 
		RULE_enum_val_list = 236, RULE_alterenumstmt = 237, RULE_if_not_exists_ = 238, 
		RULE_createopclassstmt = 239, RULE_opclass_item_list = 240, RULE_opclass_item = 241, 
		RULE_default_ = 242, RULE_opfamily_ = 243, RULE_opclass_purpose = 244, 
		RULE_recheck_ = 245, RULE_createopfamilystmt = 246, RULE_alteropfamilystmt = 247, 
		RULE_opclass_drop_list = 248, RULE_opclass_drop = 249, RULE_dropopclassstmt = 250, 
		RULE_dropopfamilystmt = 251, RULE_dropownedstmt = 252, RULE_reassignownedstmt = 253, 
		RULE_dropstmt = 254, RULE_object_type_any_name = 255, RULE_object_type_name = 256, 
		RULE_drop_type_name = 257, RULE_object_type_name_on_any_name = 258, RULE_any_name_list_ = 259, 
		RULE_any_name = 260, RULE_attrs = 261, RULE_type_name_list = 262, RULE_truncatestmt = 263, 
		RULE_restart_seqs_ = 264, RULE_commentstmt = 265, RULE_comment_text = 266, 
		RULE_seclabelstmt = 267, RULE_provider_ = 268, RULE_security_label = 269, 
		RULE_fetchstmt = 270, RULE_fetch_args = 271, RULE_from_in = 272, RULE_from_in_ = 273, 
		RULE_grantstmt = 274, RULE_revokestmt = 275, RULE_privileges = 276, RULE_privilege_list = 277, 
		RULE_privilege = 278, RULE_privilege_target = 279, RULE_grantee_list = 280, 
		RULE_grantee = 281, RULE_grant_grant_option_ = 282, RULE_grantrolestmt = 283, 
		RULE_revokerolestmt = 284, RULE_grant_admin_option_ = 285, RULE_granted_by_ = 286, 
		RULE_alterdefaultprivilegesstmt = 287, RULE_defacloptionlist = 288, RULE_defacloption = 289, 
		RULE_defaclaction = 290, RULE_defacl_privilege_target = 291, RULE_indexstmt = 292, 
		RULE_unique_ = 293, RULE_single_name_ = 294, RULE_concurrently_ = 295, 
		RULE_index_name_ = 296, RULE_access_method_clause = 297, RULE_index_params = 298, 
		RULE_index_elem_options = 299, RULE_index_elem = 300, RULE_include_ = 301, 
		RULE_index_including_params = 302, RULE_collate_ = 303, RULE_class_ = 304, 
		RULE_asc_desc_ = 305, RULE_nulls_order_ = 306, RULE_createfunctionstmt = 307, 
		RULE_or_replace_ = 308, RULE_func_args = 309, RULE_func_args_list = 310, 
		RULE_function_with_argtypes_list = 311, RULE_function_with_argtypes = 312, 
		RULE_func_args_with_defaults = 313, RULE_func_args_with_defaults_list = 314, 
		RULE_func_arg = 315, RULE_arg_class = 316, RULE_param_name = 317, RULE_func_return = 318, 
		RULE_func_type = 319, RULE_func_arg_with_default = 320, RULE_aggr_arg = 321, 
		RULE_aggr_args = 322, RULE_aggr_args_list = 323, RULE_aggregate_with_argtypes = 324, 
		RULE_aggregate_with_argtypes_list = 325, RULE_createfunc_opt_list = 326, 
		RULE_common_func_opt_item = 327, RULE_createfunc_opt_item = 328, RULE_func_as = 329, 
		RULE_transform_type_list = 330, RULE_definition_ = 331, RULE_table_func_column = 332, 
		RULE_table_func_column_list = 333, RULE_alterfunctionstmt = 334, RULE_alterfunc_opt_list = 335, 
		RULE_restrict_ = 336, RULE_removefuncstmt = 337, RULE_removeaggrstmt = 338, 
		RULE_removeoperstmt = 339, RULE_oper_argtypes = 340, RULE_any_operator = 341, 
		RULE_operator_with_argtypes_list = 342, RULE_operator_with_argtypes = 343, 
		RULE_dostmt = 344, RULE_dostmt_opt_list = 345, RULE_dostmt_opt_item = 346, 
		RULE_createcaststmt = 347, RULE_cast_context = 348, RULE_dropcaststmt = 349, 
		RULE_if_exists_ = 350, RULE_createtransformstmt = 351, RULE_transform_element_list = 352, 
		RULE_droptransformstmt = 353, RULE_reindexstmt = 354, RULE_reindex_target_relation = 355, 
		RULE_reindex_target_all = 356, RULE_reindex_option_list = 357, RULE_altertblspcstmt = 358, 
		RULE_renamestmt = 359, RULE_column_ = 360, RULE_set_data_ = 361, RULE_alterobjectdependsstmt = 362, 
		RULE_no_ = 363, RULE_alterobjectschemastmt = 364, RULE_alteroperatorstmt = 365, 
		RULE_operator_def_list = 366, RULE_operator_def_elem = 367, RULE_operator_def_arg = 368, 
		RULE_altertypestmt = 369, RULE_alterownerstmt = 370, RULE_createpublicationstmt = 371, 
		RULE_publication_for_tables_ = 372, RULE_publication_for_tables = 373, 
		RULE_alterpublicationstmt = 374, RULE_createsubscriptionstmt = 375, RULE_publication_name_list = 376, 
		RULE_publication_name_item = 377, RULE_altersubscriptionstmt = 378, RULE_dropsubscriptionstmt = 379, 
		RULE_rulestmt = 380, RULE_ruleactionlist = 381, RULE_ruleactionmulti = 382, 
		RULE_ruleactionstmt = 383, RULE_ruleactionstmtOrEmpty = 384, RULE_event = 385, 
		RULE_instead_ = 386, RULE_notifystmt = 387, RULE_notify_payload = 388, 
		RULE_listenstmt = 389, RULE_unlistenstmt = 390, RULE_transactionstmt = 391, 
		RULE_transaction_ = 392, RULE_transaction_mode_item = 393, RULE_transaction_mode_list = 394, 
		RULE_transaction_mode_list_or_empty = 395, RULE_transaction_chain_ = 396, 
		RULE_viewstmt = 397, RULE_check_option_ = 398, RULE_loadstmt = 399, RULE_createdbstmt = 400, 
		RULE_createdb_opt_list = 401, RULE_createdb_opt_items = 402, RULE_createdb_opt_item = 403, 
		RULE_createdb_opt_name = 404, RULE_equal_ = 405, RULE_alterdatabasestmt = 406, 
		RULE_alterdatabasesetstmt = 407, RULE_dropdbstmt = 408, RULE_drop_option_list = 409, 
		RULE_drop_option = 410, RULE_altercollationstmt = 411, RULE_altersystemstmt = 412, 
		RULE_createdomainstmt = 413, RULE_alterdomainstmt = 414, RULE_as_ = 415, 
		RULE_altertsdictionarystmt = 416, RULE_altertsconfigurationstmt = 417, 
		RULE_any_with = 418, RULE_createconversionstmt = 419, RULE_clusterstmt = 420, 
		RULE_cluster_index_specification = 421, RULE_vacuumstmt = 422, RULE_analyzestmt = 423, 
		RULE_utility_option_list = 424, RULE_vac_analyze_option_list = 425, RULE_analyze_keyword = 426, 
		RULE_utility_option_elem = 427, RULE_utility_option_name = 428, RULE_utility_option_arg = 429, 
		RULE_vac_analyze_option_elem = 430, RULE_vac_analyze_option_name = 431, 
		RULE_vac_analyze_option_arg = 432, RULE_analyze_ = 433, RULE_verbose_ = 434, 
		RULE_full_ = 435, RULE_freeze_ = 436, RULE_name_list_ = 437, RULE_vacuum_relation = 438, 
		RULE_vacuum_relation_list = 439, RULE_vacuum_relation_list_ = 440, RULE_explainstmt = 441, 
		RULE_explainablestmt = 442, RULE_explain_option_list = 443, RULE_explain_option_elem = 444, 
		RULE_explain_option_name = 445, RULE_explain_option_arg = 446, RULE_preparestmt = 447, 
		RULE_prep_type_clause = 448, RULE_preparablestmt = 449, RULE_executestmt = 450, 
		RULE_execute_param_clause = 451, RULE_deallocatestmt = 452, RULE_insertstmt = 453, 
		RULE_insert_target = 454, RULE_insert_rest = 455, RULE_override_kind = 456, 
		RULE_insert_column_list = 457, RULE_insert_column_item = 458, RULE_on_conflict_ = 459, 
		RULE_conf_expr_ = 460, RULE_returning_clause = 461, RULE_mergestmt = 462, 
		RULE_merge_insert_clause = 463, RULE_merge_update_clause = 464, RULE_merge_delete_clause = 465, 
		RULE_deletestmt = 466, RULE_using_clause = 467, RULE_lockstmt = 468, RULE_lock_ = 469, 
		RULE_lock_type = 470, RULE_nowait_ = 471, RULE_nowait_or_skip_ = 472, 
		RULE_updatestmt = 473, RULE_set_clause_list = 474, RULE_set_clause = 475, 
		RULE_set_target = 476, RULE_set_target_list = 477, RULE_declarecursorstmt = 478, 
		RULE_cursor_name = 479, RULE_cursor_options = 480, RULE_hold_ = 481, RULE_selectstmt = 482, 
		RULE_select_with_parens = 483, RULE_select_no_parens = 484, RULE_select_clause = 485, 
		RULE_simple_select_intersect = 486, RULE_simple_select_pramary = 487, 
		RULE_with_clause = 488, RULE_cte_list = 489, RULE_common_table_expr = 490, 
		RULE_materialized_ = 491, RULE_with_clause_ = 492, RULE_into_clause = 493, 
		RULE_strict_ = 494, RULE_opttempTableName = 495, RULE_table_ = 496, RULE_all_or_distinct = 497, 
		RULE_distinct_clause = 498, RULE_all_clause_ = 499, RULE_sort_clause_ = 500, 
		RULE_sort_clause = 501, RULE_sortby_list = 502, RULE_sortby = 503, RULE_select_limit = 504, 
		RULE_select_limit_ = 505, RULE_limit_clause = 506, RULE_offset_clause = 507, 
		RULE_select_limit_value = 508, RULE_select_offset_value = 509, RULE_select_fetch_first_value = 510, 
		RULE_i_or_f_const = 511, RULE_row_or_rows = 512, RULE_first_or_next = 513, 
		RULE_group_clause = 514, RULE_group_by_list = 515, RULE_group_by_item = 516, 
		RULE_empty_grouping_set = 517, RULE_rollup_clause = 518, RULE_cube_clause = 519, 
		RULE_grouping_sets_clause = 520, RULE_having_clause = 521, RULE_for_locking_clause = 522, 
		RULE_for_locking_clause_ = 523, RULE_for_locking_items = 524, RULE_for_locking_item = 525, 
		RULE_for_locking_strength = 526, RULE_locked_rels_list = 527, RULE_values_clause = 528, 
		RULE_from_clause = 529, RULE_from_list = 530, RULE_table_ref = 531, RULE_alias_clause = 532, 
		RULE_func_alias_clause = 533, RULE_join_type = 534, RULE_join_qual = 535, 
		RULE_relation_expr = 536, RULE_relation_expr_list = 537, RULE_relation_expr_opt_alias = 538, 
		RULE_tablesample_clause = 539, RULE_repeatable_clause_ = 540, RULE_func_table = 541, 
		RULE_rowsfrom_item = 542, RULE_rowsfrom_list = 543, RULE_col_def_list_ = 544, 
		RULE_ordinality_ = 545, RULE_where_clause = 546, RULE_where_or_current_clause = 547, 
		RULE_opttablefuncelementlist = 548, RULE_tablefuncelementlist = 549, RULE_tablefuncelement = 550, 
		RULE_xmltable = 551, RULE_xmltable_column_list = 552, RULE_xmltable_column_el = 553, 
		RULE_xmltable_column_option_list = 554, RULE_xmltable_column_option_el = 555, 
		RULE_xml_namespace_list = 556, RULE_xml_namespace_el = 557, RULE_typename = 558, 
		RULE_opt_array_bounds = 559, RULE_simpletypename = 560, RULE_consttypename = 561, 
		RULE_generictype = 562, RULE_type_modifiers_ = 563, RULE_numeric = 564, 
		RULE_float_ = 565, RULE_bit = 566, RULE_constbit = 567, RULE_bitwithlength = 568, 
		RULE_bitwithoutlength = 569, RULE_character = 570, RULE_constcharacter = 571, 
		RULE_character_c = 572, RULE_varying_ = 573, RULE_constdatetime = 574, 
		RULE_constinterval = 575, RULE_timezone_ = 576, RULE_interval_ = 577, 
		RULE_interval_second = 578, RULE_jsonType = 579, RULE_escape_ = 580, RULE_a_expr = 581, 
		RULE_a_expr_qual = 582, RULE_a_expr_lessless = 583, RULE_a_expr_or = 584, 
		RULE_a_expr_and = 585, RULE_a_expr_between = 586, RULE_a_expr_in = 587, 
		RULE_a_expr_unary_not = 588, RULE_a_expr_isnull = 589, RULE_a_expr_is_not = 590, 
		RULE_a_expr_compare = 591, RULE_a_expr_like = 592, RULE_a_expr_qual_op = 593, 
		RULE_a_expr_unary_qualop = 594, RULE_a_expr_add = 595, RULE_a_expr_mul = 596, 
		RULE_a_expr_caret = 597, RULE_a_expr_unary_sign = 598, RULE_a_expr_at_time_zone = 599, 
		RULE_a_expr_collate = 600, RULE_a_expr_typecast = 601, RULE_b_expr = 602, 
		RULE_c_expr = 603, RULE_plsqlvariablename = 604, RULE_func_application = 605, 
		RULE_func_expr = 606, RULE_func_expr_windowless = 607, RULE_func_expr_common_subexpr = 608, 
		RULE_xml_root_version = 609, RULE_xml_root_standalone_ = 610, RULE_xml_attributes = 611, 
		RULE_xml_attribute_list = 612, RULE_xml_attribute_el = 613, RULE_document_or_content = 614, 
		RULE_xml_whitespace_option = 615, RULE_xmlexists_argument = 616, RULE_xml_passing_mech = 617, 
		RULE_within_group_clause = 618, RULE_filter_clause = 619, RULE_window_clause = 620, 
		RULE_window_definition_list = 621, RULE_window_definition = 622, RULE_over_clause = 623, 
		RULE_window_specification = 624, RULE_existing_window_name_ = 625, RULE_partition_clause_ = 626, 
		RULE_frame_clause_ = 627, RULE_frame_extent = 628, RULE_frame_bound = 629, 
		RULE_window_exclusion_clause_ = 630, RULE_row = 631, RULE_explicit_row = 632, 
		RULE_implicit_row = 633, RULE_sub_type = 634, RULE_all_op = 635, RULE_mathop = 636, 
		RULE_qual_op = 637, RULE_qual_all_op = 638, RULE_subquery_Op = 639, RULE_expr_list = 640, 
		RULE_func_arg_list = 641, RULE_func_arg_expr = 642, RULE_type_list = 643, 
		RULE_array_expr = 644, RULE_array_expr_list = 645, RULE_extract_list = 646, 
		RULE_extract_arg = 647, RULE_unicode_normal_form = 648, RULE_overlay_list = 649, 
		RULE_position_list = 650, RULE_substr_list = 651, RULE_trim_list = 652, 
		RULE_in_expr = 653, RULE_case_expr = 654, RULE_when_clause_list = 655, 
		RULE_when_clause = 656, RULE_case_default = 657, RULE_case_arg = 658, 
		RULE_columnref = 659, RULE_indirection_el = 660, RULE_slice_bound_ = 661, 
		RULE_indirection = 662, RULE_opt_indirection = 663, RULE_json_passing_clause = 664, 
		RULE_json_arguments = 665, RULE_json_argument = 666, RULE_json_wrapper_behavior = 667, 
		RULE_json_behavior = 668, RULE_json_behavior_type = 669, RULE_json_behavior_clause = 670, 
		RULE_json_on_error_clause = 671, RULE_json_value_expr = 672, RULE_json_format_clause = 673, 
		RULE_json_quotes_clause = 674, RULE_json_returning_clause = 675, RULE_json_predicate_type_constraint = 676, 
		RULE_json_key_uniqueness_constraint = 677, RULE_json_name_and_value_list = 678, 
		RULE_json_name_and_value = 679, RULE_json_object_constructor_null_clause = 680, 
		RULE_json_array_constructor_null_clause = 681, RULE_json_value_expr_list = 682, 
		RULE_json_aggregate_func = 683, RULE_json_array_aggregate_order_by_clause = 684, 
		RULE_target_list_ = 685, RULE_target_list = 686, RULE_target_el = 687, 
		RULE_qualified_name_list = 688, RULE_qualified_name = 689, RULE_name_list = 690, 
		RULE_name = 691, RULE_attr_name = 692, RULE_file_name = 693, RULE_func_name = 694, 
		RULE_aexprconst = 695, RULE_xconst = 696, RULE_bconst = 697, RULE_fconst = 698, 
		RULE_iconst = 699, RULE_sconst = 700, RULE_anysconst = 701, RULE_uescape_ = 702, 
		RULE_signediconst = 703, RULE_roleid = 704, RULE_rolespec = 705, RULE_role_list = 706, 
		RULE_colid = 707, RULE_type_function_name = 708, RULE_nonreservedword = 709, 
		RULE_colLabel = 710, RULE_bareColLabel = 711, RULE_unreserved_keyword = 712, 
		RULE_col_name_keyword = 713, RULE_type_func_name_keyword = 714, RULE_reserved_keyword = 715, 
		RULE_bare_label_keyword = 716, RULE_any_identifier = 717, RULE_identifier = 718;
	public static readonly string[] ruleNames = {
		"root", "stmtblock", "stmtmulti", "stmt", "callstmt", "createrolestmt", 
		"with_", "optrolelist", "alteroptrolelist", "alteroptroleelem", "createoptroleelem", 
		"createuserstmt", "alterrolestmt", "in_database_", "alterrolesetstmt", 
		"droprolestmt", "creategroupstmt", "altergroupstmt", "add_drop", "createschemastmt", 
		"optschemaname", "optschemaeltlist", "schema_stmt", "variablesetstmt", 
		"set_rest", "generic_set", "set_rest_more", "var_name", "var_list", "var_value", 
		"iso_level", "boolean_or_string_", "zone_value", "encoding_", "nonreservedword_or_sconst", 
		"variableresetstmt", "reset_rest", "generic_reset", "setresetclause", 
		"functionsetresetclause", "variableshowstmt", "constraintssetstmt", "constraints_set_list", 
		"constraints_set_mode", "checkpointstmt", "discardstmt", "altertablestmt", 
		"alter_table_cmds", "partition_cmd", "index_partition_cmd", "alter_table_cmd", 
		"alter_column_default", "drop_behavior_", "collate_clause_", "alter_using", 
		"replica_identity", "reloptions", "reloptions_", "reloption_list", "reloption_elem", 
		"alter_identity_column_option_list", "alter_identity_column_option", "partitionboundspec", 
		"hash_partbound_elem", "hash_partbound", "altercompositetypestmt", "alter_type_cmds", 
		"alter_type_cmd", "closeportalstmt", "copystmt", "copy_from", "program_", 
		"copy_file_name", "copy_options", "copy_opt_list", "copy_opt_item", "binary_", 
		"copy_delimiter", "using_", "copy_generic_opt_list", "copy_generic_opt_elem", 
		"copy_generic_opt_arg", "copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", 
		"createstmt", "opttemp", "opttableelementlist", "opttypedtableelementlist", 
		"tableelementlist", "typedtableelementlist", "tableelement", "typedtableelement", 
		"columnDef", "columnOptions", "colquallist", "colconstraint", "colconstraintelem", 
		"generated_when", "constraintattr", "tablelikeclause", "tablelikeoptionlist", 
		"tablelikeoption", "tableconstraint", "constraintelem", "no_inherit_", 
		"column_list_", "columnlist", "columnElem", "c_include_", "key_match", 
		"exclusionconstraintlist", "exclusionconstraintelem", "exclusionwhereclause", 
		"key_actions", "key_update", "key_delete", "key_action", "optinherit", 
		"optpartitionspec", "partitionspec", "part_params", "part_elem", "table_access_method_clause", 
		"optwith", "oncommitoption", "opttablespace", "optconstablespace", "existingindex", 
		"createstatsstmt", "alterstatsstmt", "createasstmt", "create_as_target", 
		"with_data_", "creatematviewstmt", "create_mv_target", "optnolog", "refreshmatviewstmt", 
		"createseqstmt", "alterseqstmt", "optseqoptlist", "optparenthesizedseqoptlist", 
		"seqoptlist", "seqoptelem", "by_", "numericonly", "numericonly_list", 
		"createplangstmt", "trusted_", "handler_name", "inline_handler_", "validator_clause", 
		"validator_", "procedural_", "createtablespacestmt", "opttablespaceowner", 
		"droptablespacestmt", "createextensionstmt", "create_extension_opt_list", 
		"create_extension_opt_item", "alterextensionstmt", "alter_extension_opt_list", 
		"alter_extension_opt_item", "alterextensioncontentsstmt", "createfdwstmt", 
		"fdw_option", "fdw_options", "fdw_options_", "alterfdwstmt", "create_generic_options", 
		"generic_option_list", "alter_generic_options", "alter_generic_option_list", 
		"alter_generic_option_elem", "generic_option_elem", "generic_option_name", 
		"generic_option_arg", "createforeignserverstmt", "type_", "foreign_server_version", 
		"foreign_server_version_", "alterforeignserverstmt", "createforeigntablestmt", 
		"importforeignschemastmt", "import_qualification_type", "import_qualification", 
		"createusermappingstmt", "auth_ident", "dropusermappingstmt", "alterusermappingstmt", 
		"createpolicystmt", "alterpolicystmt", "rowsecurityoptionalexpr", "rowsecurityoptionalwithcheck", 
		"rowsecuritydefaulttorole", "rowsecurityoptionaltorole", "rowsecuritydefaultpermissive", 
		"rowsecuritydefaultforcmd", "row_security_cmd", "createamstmt", "am_type", 
		"createtrigstmt", "triggeractiontime", "triggerevents", "triggeroneevent", 
		"triggerreferencing", "triggertransitions", "triggertransition", "transitionoldornew", 
		"transitionrowortable", "transitionrelname", "triggerforspec", "triggerforopteach", 
		"triggerfortype", "triggerwhen", "function_or_procedure", "triggerfuncargs", 
		"triggerfuncarg", "optconstrfromtable", "constraintattributespec", "constraintattributeElem", 
		"createeventtrigstmt", "event_trigger_when_list", "event_trigger_when_item", 
		"event_trigger_value_list", "altereventtrigstmt", "enable_trigger", "createassertionstmt", 
		"definestmt", "definition", "def_list", "def_elem", "def_arg", "old_aggr_definition", 
		"old_aggr_list", "old_aggr_elem", "enum_val_list_", "enum_val_list", "alterenumstmt", 
		"if_not_exists_", "createopclassstmt", "opclass_item_list", "opclass_item", 
		"default_", "opfamily_", "opclass_purpose", "recheck_", "createopfamilystmt", 
		"alteropfamilystmt", "opclass_drop_list", "opclass_drop", "dropopclassstmt", 
		"dropopfamilystmt", "dropownedstmt", "reassignownedstmt", "dropstmt", 
		"object_type_any_name", "object_type_name", "drop_type_name", "object_type_name_on_any_name", 
		"any_name_list_", "any_name", "attrs", "type_name_list", "truncatestmt", 
		"restart_seqs_", "commentstmt", "comment_text", "seclabelstmt", "provider_", 
		"security_label", "fetchstmt", "fetch_args", "from_in", "from_in_", "grantstmt", 
		"revokestmt", "privileges", "privilege_list", "privilege", "privilege_target", 
		"grantee_list", "grantee", "grant_grant_option_", "grantrolestmt", "revokerolestmt", 
		"grant_admin_option_", "granted_by_", "alterdefaultprivilegesstmt", "defacloptionlist", 
		"defacloption", "defaclaction", "defacl_privilege_target", "indexstmt", 
		"unique_", "single_name_", "concurrently_", "index_name_", "access_method_clause", 
		"index_params", "index_elem_options", "index_elem", "include_", "index_including_params", 
		"collate_", "class_", "asc_desc_", "nulls_order_", "createfunctionstmt", 
		"or_replace_", "func_args", "func_args_list", "function_with_argtypes_list", 
		"function_with_argtypes", "func_args_with_defaults", "func_args_with_defaults_list", 
		"func_arg", "arg_class", "param_name", "func_return", "func_type", "func_arg_with_default", 
		"aggr_arg", "aggr_args", "aggr_args_list", "aggregate_with_argtypes", 
		"aggregate_with_argtypes_list", "createfunc_opt_list", "common_func_opt_item", 
		"createfunc_opt_item", "func_as", "transform_type_list", "definition_", 
		"table_func_column", "table_func_column_list", "alterfunctionstmt", "alterfunc_opt_list", 
		"restrict_", "removefuncstmt", "removeaggrstmt", "removeoperstmt", "oper_argtypes", 
		"any_operator", "operator_with_argtypes_list", "operator_with_argtypes", 
		"dostmt", "dostmt_opt_list", "dostmt_opt_item", "createcaststmt", "cast_context", 
		"dropcaststmt", "if_exists_", "createtransformstmt", "transform_element_list", 
		"droptransformstmt", "reindexstmt", "reindex_target_relation", "reindex_target_all", 
		"reindex_option_list", "altertblspcstmt", "renamestmt", "column_", "set_data_", 
		"alterobjectdependsstmt", "no_", "alterobjectschemastmt", "alteroperatorstmt", 
		"operator_def_list", "operator_def_elem", "operator_def_arg", "altertypestmt", 
		"alterownerstmt", "createpublicationstmt", "publication_for_tables_", 
		"publication_for_tables", "alterpublicationstmt", "createsubscriptionstmt", 
		"publication_name_list", "publication_name_item", "altersubscriptionstmt", 
		"dropsubscriptionstmt", "rulestmt", "ruleactionlist", "ruleactionmulti", 
		"ruleactionstmt", "ruleactionstmtOrEmpty", "event", "instead_", "notifystmt", 
		"notify_payload", "listenstmt", "unlistenstmt", "transactionstmt", "transaction_", 
		"transaction_mode_item", "transaction_mode_list", "transaction_mode_list_or_empty", 
		"transaction_chain_", "viewstmt", "check_option_", "loadstmt", "createdbstmt", 
		"createdb_opt_list", "createdb_opt_items", "createdb_opt_item", "createdb_opt_name", 
		"equal_", "alterdatabasestmt", "alterdatabasesetstmt", "dropdbstmt", "drop_option_list", 
		"drop_option", "altercollationstmt", "altersystemstmt", "createdomainstmt", 
		"alterdomainstmt", "as_", "altertsdictionarystmt", "altertsconfigurationstmt", 
		"any_with", "createconversionstmt", "clusterstmt", "cluster_index_specification", 
		"vacuumstmt", "analyzestmt", "utility_option_list", "vac_analyze_option_list", 
		"analyze_keyword", "utility_option_elem", "utility_option_name", "utility_option_arg", 
		"vac_analyze_option_elem", "vac_analyze_option_name", "vac_analyze_option_arg", 
		"analyze_", "verbose_", "full_", "freeze_", "name_list_", "vacuum_relation", 
		"vacuum_relation_list", "vacuum_relation_list_", "explainstmt", "explainablestmt", 
		"explain_option_list", "explain_option_elem", "explain_option_name", "explain_option_arg", 
		"preparestmt", "prep_type_clause", "preparablestmt", "executestmt", "execute_param_clause", 
		"deallocatestmt", "insertstmt", "insert_target", "insert_rest", "override_kind", 
		"insert_column_list", "insert_column_item", "on_conflict_", "conf_expr_", 
		"returning_clause", "mergestmt", "merge_insert_clause", "merge_update_clause", 
		"merge_delete_clause", "deletestmt", "using_clause", "lockstmt", "lock_", 
		"lock_type", "nowait_", "nowait_or_skip_", "updatestmt", "set_clause_list", 
		"set_clause", "set_target", "set_target_list", "declarecursorstmt", "cursor_name", 
		"cursor_options", "hold_", "selectstmt", "select_with_parens", "select_no_parens", 
		"select_clause", "simple_select_intersect", "simple_select_pramary", "with_clause", 
		"cte_list", "common_table_expr", "materialized_", "with_clause_", "into_clause", 
		"strict_", "opttempTableName", "table_", "all_or_distinct", "distinct_clause", 
		"all_clause_", "sort_clause_", "sort_clause", "sortby_list", "sortby", 
		"select_limit", "select_limit_", "limit_clause", "offset_clause", "select_limit_value", 
		"select_offset_value", "select_fetch_first_value", "i_or_f_const", "row_or_rows", 
		"first_or_next", "group_clause", "group_by_list", "group_by_item", "empty_grouping_set", 
		"rollup_clause", "cube_clause", "grouping_sets_clause", "having_clause", 
		"for_locking_clause", "for_locking_clause_", "for_locking_items", "for_locking_item", 
		"for_locking_strength", "locked_rels_list", "values_clause", "from_clause", 
		"from_list", "table_ref", "alias_clause", "func_alias_clause", "join_type", 
		"join_qual", "relation_expr", "relation_expr_list", "relation_expr_opt_alias", 
		"tablesample_clause", "repeatable_clause_", "func_table", "rowsfrom_item", 
		"rowsfrom_list", "col_def_list_", "ordinality_", "where_clause", "where_or_current_clause", 
		"opttablefuncelementlist", "tablefuncelementlist", "tablefuncelement", 
		"xmltable", "xmltable_column_list", "xmltable_column_el", "xmltable_column_option_list", 
		"xmltable_column_option_el", "xml_namespace_list", "xml_namespace_el", 
		"typename", "opt_array_bounds", "simpletypename", "consttypename", "generictype", 
		"type_modifiers_", "numeric", "float_", "bit", "constbit", "bitwithlength", 
		"bitwithoutlength", "character", "constcharacter", "character_c", "varying_", 
		"constdatetime", "constinterval", "timezone_", "interval_", "interval_second", 
		"jsonType", "escape_", "a_expr", "a_expr_qual", "a_expr_lessless", "a_expr_or", 
		"a_expr_and", "a_expr_between", "a_expr_in", "a_expr_unary_not", "a_expr_isnull", 
		"a_expr_is_not", "a_expr_compare", "a_expr_like", "a_expr_qual_op", "a_expr_unary_qualop", 
		"a_expr_add", "a_expr_mul", "a_expr_caret", "a_expr_unary_sign", "a_expr_at_time_zone", 
		"a_expr_collate", "a_expr_typecast", "b_expr", "c_expr", "plsqlvariablename", 
		"func_application", "func_expr", "func_expr_windowless", "func_expr_common_subexpr", 
		"xml_root_version", "xml_root_standalone_", "xml_attributes", "xml_attribute_list", 
		"xml_attribute_el", "document_or_content", "xml_whitespace_option", "xmlexists_argument", 
		"xml_passing_mech", "within_group_clause", "filter_clause", "window_clause", 
		"window_definition_list", "window_definition", "over_clause", "window_specification", 
		"existing_window_name_", "partition_clause_", "frame_clause_", "frame_extent", 
		"frame_bound", "window_exclusion_clause_", "row", "explicit_row", "implicit_row", 
		"sub_type", "all_op", "mathop", "qual_op", "qual_all_op", "subquery_Op", 
		"expr_list", "func_arg_list", "func_arg_expr", "type_list", "array_expr", 
		"array_expr_list", "extract_list", "extract_arg", "unicode_normal_form", 
		"overlay_list", "position_list", "substr_list", "trim_list", "in_expr", 
		"case_expr", "when_clause_list", "when_clause", "case_default", "case_arg", 
		"columnref", "indirection_el", "slice_bound_", "indirection", "opt_indirection", 
		"json_passing_clause", "json_arguments", "json_argument", "json_wrapper_behavior", 
		"json_behavior", "json_behavior_type", "json_behavior_clause", "json_on_error_clause", 
		"json_value_expr", "json_format_clause", "json_quotes_clause", "json_returning_clause", 
		"json_predicate_type_constraint", "json_key_uniqueness_constraint", "json_name_and_value_list", 
		"json_name_and_value", "json_object_constructor_null_clause", "json_array_constructor_null_clause", 
		"json_value_expr_list", "json_aggregate_func", "json_array_aggregate_order_by_clause", 
		"target_list_", "target_list", "target_el", "qualified_name_list", "qualified_name", 
		"name_list", "name", "attr_name", "file_name", "func_name", "aexprconst", 
		"xconst", "bconst", "fconst", "iconst", "sconst", "anysconst", "uescape_", 
		"signediconst", "roleid", "rolespec", "role_list", "colid", "type_function_name", 
		"nonreservedword", "colLabel", "bareColLabel", "unreserved_keyword", "col_name_keyword", 
		"type_func_name_keyword", "reserved_keyword", "bare_label_keyword", "any_identifier", 
		"identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'*'", "'='", 
		"'.'", "'+'", "'-'", "'/'", "'^'", "'<'", "'>'", "'<<'", "'>>'", "':='", 
		"'<='", "'=>'", "'>='", "'..'", "'<>'", "'::'", "'%'", null, null, "'JSON'", 
		"'JSON_ARRAY'", "'JSON_ARRAYAGG'", "'JSON_EXISTS'", "'JSON_OBJECT'", "'JSON_OBJECTAGG'", 
		"'JSON_QUERY'", "'JSON_SCALAR'", "'JSON_SERIALIZE'", "'JSON_TABLE'", "'JSON_VALUE'", 
		"'MERGE_ACTION'", "'SYSTEM_USER'", "'ABSENT'", "'ASENSITIVE'", "'ATOMIC'", 
		"'BREATH'", "'COMPRESSION'", "'CONDITIONAL'", "'DEPTH'", "'EMPTY'", "'FINALIZE'", 
		"'INDENT'", "'KEEP'", "'KEYS'", "'NESTED'", "'OMIT'", "'PARAMETER'", "'PATH'", 
		"'PLAN'", "'QUOTES'", "'SCALAR'", "'SOURCE'", "'STRING'", "'TARGET'", 
		"'UNCONDITIONAL'", "'PERIOD'", "'FORMAT_LA'", "'ALL'", "'ANALYSE'", "'ANALYZE'", 
		"'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'ASYMMETRIC'", "'BOTH'", 
		"'CASE'", "'CAST'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONSTRAINT'", 
		"'CREATE'", "'CURRENT_CATALOG'", "'CURRENT_DATE'", "'CURRENT_ROLE'", "'CURRENT_TIME'", 
		"'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DEFAULT'", "'DEFERRABLE'", 
		"'DESC'", "'DISTINCT'", "'DO'", "'ELSE'", "'EXCEPT'", "'FALSE'", "'FETCH'", 
		"'FOR'", "'FOREIGN'", "'FROM'", "'GRANT'", "'GROUP'", "'HAVING'", "'IN'", 
		"'INITIALLY'", "'INTERSECT'", "'INTO'", "'LATERAL'", "'LEADING'", "'LIMIT'", 
		"'LOCALTIME'", "'LOCALTIMESTAMP'", "'NOT'", "'NULL'", "'OFFSET'", "'ON'", 
		"'ONLY'", "'OR'", "'ORDER'", "'PLACING'", "'PRIMARY'", "'REFERENCES'", 
		"'RETURNING'", "'SELECT'", "'SESSION_USER'", "'SOME'", "'SYMMETRIC'", 
		"'TABLE'", "'THEN'", "'TO'", "'TRAILING'", "'TRUE'", "'UNION'", "'UNIQUE'", 
		"'USER'", "'USING'", "'VARIADIC'", "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", 
		"'AUTHORIZATION'", "'BINARY'", "'COLLATION'", "'CONCURRENTLY'", "'CROSS'", 
		"'CURRENT_SCHEMA'", "'FREEZE'", "'FULL'", "'ILIKE'", "'INNER'", "'IS'", 
		"'ISNULL'", "'JOIN'", "'LEFT'", "'LIKE'", "'NATURAL'", "'NOTNULL'", "'OUTER'", 
		"'OVER'", "'OVERLAPS'", "'RIGHT'", "'SIMILAR'", "'VERBOSE'", "'ABORT'", 
		"'ABSOLUTE'", "'ACCESS'", "'ACTION'", "'ADD'", "'ADMIN'", "'AFTER'", "'AGGREGATE'", 
		"'ALSO'", "'ALTER'", "'ALWAYS'", "'ASSERTION'", "'ASSIGNMENT'", "'AT'", 
		"'ATTRIBUTE'", "'BACKWARD'", "'BEFORE'", "'BEGIN'", "'BY'", "'CACHE'", 
		"'CALLED'", "'CASCADE'", "'CASCADED'", "'CATALOG'", "'CHAIN'", "'CHARACTERISTICS'", 
		"'CHECKPOINT'", "'CLASS'", "'CLOSE'", "'CLUSTER'", "'COMMENT'", "'COMMENTS'", 
		"'COMMIT'", "'COMMITTED'", "'CONFIGURATION'", "'CONNECTION'", "'CONSTRAINTS'", 
		"'CONTENT'", "'CONTINUE'", "'CONVERSION'", "'COPY'", "'COST'", "'CSV'", 
		"'CURSOR'", "'CYCLE'", "'DATA'", "'DATABASE'", "'DAY'", "'DEALLOCATE'", 
		"'DECLARE'", "'DEFAULTS'", "'DEFERRED'", "'DEFINER'", "'DELETE'", "'DELIMITER'", 
		"'DELIMITERS'", "'DICTIONARY'", "'DISABLE'", "'DISCARD'", "'DOCUMENT'", 
		"'DOMAIN'", "'DOUBLE'", "'DROP'", "'EACH'", "'ENABLE'", "'ENCODING'", 
		"'ENCRYPTED'", "'ENUM'", "'ESCAPE'", "'EVENT'", "'EXCLUDE'", "'EXCLUDING'", 
		"'EXCLUSIVE'", "'EXECUTE'", "'EXPLAIN'", "'EXTENSION'", "'EXTERNAL'", 
		"'FAMILY'", "'FIRST'", "'FOLLOWING'", "'FORCE'", "'FORWARD'", "'FUNCTION'", 
		"'FUNCTIONS'", "'GLOBAL'", "'GRANTED'", "'HANDLER'", "'HEADER'", "'HOLD'", 
		"'HOUR'", "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IMMUTABLE'", "'IMPLICIT'", 
		"'INCLUDING'", "'INCREMENT'", "'INDEX'", "'INDEXES'", "'INHERIT'", "'INHERITS'", 
		"'INLINE'", "'INSENSITIVE'", "'INSERT'", "'INSTEAD'", "'INVOKER'", "'ISOLATION'", 
		"'KEY'", "'LABEL'", "'LANGUAGE'", "'LARGE'", "'LAST'", "'LEAKPROOF'", 
		"'LEVEL'", "'LISTEN'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'MAPPING'", 
		"'MATCH'", "'MATCHED'", "'MATERIALIZED'", "'MAXVALUE'", "'MERGE'", "'MINUTE'", 
		"'MINVALUE'", "'MODE'", "'MONTH'", "'MOVE'", "'NAME'", "'NAMES'", "'NEXT'", 
		"'NO'", "'NOTHING'", "'NOTIFY'", "'NOWAIT'", "'NULLS'", "'OBJECT'", "'OF'", 
		"'OFF'", "'OIDS'", "'OPERATOR'", "'OPTION'", "'OPTIONS'", "'OWNED'", "'OWNER'", 
		"'PARSER'", "'PARTIAL'", "'PARTITION'", "'PASSING'", "'PASSWORD'", "'PLANS'", 
		"'PRECEDING'", "'PREPARE'", "'PREPARED'", "'PRESERVE'", "'PRIOR'", "'PRIVILEGES'", 
		"'PROCEDURAL'", "'PROCEDURE'", "'PROGRAM'", "'QUOTE'", "'RANGE'", "'READ'", 
		"'REASSIGN'", "'RECHECK'", "'RECURSIVE'", "'REF'", "'REFRESH'", "'REINDEX'", 
		"'RELATIVE'", "'RELEASE'", "'RENAME'", "'REPEATABLE'", "'REPLACE'", "'REPLICA'", 
		"'RESET'", "'RESTART'", "'RESTRICT'", "'RETURNS'", "'REVOKE'", "'ROLE'", 
		"'ROLLBACK'", "'ROWS'", "'RULE'", "'SAVEPOINT'", "'SCHEMA'", "'SCROLL'", 
		"'SEARCH'", "'SECOND'", "'SECURITY'", "'SEQUENCE'", "'SEQUENCES'", "'SERIALIZABLE'", 
		"'SERVER'", "'SESSION'", "'SET'", "'SHARE'", "'SHOW'", "'SIMPLE'", "'SNAPSHOT'", 
		"'STABLE'", "'STANDALONE'", "'START'", "'STATEMENT'", "'STATISTICS'", 
		"'STDIN'", "'STDOUT'", "'STORAGE'", "'STRICT'", "'STRIP'", "'SYSID'", 
		"'SYSTEM'", "'TABLES'", "'TABLESPACE'", "'TEMP'", "'TEMPLATE'", "'TEMPORARY'", 
		"'TEXT'", "'TRANSACTION'", "'TRIGGER'", "'TRUNCATE'", "'TRUSTED'", "'TYPE'", 
		"'TYPES'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNENCRYPTED'", "'UNKNOWN'", 
		"'UNLISTEN'", "'UNLOGGED'", "'UNTIL'", "'UPDATE'", "'VACUUM'", "'VALID'", 
		"'VALIDATE'", "'VALIDATOR'", "'VARYING'", "'VERSION'", "'VIEW'", "'VOLATILE'", 
		"'WHITESPACE'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'WRITE'", "'XML'", 
		"'YEAR'", "'YES'", "'ZONE'", "'BETWEEN'", "'BIGINT'", "'BIT'", "'BOOLEAN'", 
		"'CHAR'", "'CHARACTER'", "'COALESCE'", "'DEC'", "'DECIMAL'", "'EXISTS'", 
		"'EXTRACT'", "'FLOAT'", "'GREATEST'", "'INOUT'", "'INT'", "'INTEGER'", 
		"'INTERVAL'", "'LEAST'", "'NATIONAL'", "'NCHAR'", "'NONE'", "'NULLIF'", 
		"'NUMERIC'", "'OVERLAY'", "'POSITION'", "'PRECISION'", "'REAL'", "'ROW'", 
		"'SETOF'", "'SMALLINT'", "'SUBSTRING'", "'TIME'", "'TIMESTAMP'", "'TREAT'", 
		"'TRIM'", "'VALUES'", "'VARCHAR'", "'XMLATTRIBUTES'", "'XMLCOMMENT'", 
		"'XMLAGG'", "'XML_IS_WELL_FORMED'", "'XML_IS_WELL_FORMED_DOCUMENT'", "'XML_IS_WELL_FORMED_CONTENT'", 
		"'XPATH'", "'XPATH_EXISTS'", "'XMLCONCAT'", "'XMLELEMENT'", "'XMLEXISTS'", 
		"'XMLFOREST'", "'XMLPARSE'", "'XMLPI'", "'XMLROOT'", "'XMLSERIALIZE'", 
		"'CALL'", "'CURRENT'", "'ATTACH'", "'DETACH'", "'EXPRESSION'", "'GENERATED'", 
		"'LOGGED'", "'STORED'", "'INCLUDE'", "'ROUTINE'", "'TRANSFORM'", "'IMPORT'", 
		"'POLICY'", "'METHOD'", "'REFERENCING'", "'NEW'", "'OLD'", "'VALUE'", 
		"'SUBSCRIPTION'", "'PUBLICATION'", "'OUT'", "'END'", "'ROUTINES'", "'SCHEMAS'", 
		"'PROCEDURES'", "'INPUT'", "'SUPPORT'", "'PARALLEL'", "'SQL'", "'DEPENDS'", 
		"'OVERRIDING'", "'CONFLICT'", "'SKIP'", "'LOCKED'", "'TIES'", "'ROLLUP'", 
		"'CUBE'", "'GROUPING'", "'SETS'", "'TABLESAMPLE'", "'ORDINALITY'", "'XMLTABLE'", 
		"'COLUMNS'", "'XMLNAMESPACES'", "'ROWTYPE'", "'NORMALIZED'", "'WITHIN'", 
		"'FILTER'", "'GROUPS'", "'OTHERS'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", 
		"'UESCAPE'", "'VIEWS'", "'NORMALIZE'", "'DUMP'", "'ERROR'", "'USE_VARIABLE'", 
		"'USE_COLUMN'", "'CONSTANT'", "'PERFORM'", "'GET'", "'DIAGNOSTICS'", "'STACKED'", 
		"'ELSIF'", "'WHILE'", "'FOREACH'", "'SLICE'", "'EXIT'", "'RETURN'", "'RAISE'", 
		"'SQLSTATE'", "'DEBUG'", "'INFO'", "'NOTICE'", "'WARNING'", "'EXCEPTION'", 
		"'ASSERT'", "'LOOP'", "'OPEN'", "'FORMAT'", null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "'\\'", "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"COMMA", "SEMI", "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", "SLASH", 
		"CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", "COLON_EQUALS", "LESS_EQUALS", 
		"EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", "NOT_EQUALS", "TYPECAST", 
		"PERCENT", "PARAM", "Operator", "JSON", "JSON_ARRAY", "JSON_ARRAYAGG", 
		"JSON_EXISTS", "JSON_OBJECT", "JSON_OBJECTAGG", "JSON_QUERY", "JSON_SCALAR", 
		"JSON_SERIALIZE", "JSON_TABLE", "JSON_VALUE", "MERGE_ACTION", "SYSTEM_USER", 
		"ABSENT", "ASENSITIVE", "ATOMIC", "BREADTH", "COMPRESSION", "CONDITIONAL", 
		"DEPTH", "EMPTY_P", "FINALIZE", "INDENT", "KEEP", "KEYS", "NESTED", "OMIT", 
		"PARAMETER", "PATH", "PLAN", "QUOTES", "SCALAR", "SOURCE", "STRING_P", 
		"TARGET", "UNCONDITIONAL", "PERIOD", "FORMAT_LA", "ALL", "ANALYSE", "ANALYZE", 
		"AND", "ANY", "ARRAY", "AS", "ASC", "ASYMMETRIC", "BOTH", "CASE", "CAST", 
		"CHECK", "COLLATE", "COLUMN", "CONSTRAINT", "CREATE", "CURRENT_CATALOG", 
		"CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
		"DEFAULT", "DEFERRABLE", "DESC", "DISTINCT", "DO", "ELSE", "EXCEPT", "FALSE_P", 
		"FETCH", "FOR", "FOREIGN", "FROM", "GRANT", "GROUP_P", "HAVING", "IN_P", 
		"INITIALLY", "INTERSECT", "INTO", "LATERAL_P", "LEADING", "LIMIT", "LOCALTIME", 
		"LOCALTIMESTAMP", "NOT", "NULL_P", "OFFSET", "ON", "ONLY", "OR", "ORDER", 
		"PLACING", "PRIMARY", "REFERENCES", "RETURNING", "SELECT", "SESSION_USER", 
		"SOME", "SYMMETRIC", "TABLE", "THEN", "TO", "TRAILING", "TRUE_P", "UNION", 
		"UNIQUE", "USER", "USING", "VARIADIC", "WHEN", "WHERE", "WINDOW", "WITH", 
		"AUTHORIZATION", "BINARY", "COLLATION", "CONCURRENTLY", "CROSS", "CURRENT_SCHEMA", 
		"FREEZE", "FULL", "ILIKE", "INNER_P", "IS", "ISNULL", "JOIN", "LEFT", 
		"LIKE", "NATURAL", "NOTNULL", "OUTER_P", "OVER", "OVERLAPS", "RIGHT", 
		"SIMILAR", "VERBOSE", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", 
		"ADMIN", "AFTER", "AGGREGATE", "ALSO", "ALTER", "ALWAYS", "ASSERTION", 
		"ASSIGNMENT", "AT", "ATTRIBUTE", "BACKWARD", "BEFORE", "BEGIN_P", "BY", 
		"CACHE", "CALLED", "CASCADE", "CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", 
		"CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COMMENT", "COMMENTS", "COMMIT", 
		"COMMITTED", "CONFIGURATION", "CONNECTION", "CONSTRAINTS", "CONTENT_P", 
		"CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CSV", "CURSOR", "CYCLE", 
		"DATA_P", "DATABASE", "DAY_P", "DEALLOCATE", "DECLARE", "DEFAULTS", "DEFERRED", 
		"DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DICTIONARY", "DISABLE_P", 
		"DISCARD", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ENABLE_P", 
		"ENCODING", "ENCRYPTED", "ENUM_P", "ESCAPE", "EVENT", "EXCLUDE", "EXCLUDING", 
		"EXCLUSIVE", "EXECUTE", "EXPLAIN", "EXTENSION", "EXTERNAL", "FAMILY", 
		"FIRST_P", "FOLLOWING", "FORCE", "FORWARD", "FUNCTION", "FUNCTIONS", "GLOBAL", 
		"GRANTED", "HANDLER", "HEADER_P", "HOLD", "HOUR_P", "IDENTITY_P", "IF_P", 
		"IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "INCLUDING", "INCREMENT", "INDEX", 
		"INDEXES", "INHERIT", "INHERITS", "INLINE_P", "INSENSITIVE", "INSERT", 
		"INSTEAD", "INVOKER", "ISOLATION", "KEY", "LABEL", "LANGUAGE", "LARGE_P", 
		"LAST_P", "LEAKPROOF", "LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", 
		"LOCK_P", "MAPPING", "MATCH", "MATCHED", "MATERIALIZED", "MAXVALUE", "MERGE", 
		"MINUTE_P", "MINVALUE", "MODE", "MONTH_P", "MOVE", "NAME_P", "NAMES", 
		"NEXT", "NO", "NOTHING", "NOTIFY", "NOWAIT", "NULLS_P", "OBJECT_P", "OF", 
		"OFF", "OIDS", "OPERATOR", "OPTION", "OPTIONS", "OWNED", "OWNER", "PARSER", 
		"PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PLANS", "PRECEDING", "PREPARE", 
		"PREPARED", "PRESERVE", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", 
		"PROGRAM", "QUOTE", "RANGE", "READ", "REASSIGN", "RECHECK", "RECURSIVE", 
		"REF", "REFRESH", "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", 
		"REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", "RETURNS", "REVOKE", 
		"ROLE", "ROLLBACK", "ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCROLL", "SEARCH", 
		"SECOND_P", "SECURITY", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", 
		"SESSION", "SET", "SHARE", "SHOW", "SIMPLE", "SNAPSHOT", "STABLE", "STANDALONE_P", 
		"START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STRICT_P", 
		"STRIP_P", "SYSID", "SYSTEM_P", "TABLES", "TABLESPACE", "TEMP", "TEMPLATE", 
		"TEMPORARY", "TEXT_P", "TRANSACTION", "TRIGGER", "TRUNCATE", "TRUSTED", 
		"TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNKNOWN", 
		"UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "VACUUM", "VALID", "VALIDATE", 
		"VALIDATOR", "VARYING", "VERSION_P", "VIEW", "VOLATILE", "WHITESPACE_P", 
		"WITHOUT", "WORK", "WRAPPER", "WRITE", "XML_P", "YEAR_P", "YES_P", "ZONE", 
		"BETWEEN", "BIGINT", "BIT", "BOOLEAN_P", "CHAR_P", "CHARACTER", "COALESCE", 
		"DEC", "DECIMAL_P", "EXISTS", "EXTRACT", "FLOAT_P", "GREATEST", "INOUT", 
		"INT_P", "INTEGER", "INTERVAL", "LEAST", "NATIONAL", "NCHAR", "NONE", 
		"NULLIF", "NUMERIC", "OVERLAY", "POSITION", "PRECISION", "REAL", "ROW", 
		"SETOF", "SMALLINT", "SUBSTRING", "TIME", "TIMESTAMP", "TREAT", "TRIM", 
		"VALUES", "VARCHAR", "XMLATTRIBUTES", "XMLCOMMENT", "XMLAGG", "XML_IS_WELL_FORMED", 
		"XML_IS_WELL_FORMED_DOCUMENT", "XML_IS_WELL_FORMED_CONTENT", "XPATH", 
		"XPATH_EXISTS", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", 
		"XMLPI", "XMLROOT", "XMLSERIALIZE", "CALL", "CURRENT_P", "ATTACH", "DETACH", 
		"EXPRESSION", "GENERATED", "LOGGED", "STORED", "INCLUDE", "ROUTINE", "TRANSFORM", 
		"IMPORT_P", "POLICY", "METHOD", "REFERENCING", "NEW", "OLD", "VALUE_P", 
		"SUBSCRIPTION", "PUBLICATION", "OUT_P", "END_P", "ROUTINES", "SCHEMAS", 
		"PROCEDURES", "INPUT_P", "SUPPORT", "PARALLEL", "SQL_P", "DEPENDS", "OVERRIDING", 
		"CONFLICT", "SKIP_P", "LOCKED", "TIES", "ROLLUP", "CUBE", "GROUPING", 
		"SETS", "TABLESAMPLE", "ORDINALITY", "XMLTABLE", "COLUMNS", "XMLNAMESPACES", 
		"ROWTYPE", "NORMALIZED", "WITHIN", "FILTER", "GROUPS", "OTHERS", "NFC", 
		"NFD", "NFKC", "NFKD", "UESCAPE", "VIEWS", "NORMALIZE", "DUMP", "ERROR", 
		"USE_VARIABLE", "USE_COLUMN", "CONSTANT", "PERFORM", "GET", "DIAGNOSTICS", 
		"STACKED", "ELSIF", "WHILE", "FOREACH", "SLICE", "EXIT", "RETURN", "RAISE", 
		"SQLSTATE", "DEBUG", "INFO", "NOTICE", "WARNING", "EXCEPTION", "ASSERT", 
		"LOOP", "OPEN", "FORMAT", "Identifier", "QuotedIdentifier", "UnterminatedQuotedIdentifier", 
		"InvalidQuotedIdentifier", "InvalidUnterminatedQuotedIdentifier", "UnicodeQuotedIdentifier", 
		"UnterminatedUnicodeQuotedIdentifier", "InvalidUnicodeQuotedIdentifier", 
		"InvalidUnterminatedUnicodeQuotedIdentifier", "StringConstant", "UnterminatedStringConstant", 
		"UnicodeEscapeStringConstant", "UnterminatedUnicodeEscapeStringConstant", 
		"BeginDollarStringConstant", "BinaryStringConstant", "UnterminatedBinaryStringConstant", 
		"InvalidBinaryStringConstant", "InvalidUnterminatedBinaryStringConstant", 
		"HexadecimalStringConstant", "UnterminatedHexadecimalStringConstant", 
		"InvalidHexadecimalStringConstant", "InvalidUnterminatedHexadecimalStringConstant", 
		"Integral", "BinaryIntegral", "OctalIntegral", "HexadecimalIntegral", 
		"NumericFail", "Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", "Whitespace", 
		"Newline", "LineComment", "BlockComment", "UnterminatedBlockComment", 
		"ErrorCharacter", "EscapeStringConstant", "UnterminatedEscapeStringConstant", 
		"InvalidEscapeStringConstant", "InvalidUnterminatedEscapeStringConstant", 
		"AfterEscapeStringConstantMode_NotContinued", "AfterEscapeStringConstantWithNewlineMode_NotContinued", 
		"DollarText", "EndDollarStringConstant", "MetaCommand", "AfterEscapeStringConstantWithNewlineMode_Continued"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PostgreSQLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PostgreSQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PostgreSQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PostgreSQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtblockContext stmtblock() {
			return GetRuleContext<StmtblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PostgreSQLParser.Eof, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1438;
			stmtblock();
			State = 1439;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtmultiContext stmtmulti() {
			return GetRuleContext<StmtmultiContext>(0);
		}
		public StmtblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmtblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmtblock(this);
		}
	}

	[RuleVersion(0)]
	public StmtblockContext stmtblock() {
		StmtblockContext _localctx = new StmtblockContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmtblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1441;
			stmtmulti();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtmultiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(PostgreSQLParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(PostgreSQLParser.SEMI, i);
		}
		public StmtmultiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtmulti; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmtmulti(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmtmulti(this);
		}
	}

	[RuleVersion(0)]
	public StmtmultiContext stmtmulti() {
		StmtmultiContext _localctx = new StmtmultiContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmtmulti);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 2449958215610302467L) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & 104710898966331393L) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & -9223372011080506623L) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & -8824802370318728173L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & 14075947867505701L) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & 550292946945L) != 0)) {
				{
				State = 1443;
				stmt();
				}
			}

			State = 1452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 1446;
				Match(SEMI);
				State = 1448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 2449958215610302467L) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & 104710898966331393L) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & -9223372011080506623L) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & -8824802370318728173L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & 14075947867505701L) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & 550292946945L) != 0)) {
					{
					State = 1447;
					stmt();
					}
				}

				}
				}
				State = 1454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AltereventtrigstmtContext altereventtrigstmt() {
			return GetRuleContext<AltereventtrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltercollationstmtContext altercollationstmt() {
			return GetRuleContext<AltercollationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdatabasestmtContext alterdatabasestmt() {
			return GetRuleContext<AlterdatabasestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdatabasesetstmtContext alterdatabasesetstmt() {
			return GetRuleContext<AlterdatabasesetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() {
			return GetRuleContext<AlterdefaultprivilegesstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdomainstmtContext alterdomainstmt() {
			return GetRuleContext<AlterdomainstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterenumstmtContext alterenumstmt() {
			return GetRuleContext<AlterenumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterextensionstmtContext alterextensionstmt() {
			return GetRuleContext<AlterextensionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterextensioncontentsstmtContext alterextensioncontentsstmt() {
			return GetRuleContext<AlterextensioncontentsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterfdwstmtContext alterfdwstmt() {
			return GetRuleContext<AlterfdwstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterforeignserverstmtContext alterforeignserverstmt() {
			return GetRuleContext<AlterforeignserverstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterfunctionstmtContext alterfunctionstmt() {
			return GetRuleContext<AlterfunctionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltergroupstmtContext altergroupstmt() {
			return GetRuleContext<AltergroupstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterobjectdependsstmtContext alterobjectdependsstmt() {
			return GetRuleContext<AlterobjectdependsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterobjectschemastmtContext alterobjectschemastmt() {
			return GetRuleContext<AlterobjectschemastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterownerstmtContext alterownerstmt() {
			return GetRuleContext<AlterownerstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteroperatorstmtContext alteroperatorstmt() {
			return GetRuleContext<AlteroperatorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertypestmtContext altertypestmt() {
			return GetRuleContext<AltertypestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterpolicystmtContext alterpolicystmt() {
			return GetRuleContext<AlterpolicystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterseqstmtContext alterseqstmt() {
			return GetRuleContext<AlterseqstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltersystemstmtContext altersystemstmt() {
			return GetRuleContext<AltersystemstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertablestmtContext altertablestmt() {
			return GetRuleContext<AltertablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertblspcstmtContext altertblspcstmt() {
			return GetRuleContext<AltertblspcstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltercompositetypestmtContext altercompositetypestmt() {
			return GetRuleContext<AltercompositetypestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterpublicationstmtContext alterpublicationstmt() {
			return GetRuleContext<AlterpublicationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterrolesetstmtContext alterrolesetstmt() {
			return GetRuleContext<AlterrolesetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterrolestmtContext alterrolestmt() {
			return GetRuleContext<AlterrolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltersubscriptionstmtContext altersubscriptionstmt() {
			return GetRuleContext<AltersubscriptionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterstatsstmtContext alterstatsstmt() {
			return GetRuleContext<AlterstatsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertsconfigurationstmtContext altertsconfigurationstmt() {
			return GetRuleContext<AltertsconfigurationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertsdictionarystmtContext altertsdictionarystmt() {
			return GetRuleContext<AltertsdictionarystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterusermappingstmtContext alterusermappingstmt() {
			return GetRuleContext<AlterusermappingstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnalyzestmtContext analyzestmt() {
			return GetRuleContext<AnalyzestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallstmtContext callstmt() {
			return GetRuleContext<CallstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckpointstmtContext checkpointstmt() {
			return GetRuleContext<CheckpointstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseportalstmtContext closeportalstmt() {
			return GetRuleContext<CloseportalstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClusterstmtContext clusterstmt() {
			return GetRuleContext<ClusterstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentstmtContext commentstmt() {
			return GetRuleContext<CommentstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintssetstmtContext constraintssetstmt() {
			return GetRuleContext<ConstraintssetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopystmtContext copystmt() {
			return GetRuleContext<CopystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateamstmtContext createamstmt() {
			return GetRuleContext<CreateamstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateasstmtContext createasstmt() {
			return GetRuleContext<CreateasstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateassertionstmtContext createassertionstmt() {
			return GetRuleContext<CreateassertionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatecaststmtContext createcaststmt() {
			return GetRuleContext<CreatecaststmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateconversionstmtContext createconversionstmt() {
			return GetRuleContext<CreateconversionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatedomainstmtContext createdomainstmt() {
			return GetRuleContext<CreatedomainstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateextensionstmtContext createextensionstmt() {
			return GetRuleContext<CreateextensionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatefdwstmtContext createfdwstmt() {
			return GetRuleContext<CreatefdwstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateforeignserverstmtContext createforeignserverstmt() {
			return GetRuleContext<CreateforeignserverstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateforeigntablestmtContext createforeigntablestmt() {
			return GetRuleContext<CreateforeigntablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatefunctionstmtContext createfunctionstmt() {
			return GetRuleContext<CreatefunctionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreategroupstmtContext creategroupstmt() {
			return GetRuleContext<CreategroupstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatematviewstmtContext creatematviewstmt() {
			return GetRuleContext<CreatematviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateopclassstmtContext createopclassstmt() {
			return GetRuleContext<CreateopclassstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateopfamilystmtContext createopfamilystmt() {
			return GetRuleContext<CreateopfamilystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatepublicationstmtContext createpublicationstmt() {
			return GetRuleContext<CreatepublicationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteropfamilystmtContext alteropfamilystmt() {
			return GetRuleContext<AlteropfamilystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatepolicystmtContext createpolicystmt() {
			return GetRuleContext<CreatepolicystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateplangstmtContext createplangstmt() {
			return GetRuleContext<CreateplangstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateschemastmtContext createschemastmt() {
			return GetRuleContext<CreateschemastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateseqstmtContext createseqstmt() {
			return GetRuleContext<CreateseqstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatestmtContext createstmt() {
			return GetRuleContext<CreatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatesubscriptionstmtContext createsubscriptionstmt() {
			return GetRuleContext<CreatesubscriptionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatestatsstmtContext createstatsstmt() {
			return GetRuleContext<CreatestatsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetablespacestmtContext createtablespacestmt() {
			return GetRuleContext<CreatetablespacestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetransformstmtContext createtransformstmt() {
			return GetRuleContext<CreatetransformstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetrigstmtContext createtrigstmt() {
			return GetRuleContext<CreatetrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateeventtrigstmtContext createeventtrigstmt() {
			return GetRuleContext<CreateeventtrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreaterolestmtContext createrolestmt() {
			return GetRuleContext<CreaterolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateuserstmtContext createuserstmt() {
			return GetRuleContext<CreateuserstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateusermappingstmtContext createusermappingstmt() {
			return GetRuleContext<CreateusermappingstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatedbstmtContext createdbstmt() {
			return GetRuleContext<CreatedbstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeallocatestmtContext deallocatestmt() {
			return GetRuleContext<DeallocatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarecursorstmtContext declarecursorstmt() {
			return GetRuleContext<DeclarecursorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinestmtContext definestmt() {
			return GetRuleContext<DefinestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardstmtContext discardstmt() {
			return GetRuleContext<DiscardstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DostmtContext dostmt() {
			return GetRuleContext<DostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropcaststmtContext dropcaststmt() {
			return GetRuleContext<DropcaststmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropopclassstmtContext dropopclassstmt() {
			return GetRuleContext<DropopclassstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropopfamilystmtContext dropopfamilystmt() {
			return GetRuleContext<DropopfamilystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropownedstmtContext dropownedstmt() {
			return GetRuleContext<DropownedstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropstmtContext dropstmt() {
			return GetRuleContext<DropstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropsubscriptionstmtContext dropsubscriptionstmt() {
			return GetRuleContext<DropsubscriptionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DroptablespacestmtContext droptablespacestmt() {
			return GetRuleContext<DroptablespacestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DroptransformstmtContext droptransformstmt() {
			return GetRuleContext<DroptransformstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DroprolestmtContext droprolestmt() {
			return GetRuleContext<DroprolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropusermappingstmtContext dropusermappingstmt() {
			return GetRuleContext<DropusermappingstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropdbstmtContext dropdbstmt() {
			return GetRuleContext<DropdbstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutestmtContext executestmt() {
			return GetRuleContext<ExecutestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainstmtContext explainstmt() {
			return GetRuleContext<ExplainstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FetchstmtContext fetchstmt() {
			return GetRuleContext<FetchstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantstmtContext grantstmt() {
			return GetRuleContext<GrantstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantrolestmtContext grantrolestmt() {
			return GetRuleContext<GrantrolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportforeignschemastmtContext importforeignschemastmt() {
			return GetRuleContext<ImportforeignschemastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexstmtContext indexstmt() {
			return GetRuleContext<IndexstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MergestmtContext mergestmt() {
			return GetRuleContext<MergestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListenstmtContext listenstmt() {
			return GetRuleContext<ListenstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefreshmatviewstmtContext refreshmatviewstmt() {
			return GetRuleContext<RefreshmatviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadstmtContext loadstmt() {
			return GetRuleContext<LoadstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockstmtContext lockstmt() {
			return GetRuleContext<LockstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotifystmtContext notifystmt() {
			return GetRuleContext<NotifystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreparestmtContext preparestmt() {
			return GetRuleContext<PreparestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReassignownedstmtContext reassignownedstmt() {
			return GetRuleContext<ReassignownedstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReindexstmtContext reindexstmt() {
			return GetRuleContext<ReindexstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoveaggrstmtContext removeaggrstmt() {
			return GetRuleContext<RemoveaggrstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemovefuncstmtContext removefuncstmt() {
			return GetRuleContext<RemovefuncstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoveoperstmtContext removeoperstmt() {
			return GetRuleContext<RemoveoperstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenamestmtContext renamestmt() {
			return GetRuleContext<RenamestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokestmtContext revokestmt() {
			return GetRuleContext<RevokestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokerolestmtContext revokerolestmt() {
			return GetRuleContext<RevokerolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulestmtContext rulestmt() {
			return GetRuleContext<RulestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeclabelstmtContext seclabelstmt() {
			return GetRuleContext<SeclabelstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionstmtContext transactionstmt() {
			return GetRuleContext<TransactionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruncatestmtContext truncatestmt() {
			return GetRuleContext<TruncatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlistenstmtContext unlistenstmt() {
			return GetRuleContext<UnlistenstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VacuumstmtContext vacuumstmt() {
			return GetRuleContext<VacuumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableresetstmtContext variableresetstmt() {
			return GetRuleContext<VariableresetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesetstmtContext variablesetstmt() {
			return GetRuleContext<VariablesetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableshowstmtContext variableshowstmt() {
			return GetRuleContext<VariableshowstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewstmtContext viewstmt() {
			return GetRuleContext<ViewstmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmt);
		try {
			State = 1579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1455;
				altereventtrigstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1456;
				altercollationstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1457;
				alterdatabasestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1458;
				alterdatabasesetstmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1459;
				alterdefaultprivilegesstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1460;
				alterdomainstmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1461;
				alterenumstmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1462;
				alterextensionstmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1463;
				alterextensioncontentsstmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1464;
				alterfdwstmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1465;
				alterforeignserverstmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1466;
				alterfunctionstmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1467;
				altergroupstmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1468;
				alterobjectdependsstmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1469;
				alterobjectschemastmt();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1470;
				alterownerstmt();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1471;
				alteroperatorstmt();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1472;
				altertypestmt();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1473;
				alterpolicystmt();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1474;
				alterseqstmt();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1475;
				altersystemstmt();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1476;
				altertablestmt();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1477;
				altertblspcstmt();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1478;
				altercompositetypestmt();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1479;
				alterpublicationstmt();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1480;
				alterrolesetstmt();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1481;
				alterrolestmt();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1482;
				altersubscriptionstmt();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1483;
				alterstatsstmt();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1484;
				altertsconfigurationstmt();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1485;
				altertsdictionarystmt();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1486;
				alterusermappingstmt();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1487;
				analyzestmt();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1488;
				callstmt();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1489;
				checkpointstmt();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1490;
				closeportalstmt();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1491;
				clusterstmt();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1492;
				commentstmt();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1493;
				constraintssetstmt();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1494;
				copystmt();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1495;
				createamstmt();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1496;
				createasstmt();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1497;
				createassertionstmt();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1498;
				createcaststmt();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1499;
				createconversionstmt();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1500;
				createdomainstmt();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1501;
				createextensionstmt();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1502;
				createfdwstmt();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1503;
				createforeignserverstmt();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1504;
				createforeigntablestmt();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1505;
				createfunctionstmt();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1506;
				creategroupstmt();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1507;
				creatematviewstmt();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1508;
				createopclassstmt();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1509;
				createopfamilystmt();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1510;
				createpublicationstmt();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1511;
				alteropfamilystmt();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1512;
				createpolicystmt();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1513;
				createplangstmt();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1514;
				createschemastmt();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1515;
				createseqstmt();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1516;
				createstmt();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1517;
				createsubscriptionstmt();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1518;
				createstatsstmt();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1519;
				createtablespacestmt();
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1520;
				createtransformstmt();
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1521;
				createtrigstmt();
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1522;
				createeventtrigstmt();
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1523;
				createrolestmt();
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1524;
				createuserstmt();
				}
				break;
			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1525;
				createusermappingstmt();
				}
				break;
			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1526;
				createdbstmt();
				}
				break;
			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1527;
				deallocatestmt();
				}
				break;
			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1528;
				declarecursorstmt();
				}
				break;
			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1529;
				definestmt();
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1530;
				deletestmt();
				}
				break;
			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 1531;
				discardstmt();
				}
				break;
			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 1532;
				dostmt();
				}
				break;
			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 1533;
				dropcaststmt();
				}
				break;
			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 1534;
				dropopclassstmt();
				}
				break;
			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 1535;
				dropopfamilystmt();
				}
				break;
			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 1536;
				dropownedstmt();
				}
				break;
			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 1537;
				dropstmt();
				}
				break;
			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 1538;
				dropsubscriptionstmt();
				}
				break;
			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 1539;
				droptablespacestmt();
				}
				break;
			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 1540;
				droptransformstmt();
				}
				break;
			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 1541;
				droprolestmt();
				}
				break;
			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 1542;
				dropusermappingstmt();
				}
				break;
			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 1543;
				dropdbstmt();
				}
				break;
			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 1544;
				executestmt();
				}
				break;
			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 1545;
				explainstmt();
				}
				break;
			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 1546;
				fetchstmt();
				}
				break;
			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 1547;
				grantstmt();
				}
				break;
			case 94:
				EnterOuterAlt(_localctx, 94);
				{
				State = 1548;
				grantrolestmt();
				}
				break;
			case 95:
				EnterOuterAlt(_localctx, 95);
				{
				State = 1549;
				importforeignschemastmt();
				}
				break;
			case 96:
				EnterOuterAlt(_localctx, 96);
				{
				State = 1550;
				indexstmt();
				}
				break;
			case 97:
				EnterOuterAlt(_localctx, 97);
				{
				State = 1551;
				insertstmt();
				}
				break;
			case 98:
				EnterOuterAlt(_localctx, 98);
				{
				State = 1552;
				mergestmt();
				}
				break;
			case 99:
				EnterOuterAlt(_localctx, 99);
				{
				State = 1553;
				listenstmt();
				}
				break;
			case 100:
				EnterOuterAlt(_localctx, 100);
				{
				State = 1554;
				refreshmatviewstmt();
				}
				break;
			case 101:
				EnterOuterAlt(_localctx, 101);
				{
				State = 1555;
				loadstmt();
				}
				break;
			case 102:
				EnterOuterAlt(_localctx, 102);
				{
				State = 1556;
				lockstmt();
				}
				break;
			case 103:
				EnterOuterAlt(_localctx, 103);
				{
				State = 1557;
				notifystmt();
				}
				break;
			case 104:
				EnterOuterAlt(_localctx, 104);
				{
				State = 1558;
				preparestmt();
				}
				break;
			case 105:
				EnterOuterAlt(_localctx, 105);
				{
				State = 1559;
				reassignownedstmt();
				}
				break;
			case 106:
				EnterOuterAlt(_localctx, 106);
				{
				State = 1560;
				reindexstmt();
				}
				break;
			case 107:
				EnterOuterAlt(_localctx, 107);
				{
				State = 1561;
				removeaggrstmt();
				}
				break;
			case 108:
				EnterOuterAlt(_localctx, 108);
				{
				State = 1562;
				removefuncstmt();
				}
				break;
			case 109:
				EnterOuterAlt(_localctx, 109);
				{
				State = 1563;
				removeoperstmt();
				}
				break;
			case 110:
				EnterOuterAlt(_localctx, 110);
				{
				State = 1564;
				renamestmt();
				}
				break;
			case 111:
				EnterOuterAlt(_localctx, 111);
				{
				State = 1565;
				revokestmt();
				}
				break;
			case 112:
				EnterOuterAlt(_localctx, 112);
				{
				State = 1566;
				revokerolestmt();
				}
				break;
			case 113:
				EnterOuterAlt(_localctx, 113);
				{
				State = 1567;
				rulestmt();
				}
				break;
			case 114:
				EnterOuterAlt(_localctx, 114);
				{
				State = 1568;
				seclabelstmt();
				}
				break;
			case 115:
				EnterOuterAlt(_localctx, 115);
				{
				State = 1569;
				selectstmt();
				}
				break;
			case 116:
				EnterOuterAlt(_localctx, 116);
				{
				State = 1570;
				transactionstmt();
				}
				break;
			case 117:
				EnterOuterAlt(_localctx, 117);
				{
				State = 1571;
				truncatestmt();
				}
				break;
			case 118:
				EnterOuterAlt(_localctx, 118);
				{
				State = 1572;
				unlistenstmt();
				}
				break;
			case 119:
				EnterOuterAlt(_localctx, 119);
				{
				State = 1573;
				updatestmt();
				}
				break;
			case 120:
				EnterOuterAlt(_localctx, 120);
				{
				State = 1574;
				vacuumstmt();
				}
				break;
			case 121:
				EnterOuterAlt(_localctx, 121);
				{
				State = 1575;
				variableresetstmt();
				}
				break;
			case 122:
				EnterOuterAlt(_localctx, 122);
				{
				State = 1576;
				variablesetstmt();
				}
				break;
			case 123:
				EnterOuterAlt(_localctx, 123);
				{
				State = 1577;
				variableshowstmt();
				}
				break;
			case 124:
				EnterOuterAlt(_localctx, 124);
				{
				State = 1578;
				viewstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_applicationContext func_application() {
			return GetRuleContext<Func_applicationContext>(0);
		}
		public CallstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCallstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCallstmt(this);
		}
	}

	[RuleVersion(0)]
	public CallstmtContext callstmt() {
		CallstmtContext _localctx = new CallstmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_callstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581;
			Match(CALL);
			State = 1582;
			func_application();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreaterolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid() {
			return GetRuleContext<RoleidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptrolelistContext optrolelist() {
			return GetRuleContext<OptrolelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_Context with_() {
			return GetRuleContext<With_Context>(0);
		}
		public CreaterolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createrolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreaterolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreaterolestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreaterolestmtContext createrolestmt() {
		CreaterolestmtContext _localctx = new CreaterolestmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_createrolestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1584;
			Match(CREATE);
			State = 1585;
			Match(ROLE);
			State = 1586;
			roleid();
			State = 1588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1587;
				with_();
				}
			}

			State = 1590;
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		public With_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWith_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWith_(this);
		}
	}

	[RuleVersion(0)]
	public With_Context with_() {
		With_Context _localctx = new With_Context(Context, State);
		EnterRule(_localctx, 12, RULE_with_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1592;
			Match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptrolelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateoptroleelemContext[] createoptroleelem() {
			return GetRuleContexts<CreateoptroleelemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateoptroleelemContext createoptroleelem(int i) {
			return GetRuleContext<CreateoptroleelemContext>(i);
		}
		public OptrolelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optrolelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptrolelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptrolelist(this);
		}
	}

	[RuleVersion(0)]
	public OptrolelistContext optrolelist() {
		OptrolelistContext _localctx = new OptrolelistContext(Context, State);
		EnterRule(_localctx, 14, RULE_optrolelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IN_P || _la==USER || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & 2305843010287435777L) != 0) || _la==INHERIT || _la==PASSWORD || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & 9077569072660481L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 268435491L) != 0)) {
				{
				{
				State = 1594;
				createoptroleelem();
				}
				}
				State = 1599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlteroptrolelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptroleelemContext[] alteroptroleelem() {
			return GetRuleContexts<AlteroptroleelemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptroleelemContext alteroptroleelem(int i) {
			return GetRuleContext<AlteroptroleelemContext>(i);
		}
		public AlteroptrolelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteroptrolelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteroptrolelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteroptrolelist(this);
		}
	}

	[RuleVersion(0)]
	public AlteroptrolelistContext alteroptrolelist() {
		AlteroptrolelistContext _localctx = new AlteroptrolelistContext(Context, State);
		EnterRule(_localctx, 16, RULE_alteroptrolelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USER || _la==CONNECTION || _la==ENCRYPTED || _la==INHERIT || _la==PASSWORD || _la==UNENCRYPTED || _la==VALID || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 268435491L) != 0)) {
				{
				{
				State = 1600;
				alteroptroleelem();
				}
				}
				State = 1605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlteroptroleelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(PostgreSQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(PostgreSQLParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNENCRYPTED() { return GetToken(PostgreSQLParser.UNENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID() { return GetToken(PostgreSQLParser.VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(PostgreSQLParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AlteroptroleelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteroptroleelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteroptroleelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteroptroleelem(this);
		}
	}

	[RuleVersion(0)]
	public AlteroptroleelemContext alteroptroleelem() {
		AlteroptroleelemContext _localctx = new AlteroptroleelemContext(Context, State);
		EnterRule(_localctx, 18, RULE_alteroptroleelem);
		int _la;
		try {
			State = 1624;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PASSWORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1606;
				Match(PASSWORD);
				State = 1609;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					State = 1607;
					sconst();
					}
					break;
				case NULL_P:
					{
					State = 1608;
					Match(NULL_P);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ENCRYPTED:
			case UNENCRYPTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1611;
				_la = TokenStream.LA(1);
				if ( !(_la==ENCRYPTED || _la==UNENCRYPTED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1612;
				Match(PASSWORD);
				State = 1613;
				sconst();
				}
				break;
			case INHERIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1614;
				Match(INHERIT);
				}
				break;
			case CONNECTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1615;
				Match(CONNECTION);
				State = 1616;
				Match(LIMIT);
				State = 1617;
				signediconst();
				}
				break;
			case VALID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1618;
				Match(VALID);
				State = 1619;
				Match(UNTIL);
				State = 1620;
				sconst();
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1621;
				Match(USER);
				State = 1622;
				role_list();
				}
				break;
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1623;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateoptroleelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptroleelemContext alteroptroleelem() {
			return GetRuleContext<AlteroptroleelemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSID() { return GetToken(PostgreSQLParser.SYSID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		public CreateoptroleelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createoptroleelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateoptroleelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateoptroleelem(this);
		}
	}

	[RuleVersion(0)]
	public CreateoptroleelemContext createoptroleelem() {
		CreateoptroleelemContext _localctx = new CreateoptroleelemContext(Context, State);
		EnterRule(_localctx, 20, RULE_createoptroleelem);
		int _la;
		try {
			State = 1636;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USER:
			case CONNECTION:
			case ENCRYPTED:
			case INHERIT:
			case PASSWORD:
			case UNENCRYPTED:
			case VALID:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1626;
				alteroptroleelem();
				}
				break;
			case SYSID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1627;
				Match(SYSID);
				State = 1628;
				iconst();
				}
				break;
			case ADMIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1629;
				Match(ADMIN);
				State = 1630;
				role_list();
				}
				break;
			case ROLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1631;
				Match(ROLE);
				State = 1632;
				role_list();
				}
				break;
			case IN_P:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1633;
				Match(IN_P);
				State = 1634;
				_la = TokenStream.LA(1);
				if ( !(_la==GROUP_P || _la==ROLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1635;
				role_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateuserstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid() {
			return GetRuleContext<RoleidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptrolelistContext optrolelist() {
			return GetRuleContext<OptrolelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_Context with_() {
			return GetRuleContext<With_Context>(0);
		}
		public CreateuserstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createuserstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateuserstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateuserstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateuserstmtContext createuserstmt() {
		CreateuserstmtContext _localctx = new CreateuserstmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_createuserstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1638;
			Match(CREATE);
			State = 1639;
			Match(USER);
			State = 1640;
			roleid();
			State = 1642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1641;
				with_();
				}
			}

			State = 1644;
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterrolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptrolelistContext alteroptrolelist() {
			return GetRuleContext<AlteroptrolelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_Context with_() {
			return GetRuleContext<With_Context>(0);
		}
		public AlterrolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterrolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterrolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterrolestmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterrolestmtContext alterrolestmt() {
		AlterrolestmtContext _localctx = new AlterrolestmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_alterrolestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646;
			Match(ALTER);
			State = 1647;
			_la = TokenStream.LA(1);
			if ( !(_la==USER || _la==ROLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1648;
			rolespec();
			State = 1650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1649;
				with_();
				}
			}

			State = 1652;
			alteroptrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_database_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public In_database_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_database_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIn_database_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIn_database_(this);
		}
	}

	[RuleVersion(0)]
	public In_database_Context in_database_() {
		In_database_Context _localctx = new In_database_Context(Context, State);
		EnterRule(_localctx, 26, RULE_in_database_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1654;
			Match(IN_P);
			State = 1655;
			Match(DATABASE);
			State = 1656;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterrolesetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetresetclauseContext setresetclause() {
			return GetRuleContext<SetresetclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public In_database_Context in_database_() {
			return GetRuleContext<In_database_Context>(0);
		}
		public AlterrolesetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterrolesetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterrolesetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterrolesetstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterrolesetstmtContext alterrolesetstmt() {
		AlterrolesetstmtContext _localctx = new AlterrolesetstmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_alterrolesetstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1658;
			Match(ALTER);
			State = 1659;
			_la = TokenStream.LA(1);
			if ( !(_la==USER || _la==ROLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL) {
				{
				State = 1660;
				Match(ALL);
				}
			}

			State = 1663;
			rolespec();
			State = 1665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN_P) {
				{
				State = 1664;
				in_database_();
				}
			}

			State = 1667;
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DroprolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DroprolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_droprolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDroprolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDroprolestmt(this);
		}
	}

	[RuleVersion(0)]
	public DroprolestmtContext droprolestmt() {
		DroprolestmtContext _localctx = new DroprolestmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_droprolestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1669;
			Match(DROP);
			State = 1670;
			_la = TokenStream.LA(1);
			if ( !(_la==GROUP_P || _la==USER || _la==ROLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1673;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 1671;
				Match(IF_P);
				State = 1672;
				Match(EXISTS);
				}
				break;
			}
			State = 1675;
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreategroupstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid() {
			return GetRuleContext<RoleidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptrolelistContext optrolelist() {
			return GetRuleContext<OptrolelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_Context with_() {
			return GetRuleContext<With_Context>(0);
		}
		public CreategroupstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creategroupstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreategroupstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreategroupstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreategroupstmtContext creategroupstmt() {
		CreategroupstmtContext _localctx = new CreategroupstmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_creategroupstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1677;
			Match(CREATE);
			State = 1678;
			Match(GROUP_P);
			State = 1679;
			roleid();
			State = 1681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1680;
				with_();
				}
			}

			State = 1683;
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltergroupstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_dropContext add_drop() {
			return GetRuleContext<Add_dropContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		public AltergroupstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altergroupstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltergroupstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltergroupstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltergroupstmtContext altergroupstmt() {
		AltergroupstmtContext _localctx = new AltergroupstmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_altergroupstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1685;
			Match(ALTER);
			State = 1686;
			Match(GROUP_P);
			State = 1687;
			rolespec();
			State = 1688;
			add_drop();
			State = 1689;
			Match(USER);
			State = 1690;
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_dropContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		public Add_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_drop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAdd_drop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAdd_drop(this);
		}
	}

	[RuleVersion(0)]
	public Add_dropContext add_drop() {
		Add_dropContext _localctx = new Add_dropContext(Context, State);
		EnterRule(_localctx, 36, RULE_add_drop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1692;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD_P || _la==DROP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateschemastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptschemaeltlistContext optschemaeltlist() {
			return GetRuleContext<OptschemaeltlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptschemanameContext optschemaname() {
			return GetRuleContext<OptschemanameContext>(0);
		}
		public CreateschemastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createschemastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateschemastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateschemastmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateschemastmtContext createschemastmt() {
		CreateschemastmtContext _localctx = new CreateschemastmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_createschemastmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1694;
			Match(CREATE);
			State = 1695;
			Match(SCHEMA);
			State = 1699;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 1696;
				Match(IF_P);
				State = 1697;
				Match(NOT);
				State = 1698;
				Match(EXISTS);
				}
				break;
			}
			State = 1707;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 1702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 1701;
					optschemaname();
					}
				}

				State = 1704;
				Match(AUTHORIZATION);
				State = 1705;
				rolespec();
				}
				break;
			case 2:
				{
				State = 1706;
				colid();
				}
				break;
			}
			State = 1709;
			optschemaeltlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptschemanameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public OptschemanameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optschemaname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptschemaname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptschemaname(this);
		}
	}

	[RuleVersion(0)]
	public OptschemanameContext optschemaname() {
		OptschemanameContext _localctx = new OptschemanameContext(Context, State);
		EnterRule(_localctx, 40, RULE_optschemaname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1711;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptschemaeltlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Schema_stmtContext[] schema_stmt() {
			return GetRuleContexts<Schema_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_stmtContext schema_stmt(int i) {
			return GetRuleContext<Schema_stmtContext>(i);
		}
		public OptschemaeltlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optschemaeltlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptschemaeltlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptschemaeltlist(this);
		}
	}

	[RuleVersion(0)]
	public OptschemaeltlistContext optschemaeltlist() {
		OptschemaeltlistContext _localctx = new OptschemaeltlistContext(Context, State);
		EnterRule(_localctx, 42, RULE_optschemaeltlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CREATE || _la==GRANT) {
				{
				{
				State = 1713;
				schema_stmt();
				}
				}
				State = 1718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreatestmtContext createstmt() {
			return GetRuleContext<CreatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexstmtContext indexstmt() {
			return GetRuleContext<IndexstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateseqstmtContext createseqstmt() {
			return GetRuleContext<CreateseqstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetrigstmtContext createtrigstmt() {
			return GetRuleContext<CreatetrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantstmtContext grantstmt() {
			return GetRuleContext<GrantstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewstmtContext viewstmt() {
			return GetRuleContext<ViewstmtContext>(0);
		}
		public Schema_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSchema_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSchema_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Schema_stmtContext schema_stmt() {
		Schema_stmtContext _localctx = new Schema_stmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_schema_stmt);
		try {
			State = 1725;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1719;
				createstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1720;
				indexstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1721;
				createseqstmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1722;
				createtrigstmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1723;
				grantstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1724;
				viewstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablesetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_restContext set_rest() {
			return GetRuleContext<Set_restContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		public VariablesetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablesetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVariablesetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVariablesetstmt(this);
		}
	}

	[RuleVersion(0)]
	public VariablesetstmtContext variablesetstmt() {
		VariablesetstmtContext _localctx = new VariablesetstmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_variablesetstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1727;
			Match(SET);
			State = 1729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 1728;
				_la = TokenStream.LA(1);
				if ( !(_la==LOCAL || _la==SESSION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1731;
			set_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_restContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_listContext transaction_mode_list() {
			return GetRuleContext<Transaction_mode_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTERISTICS() { return GetToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_rest_moreContext set_rest_more() {
			return GetRuleContext<Set_rest_moreContext>(0);
		}
		public Set_restContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_rest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_rest(this);
		}
	}

	[RuleVersion(0)]
	public Set_restContext set_rest() {
		Set_restContext _localctx = new Set_restContext(Context, State);
		EnterRule(_localctx, 48, RULE_set_rest);
		try {
			State = 1741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1733;
				Match(TRANSACTION);
				State = 1734;
				transaction_mode_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1735;
				Match(SESSION);
				State = 1736;
				Match(CHARACTERISTICS);
				State = 1737;
				Match(AS);
				State = 1738;
				Match(TRANSACTION);
				State = 1739;
				transaction_mode_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1740;
				set_rest_more();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_listContext var_list() {
			return GetRuleContext<Var_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Generic_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_set(this);
		}
	}

	[RuleVersion(0)]
	public Generic_setContext generic_set() {
		Generic_setContext _localctx = new Generic_setContext(Context, State);
		EnterRule(_localctx, 50, RULE_generic_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1743;
			var_name();
			State = 1744;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL || _la==TO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1747;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case FALSE_P:
			case ON:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				{
				State = 1745;
				var_list();
				}
				break;
			case DEFAULT:
				{
				State = 1746;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_rest_moreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_setContext generic_set() {
			return GetRuleContext<Generic_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Zone_valueContext zone_value() {
			return GetRuleContext<Zone_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(PostgreSQLParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(PostgreSQLParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Encoding_Context encoding_() {
			return GetRuleContext<Encoding_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_P() { return GetToken(PostgreSQLParser.XML_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Document_or_contentContext document_or_content() {
			return GetRuleContext<Document_or_contentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(PostgreSQLParser.SNAPSHOT, 0); }
		public Set_rest_moreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_rest_more; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_rest_more(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_rest_more(this);
		}
	}

	[RuleVersion(0)]
	public Set_rest_moreContext set_rest_more() {
		Set_rest_moreContext _localctx = new Set_rest_moreContext(Context, State);
		EnterRule(_localctx, 52, RULE_set_rest_more);
		int _la;
		try {
			State = 1776;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1749;
				generic_set();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1750;
				var_name();
				State = 1751;
				Match(FROM);
				State = 1752;
				Match(CURRENT_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1754;
				Match(TIME);
				State = 1755;
				Match(ZONE);
				State = 1756;
				zone_value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1757;
				Match(CATALOG);
				State = 1758;
				sconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1759;
				Match(SCHEMA);
				State = 1760;
				sconst();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1761;
				Match(NAMES);
				State = 1763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT || ((((_la - 563)) & ~0x3f) == 0 && ((1L << (_la - 563)) & 134217749L) != 0)) {
					{
					State = 1762;
					encoding_();
					}
				}

				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1765;
				Match(ROLE);
				State = 1766;
				nonreservedword_or_sconst();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1767;
				Match(SESSION);
				State = 1768;
				Match(AUTHORIZATION);
				State = 1769;
				nonreservedword_or_sconst();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1770;
				Match(XML_P);
				State = 1771;
				Match(OPTION);
				State = 1772;
				document_or_content();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1773;
				Match(TRANSACTION);
				State = 1774;
				Match(SNAPSHOT);
				State = 1775;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext[] colid() {
			return GetRuleContexts<ColidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid(int i) {
			return GetRuleContext<ColidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PostgreSQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PostgreSQLParser.DOT, i);
		}
		public Var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVar_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVar_name(this);
		}
	}

	[RuleVersion(0)]
	public Var_nameContext var_name() {
		Var_nameContext _localctx = new Var_nameContext(Context, State);
		EnterRule(_localctx, 54, RULE_var_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1778;
			colid();
			State = 1783;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1779;
				Match(DOT);
				State = 1780;
				colid();
				}
				}
				State = 1785;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_valueContext[] var_value() {
			return GetRuleContexts<Var_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_valueContext var_value(int i) {
			return GetRuleContext<Var_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVar_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVar_list(this);
		}
	}

	[RuleVersion(0)]
	public Var_listContext var_list() {
		Var_listContext _localctx = new Var_listContext(Context, State);
		EnterRule(_localctx, 56, RULE_var_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1786;
			var_value();
			State = 1791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1787;
				Match(COMMA);
				State = 1788;
				var_value();
				}
				}
				State = 1793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_or_string_Context boolean_or_string_() {
			return GetRuleContext<Boolean_or_string_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		public Var_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVar_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVar_value(this);
		}
	}

	[RuleVersion(0)]
	public Var_valueContext var_value() {
		Var_valueContext _localctx = new Var_valueContext(Context, State);
		EnterRule(_localctx, 58, RULE_var_value);
		try {
			State = 1796;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case FALSE_P:
			case ON:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1794;
				boolean_or_string_();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1795;
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iso_levelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(PostgreSQLParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(PostgreSQLParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(PostgreSQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public Iso_levelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iso_level; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIso_level(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIso_level(this);
		}
	}

	[RuleVersion(0)]
	public Iso_levelContext iso_level() {
		Iso_levelContext _localctx = new Iso_levelContext(Context, State);
		EnterRule(_localctx, 60, RULE_iso_level);
		int _la;
		try {
			State = 1803;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1798;
				Match(READ);
				State = 1799;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMITTED || _la==UNCOMMITTED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case REPEATABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1800;
				Match(REPEATABLE);
				State = 1801;
				Match(READ);
				}
				break;
			case SERIALIZABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1802;
				Match(SERIALIZABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_or_string_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Boolean_or_string_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_or_string_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBoolean_or_string_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBoolean_or_string_(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_or_string_Context boolean_or_string_() {
		Boolean_or_string_Context _localctx = new Boolean_or_string_Context(Context, State);
		EnterRule(_localctx, 62, RULE_boolean_or_string_);
		try {
			State = 1809;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1805;
				Match(TRUE_P);
				}
				break;
			case FALSE_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1806;
				Match(FALSE_P);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1807;
				Match(ON);
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1808;
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zone_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstintervalContext constinterval() {
			return GetRuleContext<ConstintervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interval_Context interval_() {
			return GetRuleContext<Interval_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		public Zone_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zone_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterZone_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitZone_value(this);
		}
	}

	[RuleVersion(0)]
	public Zone_valueContext zone_value() {
		Zone_valueContext _localctx = new Zone_valueContext(Context, State);
		EnterRule(_localctx, 64, RULE_zone_value);
		int _la;
		try {
			State = 1827;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1811;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1812;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1813;
				constinterval();
				State = 1814;
				sconst();
				State = 1816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DAY_P || _la==HOUR_P || _la==MINUTE_P || _la==MONTH_P || _la==SECOND_P || _la==YEAR_P) {
					{
					State = 1815;
					interval_();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1818;
				constinterval();
				State = 1819;
				Match(OPEN_PAREN);
				State = 1820;
				iconst();
				State = 1821;
				Match(CLOSE_PAREN);
				State = 1822;
				sconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1824;
				numericonly();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1825;
				Match(DEFAULT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1826;
				Match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Encoding_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Encoding_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encoding_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEncoding_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEncoding_(this);
		}
	}

	[RuleVersion(0)]
	public Encoding_Context encoding_() {
		Encoding_Context _localctx = new Encoding_Context(Context, State);
		EnterRule(_localctx, 66, RULE_encoding_);
		try {
			State = 1831;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1829;
				sconst();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1830;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonreservedword_or_sconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Nonreservedword_or_sconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonreservedword_or_sconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNonreservedword_or_sconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNonreservedword_or_sconst(this);
		}
	}

	[RuleVersion(0)]
	public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
		Nonreservedword_or_sconstContext _localctx = new Nonreservedword_or_sconstContext(Context, State);
		EnterRule(_localctx, 68, RULE_nonreservedword_or_sconst);
		try {
			State = 1835;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1833;
				nonreservedword();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1834;
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableresetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reset_restContext reset_rest() {
			return GetRuleContext<Reset_restContext>(0);
		}
		public VariableresetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableresetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVariableresetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVariableresetstmt(this);
		}
	}

	[RuleVersion(0)]
	public VariableresetstmtContext variableresetstmt() {
		VariableresetstmtContext _localctx = new VariableresetstmtContext(Context, State);
		EnterRule(_localctx, 70, RULE_variableresetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1837;
			Match(RESET);
			State = 1838;
			reset_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reset_restContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_resetContext generic_reset() {
			return GetRuleContext<Generic_resetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public Reset_restContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reset_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReset_rest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReset_rest(this);
		}
	}

	[RuleVersion(0)]
	public Reset_restContext reset_rest() {
		Reset_restContext _localctx = new Reset_restContext(Context, State);
		EnterRule(_localctx, 72, RULE_reset_rest);
		try {
			State = 1848;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1840;
				generic_reset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1841;
				Match(TIME);
				State = 1842;
				Match(ZONE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1843;
				Match(TRANSACTION);
				State = 1844;
				Match(ISOLATION);
				State = 1845;
				Match(LEVEL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1846;
				Match(SESSION);
				State = 1847;
				Match(AUTHORIZATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_resetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Generic_resetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_reset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_reset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_reset(this);
		}
	}

	[RuleVersion(0)]
	public Generic_resetContext generic_reset() {
		Generic_resetContext _localctx = new Generic_resetContext(Context, State);
		EnterRule(_localctx, 74, RULE_generic_reset);
		try {
			State = 1852;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1850;
				var_name();
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1851;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetresetclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_restContext set_rest() {
			return GetRuleContext<Set_restContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableresetstmtContext variableresetstmt() {
			return GetRuleContext<VariableresetstmtContext>(0);
		}
		public SetresetclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setresetclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSetresetclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSetresetclause(this);
		}
	}

	[RuleVersion(0)]
	public SetresetclauseContext setresetclause() {
		SetresetclauseContext _localctx = new SetresetclauseContext(Context, State);
		EnterRule(_localctx, 76, RULE_setresetclause);
		try {
			State = 1857;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1854;
				Match(SET);
				State = 1855;
				set_rest();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1856;
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionsetresetclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_rest_moreContext set_rest_more() {
			return GetRuleContext<Set_rest_moreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableresetstmtContext variableresetstmt() {
			return GetRuleContext<VariableresetstmtContext>(0);
		}
		public FunctionsetresetclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionsetresetclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionsetresetclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionsetresetclause(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsetresetclauseContext functionsetresetclause() {
		FunctionsetresetclauseContext _localctx = new FunctionsetresetclauseContext(Context, State);
		EnterRule(_localctx, 78, RULE_functionsetresetclause);
		try {
			State = 1862;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1859;
				Match(SET);
				State = 1860;
				set_rest_more();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1861;
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableshowstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(PostgreSQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public VariableshowstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableshowstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVariableshowstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVariableshowstmt(this);
		}
	}

	[RuleVersion(0)]
	public VariableshowstmtContext variableshowstmt() {
		VariableshowstmtContext _localctx = new VariableshowstmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_variableshowstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1864;
			Match(SHOW);
			State = 1874;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 1865;
				var_name();
				}
				break;
			case 2:
				{
				State = 1866;
				Match(TIME);
				State = 1867;
				Match(ZONE);
				}
				break;
			case 3:
				{
				State = 1868;
				Match(TRANSACTION);
				State = 1869;
				Match(ISOLATION);
				State = 1870;
				Match(LEVEL);
				}
				break;
			case 4:
				{
				State = 1871;
				Match(SESSION);
				State = 1872;
				Match(AUTHORIZATION);
				}
				break;
			case 5:
				{
				State = 1873;
				Match(ALL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintssetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINTS() { return GetToken(PostgreSQLParser.CONSTRAINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constraints_set_listContext constraints_set_list() {
			return GetRuleContext<Constraints_set_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constraints_set_modeContext constraints_set_mode() {
			return GetRuleContext<Constraints_set_modeContext>(0);
		}
		public ConstraintssetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintssetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintssetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintssetstmt(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintssetstmtContext constraintssetstmt() {
		ConstraintssetstmtContext _localctx = new ConstraintssetstmtContext(Context, State);
		EnterRule(_localctx, 82, RULE_constraintssetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1876;
			Match(SET);
			State = 1877;
			Match(CONSTRAINTS);
			State = 1878;
			constraints_set_list();
			State = 1879;
			constraints_set_mode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraints_set_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		public Constraints_set_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraints_set_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraints_set_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraints_set_list(this);
		}
	}

	[RuleVersion(0)]
	public Constraints_set_listContext constraints_set_list() {
		Constraints_set_listContext _localctx = new Constraints_set_listContext(Context, State);
		EnterRule(_localctx, 84, RULE_constraints_set_list);
		try {
			State = 1883;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1881;
				Match(ALL);
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1882;
				qualified_name_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraints_set_modeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		public Constraints_set_modeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraints_set_mode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraints_set_mode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraints_set_mode(this);
		}
	}

	[RuleVersion(0)]
	public Constraints_set_modeContext constraints_set_mode() {
		Constraints_set_modeContext _localctx = new Constraints_set_modeContext(Context, State);
		EnterRule(_localctx, 86, RULE_constraints_set_mode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1885;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckpointstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKPOINT() { return GetToken(PostgreSQLParser.CHECKPOINT, 0); }
		public CheckpointstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkpointstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCheckpointstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCheckpointstmt(this);
		}
	}

	[RuleVersion(0)]
	public CheckpointstmtContext checkpointstmt() {
		CheckpointstmtContext _localctx = new CheckpointstmtContext(Context, State);
		EnterRule(_localctx, 88, RULE_checkpointstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1887;
			Match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(PostgreSQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLANS() { return GetToken(PostgreSQLParser.PLANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		public DiscardstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDiscardstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDiscardstmt(this);
		}
	}

	[RuleVersion(0)]
	public DiscardstmtContext discardstmt() {
		DiscardstmtContext _localctx = new DiscardstmtContext(Context, State);
		EnterRule(_localctx, 90, RULE_discardstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1889;
			Match(DISCARD);
			State = 1890;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==PLANS || _la==SEQUENCES || _la==TEMP || _la==TEMPORARY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_cmdsContext alter_table_cmds() {
			return GetRuleContext<Alter_table_cmdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Partition_cmdContext partition_cmd() {
			return GetRuleContext<Partition_cmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TABLESPACE() { return GetTokens(PostgreSQLParser.TABLESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE(int i) {
			return GetToken(PostgreSQLParser.TABLESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nowait_Context nowait_() {
			return GetRuleContext<Nowait_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_partition_cmdContext index_partition_cmd() {
			return GetRuleContext<Index_partition_cmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		public AltertablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertablestmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertablestmtContext altertablestmt() {
		AltertablestmtContext _localctx = new AltertablestmtContext(Context, State);
		EnterRule(_localctx, 92, RULE_altertablestmt);
		int _la;
		try {
			State = 2004;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1892;
				Match(ALTER);
				State = 1893;
				Match(TABLE);
				State = 1896;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 1894;
					Match(IF_P);
					State = 1895;
					Match(EXISTS);
					}
					break;
				}
				State = 1898;
				relation_expr();
				State = 1901;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NOT:
				case ADD_P:
				case ALTER:
				case CLUSTER:
				case DISABLE_P:
				case DROP:
				case ENABLE_P:
				case FORCE:
				case INHERIT:
				case NO:
				case OF:
				case OPTIONS:
				case OWNER:
				case REPLICA:
				case RESET:
				case SET:
				case VALIDATE:
					{
					State = 1899;
					alter_table_cmds();
					}
					break;
				case ATTACH:
				case DETACH:
					{
					State = 1900;
					partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1903;
				Match(ALTER);
				State = 1904;
				Match(TABLE);
				State = 1905;
				Match(ALL);
				State = 1906;
				Match(IN_P);
				State = 1907;
				Match(TABLESPACE);
				State = 1908;
				name();
				State = 1912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OWNED) {
					{
					State = 1909;
					Match(OWNED);
					State = 1910;
					Match(BY);
					State = 1911;
					role_list();
					}
				}

				State = 1914;
				Match(SET);
				State = 1915;
				Match(TABLESPACE);
				State = 1916;
				name();
				State = 1918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOWAIT) {
					{
					State = 1917;
					nowait_();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1920;
				Match(ALTER);
				State = 1921;
				Match(INDEX);
				State = 1924;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 1922;
					Match(IF_P);
					State = 1923;
					Match(EXISTS);
					}
					break;
				}
				State = 1926;
				qualified_name();
				State = 1929;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NOT:
				case ADD_P:
				case ALTER:
				case CLUSTER:
				case DISABLE_P:
				case DROP:
				case ENABLE_P:
				case FORCE:
				case INHERIT:
				case NO:
				case OF:
				case OPTIONS:
				case OWNER:
				case REPLICA:
				case RESET:
				case SET:
				case VALIDATE:
					{
					State = 1927;
					alter_table_cmds();
					}
					break;
				case ATTACH:
					{
					State = 1928;
					index_partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1931;
				Match(ALTER);
				State = 1932;
				Match(INDEX);
				State = 1933;
				Match(ALL);
				State = 1934;
				Match(IN_P);
				State = 1935;
				Match(TABLESPACE);
				State = 1936;
				name();
				State = 1940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OWNED) {
					{
					State = 1937;
					Match(OWNED);
					State = 1938;
					Match(BY);
					State = 1939;
					role_list();
					}
				}

				State = 1942;
				Match(SET);
				State = 1943;
				Match(TABLESPACE);
				State = 1944;
				name();
				State = 1946;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOWAIT) {
					{
					State = 1945;
					nowait_();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1948;
				Match(ALTER);
				State = 1949;
				Match(SEQUENCE);
				State = 1952;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 1950;
					Match(IF_P);
					State = 1951;
					Match(EXISTS);
					}
					break;
				}
				State = 1954;
				qualified_name();
				State = 1955;
				alter_table_cmds();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1957;
				Match(ALTER);
				State = 1958;
				Match(VIEW);
				State = 1961;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 1959;
					Match(IF_P);
					State = 1960;
					Match(EXISTS);
					}
					break;
				}
				State = 1963;
				qualified_name();
				State = 1964;
				alter_table_cmds();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1966;
				Match(ALTER);
				State = 1967;
				Match(MATERIALIZED);
				State = 1968;
				Match(VIEW);
				State = 1971;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 1969;
					Match(IF_P);
					State = 1970;
					Match(EXISTS);
					}
					break;
				}
				State = 1973;
				qualified_name();
				State = 1974;
				alter_table_cmds();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1976;
				Match(ALTER);
				State = 1977;
				Match(MATERIALIZED);
				State = 1978;
				Match(VIEW);
				State = 1979;
				Match(ALL);
				State = 1980;
				Match(IN_P);
				State = 1981;
				Match(TABLESPACE);
				State = 1982;
				name();
				State = 1986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OWNED) {
					{
					State = 1983;
					Match(OWNED);
					State = 1984;
					Match(BY);
					State = 1985;
					role_list();
					}
				}

				State = 1988;
				Match(SET);
				State = 1989;
				Match(TABLESPACE);
				State = 1990;
				name();
				State = 1992;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOWAIT) {
					{
					State = 1991;
					nowait_();
					}
				}

				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1994;
				Match(ALTER);
				State = 1995;
				Match(FOREIGN);
				State = 1996;
				Match(TABLE);
				State = 1999;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 1997;
					Match(IF_P);
					State = 1998;
					Match(EXISTS);
					}
					break;
				}
				State = 2001;
				relation_expr();
				State = 2002;
				alter_table_cmds();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_cmdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_cmdContext[] alter_table_cmd() {
			return GetRuleContexts<Alter_table_cmdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_cmdContext alter_table_cmd(int i) {
			return GetRuleContext<Alter_table_cmdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_table_cmdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_cmds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_cmds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_cmds(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_cmdsContext alter_table_cmds() {
		Alter_table_cmdsContext _localctx = new Alter_table_cmdsContext(Context, State);
		EnterRule(_localctx, 94, RULE_alter_table_cmds);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2006;
			alter_table_cmd();
			State = 2011;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2007;
				Match(COMMA);
				State = 2008;
				alter_table_cmd();
				}
				}
				State = 2013;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(PostgreSQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionboundspecContext partitionboundspec() {
			return GetRuleContext<PartitionboundspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(PostgreSQLParser.DETACH, 0); }
		public Partition_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPartition_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPartition_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Partition_cmdContext partition_cmd() {
		Partition_cmdContext _localctx = new Partition_cmdContext(Context, State);
		EnterRule(_localctx, 96, RULE_partition_cmd);
		try {
			State = 2022;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTACH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2014;
				Match(ATTACH);
				State = 2015;
				Match(PARTITION);
				State = 2016;
				qualified_name();
				State = 2017;
				partitionboundspec();
				}
				break;
			case DETACH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2019;
				Match(DETACH);
				State = 2020;
				Match(PARTITION);
				State = 2021;
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_partition_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(PostgreSQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Index_partition_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_partition_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_partition_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_partition_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Index_partition_cmdContext index_partition_cmd() {
		Index_partition_cmdContext _localctx = new Index_partition_cmdContext(Context, State);
		EnterRule(_localctx, 98, RULE_index_partition_cmd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2024;
			Match(ATTACH);
			State = 2025;
			Match(PARTITION);
			State = 2026;
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefContext columnDef() {
			return GetRuleContext<ColumnDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext[] colid() {
			return GetRuleContexts<ColidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid(int i) {
			return GetRuleContext<ColidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_column_defaultContext alter_column_default() {
			return GetRuleContext<Alter_column_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_Context column_() {
			return GetRuleContext<Column_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(PostgreSQLParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generated_whenContext generated_when() {
			return GetRuleContext<Generated_whenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return GetRuleContext<OptparenthesizedseqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_identity_column_option_listContext alter_identity_column_option_list() {
			return GetRuleContext<Alter_identity_column_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_data_Context set_data_() {
			return GetRuleContext<Set_data_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Collate_clause_Context collate_clause_() {
			return GetRuleContext<Collate_clause_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_usingContext alter_using() {
			return GetRuleContext<Alter_usingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(PostgreSQLParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OIDS() { return GetToken(PostgreSQLParser.OIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(PostgreSQLParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGGED() { return GetToken(PostgreSQLParser.LOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(PostgreSQLParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Replica_identityContext replica_identity() {
			return GetRuleContext<Replica_identityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		public Alter_table_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_cmdContext alter_table_cmd() {
		Alter_table_cmdContext _localctx = new Alter_table_cmdContext(Context, State);
		EnterRule(_localctx, 100, RULE_alter_table_cmd);
		int _la;
		try {
			State = 2326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2028;
				Match(ADD_P);
				State = 2029;
				columnDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2030;
				Match(ADD_P);
				State = 2031;
				Match(IF_P);
				State = 2032;
				Match(NOT);
				State = 2033;
				Match(EXISTS);
				State = 2034;
				columnDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2035;
				Match(ADD_P);
				State = 2036;
				Match(COLUMN);
				State = 2037;
				columnDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2038;
				Match(ADD_P);
				State = 2039;
				Match(COLUMN);
				State = 2040;
				Match(IF_P);
				State = 2041;
				Match(NOT);
				State = 2042;
				Match(EXISTS);
				State = 2043;
				columnDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2044;
				Match(ALTER);
				State = 2046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2045;
					column_();
					}
				}

				State = 2048;
				colid();
				State = 2049;
				alter_column_default();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2051;
				Match(ALTER);
				State = 2053;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2052;
					column_();
					}
				}

				State = 2055;
				colid();
				State = 2056;
				Match(DROP);
				State = 2057;
				Match(NOT);
				State = 2058;
				Match(NULL_P);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2060;
				Match(ALTER);
				State = 2062;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2061;
					column_();
					}
				}

				State = 2064;
				colid();
				State = 2065;
				Match(SET);
				State = 2066;
				Match(NOT);
				State = 2067;
				Match(NULL_P);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2069;
				Match(ALTER);
				State = 2071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2070;
					column_();
					}
				}

				State = 2073;
				colid();
				State = 2074;
				Match(DROP);
				State = 2075;
				Match(EXPRESSION);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2077;
				Match(ALTER);
				State = 2079;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2078;
					column_();
					}
				}

				State = 2081;
				colid();
				State = 2082;
				Match(DROP);
				State = 2083;
				Match(EXPRESSION);
				State = 2084;
				Match(IF_P);
				State = 2085;
				Match(EXISTS);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2087;
				Match(ALTER);
				State = 2089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2088;
					column_();
					}
				}

				State = 2091;
				colid();
				State = 2092;
				Match(SET);
				State = 2093;
				Match(STATISTICS);
				State = 2094;
				signediconst();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2096;
				Match(ALTER);
				State = 2098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2097;
					column_();
					}
				}

				State = 2100;
				iconst();
				State = 2101;
				Match(SET);
				State = 2102;
				Match(STATISTICS);
				State = 2103;
				signediconst();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2105;
				Match(ALTER);
				State = 2107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2106;
					column_();
					}
				}

				State = 2109;
				colid();
				State = 2110;
				Match(SET);
				State = 2111;
				reloptions();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2113;
				Match(ALTER);
				State = 2115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2114;
					column_();
					}
				}

				State = 2117;
				colid();
				State = 2118;
				Match(RESET);
				State = 2119;
				reloptions();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2121;
				Match(ALTER);
				State = 2123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2122;
					column_();
					}
				}

				State = 2125;
				colid();
				State = 2126;
				Match(SET);
				State = 2127;
				Match(STORAGE);
				State = 2128;
				colid();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2130;
				Match(ALTER);
				State = 2132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2131;
					column_();
					}
				}

				State = 2134;
				colid();
				State = 2135;
				Match(ADD_P);
				State = 2136;
				Match(GENERATED);
				State = 2137;
				generated_when();
				State = 2138;
				Match(AS);
				State = 2139;
				Match(IDENTITY_P);
				State = 2141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 2140;
					optparenthesizedseqoptlist();
					}
				}

				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2143;
				Match(ALTER);
				State = 2145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2144;
					column_();
					}
				}

				State = 2147;
				colid();
				State = 2148;
				alter_identity_column_option_list();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2150;
				Match(ALTER);
				State = 2152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2151;
					column_();
					}
				}

				State = 2154;
				colid();
				State = 2155;
				Match(DROP);
				State = 2156;
				Match(IDENTITY_P);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2158;
				Match(ALTER);
				State = 2160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2159;
					column_();
					}
				}

				State = 2162;
				colid();
				State = 2163;
				Match(DROP);
				State = 2164;
				Match(IDENTITY_P);
				State = 2165;
				Match(IF_P);
				State = 2166;
				Match(EXISTS);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2168;
				Match(DROP);
				State = 2170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2169;
					column_();
					}
				}

				State = 2172;
				Match(IF_P);
				State = 2173;
				Match(EXISTS);
				State = 2174;
				colid();
				State = 2176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 2175;
					drop_behavior_();
					}
				}

				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2178;
				Match(DROP);
				State = 2180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2179;
					column_();
					}
				}

				State = 2182;
				colid();
				State = 2184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 2183;
					drop_behavior_();
					}
				}

				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2186;
				Match(ALTER);
				State = 2188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2187;
					column_();
					}
				}

				State = 2190;
				colid();
				State = 2192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SET) {
					{
					State = 2191;
					set_data_();
					}
				}

				State = 2194;
				Match(TYPE_P);
				State = 2195;
				typename();
				State = 2197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 2196;
					collate_clause_();
					}
				}

				State = 2200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2199;
					alter_using();
					}
				}

				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2202;
				Match(ALTER);
				State = 2204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2203;
					column_();
					}
				}

				State = 2206;
				colid();
				State = 2207;
				alter_generic_options();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2209;
				Match(ADD_P);
				State = 2210;
				tableconstraint();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2211;
				Match(ALTER);
				State = 2212;
				Match(CONSTRAINT);
				State = 2213;
				name();
				State = 2214;
				constraintattributespec();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2216;
				Match(VALIDATE);
				State = 2217;
				Match(CONSTRAINT);
				State = 2218;
				name();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2219;
				Match(DROP);
				State = 2220;
				Match(CONSTRAINT);
				State = 2221;
				Match(IF_P);
				State = 2222;
				Match(EXISTS);
				State = 2223;
				name();
				State = 2225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 2224;
					drop_behavior_();
					}
				}

				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2227;
				Match(DROP);
				State = 2228;
				Match(CONSTRAINT);
				State = 2229;
				name();
				State = 2231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 2230;
					drop_behavior_();
					}
				}

				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2233;
				Match(SET);
				State = 2234;
				Match(WITHOUT);
				State = 2235;
				Match(OIDS);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2236;
				Match(CLUSTER);
				State = 2237;
				Match(ON);
				State = 2238;
				name();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2239;
				Match(SET);
				State = 2240;
				Match(WITHOUT);
				State = 2241;
				Match(CLUSTER);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2242;
				Match(SET);
				State = 2243;
				Match(LOGGED);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2244;
				Match(SET);
				State = 2245;
				Match(UNLOGGED);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2246;
				Match(ENABLE_P);
				State = 2247;
				Match(TRIGGER);
				State = 2248;
				name();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2249;
				Match(ENABLE_P);
				State = 2250;
				Match(ALWAYS);
				State = 2251;
				Match(TRIGGER);
				State = 2252;
				name();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2253;
				Match(ENABLE_P);
				State = 2254;
				Match(REPLICA);
				State = 2255;
				Match(TRIGGER);
				State = 2256;
				name();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 2257;
				Match(ENABLE_P);
				State = 2258;
				Match(TRIGGER);
				State = 2259;
				Match(ALL);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 2260;
				Match(ENABLE_P);
				State = 2261;
				Match(TRIGGER);
				State = 2262;
				Match(USER);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 2263;
				Match(DISABLE_P);
				State = 2264;
				Match(TRIGGER);
				State = 2265;
				name();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 2266;
				Match(DISABLE_P);
				State = 2267;
				Match(TRIGGER);
				State = 2268;
				Match(ALL);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 2269;
				Match(DISABLE_P);
				State = 2270;
				Match(TRIGGER);
				State = 2271;
				Match(USER);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 2272;
				Match(ENABLE_P);
				State = 2273;
				Match(RULE);
				State = 2274;
				name();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 2275;
				Match(ENABLE_P);
				State = 2276;
				Match(ALWAYS);
				State = 2277;
				Match(RULE);
				State = 2278;
				name();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 2279;
				Match(ENABLE_P);
				State = 2280;
				Match(REPLICA);
				State = 2281;
				Match(RULE);
				State = 2282;
				name();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 2283;
				Match(DISABLE_P);
				State = 2284;
				Match(RULE);
				State = 2285;
				name();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 2286;
				Match(INHERIT);
				State = 2287;
				qualified_name();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 2288;
				Match(NO);
				State = 2289;
				Match(INHERIT);
				State = 2290;
				qualified_name();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 2291;
				Match(OF);
				State = 2292;
				any_name();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 2293;
				Match(NOT);
				State = 2294;
				Match(OF);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 2295;
				Match(OWNER);
				State = 2296;
				Match(TO);
				State = 2297;
				rolespec();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 2298;
				Match(SET);
				State = 2299;
				Match(TABLESPACE);
				State = 2300;
				name();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 2301;
				Match(SET);
				State = 2302;
				reloptions();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 2303;
				Match(RESET);
				State = 2304;
				reloptions();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 2305;
				Match(REPLICA);
				State = 2306;
				Match(IDENTITY_P);
				State = 2307;
				replica_identity();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 2308;
				Match(ENABLE_P);
				State = 2309;
				Match(ROW);
				State = 2310;
				Match(LEVEL);
				State = 2311;
				Match(SECURITY);
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 2312;
				Match(DISABLE_P);
				State = 2313;
				Match(ROW);
				State = 2314;
				Match(LEVEL);
				State = 2315;
				Match(SECURITY);
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 2316;
				Match(FORCE);
				State = 2317;
				Match(ROW);
				State = 2318;
				Match(LEVEL);
				State = 2319;
				Match(SECURITY);
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 2320;
				Match(NO);
				State = 2321;
				Match(FORCE);
				State = 2322;
				Match(ROW);
				State = 2323;
				Match(LEVEL);
				State = 2324;
				Match(SECURITY);
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 2325;
				alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_column_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		public Alter_column_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_column_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_column_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_column_default(this);
		}
	}

	[RuleVersion(0)]
	public Alter_column_defaultContext alter_column_default() {
		Alter_column_defaultContext _localctx = new Alter_column_defaultContext(Context, State);
		EnterRule(_localctx, 102, RULE_alter_column_default);
		try {
			State = 2333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2328;
				Match(SET);
				State = 2329;
				Match(DEFAULT);
				State = 2330;
				a_expr();
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2331;
				Match(DROP);
				State = 2332;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_behavior_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_behavior_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_behavior_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDrop_behavior_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDrop_behavior_(this);
		}
	}

	[RuleVersion(0)]
	public Drop_behavior_Context drop_behavior_() {
		Drop_behavior_Context _localctx = new Drop_behavior_Context(Context, State);
		EnterRule(_localctx, 104, RULE_drop_behavior_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2335;
			_la = TokenStream.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collate_clause_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Collate_clause_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collate_clause_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCollate_clause_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCollate_clause_(this);
		}
	}

	[RuleVersion(0)]
	public Collate_clause_Context collate_clause_() {
		Collate_clause_Context _localctx = new Collate_clause_Context(Context, State);
		EnterRule(_localctx, 106, RULE_collate_clause_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2337;
			Match(COLLATE);
			State = 2338;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Alter_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_using(this);
		}
	}

	[RuleVersion(0)]
	public Alter_usingContext alter_using() {
		Alter_usingContext _localctx = new Alter_usingContext(Context, State);
		EnterRule(_localctx, 108, RULE_alter_using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2340;
			Match(USING);
			State = 2341;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replica_identityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Replica_identityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replica_identity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReplica_identity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReplica_identity(this);
		}
	}

	[RuleVersion(0)]
	public Replica_identityContext replica_identity() {
		Replica_identityContext _localctx = new Replica_identityContext(Context, State);
		EnterRule(_localctx, 110, RULE_replica_identity);
		try {
			State = 2349;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOTHING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2343;
				Match(NOTHING);
				}
				break;
			case FULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2344;
				Match(FULL);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2345;
				Match(DEFAULT);
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2346;
				Match(USING);
				State = 2347;
				Match(INDEX);
				State = 2348;
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReloptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reloption_listContext reloption_list() {
			return GetRuleContext<Reloption_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReloptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReloptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReloptions(this);
		}
	}

	[RuleVersion(0)]
	public ReloptionsContext reloptions() {
		ReloptionsContext _localctx = new ReloptionsContext(Context, State);
		EnterRule(_localctx, 112, RULE_reloptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2351;
			Match(OPEN_PAREN);
			State = 2352;
			reloption_list();
			State = 2353;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reloptions_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		public Reloptions_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloptions_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReloptions_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReloptions_(this);
		}
	}

	[RuleVersion(0)]
	public Reloptions_Context reloptions_() {
		Reloptions_Context _localctx = new Reloptions_Context(Context, State);
		EnterRule(_localctx, 114, RULE_reloptions_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2355;
			Match(WITH);
			State = 2356;
			reloptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reloption_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reloption_elemContext[] reloption_elem() {
			return GetRuleContexts<Reloption_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reloption_elemContext reloption_elem(int i) {
			return GetRuleContext<Reloption_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Reloption_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloption_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReloption_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReloption_list(this);
		}
	}

	[RuleVersion(0)]
	public Reloption_listContext reloption_list() {
		Reloption_listContext _localctx = new Reloption_listContext(Context, State);
		EnterRule(_localctx, 116, RULE_reloption_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2358;
			reloption_elem();
			State = 2363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2359;
				Match(COMMA);
				State = 2360;
				reloption_elem();
				}
				}
				State = 2365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reloption_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext[] colLabel() {
			return GetRuleContexts<ColLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext colLabel(int i) {
			return GetRuleContext<ColLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_argContext def_arg() {
			return GetRuleContext<Def_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PostgreSQLParser.DOT, 0); }
		public Reloption_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloption_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReloption_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReloption_elem(this);
		}
	}

	[RuleVersion(0)]
	public Reloption_elemContext reloption_elem() {
		Reloption_elemContext _localctx = new Reloption_elemContext(Context, State);
		EnterRule(_localctx, 118, RULE_reloption_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2366;
			colLabel();
			State = 2375;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				{
				State = 2367;
				Match(EQUAL);
				State = 2368;
				def_arg();
				}
				break;
			case DOT:
				{
				State = 2369;
				Match(DOT);
				State = 2370;
				colLabel();
				State = 2373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL) {
					{
					State = 2371;
					Match(EQUAL);
					State = 2372;
					def_arg();
					}
				}

				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_identity_column_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_identity_column_optionContext[] alter_identity_column_option() {
			return GetRuleContexts<Alter_identity_column_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_identity_column_optionContext alter_identity_column_option(int i) {
			return GetRuleContext<Alter_identity_column_optionContext>(i);
		}
		public Alter_identity_column_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_identity_column_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_identity_column_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_identity_column_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Alter_identity_column_option_listContext alter_identity_column_option_list() {
		Alter_identity_column_option_listContext _localctx = new Alter_identity_column_option_listContext(Context, State);
		EnterRule(_localctx, 120, RULE_alter_identity_column_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2377;
				alter_identity_column_option();
				}
				}
				State = 2380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==RESTART || _la==SET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_identity_column_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_Context with_() {
			return GetRuleContext<With_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptelemContext seqoptelem() {
			return GetRuleContext<SeqoptelemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generated_whenContext generated_when() {
			return GetRuleContext<Generated_whenContext>(0);
		}
		public Alter_identity_column_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_identity_column_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_identity_column_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_identity_column_option(this);
		}
	}

	[RuleVersion(0)]
	public Alter_identity_column_optionContext alter_identity_column_option() {
		Alter_identity_column_optionContext _localctx = new Alter_identity_column_optionContext(Context, State);
		EnterRule(_localctx, 122, RULE_alter_identity_column_option);
		int _la;
		try {
			State = 2395;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESTART:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2382;
				Match(RESTART);
				State = 2387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS || _la==WITH || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & 47L) != 0)) {
					{
					State = 2384;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH) {
						{
						State = 2383;
						with_();
						}
					}

					State = 2386;
					numericonly();
					}
				}

				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2389;
				Match(SET);
				State = 2393;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AS:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NO:
				case OWNED:
				case RESTART:
				case SEQUENCE:
				case START:
					{
					State = 2390;
					seqoptelem();
					}
					break;
				case GENERATED:
					{
					State = 2391;
					Match(GENERATED);
					State = 2392;
					generated_when();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionboundspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(PostgreSQLParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hash_partboundContext hash_partbound() {
			return GetRuleContext<Hash_partboundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(PostgreSQLParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext[] expr_list() {
			return GetRuleContexts<Expr_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list(int i) {
			return GetRuleContext<Expr_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public PartitionboundspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionboundspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionboundspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionboundspec(this);
		}
	}

	[RuleVersion(0)]
	public PartitionboundspecContext partitionboundspec() {
		PartitionboundspecContext _localctx = new PartitionboundspecContext(Context, State);
		EnterRule(_localctx, 124, RULE_partitionboundspec);
		try {
			State = 2423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2397;
				Match(FOR);
				State = 2398;
				Match(VALUES);
				State = 2399;
				Match(WITH);
				State = 2400;
				Match(OPEN_PAREN);
				State = 2401;
				hash_partbound();
				State = 2402;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2404;
				Match(FOR);
				State = 2405;
				Match(VALUES);
				State = 2406;
				Match(IN_P);
				State = 2407;
				Match(OPEN_PAREN);
				State = 2408;
				expr_list();
				State = 2409;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2411;
				Match(FOR);
				State = 2412;
				Match(VALUES);
				State = 2413;
				Match(FROM);
				State = 2414;
				Match(OPEN_PAREN);
				State = 2415;
				expr_list();
				State = 2416;
				Match(CLOSE_PAREN);
				State = 2417;
				Match(TO);
				State = 2418;
				Match(OPEN_PAREN);
				State = 2419;
				expr_list();
				State = 2420;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2422;
				Match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_partbound_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		public Hash_partbound_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_partbound_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHash_partbound_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHash_partbound_elem(this);
		}
	}

	[RuleVersion(0)]
	public Hash_partbound_elemContext hash_partbound_elem() {
		Hash_partbound_elemContext _localctx = new Hash_partbound_elemContext(Context, State);
		EnterRule(_localctx, 126, RULE_hash_partbound_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2425;
			nonreservedword();
			State = 2426;
			iconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_partboundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Hash_partbound_elemContext[] hash_partbound_elem() {
			return GetRuleContexts<Hash_partbound_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hash_partbound_elemContext hash_partbound_elem(int i) {
			return GetRuleContext<Hash_partbound_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Hash_partboundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_partbound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHash_partbound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHash_partbound(this);
		}
	}

	[RuleVersion(0)]
	public Hash_partboundContext hash_partbound() {
		Hash_partboundContext _localctx = new Hash_partboundContext(Context, State);
		EnterRule(_localctx, 128, RULE_hash_partbound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2428;
			hash_partbound_elem();
			State = 2433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2429;
				Match(COMMA);
				State = 2430;
				hash_partbound_elem();
				}
				}
				State = 2435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltercompositetypestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_type_cmdsContext alter_type_cmds() {
			return GetRuleContext<Alter_type_cmdsContext>(0);
		}
		public AltercompositetypestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altercompositetypestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltercompositetypestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltercompositetypestmt(this);
		}
	}

	[RuleVersion(0)]
	public AltercompositetypestmtContext altercompositetypestmt() {
		AltercompositetypestmtContext _localctx = new AltercompositetypestmtContext(Context, State);
		EnterRule(_localctx, 130, RULE_altercompositetypestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2436;
			Match(ALTER);
			State = 2437;
			Match(TYPE_P);
			State = 2438;
			any_name();
			State = 2439;
			alter_type_cmds();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_type_cmdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_type_cmdContext[] alter_type_cmd() {
			return GetRuleContexts<Alter_type_cmdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_type_cmdContext alter_type_cmd(int i) {
			return GetRuleContext<Alter_type_cmdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_type_cmdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_type_cmds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_type_cmds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_type_cmds(this);
		}
	}

	[RuleVersion(0)]
	public Alter_type_cmdsContext alter_type_cmds() {
		Alter_type_cmdsContext _localctx = new Alter_type_cmdsContext(Context, State);
		EnterRule(_localctx, 132, RULE_alter_type_cmds);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2441;
			alter_type_cmd();
			State = 2446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2442;
				Match(COMMA);
				State = 2443;
				alter_type_cmd();
				}
				}
				State = 2448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_type_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(PostgreSQLParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementContext tablefuncelement() {
			return GetRuleContext<TablefuncelementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_data_Context set_data_() {
			return GetRuleContext<Set_data_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Collate_clause_Context collate_clause_() {
			return GetRuleContext<Collate_clause_Context>(0);
		}
		public Alter_type_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_type_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_type_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_type_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Alter_type_cmdContext alter_type_cmd() {
		Alter_type_cmdContext _localctx = new Alter_type_cmdContext(Context, State);
		EnterRule(_localctx, 134, RULE_alter_type_cmd);
		int _la;
		try {
			State = 2479;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2449;
				Match(ADD_P);
				State = 2450;
				Match(ATTRIBUTE);
				State = 2451;
				tablefuncelement();
				State = 2453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 2452;
					drop_behavior_();
					}
				}

				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2455;
				Match(DROP);
				State = 2456;
				Match(ATTRIBUTE);
				State = 2459;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
				case 1:
					{
					State = 2457;
					Match(IF_P);
					State = 2458;
					Match(EXISTS);
					}
					break;
				}
				State = 2461;
				colid();
				State = 2463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 2462;
					drop_behavior_();
					}
				}

				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2465;
				Match(ALTER);
				State = 2466;
				Match(ATTRIBUTE);
				State = 2467;
				colid();
				State = 2469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SET) {
					{
					State = 2468;
					set_data_();
					}
				}

				State = 2471;
				Match(TYPE_P);
				State = 2472;
				typename();
				State = 2474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 2473;
					collate_clause_();
					}
				}

				State = 2477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 2476;
					drop_behavior_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseportalstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public CloseportalstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeportalstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCloseportalstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCloseportalstmt(this);
		}
	}

	[RuleVersion(0)]
	public CloseportalstmtContext closeportalstmt() {
		CloseportalstmtContext _localctx = new CloseportalstmtContext(Context, State);
		EnterRule(_localctx, 136, RULE_closeportalstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2481;
			Match(CLOSE);
			State = 2484;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				{
				State = 2482;
				cursor_name();
				}
				break;
			case ALL:
				{
				State = 2483;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(PostgreSQLParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_fromContext copy_from() {
			return GetRuleContext<Copy_fromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_file_nameContext copy_file_name() {
			return GetRuleContext<Copy_file_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_optionsContext copy_options() {
			return GetRuleContext<Copy_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_Context binary_() {
			return GetRuleContext<Binary_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_list_Context column_list_() {
			return GetRuleContext<Column_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Program_Context program_() {
			return GetRuleContext<Program_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_delimiterContext copy_delimiter() {
			return GetRuleContext<Copy_delimiterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_Context with_() {
			return GetRuleContext<With_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreparablestmtContext preparablestmt() {
			return GetRuleContext<PreparablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public CopystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopystmt(this);
		}
	}

	[RuleVersion(0)]
	public CopystmtContext copystmt() {
		CopystmtContext _localctx = new CopystmtContext(Context, State);
		EnterRule(_localctx, 138, RULE_copystmt);
		int _la;
		try {
			State = 2523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2486;
				Match(COPY);
				State = 2488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BINARY) {
					{
					State = 2487;
					binary_();
					}
				}

				State = 2490;
				qualified_name();
				State = 2492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 2491;
					column_list_();
					}
				}

				State = 2494;
				copy_from();
				State = 2496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PROGRAM) {
					{
					State = 2495;
					program_();
					}
				}

				State = 2498;
				copy_file_name();
				State = 2500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING || _la==DELIMITERS) {
					{
					State = 2499;
					copy_delimiter();
					}
				}

				State = 2503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 2502;
					with_();
					}
				}

				State = 2505;
				copy_options();
				State = 2507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 2506;
					where_clause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2509;
				Match(COPY);
				State = 2510;
				Match(OPEN_PAREN);
				State = 2511;
				preparablestmt();
				State = 2512;
				Match(CLOSE_PAREN);
				State = 2513;
				Match(TO);
				State = 2515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PROGRAM) {
					{
					State = 2514;
					program_();
					}
				}

				State = 2517;
				copy_file_name();
				State = 2519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 2518;
					with_();
					}
				}

				State = 2521;
				copy_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_fromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public Copy_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_from(this);
		}
	}

	[RuleVersion(0)]
	public Copy_fromContext copy_from() {
		Copy_fromContext _localctx = new Copy_fromContext(Context, State);
		EnterRule(_localctx, 140, RULE_copy_from);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2525;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Program_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(PostgreSQLParser.PROGRAM, 0); }
		public Program_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProgram_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProgram_(this);
		}
	}

	[RuleVersion(0)]
	public Program_Context program_() {
		Program_Context _localctx = new Program_Context(Context, State);
		EnterRule(_localctx, 142, RULE_program_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2527;
			Match(PROGRAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_file_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDIN() { return GetToken(PostgreSQLParser.STDIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDOUT() { return GetToken(PostgreSQLParser.STDOUT, 0); }
		public Copy_file_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_file_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_file_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_file_name(this);
		}
	}

	[RuleVersion(0)]
	public Copy_file_nameContext copy_file_name() {
		Copy_file_nameContext _localctx = new Copy_file_nameContext(Context, State);
		EnterRule(_localctx, 144, RULE_copy_file_name);
		try {
			State = 2532;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2529;
				sconst();
				}
				break;
			case STDIN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2530;
				Match(STDIN);
				}
				break;
			case STDOUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2531;
				Match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_opt_listContext copy_opt_list() {
			return GetRuleContext<Copy_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_listContext copy_generic_opt_list() {
			return GetRuleContext<Copy_generic_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_options(this);
		}
	}

	[RuleVersion(0)]
	public Copy_optionsContext copy_options() {
		Copy_optionsContext _localctx = new Copy_optionsContext(Context, State);
		EnterRule(_localctx, 146, RULE_copy_options);
		try {
			State = 2539;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
			case SEMI:
			case NULL_P:
			case WHERE:
			case BINARY:
			case FREEZE:
			case CSV:
			case DELIMITER:
			case ENCODING:
			case ESCAPE:
			case FORCE:
			case HEADER_P:
			case QUOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2534;
				copy_opt_list();
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2535;
				Match(OPEN_PAREN);
				State = 2536;
				copy_generic_opt_list();
				State = 2537;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_opt_itemContext[] copy_opt_item() {
			return GetRuleContexts<Copy_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_opt_itemContext copy_opt_item(int i) {
			return GetRuleContext<Copy_opt_itemContext>(i);
		}
		public Copy_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Copy_opt_listContext copy_opt_list() {
		Copy_opt_listContext _localctx = new Copy_opt_listContext(Context, State);
		EnterRule(_localctx, 148, RULE_copy_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 17716740097L) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & 35459325497345L) != 0) || _la==QUOTE) {
				{
				{
				State = 2541;
				copy_opt_item();
				}
				}
				State = 2546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostgreSQLParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREEZE() { return GetToken(PostgreSQLParser.FREEZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITER() { return GetToken(PostgreSQLParser.DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_Context as_() {
			return GetRuleContext<As_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSV() { return GetToken(PostgreSQLParser.CSV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_P() { return GetToken(PostgreSQLParser.HEADER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(PostgreSQLParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(PostgreSQLParser.ENCODING, 0); }
		public Copy_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Copy_opt_itemContext copy_opt_item() {
		Copy_opt_itemContext _localctx = new Copy_opt_itemContext(Context, State);
		EnterRule(_localctx, 150, RULE_copy_opt_item);
		int _la;
		try {
			State = 2586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2547;
				Match(BINARY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2548;
				Match(FREEZE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2549;
				Match(DELIMITER);
				State = 2551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 2550;
					as_();
					}
				}

				State = 2553;
				sconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2554;
				Match(NULL_P);
				State = 2556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 2555;
					as_();
					}
				}

				State = 2558;
				sconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2559;
				Match(CSV);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2560;
				Match(HEADER_P);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2561;
				Match(QUOTE);
				State = 2563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 2562;
					as_();
					}
				}

				State = 2565;
				sconst();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2566;
				Match(ESCAPE);
				State = 2568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 2567;
					as_();
					}
				}

				State = 2570;
				sconst();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2571;
				Match(FORCE);
				State = 2572;
				Match(QUOTE);
				State = 2573;
				columnlist();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2574;
				Match(FORCE);
				State = 2575;
				Match(QUOTE);
				State = 2576;
				Match(STAR);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2577;
				Match(FORCE);
				State = 2578;
				Match(NOT);
				State = 2579;
				Match(NULL_P);
				State = 2580;
				columnlist();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2581;
				Match(FORCE);
				State = 2582;
				Match(NULL_P);
				State = 2583;
				columnlist();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2584;
				Match(ENCODING);
				State = 2585;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostgreSQLParser.BINARY, 0); }
		public Binary_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBinary_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBinary_(this);
		}
	}

	[RuleVersion(0)]
	public Binary_Context binary_() {
		Binary_Context _localctx = new Binary_Context(Context, State);
		EnterRule(_localctx, 152, RULE_binary_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2588;
			Match(BINARY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_delimiterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITERS() { return GetToken(PostgreSQLParser.DELIMITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_Context using_() {
			return GetRuleContext<Using_Context>(0);
		}
		public Copy_delimiterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_delimiter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_delimiter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_delimiter(this);
		}
	}

	[RuleVersion(0)]
	public Copy_delimiterContext copy_delimiter() {
		Copy_delimiterContext _localctx = new Copy_delimiterContext(Context, State);
		EnterRule(_localctx, 154, RULE_copy_delimiter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 2590;
				using_();
				}
			}

			State = 2593;
			Match(DELIMITERS);
			State = 2594;
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		public Using_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUsing_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUsing_(this);
		}
	}

	[RuleVersion(0)]
	public Using_Context using_() {
		Using_Context _localctx = new Using_Context(Context, State);
		EnterRule(_localctx, 156, RULE_using_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2596;
			Match(USING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_elemContext[] copy_generic_opt_elem() {
			return GetRuleContexts<Copy_generic_opt_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_elemContext copy_generic_opt_elem(int i) {
			return GetRuleContext<Copy_generic_opt_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Copy_generic_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_listContext copy_generic_opt_list() {
		Copy_generic_opt_listContext _localctx = new Copy_generic_opt_listContext(Context, State);
		EnterRule(_localctx, 158, RULE_copy_generic_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2598;
			copy_generic_opt_elem();
			State = 2603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2599;
				Match(COMMA);
				State = 2600;
				copy_generic_opt_elem();
				}
				}
				State = 2605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext colLabel() {
			return GetRuleContext<ColLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_argContext copy_generic_opt_arg() {
			return GetRuleContext<Copy_generic_opt_argContext>(0);
		}
		public Copy_generic_opt_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_elem(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_elemContext copy_generic_opt_elem() {
		Copy_generic_opt_elemContext _localctx = new Copy_generic_opt_elemContext(Context, State);
		EnterRule(_localctx, 160, RULE_copy_generic_opt_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2606;
			colLabel();
			State = 2608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4399120240124L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 18014415689351175L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1023L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4899175083207029761L) != 0) || _la==PLSQLVARIABLENAME || _la==EscapeStringConstant) {
				{
				State = 2607;
				copy_generic_opt_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_or_string_Context boolean_or_string_() {
			return GetRuleContext<Boolean_or_string_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return GetRuleContext<Copy_generic_opt_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_generic_opt_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_arg(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_argContext copy_generic_opt_arg() {
		Copy_generic_opt_argContext _localctx = new Copy_generic_opt_argContext(Context, State);
		EnterRule(_localctx, 162, RULE_copy_generic_opt_arg);
		try {
			State = 2617;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case FALSE_P:
			case ON:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2610;
				boolean_or_string_();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2611;
				numericonly();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2612;
				Match(STAR);
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2613;
				Match(OPEN_PAREN);
				State = 2614;
				copy_generic_opt_arg_list();
				State = 2615;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_arg_list_itemContext[] copy_generic_opt_arg_list_item() {
			return GetRuleContexts<Copy_generic_opt_arg_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item(int i) {
			return GetRuleContext<Copy_generic_opt_arg_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Copy_generic_opt_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_arg_list(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
		Copy_generic_opt_arg_listContext _localctx = new Copy_generic_opt_arg_listContext(Context, State);
		EnterRule(_localctx, 164, RULE_copy_generic_opt_arg_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2619;
			copy_generic_opt_arg_list_item();
			State = 2624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2620;
				Match(COMMA);
				State = 2621;
				copy_generic_opt_arg_list_item();
				}
				}
				State = 2626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_arg_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_or_string_Context boolean_or_string_() {
			return GetRuleContext<Boolean_or_string_Context>(0);
		}
		public Copy_generic_opt_arg_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_arg_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_arg_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_arg_list_item(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() {
		Copy_generic_opt_arg_list_itemContext _localctx = new Copy_generic_opt_arg_list_itemContext(Context, State);
		EnterRule(_localctx, 166, RULE_copy_generic_opt_arg_list_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2627;
			boolean_or_string_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionboundspecContext partitionboundspec() {
			return GetRuleContext<PartitionboundspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttableelementlistContext opttableelementlist() {
			return GetRuleContext<OpttableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptinheritContext optinherit() {
			return GetRuleContext<OptinheritContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptpartitionspecContext optpartitionspec() {
			return GetRuleContext<OptpartitionspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_access_method_clauseContext table_access_method_clause() {
			return GetRuleContext<Table_access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptwithContext optwith() {
			return GetRuleContext<OptwithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OncommitoptionContext oncommitoption() {
			return GetRuleContext<OncommitoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttypedtableelementlistContext opttypedtableelementlist() {
			return GetRuleContext<OpttypedtableelementlistContext>(0);
		}
		public CreatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatestmtContext createstmt() {
		CreatestmtContext _localctx = new CreatestmtContext(Context, State);
		EnterRule(_localctx, 168, RULE_createstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2629;
			Match(CREATE);
			State = 2631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==LOCAL || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & 32773L) != 0)) {
				{
				State = 2630;
				opttemp();
				}
			}

			State = 2633;
			Match(TABLE);
			State = 2637;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				{
				State = 2634;
				Match(IF_P);
				State = 2635;
				Match(NOT);
				State = 2636;
				Match(EXISTS);
				}
				break;
			}
			State = 2639;
			qualified_name();
			State = 2705;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				{
				State = 2640;
				Match(OPEN_PAREN);
				State = 2642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4399120252928L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 576460889742966791L) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & -2076180479L) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & -1L) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & -1L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & -33L) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & -1L) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & -4644337652596737L) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & 36028801783726085L) != 0)) {
					{
					State = 2641;
					opttableelementlist();
					}
				}

				State = 2644;
				Match(CLOSE_PAREN);
				State = 2646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INHERITS) {
					{
					State = 2645;
					optinherit();
					}
				}

				State = 2649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 2648;
					optpartitionspec();
					}
				}

				State = 2652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2651;
					table_access_method_clause();
					}
				}

				State = 2655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					State = 2654;
					optwith();
					}
				}

				State = 2658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 2657;
					oncommitoption();
					}
				}

				State = 2661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLESPACE) {
					{
					State = 2660;
					opttablespace();
					}
				}

				}
				break;
			case OF:
				{
				State = 2663;
				Match(OF);
				State = 2664;
				any_name();
				State = 2666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 2665;
					opttypedtableelementlist();
					}
				}

				State = 2669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 2668;
					optpartitionspec();
					}
				}

				State = 2672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2671;
					table_access_method_clause();
					}
				}

				State = 2675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					State = 2674;
					optwith();
					}
				}

				State = 2678;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 2677;
					oncommitoption();
					}
				}

				State = 2681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLESPACE) {
					{
					State = 2680;
					opttablespace();
					}
				}

				}
				break;
			case PARTITION:
				{
				State = 2683;
				Match(PARTITION);
				State = 2684;
				Match(OF);
				State = 2685;
				qualified_name();
				State = 2687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 2686;
					opttypedtableelementlist();
					}
				}

				State = 2689;
				partitionboundspec();
				State = 2691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 2690;
					optpartitionspec();
					}
				}

				State = 2694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2693;
					table_access_method_clause();
					}
				}

				State = 2697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					State = 2696;
					optwith();
					}
				}

				State = 2700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 2699;
					oncommitoption();
					}
				}

				State = 2703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLESPACE) {
					{
					State = 2702;
					opttablespace();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttempContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(PostgreSQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		public OpttempContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttemp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttemp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttemp(this);
		}
	}

	[RuleVersion(0)]
	public OpttempContext opttemp() {
		OpttempContext _localctx = new OpttempContext(Context, State);
		EnterRule(_localctx, 170, RULE_opttemp);
		int _la;
		try {
			State = 2714;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEMPORARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2707;
				Match(TEMPORARY);
				}
				break;
			case TEMP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2708;
				Match(TEMP);
				}
				break;
			case LOCAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2709;
				Match(LOCAL);
				State = 2710;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case GLOBAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2711;
				Match(GLOBAL);
				State = 2712;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case UNLOGGED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2713;
				Match(UNLOGGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableelementlistContext tableelementlist() {
			return GetRuleContext<TableelementlistContext>(0);
		}
		public OpttableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public OpttableelementlistContext opttableelementlist() {
		OpttableelementlistContext _localctx = new OpttableelementlistContext(Context, State);
		EnterRule(_localctx, 172, RULE_opttableelementlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2716;
			tableelementlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttypedtableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedtableelementlistContext typedtableelementlist() {
			return GetRuleContext<TypedtableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OpttypedtableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttypedtableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttypedtableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttypedtableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public OpttypedtableelementlistContext opttypedtableelementlist() {
		OpttypedtableelementlistContext _localctx = new OpttypedtableelementlistContext(Context, State);
		EnterRule(_localctx, 174, RULE_opttypedtableelementlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2718;
			Match(OPEN_PAREN);
			State = 2719;
			typedtableelementlist();
			State = 2720;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableelementContext[] tableelement() {
			return GetRuleContexts<TableelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableelementContext tableelement(int i) {
			return GetRuleContext<TableelementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public TableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public TableelementlistContext tableelementlist() {
		TableelementlistContext _localctx = new TableelementlistContext(Context, State);
		EnterRule(_localctx, 176, RULE_tableelementlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2722;
			tableelement();
			State = 2727;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2723;
				Match(COMMA);
				State = 2724;
				tableelement();
				}
				}
				State = 2729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedtableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedtableelementContext[] typedtableelement() {
			return GetRuleContexts<TypedtableelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedtableelementContext typedtableelement(int i) {
			return GetRuleContext<TypedtableelementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public TypedtableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedtableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTypedtableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTypedtableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public TypedtableelementlistContext typedtableelementlist() {
		TypedtableelementlistContext _localctx = new TypedtableelementlistContext(Context, State);
		EnterRule(_localctx, 178, RULE_typedtableelementlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2730;
			typedtableelement();
			State = 2735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2731;
				Match(COMMA);
				State = 2732;
				typedtableelement();
				}
				}
				State = 2737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeclauseContext tablelikeclause() {
			return GetRuleContext<TablelikeclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefContext columnDef() {
			return GetRuleContext<ColumnDefContext>(0);
		}
		public TableelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTableelement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTableelement(this);
		}
	}

	[RuleVersion(0)]
	public TableelementContext tableelement() {
		TableelementContext _localctx = new TableelementContext(Context, State);
		EnterRule(_localctx, 180, RULE_tableelement);
		try {
			State = 2741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2738;
				tableconstraint();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2739;
				tablelikeclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2740;
				columnDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedtableelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnOptionsContext columnOptions() {
			return GetRuleContext<ColumnOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		public TypedtableelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedtableelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTypedtableelement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTypedtableelement(this);
		}
	}

	[RuleVersion(0)]
	public TypedtableelementContext typedtableelement() {
		TypedtableelementContext _localctx = new TypedtableelementContext(Context, State);
		EnterRule(_localctx, 182, RULE_typedtableelement);
		try {
			State = 2745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2743;
				columnOptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2744;
				tableconstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColquallistContext colquallist() {
			return GetRuleContext<ColquallistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnDef(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefContext columnDef() {
		ColumnDefContext _localctx = new ColumnDefContext(Context, State);
		EnterRule(_localctx, 184, RULE_columnDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2747;
			colid();
			State = 2748;
			typename();
			State = 2750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 2749;
				create_generic_options();
				}
			}

			State = 2752;
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColquallistContext colquallist() {
			return GetRuleContext<ColquallistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnOptions(this);
		}
	}

	[RuleVersion(0)]
	public ColumnOptionsContext columnOptions() {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(Context, State);
		EnterRule(_localctx, 186, RULE_columnOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2754;
			colid();
			State = 2757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2755;
				Match(WITH);
				State = 2756;
				Match(OPTIONS);
				}
			}

			State = 2759;
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColquallistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColconstraintContext[] colconstraint() {
			return GetRuleContexts<ColconstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColconstraintContext colconstraint(int i) {
			return GetRuleContext<ColconstraintContext>(i);
		}
		public ColquallistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colquallist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColquallist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColquallist(this);
		}
	}

	[RuleVersion(0)]
	public ColquallistContext colquallist() {
		ColquallistContext _localctx = new ColquallistContext(Context, State);
		EnterRule(_localctx, 188, RULE_colquallist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 72084085530433547L) != 0) || _la==GENERATED) {
				{
				{
				State = 2761;
				colconstraint();
				}
				}
				State = 2766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColconstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColconstraintelemContext colconstraintelem() {
			return GetRuleContext<ColconstraintelemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattrContext constraintattr() {
			return GetRuleContext<ConstraintattrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public ColconstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colconstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColconstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColconstraint(this);
		}
	}

	[RuleVersion(0)]
	public ColconstraintContext colconstraint() {
		ColconstraintContext _localctx = new ColconstraintContext(Context, State);
		EnterRule(_localctx, 190, RULE_colconstraint);
		try {
			State = 2775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2767;
				Match(CONSTRAINT);
				State = 2768;
				name();
				State = 2769;
				colconstraintelem();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2771;
				colconstraintelem();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2772;
				constraintattr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2773;
				Match(COLLATE);
				State = 2774;
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColconstraintelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Definition_Context definition_() {
			return GetRuleContext<Definition_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptconstablespaceContext optconstablespace() {
			return GetRuleContext<OptconstablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(PostgreSQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public No_inherit_Context no_inherit_() {
			return GetRuleContext<No_inherit_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generated_whenContext generated_when() {
			return GetRuleContext<Generated_whenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(PostgreSQLParser.STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return GetRuleContext<OptparenthesizedseqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_list_Context column_list_() {
			return GetRuleContext<Column_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_matchContext key_match() {
			return GetRuleContext<Key_matchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionsContext key_actions() {
			return GetRuleContext<Key_actionsContext>(0);
		}
		public ColconstraintelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colconstraintelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColconstraintelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColconstraintelem(this);
		}
	}

	[RuleVersion(0)]
	public ColconstraintelemContext colconstraintelem() {
		ColconstraintelemContext _localctx = new ColconstraintelemContext(Context, State);
		EnterRule(_localctx, 192, RULE_colconstraintelem);
		int _la;
		try {
			State = 2829;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2777;
				Match(NOT);
				State = 2778;
				Match(NULL_P);
				}
				break;
			case NULL_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2779;
				Match(NULL_P);
				}
				break;
			case UNIQUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2780;
				Match(UNIQUE);
				State = 2782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 2781;
					definition_();
					}
				}

				State = 2785;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2784;
					optconstablespace();
					}
				}

				}
				break;
			case PRIMARY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2787;
				Match(PRIMARY);
				State = 2788;
				Match(KEY);
				State = 2790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 2789;
					definition_();
					}
				}

				State = 2793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2792;
					optconstablespace();
					}
				}

				}
				break;
			case CHECK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2795;
				Match(CHECK);
				State = 2796;
				Match(OPEN_PAREN);
				State = 2797;
				a_expr();
				State = 2798;
				Match(CLOSE_PAREN);
				State = 2800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 2799;
					no_inherit_();
					}
				}

				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2802;
				Match(DEFAULT);
				State = 2803;
				b_expr(0);
				}
				break;
			case GENERATED:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2804;
				Match(GENERATED);
				State = 2805;
				generated_when();
				State = 2806;
				Match(AS);
				State = 2816;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTITY_P:
					{
					State = 2807;
					Match(IDENTITY_P);
					State = 2809;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OPEN_PAREN) {
						{
						State = 2808;
						optparenthesizedseqoptlist();
						}
					}

					}
					break;
				case OPEN_PAREN:
					{
					State = 2811;
					Match(OPEN_PAREN);
					State = 2812;
					a_expr();
					State = 2813;
					Match(CLOSE_PAREN);
					State = 2814;
					Match(STORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2818;
				Match(REFERENCES);
				State = 2819;
				qualified_name();
				State = 2821;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 2820;
					column_list_();
					}
				}

				State = 2824;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MATCH) {
					{
					State = 2823;
					key_match();
					}
				}

				State = 2827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 2826;
					key_actions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generated_whenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Generated_whenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generated_when; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGenerated_when(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGenerated_when(this);
		}
	}

	[RuleVersion(0)]
	public Generated_whenContext generated_when() {
		Generated_whenContext _localctx = new Generated_whenContext(Context, State);
		EnterRule(_localctx, 194, RULE_generated_when);
		try {
			State = 2834;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALWAYS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2831;
				Match(ALWAYS);
				}
				break;
			case BY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2832;
				Match(BY);
				State = 2833;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintattrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(PostgreSQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		public ConstraintattrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintattr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintattr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintattr(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintattrContext constraintattr() {
		ConstraintattrContext _localctx = new ConstraintattrContext(Context, State);
		EnterRule(_localctx, 196, RULE_constraintattr);
		int _la;
		try {
			State = 2841;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFERRABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2836;
				Match(DEFERRABLE);
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2837;
				Match(NOT);
				State = 2838;
				Match(DEFERRABLE);
				}
				break;
			case INITIALLY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2839;
				Match(INITIALLY);
				State = 2840;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablelikeclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeoptionlistContext tablelikeoptionlist() {
			return GetRuleContext<TablelikeoptionlistContext>(0);
		}
		public TablelikeclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablelikeclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablelikeclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablelikeclause(this);
		}
	}

	[RuleVersion(0)]
	public TablelikeclauseContext tablelikeclause() {
		TablelikeclauseContext _localctx = new TablelikeclauseContext(Context, State);
		EnterRule(_localctx, 198, RULE_tablelikeclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2843;
			Match(LIKE);
			State = 2844;
			qualified_name();
			State = 2845;
			tablelikeoptionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablelikeoptionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeoptionContext[] tablelikeoption() {
			return GetRuleContexts<TablelikeoptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeoptionContext tablelikeoption(int i) {
			return GetRuleContext<TablelikeoptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INCLUDING() { return GetTokens(PostgreSQLParser.INCLUDING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDING(int i) {
			return GetToken(PostgreSQLParser.INCLUDING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLUDING() { return GetTokens(PostgreSQLParser.EXCLUDING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDING(int i) {
			return GetToken(PostgreSQLParser.EXCLUDING, i);
		}
		public TablelikeoptionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablelikeoptionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablelikeoptionlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablelikeoptionlist(this);
		}
	}

	[RuleVersion(0)]
	public TablelikeoptionlistContext tablelikeoptionlist() {
		TablelikeoptionlistContext _localctx = new TablelikeoptionlistContext(Context, State);
		EnterRule(_localctx, 200, RULE_tablelikeoptionlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXCLUDING || _la==INCLUDING) {
				{
				{
				State = 2847;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2848;
				tablelikeoption();
				}
				}
				State = 2853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablelikeoptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENTS() { return GetToken(PostgreSQLParser.COMMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINTS() { return GetToken(PostgreSQLParser.CONSTRAINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULTS() { return GetToken(PostgreSQLParser.DEFAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(PostgreSQLParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public TablelikeoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablelikeoption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablelikeoption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablelikeoption(this);
		}
	}

	[RuleVersion(0)]
	public TablelikeoptionContext tablelikeoption() {
		TablelikeoptionContext _localctx = new TablelikeoptionContext(Context, State);
		EnterRule(_localctx, 202, RULE_tablelikeoption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2854;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 576460752303947809L) != 0) || _la==INDEXES || _la==STATISTICS || _la==STORAGE || _la==GENERATED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintelemContext constraintelem() {
			return GetRuleContext<ConstraintelemContext>(0);
		}
		public TableconstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTableconstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTableconstraint(this);
		}
	}

	[RuleVersion(0)]
	public TableconstraintContext tableconstraint() {
		TableconstraintContext _localctx = new TableconstraintContext(Context, State);
		EnterRule(_localctx, 204, RULE_tableconstraint);
		try {
			State = 2861;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONSTRAINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2856;
				Match(CONSTRAINT);
				State = 2857;
				name();
				State = 2858;
				constraintelem();
				}
				break;
			case CHECK:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
			case EXCLUDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2860;
				constraintelem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExistingindexContext existingindex() {
			return GetRuleContext<ExistingindexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_include_Context c_include_() {
			return GetRuleContext<C_include_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definition_Context definition_() {
			return GetRuleContext<Definition_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptconstablespaceContext optconstablespace() {
			return GetRuleContext<OptconstablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(PostgreSQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(PostgreSQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionconstraintlistContext exclusionconstraintlist() {
			return GetRuleContext<ExclusionconstraintlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_method_clauseContext access_method_clause() {
			return GetRuleContext<Access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionwhereclauseContext exclusionwhereclause() {
			return GetRuleContext<ExclusionwhereclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_list_Context column_list_() {
			return GetRuleContext<Column_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_matchContext key_match() {
			return GetRuleContext<Key_matchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionsContext key_actions() {
			return GetRuleContext<Key_actionsContext>(0);
		}
		public ConstraintelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintelem(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintelemContext constraintelem() {
		ConstraintelemContext _localctx = new ConstraintelemContext(Context, State);
		EnterRule(_localctx, 206, RULE_constraintelem);
		int _la;
		try {
			State = 2949;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHECK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2863;
				Match(CHECK);
				State = 2864;
				Match(OPEN_PAREN);
				State = 2865;
				a_expr();
				State = 2866;
				Match(CLOSE_PAREN);
				State = 2867;
				constraintattributespec();
				}
				break;
			case UNIQUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2869;
				Match(UNIQUE);
				State = 2887;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAREN:
					{
					State = 2870;
					Match(OPEN_PAREN);
					State = 2871;
					columnlist();
					State = 2872;
					Match(CLOSE_PAREN);
					State = 2874;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==INCLUDE) {
						{
						State = 2873;
						c_include_();
						}
					}

					State = 2877;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH) {
						{
						State = 2876;
						definition_();
						}
					}

					State = 2880;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==USING) {
						{
						State = 2879;
						optconstablespace();
						}
					}

					State = 2882;
					constraintattributespec();
					}
					break;
				case USING:
					{
					State = 2884;
					existingindex();
					State = 2885;
					constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PRIMARY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2889;
				Match(PRIMARY);
				State = 2890;
				Match(KEY);
				State = 2908;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAREN:
					{
					State = 2891;
					Match(OPEN_PAREN);
					State = 2892;
					columnlist();
					State = 2893;
					Match(CLOSE_PAREN);
					State = 2895;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==INCLUDE) {
						{
						State = 2894;
						c_include_();
						}
					}

					State = 2898;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH) {
						{
						State = 2897;
						definition_();
						}
					}

					State = 2901;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==USING) {
						{
						State = 2900;
						optconstablespace();
						}
					}

					State = 2903;
					constraintattributespec();
					}
					break;
				case USING:
					{
					State = 2905;
					existingindex();
					State = 2906;
					constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EXCLUDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2910;
				Match(EXCLUDE);
				State = 2912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2911;
					access_method_clause();
					}
				}

				State = 2914;
				Match(OPEN_PAREN);
				State = 2915;
				exclusionconstraintlist();
				State = 2916;
				Match(CLOSE_PAREN);
				State = 2918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INCLUDE) {
					{
					State = 2917;
					c_include_();
					}
				}

				State = 2921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 2920;
					definition_();
					}
				}

				State = 2924;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2923;
					optconstablespace();
					}
				}

				State = 2927;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 2926;
					exclusionwhereclause();
					}
				}

				State = 2929;
				constraintattributespec();
				}
				break;
			case FOREIGN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2931;
				Match(FOREIGN);
				State = 2932;
				Match(KEY);
				State = 2933;
				Match(OPEN_PAREN);
				State = 2934;
				columnlist();
				State = 2935;
				Match(CLOSE_PAREN);
				State = 2936;
				Match(REFERENCES);
				State = 2937;
				qualified_name();
				State = 2939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 2938;
					column_list_();
					}
				}

				State = 2942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MATCH) {
					{
					State = 2941;
					key_match();
					}
				}

				State = 2945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 2944;
					key_actions();
					}
				}

				State = 2947;
				constraintattributespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_inherit_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		public No_inherit_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_no_inherit_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNo_inherit_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNo_inherit_(this);
		}
	}

	[RuleVersion(0)]
	public No_inherit_Context no_inherit_() {
		No_inherit_Context _localctx = new No_inherit_Context(Context, State);
		EnterRule(_localctx, 208, RULE_no_inherit_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2951;
			Match(NO);
			State = 2952;
			Match(INHERIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_list_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Column_list_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_list_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumn_list_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumn_list_(this);
		}
	}

	[RuleVersion(0)]
	public Column_list_Context column_list_() {
		Column_list_Context _localctx = new Column_list_Context(Context, State);
		EnterRule(_localctx, 210, RULE_column_list_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2954;
			Match(OPEN_PAREN);
			State = 2955;
			columnlist();
			State = 2956;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnElemContext[] columnElem() {
			return GetRuleContexts<ColumnElemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnElemContext columnElem(int i) {
			return GetRuleContext<ColumnElemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public ColumnlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnlist(this);
		}
	}

	[RuleVersion(0)]
	public ColumnlistContext columnlist() {
		ColumnlistContext _localctx = new ColumnlistContext(Context, State);
		EnterRule(_localctx, 212, RULE_columnlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2958;
			columnElem();
			State = 2963;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2959;
				Match(COMMA);
				State = 2960;
				columnElem();
				}
				}
				State = 2965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnElemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnElem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnElem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnElem(this);
		}
	}

	[RuleVersion(0)]
	public ColumnElemContext columnElem() {
		ColumnElemContext _localctx = new ColumnElemContext(Context, State);
		EnterRule(_localctx, 214, RULE_columnElem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2966;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class C_include_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(PostgreSQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public C_include_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_include_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterC_include_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitC_include_(this);
		}
	}

	[RuleVersion(0)]
	public C_include_Context c_include_() {
		C_include_Context _localctx = new C_include_Context(Context, State);
		EnterRule(_localctx, 216, RULE_c_include_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2968;
			Match(INCLUDE);
			State = 2969;
			Match(OPEN_PAREN);
			State = 2970;
			columnlist();
			State = 2971;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_matchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(PostgreSQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(PostgreSQLParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(PostgreSQLParser.SIMPLE, 0); }
		public Key_matchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_match; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_match(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_match(this);
		}
	}

	[RuleVersion(0)]
	public Key_matchContext key_match() {
		Key_matchContext _localctx = new Key_matchContext(Context, State);
		EnterRule(_localctx, 218, RULE_key_match);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2973;
			Match(MATCH);
			State = 2974;
			_la = TokenStream.LA(1);
			if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusionconstraintlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionconstraintelemContext[] exclusionconstraintelem() {
			return GetRuleContexts<ExclusionconstraintelemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionconstraintelemContext exclusionconstraintelem(int i) {
			return GetRuleContext<ExclusionconstraintelemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public ExclusionconstraintlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusionconstraintlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExclusionconstraintlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExclusionconstraintlist(this);
		}
	}

	[RuleVersion(0)]
	public ExclusionconstraintlistContext exclusionconstraintlist() {
		ExclusionconstraintlistContext _localctx = new ExclusionconstraintlistContext(Context, State);
		EnterRule(_localctx, 220, RULE_exclusionconstraintlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2976;
			exclusionconstraintelem();
			State = 2981;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2977;
				Match(COMMA);
				State = 2978;
				exclusionconstraintelem();
				}
				}
				State = 2983;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusionconstraintelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext index_elem() {
			return GetRuleContext<Index_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionconstraintelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusionconstraintelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExclusionconstraintelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExclusionconstraintelem(this);
		}
	}

	[RuleVersion(0)]
	public ExclusionconstraintelemContext exclusionconstraintelem() {
		ExclusionconstraintelemContext _localctx = new ExclusionconstraintelemContext(Context, State);
		EnterRule(_localctx, 222, RULE_exclusionconstraintelem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2984;
			index_elem();
			State = 2985;
			Match(WITH);
			State = 2992;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				{
				State = 2986;
				any_operator();
				}
				break;
			case 2:
				{
				State = 2987;
				Match(OPERATOR);
				State = 2988;
				Match(OPEN_PAREN);
				State = 2989;
				any_operator();
				State = 2990;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusionwhereclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionwhereclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusionwhereclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExclusionwhereclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExclusionwhereclause(this);
		}
	}

	[RuleVersion(0)]
	public ExclusionwhereclauseContext exclusionwhereclause() {
		ExclusionwhereclauseContext _localctx = new ExclusionwhereclauseContext(Context, State);
		EnterRule(_localctx, 224, RULE_exclusionwhereclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2994;
			Match(WHERE);
			State = 2995;
			Match(OPEN_PAREN);
			State = 2996;
			a_expr();
			State = 2997;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_actionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Key_updateContext key_update() {
			return GetRuleContext<Key_updateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_deleteContext key_delete() {
			return GetRuleContext<Key_deleteContext>(0);
		}
		public Key_actionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_actions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_actions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_actions(this);
		}
	}

	[RuleVersion(0)]
	public Key_actionsContext key_actions() {
		Key_actionsContext _localctx = new Key_actionsContext(Context, State);
		EnterRule(_localctx, 226, RULE_key_actions);
		try {
			State = 3007;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2999;
				key_update();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3000;
				key_delete();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3001;
				key_update();
				State = 3002;
				key_delete();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3004;
				key_delete();
				State = 3005;
				key_update();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_updateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionContext key_action() {
			return GetRuleContext<Key_actionContext>(0);
		}
		public Key_updateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_update; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_update(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_update(this);
		}
	}

	[RuleVersion(0)]
	public Key_updateContext key_update() {
		Key_updateContext _localctx = new Key_updateContext(Context, State);
		EnterRule(_localctx, 228, RULE_key_update);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3009;
			Match(ON);
			State = 3010;
			Match(UPDATE);
			State = 3011;
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_deleteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionContext key_action() {
			return GetRuleContext<Key_actionContext>(0);
		}
		public Key_deleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_delete; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_delete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_delete(this);
		}
	}

	[RuleVersion(0)]
	public Key_deleteContext key_delete() {
		Key_deleteContext _localctx = new Key_deleteContext(Context, State);
		EnterRule(_localctx, 230, RULE_key_delete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3013;
			Match(ON);
			State = 3014;
			Match(DELETE_P);
			State = 3015;
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(PostgreSQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Key_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_action(this);
		}
	}

	[RuleVersion(0)]
	public Key_actionContext key_action() {
		Key_actionContext _localctx = new Key_actionContext(Context, State);
		EnterRule(_localctx, 232, RULE_key_action);
		int _la;
		try {
			State = 3023;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3017;
				Match(NO);
				State = 3018;
				Match(ACTION);
				}
				break;
			case RESTRICT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3019;
				Match(RESTRICT);
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3020;
				Match(CASCADE);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3021;
				Match(SET);
				State = 3022;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==NULL_P) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptinheritContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(PostgreSQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optinherit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptinherit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptinherit(this);
		}
	}

	[RuleVersion(0)]
	public OptinheritContext optinherit() {
		OptinheritContext _localctx = new OptinheritContext(Context, State);
		EnterRule(_localctx, 234, RULE_optinherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3025;
			Match(INHERITS);
			State = 3026;
			Match(OPEN_PAREN);
			State = 3027;
			qualified_name_list();
			State = 3028;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptpartitionspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartitionspecContext partitionspec() {
			return GetRuleContext<PartitionspecContext>(0);
		}
		public OptpartitionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optpartitionspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptpartitionspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptpartitionspec(this);
		}
	}

	[RuleVersion(0)]
	public OptpartitionspecContext optpartitionspec() {
		OptpartitionspecContext _localctx = new OptpartitionspecContext(Context, State);
		EnterRule(_localctx, 236, RULE_optpartitionspec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3030;
			partitionspec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Part_paramsContext part_params() {
			return GetRuleContext<Part_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PartitionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionspec(this);
		}
	}

	[RuleVersion(0)]
	public PartitionspecContext partitionspec() {
		PartitionspecContext _localctx = new PartitionspecContext(Context, State);
		EnterRule(_localctx, 238, RULE_partitionspec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3032;
			Match(PARTITION);
			State = 3033;
			Match(BY);
			State = 3034;
			colid();
			State = 3035;
			Match(OPEN_PAREN);
			State = 3036;
			part_params();
			State = 3037;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Part_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Part_elemContext[] part_elem() {
			return GetRuleContexts<Part_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Part_elemContext part_elem(int i) {
			return GetRuleContext<Part_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Part_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPart_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPart_params(this);
		}
	}

	[RuleVersion(0)]
	public Part_paramsContext part_params() {
		Part_paramsContext _localctx = new Part_paramsContext(Context, State);
		EnterRule(_localctx, 240, RULE_part_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3039;
			part_elem();
			State = 3044;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3040;
				Match(COMMA);
				State = 3041;
				part_elem();
				}
				}
				State = 3046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Part_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Collate_Context collate_() {
			return GetRuleContext<Collate_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Part_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPart_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPart_elem(this);
		}
	}

	[RuleVersion(0)]
	public Part_elemContext part_elem() {
		Part_elemContext _localctx = new Part_elemContext(Context, State);
		EnterRule(_localctx, 242, RULE_part_elem);
		int _la;
		try {
			State = 3070;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3047;
				colid();
				State = 3049;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 3048;
					collate_();
					}
				}

				State = 3052;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 3051;
					class_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3054;
				func_expr_windowless();
				State = 3056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 3055;
					collate_();
					}
				}

				State = 3059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 3058;
					class_();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3061;
				Match(OPEN_PAREN);
				State = 3062;
				a_expr();
				State = 3063;
				Match(CLOSE_PAREN);
				State = 3065;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 3064;
					collate_();
					}
				}

				State = 3068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 3067;
					class_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_access_method_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Table_access_method_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_access_method_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_access_method_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_access_method_clause(this);
		}
	}

	[RuleVersion(0)]
	public Table_access_method_clauseContext table_access_method_clause() {
		Table_access_method_clauseContext _localctx = new Table_access_method_clauseContext(Context, State);
		EnterRule(_localctx, 244, RULE_table_access_method_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3072;
			Match(USING);
			State = 3073;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptwithContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OIDS() { return GetToken(PostgreSQLParser.OIDS, 0); }
		public OptwithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optwith; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptwith(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptwith(this);
		}
	}

	[RuleVersion(0)]
	public OptwithContext optwith() {
		OptwithContext _localctx = new OptwithContext(Context, State);
		EnterRule(_localctx, 246, RULE_optwith);
		try {
			State = 3079;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3075;
				Match(WITH);
				State = 3076;
				reloptions();
				}
				break;
			case WITHOUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3077;
				Match(WITHOUT);
				State = 3078;
				Match(OIDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OncommitoptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(PostgreSQLParser.PRESERVE, 0); }
		public OncommitoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oncommitoption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOncommitoption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOncommitoption(this);
		}
	}

	[RuleVersion(0)]
	public OncommitoptionContext oncommitoption() {
		OncommitoptionContext _localctx = new OncommitoptionContext(Context, State);
		EnterRule(_localctx, 248, RULE_oncommitoption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3081;
			Match(ON);
			State = 3082;
			Match(COMMIT);
			State = 3088;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DROP:
				{
				State = 3083;
				Match(DROP);
				}
				break;
			case DELETE_P:
				{
				State = 3084;
				Match(DELETE_P);
				State = 3085;
				Match(ROWS);
				}
				break;
			case PRESERVE:
				{
				State = 3086;
				Match(PRESERVE);
				State = 3087;
				Match(ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public OpttablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttablespace(this);
		}
	}

	[RuleVersion(0)]
	public OpttablespaceContext opttablespace() {
		OpttablespaceContext _localctx = new OpttablespaceContext(Context, State);
		EnterRule(_localctx, 250, RULE_opttablespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3090;
			Match(TABLESPACE);
			State = 3091;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptconstablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public OptconstablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optconstablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptconstablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptconstablespace(this);
		}
	}

	[RuleVersion(0)]
	public OptconstablespaceContext optconstablespace() {
		OptconstablespaceContext _localctx = new OptconstablespaceContext(Context, State);
		EnterRule(_localctx, 252, RULE_optconstablespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3093;
			Match(USING);
			State = 3094;
			Match(INDEX);
			State = 3095;
			Match(TABLESPACE);
			State = 3096;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExistingindexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExistingindexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existingindex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExistingindex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExistingindex(this);
		}
	}

	[RuleVersion(0)]
	public ExistingindexContext existingindex() {
		ExistingindexContext _localctx = new ExistingindexContext(Context, State);
		EnterRule(_localctx, 254, RULE_existingindex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3098;
			Match(USING);
			State = 3099;
			Match(INDEX);
			State = 3100;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatestatsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_listContext from_list() {
			return GetRuleContext<From_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_list_Context name_list_() {
			return GetRuleContext<Name_list_Context>(0);
		}
		public CreatestatsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createstatsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatestatsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatestatsstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatestatsstmtContext createstatsstmt() {
		CreatestatsstmtContext _localctx = new CreatestatsstmtContext(Context, State);
		EnterRule(_localctx, 256, RULE_createstatsstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3102;
			Match(CREATE);
			State = 3103;
			Match(STATISTICS);
			State = 3107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				{
				State = 3104;
				Match(IF_P);
				State = 3105;
				Match(NOT);
				State = 3106;
				Match(EXISTS);
				}
				break;
			}
			State = 3109;
			any_name();
			State = 3111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 3110;
				name_list_();
				}
			}

			State = 3113;
			Match(ON);
			State = 3114;
			expr_list();
			State = 3115;
			Match(FROM);
			State = 3116;
			from_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterstatsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATISTICS() { return GetTokens(PostgreSQLParser.STATISTICS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS(int i) {
			return GetToken(PostgreSQLParser.STATISTICS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public AlterstatsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterstatsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterstatsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterstatsstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterstatsstmtContext alterstatsstmt() {
		AlterstatsstmtContext _localctx = new AlterstatsstmtContext(Context, State);
		EnterRule(_localctx, 258, RULE_alterstatsstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3118;
			Match(ALTER);
			State = 3119;
			Match(STATISTICS);
			State = 3122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				{
				State = 3120;
				Match(IF_P);
				State = 3121;
				Match(EXISTS);
				}
				break;
			}
			State = 3124;
			any_name();
			State = 3125;
			Match(SET);
			State = 3126;
			Match(STATISTICS);
			State = 3127;
			signediconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateasstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_as_targetContext create_as_target() {
			return GetRuleContext<Create_as_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_data_Context with_data_() {
			return GetRuleContext<With_data_Context>(0);
		}
		public CreateasstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createasstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateasstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateasstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateasstmtContext createasstmt() {
		CreateasstmtContext _localctx = new CreateasstmtContext(Context, State);
		EnterRule(_localctx, 260, RULE_createasstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3129;
			Match(CREATE);
			State = 3131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==LOCAL || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & 32773L) != 0)) {
				{
				State = 3130;
				opttemp();
				}
			}

			State = 3133;
			Match(TABLE);
			State = 3137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
			case 1:
				{
				State = 3134;
				Match(IF_P);
				State = 3135;
				Match(NOT);
				State = 3136;
				Match(EXISTS);
				}
				break;
			}
			State = 3139;
			create_as_target();
			State = 3140;
			Match(AS);
			State = 3141;
			selectstmt();
			State = 3143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3142;
				with_data_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_as_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_list_Context column_list_() {
			return GetRuleContext<Column_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_access_method_clauseContext table_access_method_clause() {
			return GetRuleContext<Table_access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptwithContext optwith() {
			return GetRuleContext<OptwithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OncommitoptionContext oncommitoption() {
			return GetRuleContext<OncommitoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		public Create_as_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_as_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_as_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_as_target(this);
		}
	}

	[RuleVersion(0)]
	public Create_as_targetContext create_as_target() {
		Create_as_targetContext _localctx = new Create_as_targetContext(Context, State);
		EnterRule(_localctx, 262, RULE_create_as_target);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3145;
			qualified_name();
			State = 3147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 3146;
				column_list_();
				}
			}

			State = 3150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 3149;
				table_access_method_clause();
				}
			}

			State = 3153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH || _la==WITHOUT) {
				{
				State = 3152;
				optwith();
				}
			}

			State = 3156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 3155;
				oncommitoption();
				}
			}

			State = 3159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLESPACE) {
				{
				State = 3158;
				opttablespace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_data_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public With_data_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_data_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWith_data_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWith_data_(this);
		}
	}

	[RuleVersion(0)]
	public With_data_Context with_data_() {
		With_data_Context _localctx = new With_data_Context(Context, State);
		EnterRule(_localctx, 264, RULE_with_data_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3161;
			Match(WITH);
			State = 3165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATA_P:
				{
				State = 3162;
				Match(DATA_P);
				}
				break;
			case NO:
				{
				State = 3163;
				Match(NO);
				State = 3164;
				Match(DATA_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatematviewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_mv_targetContext create_mv_target() {
			return GetRuleContext<Create_mv_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptnologContext optnolog() {
			return GetRuleContext<OptnologContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_data_Context with_data_() {
			return GetRuleContext<With_data_Context>(0);
		}
		public CreatematviewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creatematviewstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatematviewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatematviewstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatematviewstmtContext creatematviewstmt() {
		CreatematviewstmtContext _localctx = new CreatematviewstmtContext(Context, State);
		EnterRule(_localctx, 266, RULE_creatematviewstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3167;
			Match(CREATE);
			State = 3169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNLOGGED) {
				{
				State = 3168;
				optnolog();
				}
			}

			State = 3171;
			Match(MATERIALIZED);
			State = 3172;
			Match(VIEW);
			State = 3176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				{
				State = 3173;
				Match(IF_P);
				State = 3174;
				Match(NOT);
				State = 3175;
				Match(EXISTS);
				}
				break;
			}
			State = 3178;
			create_mv_target();
			State = 3179;
			Match(AS);
			State = 3180;
			selectstmt();
			State = 3182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3181;
				with_data_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_mv_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_list_Context column_list_() {
			return GetRuleContext<Column_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_access_method_clauseContext table_access_method_clause() {
			return GetRuleContext<Table_access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reloptions_Context reloptions_() {
			return GetRuleContext<Reloptions_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		public Create_mv_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_mv_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_mv_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_mv_target(this);
		}
	}

	[RuleVersion(0)]
	public Create_mv_targetContext create_mv_target() {
		Create_mv_targetContext _localctx = new Create_mv_targetContext(Context, State);
		EnterRule(_localctx, 268, RULE_create_mv_target);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3184;
			qualified_name();
			State = 3186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 3185;
				column_list_();
				}
			}

			State = 3189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 3188;
				table_access_method_clause();
				}
			}

			State = 3192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3191;
				reloptions_();
				}
			}

			State = 3195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLESPACE) {
				{
				State = 3194;
				opttablespace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptnologContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		public OptnologContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optnolog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptnolog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptnolog(this);
		}
	}

	[RuleVersion(0)]
	public OptnologContext optnolog() {
		OptnologContext _localctx = new OptnologContext(Context, State);
		EnterRule(_localctx, 270, RULE_optnolog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3197;
			Match(UNLOGGED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefreshmatviewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrently_Context concurrently_() {
			return GetRuleContext<Concurrently_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_data_Context with_data_() {
			return GetRuleContext<With_data_Context>(0);
		}
		public RefreshmatviewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refreshmatviewstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRefreshmatviewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRefreshmatviewstmt(this);
		}
	}

	[RuleVersion(0)]
	public RefreshmatviewstmtContext refreshmatviewstmt() {
		RefreshmatviewstmtContext _localctx = new RefreshmatviewstmtContext(Context, State);
		EnterRule(_localctx, 272, RULE_refreshmatviewstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3199;
			Match(REFRESH);
			State = 3200;
			Match(MATERIALIZED);
			State = 3201;
			Match(VIEW);
			State = 3203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONCURRENTLY) {
				{
				State = 3202;
				concurrently_();
				}
			}

			State = 3205;
			qualified_name();
			State = 3207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3206;
				with_data_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateseqstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptseqoptlistContext optseqoptlist() {
			return GetRuleContext<OptseqoptlistContext>(0);
		}
		public CreateseqstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createseqstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateseqstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateseqstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateseqstmtContext createseqstmt() {
		CreateseqstmtContext _localctx = new CreateseqstmtContext(Context, State);
		EnterRule(_localctx, 274, RULE_createseqstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3209;
			Match(CREATE);
			State = 3211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==LOCAL || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & 32773L) != 0)) {
				{
				State = 3210;
				opttemp();
				}
			}

			State = 3213;
			Match(SEQUENCE);
			State = 3217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
			case 1:
				{
				State = 3214;
				Match(IF_P);
				State = 3215;
				Match(NOT);
				State = 3216;
				Match(EXISTS);
				}
				break;
			}
			State = 3219;
			qualified_name();
			State = 3221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==CACHE || _la==CYCLE || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & 563088600334337L) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & 67125249L) != 0)) {
				{
				State = 3220;
				optseqoptlist();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterseqstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptlistContext seqoptlist() {
			return GetRuleContext<SeqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public AlterseqstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterseqstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterseqstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterseqstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterseqstmtContext alterseqstmt() {
		AlterseqstmtContext _localctx = new AlterseqstmtContext(Context, State);
		EnterRule(_localctx, 276, RULE_alterseqstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3223;
			Match(ALTER);
			State = 3224;
			Match(SEQUENCE);
			State = 3227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				{
				State = 3225;
				Match(IF_P);
				State = 3226;
				Match(EXISTS);
				}
				break;
			}
			State = 3229;
			qualified_name();
			State = 3230;
			seqoptlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptseqoptlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptlistContext seqoptlist() {
			return GetRuleContext<SeqoptlistContext>(0);
		}
		public OptseqoptlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optseqoptlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptseqoptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptseqoptlist(this);
		}
	}

	[RuleVersion(0)]
	public OptseqoptlistContext optseqoptlist() {
		OptseqoptlistContext _localctx = new OptseqoptlistContext(Context, State);
		EnterRule(_localctx, 278, RULE_optseqoptlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3232;
			seqoptlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptparenthesizedseqoptlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptlistContext seqoptlist() {
			return GetRuleContext<SeqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptparenthesizedseqoptlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optparenthesizedseqoptlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptparenthesizedseqoptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptparenthesizedseqoptlist(this);
		}
	}

	[RuleVersion(0)]
	public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
		OptparenthesizedseqoptlistContext _localctx = new OptparenthesizedseqoptlistContext(Context, State);
		EnterRule(_localctx, 280, RULE_optparenthesizedseqoptlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3234;
			Match(OPEN_PAREN);
			State = 3235;
			seqoptlist();
			State = 3236;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeqoptlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptelemContext[] seqoptelem() {
			return GetRuleContexts<SeqoptelemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptelemContext seqoptelem(int i) {
			return GetRuleContext<SeqoptelemContext>(i);
		}
		public SeqoptlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seqoptlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSeqoptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSeqoptlist(this);
		}
	}

	[RuleVersion(0)]
	public SeqoptlistContext seqoptlist() {
		SeqoptlistContext _localctx = new SeqoptlistContext(Context, State);
		EnterRule(_localctx, 282, RULE_seqoptlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3238;
				seqoptelem();
				}
				}
				State = 3241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AS || _la==CACHE || _la==CYCLE || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & 563088600334337L) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & 67125249L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeqoptelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpletypenameContext simpletypename() {
			return GetRuleContext<SimpletypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(PostgreSQLParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(PostgreSQLParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(PostgreSQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public By_Context by_() {
			return GetRuleContext<By_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(PostgreSQLParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(PostgreSQLParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_P() { return GetToken(PostgreSQLParser.NAME_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(PostgreSQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_Context with_() {
			return GetRuleContext<With_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		public SeqoptelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seqoptelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSeqoptelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSeqoptelem(this);
		}
	}

	[RuleVersion(0)]
	public SeqoptelemContext seqoptelem() {
		SeqoptelemContext _localctx = new SeqoptelemContext(Context, State);
		EnterRule(_localctx, 284, RULE_seqoptelem);
		int _la;
		try {
			State = 3277;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3243;
				Match(AS);
				State = 3244;
				simpletypename();
				}
				break;
			case CACHE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3245;
				Match(CACHE);
				State = 3246;
				numericonly();
				}
				break;
			case CYCLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3247;
				Match(CYCLE);
				}
				break;
			case INCREMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3248;
				Match(INCREMENT);
				State = 3250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BY) {
					{
					State = 3249;
					by_();
					}
				}

				State = 3252;
				numericonly();
				}
				break;
			case MAXVALUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3253;
				Match(MAXVALUE);
				State = 3254;
				numericonly();
				}
				break;
			case MINVALUE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3255;
				Match(MINVALUE);
				State = 3256;
				numericonly();
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3257;
				Match(NO);
				State = 3258;
				_la = TokenStream.LA(1);
				if ( !(_la==CYCLE || _la==MAXVALUE || _la==MINVALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case OWNED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3259;
				Match(OWNED);
				State = 3260;
				Match(BY);
				State = 3261;
				any_name();
				}
				break;
			case SEQUENCE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3262;
				Match(SEQUENCE);
				State = 3263;
				Match(NAME_P);
				State = 3264;
				any_name();
				}
				break;
			case START:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3265;
				Match(START);
				State = 3267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 3266;
					with_();
					}
				}

				State = 3269;
				numericonly();
				}
				break;
			case RESTART:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3270;
				Match(RESTART);
				State = 3272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 3271;
					with_();
					}
				}

				State = 3275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & 47L) != 0)) {
					{
					State = 3274;
					numericonly();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class By_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		public By_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_by_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBy_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBy_(this);
		}
	}

	[RuleVersion(0)]
	public By_Context by_() {
		By_Context _localctx = new By_Context(Context, State);
		EnterRule(_localctx, 286, RULE_by_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3279;
			Match(BY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericonlyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		public NumericonlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericonly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNumericonly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNumericonly(this);
		}
	}

	[RuleVersion(0)]
	public NumericonlyContext numericonly() {
		NumericonlyContext _localctx = new NumericonlyContext(Context, State);
		EnterRule(_localctx, 288, RULE_numericonly);
		try {
			State = 3287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3281;
				fconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3282;
				Match(PLUS);
				State = 3283;
				fconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3284;
				Match(MINUS);
				State = 3285;
				fconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3286;
				signediconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numericonly_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext[] numericonly() {
			return GetRuleContexts<NumericonlyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly(int i) {
			return GetRuleContext<NumericonlyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Numericonly_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericonly_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNumericonly_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNumericonly_list(this);
		}
	}

	[RuleVersion(0)]
	public Numericonly_listContext numericonly_list() {
		Numericonly_listContext _localctx = new Numericonly_listContext(Context, State);
		EnterRule(_localctx, 290, RULE_numericonly_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3289;
			numericonly();
			State = 3294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3290;
				Match(COMMA);
				State = 3291;
				numericonly();
				}
				}
				State = 3296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateplangstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_replace_Context or_replace_() {
			return GetRuleContext<Or_replace_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Trusted_Context trusted_() {
			return GetRuleContext<Trusted_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedural_Context procedural_() {
			return GetRuleContext<Procedural_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inline_handler_Context inline_handler_() {
			return GetRuleContext<Inline_handler_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Validator_Context validator_() {
			return GetRuleContext<Validator_Context>(0);
		}
		public CreateplangstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createplangstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateplangstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateplangstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateplangstmtContext createplangstmt() {
		CreateplangstmtContext _localctx = new CreateplangstmtContext(Context, State);
		EnterRule(_localctx, 292, RULE_createplangstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3297;
			Match(CREATE);
			State = 3299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 3298;
				or_replace_();
				}
			}

			State = 3302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRUSTED) {
				{
				State = 3301;
				trusted_();
				}
			}

			State = 3305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROCEDURAL) {
				{
				State = 3304;
				procedural_();
				}
			}

			State = 3307;
			Match(LANGUAGE);
			State = 3308;
			name();
			State = 3317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HANDLER) {
				{
				State = 3309;
				Match(HANDLER);
				State = 3310;
				handler_name();
				State = 3312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INLINE_P) {
					{
					State = 3311;
					inline_handler_();
					}
				}

				State = 3315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO || _la==VALIDATOR) {
					{
					State = 3314;
					validator_();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trusted_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUSTED() { return GetToken(PostgreSQLParser.TRUSTED, 0); }
		public Trusted_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trusted_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTrusted_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTrusted_(this);
		}
	}

	[RuleVersion(0)]
	public Trusted_Context trusted_() {
		Trusted_Context _localctx = new Trusted_Context(Context, State);
		EnterRule(_localctx, 294, RULE_trusted_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3319;
			Match(TRUSTED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Handler_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		public Handler_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handler_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHandler_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHandler_name(this);
		}
	}

	[RuleVersion(0)]
	public Handler_nameContext handler_name() {
		Handler_nameContext _localctx = new Handler_nameContext(Context, State);
		EnterRule(_localctx, 296, RULE_handler_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3321;
			name();
			State = 3323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 3322;
				attrs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inline_handler_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE_P() { return GetToken(PostgreSQLParser.INLINE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		public Inline_handler_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline_handler_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInline_handler_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInline_handler_(this);
		}
	}

	[RuleVersion(0)]
	public Inline_handler_Context inline_handler_() {
		Inline_handler_Context _localctx = new Inline_handler_Context(Context, State);
		EnterRule(_localctx, 298, RULE_inline_handler_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3325;
			Match(INLINE_P);
			State = 3326;
			handler_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Validator_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATOR() { return GetToken(PostgreSQLParser.VALIDATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Validator_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validator_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterValidator_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitValidator_clause(this);
		}
	}

	[RuleVersion(0)]
	public Validator_clauseContext validator_clause() {
		Validator_clauseContext _localctx = new Validator_clauseContext(Context, State);
		EnterRule(_localctx, 300, RULE_validator_clause);
		try {
			State = 3332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALIDATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3328;
				Match(VALIDATOR);
				State = 3329;
				handler_name();
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3330;
				Match(NO);
				State = 3331;
				Match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Validator_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Validator_clauseContext validator_clause() {
			return GetRuleContext<Validator_clauseContext>(0);
		}
		public Validator_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validator_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterValidator_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitValidator_(this);
		}
	}

	[RuleVersion(0)]
	public Validator_Context validator_() {
		Validator_Context _localctx = new Validator_Context(Context, State);
		EnterRule(_localctx, 302, RULE_validator_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3334;
			validator_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedural_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURAL() { return GetToken(PostgreSQLParser.PROCEDURAL, 0); }
		public Procedural_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedural_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProcedural_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProcedural_(this);
		}
	}

	[RuleVersion(0)]
	public Procedural_Context procedural_() {
		Procedural_Context _localctx = new Procedural_Context(Context, State);
		EnterRule(_localctx, 304, RULE_procedural_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3336;
			Match(PROCEDURAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatetablespacestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION() { return GetToken(PostgreSQLParser.LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceownerContext opttablespaceowner() {
			return GetRuleContext<OpttablespaceownerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reloptions_Context reloptions_() {
			return GetRuleContext<Reloptions_Context>(0);
		}
		public CreatetablespacestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createtablespacestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatetablespacestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatetablespacestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatetablespacestmtContext createtablespacestmt() {
		CreatetablespacestmtContext _localctx = new CreatetablespacestmtContext(Context, State);
		EnterRule(_localctx, 306, RULE_createtablespacestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3338;
			Match(CREATE);
			State = 3339;
			Match(TABLESPACE);
			State = 3340;
			name();
			State = 3342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OWNER) {
				{
				State = 3341;
				opttablespaceowner();
				}
			}

			State = 3344;
			Match(LOCATION);
			State = 3345;
			sconst();
			State = 3347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3346;
				reloptions_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttablespaceownerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public OpttablespaceownerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttablespaceowner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttablespaceowner(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttablespaceowner(this);
		}
	}

	[RuleVersion(0)]
	public OpttablespaceownerContext opttablespaceowner() {
		OpttablespaceownerContext _localctx = new OpttablespaceownerContext(Context, State);
		EnterRule(_localctx, 308, RULE_opttablespaceowner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3349;
			Match(OWNER);
			State = 3350;
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DroptablespacestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DroptablespacestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_droptablespacestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDroptablespacestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDroptablespacestmt(this);
		}
	}

	[RuleVersion(0)]
	public DroptablespacestmtContext droptablespacestmt() {
		DroptablespacestmtContext _localctx = new DroptablespacestmtContext(Context, State);
		EnterRule(_localctx, 310, RULE_droptablespacestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3352;
			Match(DROP);
			State = 3353;
			Match(TABLESPACE);
			State = 3356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
			case 1:
				{
				State = 3354;
				Match(IF_P);
				State = 3355;
				Match(EXISTS);
				}
				break;
			}
			State = 3358;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateextensionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_extension_opt_listContext create_extension_opt_list() {
			return GetRuleContext<Create_extension_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_Context with_() {
			return GetRuleContext<With_Context>(0);
		}
		public CreateextensionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createextensionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateextensionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateextensionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateextensionstmtContext createextensionstmt() {
		CreateextensionstmtContext _localctx = new CreateextensionstmtContext(Context, State);
		EnterRule(_localctx, 312, RULE_createextensionstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3360;
			Match(CREATE);
			State = 3361;
			Match(EXTENSION);
			State = 3365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,250,Context) ) {
			case 1:
				{
				State = 3362;
				Match(IF_P);
				State = 3363;
				Match(NOT);
				State = 3364;
				Match(EXISTS);
				}
				break;
			}
			State = 3367;
			name();
			State = 3369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3368;
				with_();
				}
			}

			State = 3371;
			create_extension_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_extension_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Create_extension_opt_itemContext[] create_extension_opt_item() {
			return GetRuleContexts<Create_extension_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_extension_opt_itemContext create_extension_opt_item(int i) {
			return GetRuleContext<Create_extension_opt_itemContext>(i);
		}
		public Create_extension_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_extension_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_extension_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_extension_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Create_extension_opt_listContext create_extension_opt_list() {
		Create_extension_opt_listContext _localctx = new Create_extension_opt_listContext(Context, State);
		EnterRule(_localctx, 314, RULE_create_extension_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FROM || _la==CASCADE || _la==SCHEMA || _la==VERSION_P) {
				{
				{
				State = 3373;
				create_extension_opt_item();
				}
				}
				State = 3378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_extension_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		public Create_extension_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_extension_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_extension_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_extension_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Create_extension_opt_itemContext create_extension_opt_item() {
		Create_extension_opt_itemContext _localctx = new Create_extension_opt_itemContext(Context, State);
		EnterRule(_localctx, 316, RULE_create_extension_opt_item);
		try {
			State = 3386;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCHEMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3379;
				Match(SCHEMA);
				State = 3380;
				name();
				}
				break;
			case VERSION_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3381;
				Match(VERSION_P);
				State = 3382;
				nonreservedword_or_sconst();
				}
				break;
			case FROM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3383;
				Match(FROM);
				State = 3384;
				nonreservedword_or_sconst();
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3385;
				Match(CASCADE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterextensionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alter_extension_opt_listContext alter_extension_opt_list() {
			return GetRuleContext<Alter_extension_opt_listContext>(0);
		}
		public AlterextensionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterextensionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterextensionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterextensionstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterextensionstmtContext alterextensionstmt() {
		AlterextensionstmtContext _localctx = new AlterextensionstmtContext(Context, State);
		EnterRule(_localctx, 318, RULE_alterextensionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3388;
			Match(ALTER);
			State = 3389;
			Match(EXTENSION);
			State = 3390;
			name();
			State = 3391;
			Match(UPDATE);
			State = 3392;
			alter_extension_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_extension_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_extension_opt_itemContext[] alter_extension_opt_item() {
			return GetRuleContexts<Alter_extension_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_extension_opt_itemContext alter_extension_opt_item(int i) {
			return GetRuleContext<Alter_extension_opt_itemContext>(i);
		}
		public Alter_extension_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_extension_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_extension_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_extension_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Alter_extension_opt_listContext alter_extension_opt_list() {
		Alter_extension_opt_listContext _localctx = new Alter_extension_opt_listContext(Context, State);
		EnterRule(_localctx, 320, RULE_alter_extension_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TO) {
				{
				{
				State = 3394;
				alter_extension_opt_item();
				}
				}
				State = 3399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_extension_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Alter_extension_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_extension_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_extension_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_extension_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Alter_extension_opt_itemContext alter_extension_opt_item() {
		Alter_extension_opt_itemContext _localctx = new Alter_extension_opt_itemContext(Context, State);
		EnterRule(_localctx, 322, RULE_alter_extension_opt_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3400;
			Match(TO);
			State = 3401;
			nonreservedword_or_sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterextensioncontentsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_dropContext add_drop() {
			return GetRuleContext<Add_dropContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_nameContext object_type_name() {
			return GetRuleContext<Object_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterextensioncontentsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterextensioncontentsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterextensioncontentsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterextensioncontentsstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterextensioncontentsstmtContext alterextensioncontentsstmt() {
		AlterextensioncontentsstmtContext _localctx = new AlterextensioncontentsstmtContext(Context, State);
		EnterRule(_localctx, 324, RULE_alterextensioncontentsstmt);
		try {
			State = 3507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3403;
				Match(ALTER);
				State = 3404;
				Match(EXTENSION);
				State = 3405;
				name();
				State = 3406;
				add_drop();
				State = 3407;
				object_type_name();
				State = 3408;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3410;
				Match(ALTER);
				State = 3411;
				Match(EXTENSION);
				State = 3412;
				name();
				State = 3413;
				add_drop();
				State = 3414;
				object_type_any_name();
				State = 3415;
				any_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3417;
				Match(ALTER);
				State = 3418;
				Match(EXTENSION);
				State = 3419;
				name();
				State = 3420;
				add_drop();
				State = 3421;
				Match(AGGREGATE);
				State = 3422;
				aggregate_with_argtypes();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3424;
				Match(ALTER);
				State = 3425;
				Match(EXTENSION);
				State = 3426;
				name();
				State = 3427;
				add_drop();
				State = 3428;
				Match(CAST);
				State = 3429;
				Match(OPEN_PAREN);
				State = 3430;
				typename();
				State = 3431;
				Match(AS);
				State = 3432;
				typename();
				State = 3433;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3435;
				Match(ALTER);
				State = 3436;
				Match(EXTENSION);
				State = 3437;
				name();
				State = 3438;
				add_drop();
				State = 3439;
				Match(DOMAIN_P);
				State = 3440;
				typename();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3442;
				Match(ALTER);
				State = 3443;
				Match(EXTENSION);
				State = 3444;
				name();
				State = 3445;
				add_drop();
				State = 3446;
				Match(FUNCTION);
				State = 3447;
				function_with_argtypes();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3449;
				Match(ALTER);
				State = 3450;
				Match(EXTENSION);
				State = 3451;
				name();
				State = 3452;
				add_drop();
				State = 3453;
				Match(OPERATOR);
				State = 3454;
				operator_with_argtypes();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3456;
				Match(ALTER);
				State = 3457;
				Match(EXTENSION);
				State = 3458;
				name();
				State = 3459;
				add_drop();
				State = 3460;
				Match(OPERATOR);
				State = 3461;
				Match(CLASS);
				State = 3462;
				any_name();
				State = 3463;
				Match(USING);
				State = 3464;
				name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3466;
				Match(ALTER);
				State = 3467;
				Match(EXTENSION);
				State = 3468;
				name();
				State = 3469;
				add_drop();
				State = 3470;
				Match(OPERATOR);
				State = 3471;
				Match(FAMILY);
				State = 3472;
				any_name();
				State = 3473;
				Match(USING);
				State = 3474;
				name();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3476;
				Match(ALTER);
				State = 3477;
				Match(EXTENSION);
				State = 3478;
				name();
				State = 3479;
				add_drop();
				State = 3480;
				Match(PROCEDURE);
				State = 3481;
				function_with_argtypes();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3483;
				Match(ALTER);
				State = 3484;
				Match(EXTENSION);
				State = 3485;
				name();
				State = 3486;
				add_drop();
				State = 3487;
				Match(ROUTINE);
				State = 3488;
				function_with_argtypes();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3490;
				Match(ALTER);
				State = 3491;
				Match(EXTENSION);
				State = 3492;
				name();
				State = 3493;
				add_drop();
				State = 3494;
				Match(TRANSFORM);
				State = 3495;
				Match(FOR);
				State = 3496;
				typename();
				State = 3497;
				Match(LANGUAGE);
				State = 3498;
				name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3500;
				Match(ALTER);
				State = 3501;
				Match(EXTENSION);
				State = 3502;
				name();
				State = 3503;
				add_drop();
				State = 3504;
				Match(TYPE_P);
				State = 3505;
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatefdwstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_options_Context fdw_options_() {
			return GetRuleContext<Fdw_options_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		public CreatefdwstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfdwstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefdwstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefdwstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatefdwstmtContext createfdwstmt() {
		CreatefdwstmtContext _localctx = new CreatefdwstmtContext(Context, State);
		EnterRule(_localctx, 326, RULE_createfdwstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3509;
			Match(CREATE);
			State = 3510;
			Match(FOREIGN);
			State = 3511;
			Match(DATA_P);
			State = 3512;
			Match(WRAPPER);
			State = 3513;
			name();
			State = 3515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HANDLER || _la==NO || _la==VALIDATOR) {
				{
				State = 3514;
				fdw_options_();
				}
			}

			State = 3518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 3517;
				create_generic_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fdw_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATOR() { return GetToken(PostgreSQLParser.VALIDATOR, 0); }
		public Fdw_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fdw_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFdw_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFdw_option(this);
		}
	}

	[RuleVersion(0)]
	public Fdw_optionContext fdw_option() {
		Fdw_optionContext _localctx = new Fdw_optionContext(Context, State);
		EnterRule(_localctx, 328, RULE_fdw_option);
		try {
			State = 3528;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3520;
				Match(HANDLER);
				State = 3521;
				handler_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3522;
				Match(NO);
				State = 3523;
				Match(HANDLER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3524;
				Match(VALIDATOR);
				State = 3525;
				handler_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3526;
				Match(NO);
				State = 3527;
				Match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fdw_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionContext[] fdw_option() {
			return GetRuleContexts<Fdw_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionContext fdw_option(int i) {
			return GetRuleContext<Fdw_optionContext>(i);
		}
		public Fdw_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fdw_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFdw_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFdw_options(this);
		}
	}

	[RuleVersion(0)]
	public Fdw_optionsContext fdw_options() {
		Fdw_optionsContext _localctx = new Fdw_optionsContext(Context, State);
		EnterRule(_localctx, 330, RULE_fdw_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3530;
				fdw_option();
				}
				}
				State = 3533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HANDLER || _la==NO || _la==VALIDATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fdw_options_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionsContext fdw_options() {
			return GetRuleContext<Fdw_optionsContext>(0);
		}
		public Fdw_options_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fdw_options_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFdw_options_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFdw_options_(this);
		}
	}

	[RuleVersion(0)]
	public Fdw_options_Context fdw_options_() {
		Fdw_options_Context _localctx = new Fdw_options_Context(Context, State);
		EnterRule(_localctx, 332, RULE_fdw_options_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3535;
			fdw_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterfdwstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_options_Context fdw_options_() {
			return GetRuleContext<Fdw_options_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionsContext fdw_options() {
			return GetRuleContext<Fdw_optionsContext>(0);
		}
		public AlterfdwstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterfdwstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterfdwstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterfdwstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterfdwstmtContext alterfdwstmt() {
		AlterfdwstmtContext _localctx = new AlterfdwstmtContext(Context, State);
		EnterRule(_localctx, 334, RULE_alterfdwstmt);
		int _la;
		try {
			State = 3554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3537;
				Match(ALTER);
				State = 3538;
				Match(FOREIGN);
				State = 3539;
				Match(DATA_P);
				State = 3540;
				Match(WRAPPER);
				State = 3541;
				name();
				State = 3543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HANDLER || _la==NO || _la==VALIDATOR) {
					{
					State = 3542;
					fdw_options_();
					}
				}

				State = 3545;
				alter_generic_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3547;
				Match(ALTER);
				State = 3548;
				Match(FOREIGN);
				State = 3549;
				Match(DATA_P);
				State = 3550;
				Match(WRAPPER);
				State = 3551;
				name();
				State = 3552;
				fdw_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_generic_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_listContext generic_option_list() {
			return GetRuleContext<Generic_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Create_generic_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_generic_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_generic_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_generic_options(this);
		}
	}

	[RuleVersion(0)]
	public Create_generic_optionsContext create_generic_options() {
		Create_generic_optionsContext _localctx = new Create_generic_optionsContext(Context, State);
		EnterRule(_localctx, 336, RULE_create_generic_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3556;
			Match(OPTIONS);
			State = 3557;
			Match(OPEN_PAREN);
			State = 3558;
			generic_option_list();
			State = 3559;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_elemContext[] generic_option_elem() {
			return GetRuleContexts<Generic_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_elemContext generic_option_elem(int i) {
			return GetRuleContext<Generic_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Generic_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_listContext generic_option_list() {
		Generic_option_listContext _localctx = new Generic_option_listContext(Context, State);
		EnterRule(_localctx, 338, RULE_generic_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3561;
			generic_option_elem();
			State = 3566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3562;
				Match(COMMA);
				State = 3563;
				generic_option_elem();
				}
				}
				State = 3568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_generic_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_option_listContext alter_generic_option_list() {
			return GetRuleContext<Alter_generic_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alter_generic_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_generic_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_generic_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_generic_options(this);
		}
	}

	[RuleVersion(0)]
	public Alter_generic_optionsContext alter_generic_options() {
		Alter_generic_optionsContext _localctx = new Alter_generic_optionsContext(Context, State);
		EnterRule(_localctx, 340, RULE_alter_generic_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3569;
			Match(OPTIONS);
			State = 3570;
			Match(OPEN_PAREN);
			State = 3571;
			alter_generic_option_list();
			State = 3572;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_generic_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_option_elemContext[] alter_generic_option_elem() {
			return GetRuleContexts<Alter_generic_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_option_elemContext alter_generic_option_elem(int i) {
			return GetRuleContext<Alter_generic_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_generic_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_generic_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_generic_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_generic_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Alter_generic_option_listContext alter_generic_option_list() {
		Alter_generic_option_listContext _localctx = new Alter_generic_option_listContext(Context, State);
		EnterRule(_localctx, 342, RULE_alter_generic_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3574;
			alter_generic_option_elem();
			State = 3579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3575;
				Match(COMMA);
				State = 3576;
				alter_generic_option_elem();
				}
				}
				State = 3581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_generic_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_elemContext generic_option_elem() {
			return GetRuleContext<Generic_option_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_nameContext generic_option_name() {
			return GetRuleContext<Generic_option_nameContext>(0);
		}
		public Alter_generic_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_generic_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_generic_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_generic_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Alter_generic_option_elemContext alter_generic_option_elem() {
		Alter_generic_option_elemContext _localctx = new Alter_generic_option_elemContext(Context, State);
		EnterRule(_localctx, 344, RULE_alter_generic_option_elem);
		try {
			State = 3589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3582;
				generic_option_elem();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3583;
				Match(SET);
				State = 3584;
				generic_option_elem();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3585;
				Match(ADD_P);
				State = 3586;
				generic_option_elem();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3587;
				Match(DROP);
				State = 3588;
				generic_option_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_nameContext generic_option_name() {
			return GetRuleContext<Generic_option_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_argContext generic_option_arg() {
			return GetRuleContext<Generic_option_argContext>(0);
		}
		public Generic_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_elemContext generic_option_elem() {
		Generic_option_elemContext _localctx = new Generic_option_elemContext(Context, State);
		EnterRule(_localctx, 346, RULE_generic_option_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3591;
			generic_option_name();
			State = 3592;
			generic_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext colLabel() {
			return GetRuleContext<ColLabelContext>(0);
		}
		public Generic_option_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_name(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_nameContext generic_option_name() {
		Generic_option_nameContext _localctx = new Generic_option_nameContext(Context, State);
		EnterRule(_localctx, 348, RULE_generic_option_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3594;
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Generic_option_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_arg(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_argContext generic_option_arg() {
		Generic_option_argContext _localctx = new Generic_option_argContext(Context, State);
		EnterRule(_localctx, 350, RULE_generic_option_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3596;
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateforeignserverstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_server_version_Context foreign_server_version_() {
			return GetRuleContext<Foreign_server_version_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateforeignserverstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createforeignserverstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateforeignserverstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateforeignserverstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateforeignserverstmtContext createforeignserverstmt() {
		CreateforeignserverstmtContext _localctx = new CreateforeignserverstmtContext(Context, State);
		EnterRule(_localctx, 352, RULE_createforeignserverstmt);
		int _la;
		try {
			State = 3633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3598;
				Match(CREATE);
				State = 3599;
				Match(SERVER);
				State = 3600;
				name();
				State = 3602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TYPE_P) {
					{
					State = 3601;
					type_();
					}
				}

				State = 3605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERSION_P) {
					{
					State = 3604;
					foreign_server_version_();
					}
				}

				State = 3607;
				Match(FOREIGN);
				State = 3608;
				Match(DATA_P);
				State = 3609;
				Match(WRAPPER);
				State = 3610;
				name();
				State = 3612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 3611;
					create_generic_options();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3614;
				Match(CREATE);
				State = 3615;
				Match(SERVER);
				State = 3616;
				Match(IF_P);
				State = 3617;
				Match(NOT);
				State = 3618;
				Match(EXISTS);
				State = 3619;
				name();
				State = 3621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TYPE_P) {
					{
					State = 3620;
					type_();
					}
				}

				State = 3624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERSION_P) {
					{
					State = 3623;
					foreign_server_version_();
					}
				}

				State = 3626;
				Match(FOREIGN);
				State = 3627;
				Match(DATA_P);
				State = 3628;
				Match(WRAPPER);
				State = 3629;
				name();
				State = 3631;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 3630;
					create_generic_options();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 354, RULE_type_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3635;
			Match(TYPE_P);
			State = 3636;
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_server_versionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Foreign_server_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_server_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterForeign_server_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitForeign_server_version(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_server_versionContext foreign_server_version() {
		Foreign_server_versionContext _localctx = new Foreign_server_versionContext(Context, State);
		EnterRule(_localctx, 356, RULE_foreign_server_version);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3638;
			Match(VERSION_P);
			State = 3641;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				{
				State = 3639;
				sconst();
				}
				break;
			case NULL_P:
				{
				State = 3640;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_server_version_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_server_versionContext foreign_server_version() {
			return GetRuleContext<Foreign_server_versionContext>(0);
		}
		public Foreign_server_version_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_server_version_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterForeign_server_version_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitForeign_server_version_(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_server_version_Context foreign_server_version_() {
		Foreign_server_version_Context _localctx = new Foreign_server_version_Context(Context, State);
		EnterRule(_localctx, 358, RULE_foreign_server_version_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3643;
			foreign_server_version();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterforeignserverstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_server_versionContext foreign_server_version() {
			return GetRuleContext<Foreign_server_versionContext>(0);
		}
		public AlterforeignserverstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterforeignserverstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterforeignserverstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterforeignserverstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterforeignserverstmtContext alterforeignserverstmt() {
		AlterforeignserverstmtContext _localctx = new AlterforeignserverstmtContext(Context, State);
		EnterRule(_localctx, 360, RULE_alterforeignserverstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3645;
			Match(ALTER);
			State = 3646;
			Match(SERVER);
			State = 3647;
			name();
			State = 3653;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONS:
				{
				State = 3648;
				alter_generic_options();
				}
				break;
			case VERSION_P:
				{
				State = 3649;
				foreign_server_version();
				State = 3651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 3650;
					alter_generic_options();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateforeigntablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttableelementlistContext opttableelementlist() {
			return GetRuleContext<OpttableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptinheritContext optinherit() {
			return GetRuleContext<OptinheritContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionboundspecContext partitionboundspec() {
			return GetRuleContext<PartitionboundspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttypedtableelementlistContext opttypedtableelementlist() {
			return GetRuleContext<OpttypedtableelementlistContext>(0);
		}
		public CreateforeigntablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createforeigntablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateforeigntablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateforeigntablestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateforeigntablestmtContext createforeigntablestmt() {
		CreateforeigntablestmtContext _localctx = new CreateforeigntablestmtContext(Context, State);
		EnterRule(_localctx, 362, RULE_createforeigntablestmt);
		int _la;
		try {
			State = 3727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3655;
				Match(CREATE);
				State = 3656;
				Match(FOREIGN);
				State = 3657;
				Match(TABLE);
				State = 3658;
				qualified_name();
				State = 3659;
				Match(OPEN_PAREN);
				State = 3661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4399120252928L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 576460889742966791L) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & -2076180479L) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & -1L) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & -1L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & -33L) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & -1L) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & -4644337652596737L) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & 36028801783726085L) != 0)) {
					{
					State = 3660;
					opttableelementlist();
					}
				}

				State = 3663;
				Match(CLOSE_PAREN);
				State = 3665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INHERITS) {
					{
					State = 3664;
					optinherit();
					}
				}

				State = 3667;
				Match(SERVER);
				State = 3668;
				name();
				State = 3670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 3669;
					create_generic_options();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3672;
				Match(CREATE);
				State = 3673;
				Match(FOREIGN);
				State = 3674;
				Match(TABLE);
				State = 3675;
				Match(IF_P);
				State = 3676;
				Match(NOT);
				State = 3677;
				Match(EXISTS);
				State = 3678;
				qualified_name();
				State = 3679;
				Match(OPEN_PAREN);
				State = 3681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4399120252928L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 576460889742966791L) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & -2076180479L) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & -1L) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & -1L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & -33L) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & -1L) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & -4644337652596737L) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & 36028801783726085L) != 0)) {
					{
					State = 3680;
					opttableelementlist();
					}
				}

				State = 3683;
				Match(CLOSE_PAREN);
				State = 3685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INHERITS) {
					{
					State = 3684;
					optinherit();
					}
				}

				State = 3687;
				Match(SERVER);
				State = 3688;
				name();
				State = 3690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 3689;
					create_generic_options();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3692;
				Match(CREATE);
				State = 3693;
				Match(FOREIGN);
				State = 3694;
				Match(TABLE);
				State = 3695;
				qualified_name();
				State = 3696;
				Match(PARTITION);
				State = 3697;
				Match(OF);
				State = 3698;
				qualified_name();
				State = 3700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 3699;
					opttypedtableelementlist();
					}
				}

				State = 3702;
				partitionboundspec();
				State = 3703;
				Match(SERVER);
				State = 3704;
				name();
				State = 3706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 3705;
					create_generic_options();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3708;
				Match(CREATE);
				State = 3709;
				Match(FOREIGN);
				State = 3710;
				Match(TABLE);
				State = 3711;
				Match(IF_P);
				State = 3712;
				Match(NOT);
				State = 3713;
				Match(EXISTS);
				State = 3714;
				qualified_name();
				State = 3715;
				Match(PARTITION);
				State = 3716;
				Match(OF);
				State = 3717;
				qualified_name();
				State = 3719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 3718;
					opttypedtableelementlist();
					}
				}

				State = 3721;
				partitionboundspec();
				State = 3722;
				Match(SERVER);
				State = 3723;
				name();
				State = 3725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 3724;
					create_generic_options();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportforeignschemastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_P() { return GetToken(PostgreSQLParser.IMPORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_qualificationContext import_qualification() {
			return GetRuleContext<Import_qualificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		public ImportforeignschemastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importforeignschemastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImportforeignschemastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImportforeignschemastmt(this);
		}
	}

	[RuleVersion(0)]
	public ImportforeignschemastmtContext importforeignschemastmt() {
		ImportforeignschemastmtContext _localctx = new ImportforeignschemastmtContext(Context, State);
		EnterRule(_localctx, 364, RULE_importforeignschemastmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3729;
			Match(IMPORT_P);
			State = 3730;
			Match(FOREIGN);
			State = 3731;
			Match(SCHEMA);
			State = 3732;
			name();
			State = 3734;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCEPT || _la==LIMIT) {
				{
				State = 3733;
				import_qualification();
				}
			}

			State = 3736;
			Match(FROM);
			State = 3737;
			Match(SERVER);
			State = 3738;
			name();
			State = 3739;
			Match(INTO);
			State = 3740;
			name();
			State = 3742;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 3741;
				create_generic_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_qualification_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(PostgreSQLParser.EXCEPT, 0); }
		public Import_qualification_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_qualification_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImport_qualification_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImport_qualification_type(this);
		}
	}

	[RuleVersion(0)]
	public Import_qualification_typeContext import_qualification_type() {
		Import_qualification_typeContext _localctx = new Import_qualification_typeContext(Context, State);
		EnterRule(_localctx, 366, RULE_import_qualification_type);
		try {
			State = 3747;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3744;
				Match(LIMIT);
				State = 3745;
				Match(TO);
				}
				break;
			case EXCEPT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3746;
				Match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_qualificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_qualification_typeContext import_qualification_type() {
			return GetRuleContext<Import_qualification_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Import_qualificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_qualification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImport_qualification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImport_qualification(this);
		}
	}

	[RuleVersion(0)]
	public Import_qualificationContext import_qualification() {
		Import_qualificationContext _localctx = new Import_qualificationContext(Context, State);
		EnterRule(_localctx, 368, RULE_import_qualification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3749;
			import_qualification_type();
			State = 3750;
			Match(OPEN_PAREN);
			State = 3751;
			relation_expr_list();
			State = 3752;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateusermappingstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Auth_identContext auth_ident() {
			return GetRuleContext<Auth_identContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateusermappingstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createusermappingstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateusermappingstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateusermappingstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateusermappingstmtContext createusermappingstmt() {
		CreateusermappingstmtContext _localctx = new CreateusermappingstmtContext(Context, State);
		EnterRule(_localctx, 370, RULE_createusermappingstmt);
		int _la;
		try {
			State = 3777;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3754;
				Match(CREATE);
				State = 3755;
				Match(USER);
				State = 3756;
				Match(MAPPING);
				State = 3757;
				Match(FOR);
				State = 3758;
				auth_ident();
				State = 3759;
				Match(SERVER);
				State = 3760;
				name();
				State = 3762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 3761;
					create_generic_options();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3764;
				Match(CREATE);
				State = 3765;
				Match(USER);
				State = 3766;
				Match(MAPPING);
				State = 3767;
				Match(IF_P);
				State = 3768;
				Match(NOT);
				State = 3769;
				Match(EXISTS);
				State = 3770;
				Match(FOR);
				State = 3771;
				auth_ident();
				State = 3772;
				Match(SERVER);
				State = 3773;
				name();
				State = 3775;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 3774;
					create_generic_options();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Auth_identContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		public Auth_identContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auth_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAuth_ident(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAuth_ident(this);
		}
	}

	[RuleVersion(0)]
	public Auth_identContext auth_ident() {
		Auth_identContext _localctx = new Auth_identContext(Context, State);
		EnterRule(_localctx, 372, RULE_auth_ident);
		try {
			State = 3781;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case CURRENT_USER:
			case SESSION_USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3779;
				rolespec();
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3780;
				Match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropusermappingstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Auth_identContext auth_ident() {
			return GetRuleContext<Auth_identContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropusermappingstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropusermappingstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropusermappingstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropusermappingstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropusermappingstmtContext dropusermappingstmt() {
		DropusermappingstmtContext _localctx = new DropusermappingstmtContext(Context, State);
		EnterRule(_localctx, 374, RULE_dropusermappingstmt);
		try {
			State = 3801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3783;
				Match(DROP);
				State = 3784;
				Match(USER);
				State = 3785;
				Match(MAPPING);
				State = 3786;
				Match(FOR);
				State = 3787;
				auth_ident();
				State = 3788;
				Match(SERVER);
				State = 3789;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3791;
				Match(DROP);
				State = 3792;
				Match(USER);
				State = 3793;
				Match(MAPPING);
				State = 3794;
				Match(IF_P);
				State = 3795;
				Match(EXISTS);
				State = 3796;
				Match(FOR);
				State = 3797;
				auth_ident();
				State = 3798;
				Match(SERVER);
				State = 3799;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterusermappingstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Auth_identContext auth_ident() {
			return GetRuleContext<Auth_identContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		public AlterusermappingstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterusermappingstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterusermappingstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterusermappingstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterusermappingstmtContext alterusermappingstmt() {
		AlterusermappingstmtContext _localctx = new AlterusermappingstmtContext(Context, State);
		EnterRule(_localctx, 376, RULE_alterusermappingstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3803;
			Match(ALTER);
			State = 3804;
			Match(USER);
			State = 3805;
			Match(MAPPING);
			State = 3806;
			Match(FOR);
			State = 3807;
			auth_ident();
			State = 3808;
			Match(SERVER);
			State = 3809;
			name();
			State = 3810;
			alter_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatepolicystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() {
			return GetRuleContext<RowsecuritydefaultpermissiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() {
			return GetRuleContext<RowsecuritydefaultforcmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() {
			return GetRuleContext<RowsecuritydefaulttoroleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return GetRuleContext<RowsecurityoptionalexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return GetRuleContext<RowsecurityoptionalwithcheckContext>(0);
		}
		public CreatepolicystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createpolicystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatepolicystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatepolicystmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatepolicystmtContext createpolicystmt() {
		CreatepolicystmtContext _localctx = new CreatepolicystmtContext(Context, State);
		EnterRule(_localctx, 378, RULE_createpolicystmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3812;
			Match(CREATE);
			State = 3813;
			Match(POLICY);
			State = 3814;
			name();
			State = 3815;
			Match(ON);
			State = 3816;
			qualified_name();
			State = 3818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 3817;
				rowsecuritydefaultpermissive();
				}
			}

			State = 3821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3820;
				rowsecuritydefaultforcmd();
				}
			}

			State = 3824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO) {
				{
				State = 3823;
				rowsecuritydefaulttorole();
				}
			}

			State = 3827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 3826;
				rowsecurityoptionalexpr();
				}
			}

			State = 3830;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3829;
				rowsecurityoptionalwithcheck();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterpolicystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() {
			return GetRuleContext<RowsecurityoptionaltoroleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return GetRuleContext<RowsecurityoptionalexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return GetRuleContext<RowsecurityoptionalwithcheckContext>(0);
		}
		public AlterpolicystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterpolicystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterpolicystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterpolicystmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterpolicystmtContext alterpolicystmt() {
		AlterpolicystmtContext _localctx = new AlterpolicystmtContext(Context, State);
		EnterRule(_localctx, 380, RULE_alterpolicystmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3832;
			Match(ALTER);
			State = 3833;
			Match(POLICY);
			State = 3834;
			name();
			State = 3835;
			Match(ON);
			State = 3836;
			qualified_name();
			State = 3838;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO) {
				{
				State = 3837;
				rowsecurityoptionaltorole();
				}
			}

			State = 3841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 3840;
				rowsecurityoptionalexpr();
				}
			}

			State = 3844;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3843;
				rowsecurityoptionalwithcheck();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecurityoptionalexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecurityoptionalexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecurityoptionalexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecurityoptionalexpr(this);
		}
	}

	[RuleVersion(0)]
	public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
		RowsecurityoptionalexprContext _localctx = new RowsecurityoptionalexprContext(Context, State);
		EnterRule(_localctx, 382, RULE_rowsecurityoptionalexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3846;
			Match(USING);
			State = 3847;
			Match(OPEN_PAREN);
			State = 3848;
			a_expr();
			State = 3849;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecurityoptionalwithcheckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalwithcheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecurityoptionalwithcheck; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecurityoptionalwithcheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecurityoptionalwithcheck(this);
		}
	}

	[RuleVersion(0)]
	public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
		RowsecurityoptionalwithcheckContext _localctx = new RowsecurityoptionalwithcheckContext(Context, State);
		EnterRule(_localctx, 384, RULE_rowsecurityoptionalwithcheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3851;
			Match(WITH);
			State = 3852;
			Match(CHECK);
			State = 3853;
			Match(OPEN_PAREN);
			State = 3854;
			a_expr();
			State = 3855;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecuritydefaulttoroleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		public RowsecuritydefaulttoroleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecuritydefaulttorole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecuritydefaulttorole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecuritydefaulttorole(this);
		}
	}

	[RuleVersion(0)]
	public RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() {
		RowsecuritydefaulttoroleContext _localctx = new RowsecuritydefaulttoroleContext(Context, State);
		EnterRule(_localctx, 386, RULE_rowsecuritydefaulttorole);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3857;
			Match(TO);
			State = 3858;
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecurityoptionaltoroleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		public RowsecurityoptionaltoroleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecurityoptionaltorole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecurityoptionaltorole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecurityoptionaltorole(this);
		}
	}

	[RuleVersion(0)]
	public RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() {
		RowsecurityoptionaltoroleContext _localctx = new RowsecurityoptionaltoroleContext(Context, State);
		EnterRule(_localctx, 388, RULE_rowsecurityoptionaltorole);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3860;
			Match(TO);
			State = 3861;
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecuritydefaultpermissiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RowsecuritydefaultpermissiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecuritydefaultpermissive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecuritydefaultpermissive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecuritydefaultpermissive(this);
		}
	}

	[RuleVersion(0)]
	public RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() {
		RowsecuritydefaultpermissiveContext _localctx = new RowsecuritydefaultpermissiveContext(Context, State);
		EnterRule(_localctx, 390, RULE_rowsecuritydefaultpermissive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3863;
			Match(AS);
			State = 3864;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecuritydefaultforcmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_security_cmdContext row_security_cmd() {
			return GetRuleContext<Row_security_cmdContext>(0);
		}
		public RowsecuritydefaultforcmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecuritydefaultforcmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecuritydefaultforcmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecuritydefaultforcmd(this);
		}
	}

	[RuleVersion(0)]
	public RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() {
		RowsecuritydefaultforcmdContext _localctx = new RowsecuritydefaultforcmdContext(Context, State);
		EnterRule(_localctx, 392, RULE_rowsecuritydefaultforcmd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3866;
			Match(FOR);
			State = 3867;
			row_security_cmd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_security_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		public Row_security_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_security_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRow_security_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRow_security_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Row_security_cmdContext row_security_cmd() {
		Row_security_cmdContext _localctx = new Row_security_cmdContext(Context, State);
		EnterRule(_localctx, 394, RULE_row_security_cmd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3869;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateamstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(PostgreSQLParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Am_typeContext am_type() {
			return GetRuleContext<Am_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		public CreateamstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createamstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateamstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateamstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateamstmtContext createamstmt() {
		CreateamstmtContext _localctx = new CreateamstmtContext(Context, State);
		EnterRule(_localctx, 396, RULE_createamstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3871;
			Match(CREATE);
			State = 3872;
			Match(ACCESS);
			State = 3873;
			Match(METHOD);
			State = 3874;
			name();
			State = 3875;
			Match(TYPE_P);
			State = 3876;
			am_type();
			State = 3877;
			Match(HANDLER);
			State = 3878;
			handler_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Am_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		public Am_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_am_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAm_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAm_type(this);
		}
	}

	[RuleVersion(0)]
	public Am_typeContext am_type() {
		Am_typeContext _localctx = new Am_typeContext(Context, State);
		EnterRule(_localctx, 398, RULE_am_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3880;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatetrigstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggeractiontimeContext triggeractiontime() {
			return GetRuleContext<TriggeractiontimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggereventsContext triggerevents() {
			return GetRuleContext<TriggereventsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_or_procedureContext function_or_procedure() {
			return GetRuleContext<Function_or_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfuncargsContext triggerfuncargs() {
			return GetRuleContext<TriggerfuncargsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerreferencingContext triggerreferencing() {
			return GetRuleContext<TriggerreferencingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerforspecContext triggerforspec() {
			return GetRuleContext<TriggerforspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerwhenContext triggerwhen() {
			return GetRuleContext<TriggerwhenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(PostgreSQLParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptconstrfromtableContext optconstrfromtable() {
			return GetRuleContext<OptconstrfromtableContext>(0);
		}
		public CreatetrigstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createtrigstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatetrigstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatetrigstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatetrigstmtContext createtrigstmt() {
		CreatetrigstmtContext _localctx = new CreatetrigstmtContext(Context, State);
		EnterRule(_localctx, 400, RULE_createtrigstmt);
		int _la;
		try {
			State = 3930;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3882;
				Match(CREATE);
				State = 3883;
				Match(TRIGGER);
				State = 3884;
				name();
				State = 3885;
				triggeractiontime();
				State = 3886;
				triggerevents();
				State = 3887;
				Match(ON);
				State = 3888;
				qualified_name();
				State = 3890;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REFERENCING) {
					{
					State = 3889;
					triggerreferencing();
					}
				}

				State = 3893;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 3892;
					triggerforspec();
					}
				}

				State = 3896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHEN) {
					{
					State = 3895;
					triggerwhen();
					}
				}

				State = 3898;
				Match(EXECUTE);
				State = 3899;
				function_or_procedure();
				State = 3900;
				func_name();
				State = 3901;
				Match(OPEN_PAREN);
				State = 3902;
				triggerfuncargs();
				State = 3903;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3905;
				Match(CREATE);
				State = 3906;
				Match(CONSTRAINT);
				State = 3907;
				Match(TRIGGER);
				State = 3908;
				name();
				State = 3909;
				Match(AFTER);
				State = 3910;
				triggerevents();
				State = 3911;
				Match(ON);
				State = 3912;
				qualified_name();
				State = 3914;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 3913;
					optconstrfromtable();
					}
				}

				State = 3916;
				constraintattributespec();
				State = 3917;
				Match(FOR);
				State = 3918;
				Match(EACH);
				State = 3919;
				Match(ROW);
				State = 3921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHEN) {
					{
					State = 3920;
					triggerwhen();
					}
				}

				State = 3923;
				Match(EXECUTE);
				State = 3924;
				function_or_procedure();
				State = 3925;
				func_name();
				State = 3926;
				Match(OPEN_PAREN);
				State = 3927;
				triggerfuncargs();
				State = 3928;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggeractiontimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(PostgreSQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(PostgreSQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		public TriggeractiontimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggeractiontime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggeractiontime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggeractiontime(this);
		}
	}

	[RuleVersion(0)]
	public TriggeractiontimeContext triggeractiontime() {
		TriggeractiontimeContext _localctx = new TriggeractiontimeContext(Context, State);
		EnterRule(_localctx, 402, RULE_triggeractiontime);
		try {
			State = 3936;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3932;
				Match(BEFORE);
				}
				break;
			case AFTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3933;
				Match(AFTER);
				}
				break;
			case INSTEAD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3934;
				Match(INSTEAD);
				State = 3935;
				Match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggereventsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggeroneeventContext[] triggeroneevent() {
			return GetRuleContexts<TriggeroneeventContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggeroneeventContext triggeroneevent(int i) {
			return GetRuleContext<TriggeroneeventContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(PostgreSQLParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(PostgreSQLParser.OR, i);
		}
		public TriggereventsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerevents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerevents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerevents(this);
		}
	}

	[RuleVersion(0)]
	public TriggereventsContext triggerevents() {
		TriggereventsContext _localctx = new TriggereventsContext(Context, State);
		EnterRule(_localctx, 404, RULE_triggerevents);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3938;
			triggeroneevent();
			State = 3943;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 3939;
				Match(OR);
				State = 3940;
				triggeroneevent();
				}
				}
				State = 3945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggeroneeventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(PostgreSQLParser.TRUNCATE, 0); }
		public TriggeroneeventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggeroneevent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggeroneevent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggeroneevent(this);
		}
	}

	[RuleVersion(0)]
	public TriggeroneeventContext triggeroneevent() {
		TriggeroneeventContext _localctx = new TriggeroneeventContext(Context, State);
		EnterRule(_localctx, 406, RULE_triggeroneevent);
		try {
			State = 3953;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3946;
				Match(INSERT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3947;
				Match(DELETE_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3948;
				Match(UPDATE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3949;
				Match(UPDATE);
				State = 3950;
				Match(OF);
				State = 3951;
				columnlist();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3952;
				Match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerreferencingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCING() { return GetToken(PostgreSQLParser.REFERENCING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggertransitionsContext triggertransitions() {
			return GetRuleContext<TriggertransitionsContext>(0);
		}
		public TriggerreferencingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerreferencing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerreferencing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerreferencing(this);
		}
	}

	[RuleVersion(0)]
	public TriggerreferencingContext triggerreferencing() {
		TriggerreferencingContext _localctx = new TriggerreferencingContext(Context, State);
		EnterRule(_localctx, 408, RULE_triggerreferencing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3955;
			Match(REFERENCING);
			State = 3956;
			triggertransitions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggertransitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggertransitionContext[] triggertransition() {
			return GetRuleContexts<TriggertransitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggertransitionContext triggertransition(int i) {
			return GetRuleContext<TriggertransitionContext>(i);
		}
		public TriggertransitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggertransitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggertransitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggertransitions(this);
		}
	}

	[RuleVersion(0)]
	public TriggertransitionsContext triggertransitions() {
		TriggertransitionsContext _localctx = new TriggertransitionsContext(Context, State);
		EnterRule(_localctx, 410, RULE_triggertransitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3959;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3958;
				triggertransition();
				}
				}
				State = 3961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NEW || _la==OLD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggertransitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TransitionoldornewContext transitionoldornew() {
			return GetRuleContext<TransitionoldornewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionrowortableContext transitionrowortable() {
			return GetRuleContext<TransitionrowortableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionrelnameContext transitionrelname() {
			return GetRuleContext<TransitionrelnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_Context as_() {
			return GetRuleContext<As_Context>(0);
		}
		public TriggertransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggertransition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggertransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggertransition(this);
		}
	}

	[RuleVersion(0)]
	public TriggertransitionContext triggertransition() {
		TriggertransitionContext _localctx = new TriggertransitionContext(Context, State);
		EnterRule(_localctx, 412, RULE_triggertransition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3963;
			transitionoldornew();
			State = 3964;
			transitionrowortable();
			State = 3966;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 3965;
				as_();
				}
			}

			State = 3968;
			transitionrelname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionoldornewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(PostgreSQLParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD() { return GetToken(PostgreSQLParser.OLD, 0); }
		public TransitionoldornewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionoldornew; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransitionoldornew(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransitionoldornew(this);
		}
	}

	[RuleVersion(0)]
	public TransitionoldornewContext transitionoldornew() {
		TransitionoldornewContext _localctx = new TransitionoldornewContext(Context, State);
		EnterRule(_localctx, 414, RULE_transitionoldornew);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3970;
			_la = TokenStream.LA(1);
			if ( !(_la==NEW || _la==OLD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionrowortableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		public TransitionrowortableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionrowortable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransitionrowortable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransitionrowortable(this);
		}
	}

	[RuleVersion(0)]
	public TransitionrowortableContext transitionrowortable() {
		TransitionrowortableContext _localctx = new TransitionrowortableContext(Context, State);
		EnterRule(_localctx, 416, RULE_transitionrowortable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3972;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==ROW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionrelnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public TransitionrelnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionrelname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransitionrelname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransitionrelname(this);
		}
	}

	[RuleVersion(0)]
	public TransitionrelnameContext transitionrelname() {
		TransitionrelnameContext _localctx = new TransitionrelnameContext(Context, State);
		EnterRule(_localctx, 418, RULE_transitionrelname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3974;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerforspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfortypeContext triggerfortype() {
			return GetRuleContext<TriggerfortypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerforopteachContext triggerforopteach() {
			return GetRuleContext<TriggerforopteachContext>(0);
		}
		public TriggerforspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerforspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerforspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerforspec(this);
		}
	}

	[RuleVersion(0)]
	public TriggerforspecContext triggerforspec() {
		TriggerforspecContext _localctx = new TriggerforspecContext(Context, State);
		EnterRule(_localctx, 420, RULE_triggerforspec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3976;
			Match(FOR);
			State = 3978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EACH) {
				{
				State = 3977;
				triggerforopteach();
				}
			}

			State = 3980;
			triggerfortype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerforopteachContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(PostgreSQLParser.EACH, 0); }
		public TriggerforopteachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerforopteach; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerforopteach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerforopteach(this);
		}
	}

	[RuleVersion(0)]
	public TriggerforopteachContext triggerforopteach() {
		TriggerforopteachContext _localctx = new TriggerforopteachContext(Context, State);
		EnterRule(_localctx, 422, RULE_triggerforopteach);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3982;
			Match(EACH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerfortypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT() { return GetToken(PostgreSQLParser.STATEMENT, 0); }
		public TriggerfortypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerfortype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerfortype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerfortype(this);
		}
	}

	[RuleVersion(0)]
	public TriggerfortypeContext triggerfortype() {
		TriggerfortypeContext _localctx = new TriggerfortypeContext(Context, State);
		EnterRule(_localctx, 424, RULE_triggerfortype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3984;
			_la = TokenStream.LA(1);
			if ( !(_la==STATEMENT || _la==ROW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerwhenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TriggerwhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerwhen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerwhen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerwhen(this);
		}
	}

	[RuleVersion(0)]
	public TriggerwhenContext triggerwhen() {
		TriggerwhenContext _localctx = new TriggerwhenContext(Context, State);
		EnterRule(_localctx, 426, RULE_triggerwhen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3986;
			Match(WHEN);
			State = 3987;
			Match(OPEN_PAREN);
			State = 3988;
			a_expr();
			State = 3989;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_or_procedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		public Function_or_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_or_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunction_or_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunction_or_procedure(this);
		}
	}

	[RuleVersion(0)]
	public Function_or_procedureContext function_or_procedure() {
		Function_or_procedureContext _localctx = new Function_or_procedureContext(Context, State);
		EnterRule(_localctx, 428, RULE_function_or_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3991;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerfuncargsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfuncargContext[] triggerfuncarg() {
			return GetRuleContexts<TriggerfuncargContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfuncargContext triggerfuncarg(int i) {
			return GetRuleContext<TriggerfuncargContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public TriggerfuncargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerfuncargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerfuncargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerfuncargs(this);
		}
	}

	[RuleVersion(0)]
	public TriggerfuncargsContext triggerfuncargs() {
		TriggerfuncargsContext _localctx = new TriggerfuncargsContext(Context, State);
		EnterRule(_localctx, 430, RULE_triggerfuncargs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3995;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case INTO:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case EXIT:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				{
				State = 3993;
				triggerfuncarg();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3997;
				Match(COMMA);
				State = 3998;
				triggerfuncarg();
				}
				}
				State = 4003;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerfuncargContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext colLabel() {
			return GetRuleContext<ColLabelContext>(0);
		}
		public TriggerfuncargContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerfuncarg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerfuncarg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerfuncarg(this);
		}
	}

	[RuleVersion(0)]
	public TriggerfuncargContext triggerfuncarg() {
		TriggerfuncargContext _localctx = new TriggerfuncargContext(Context, State);
		EnterRule(_localctx, 432, RULE_triggerfuncarg);
		try {
			State = 4008;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4004;
				iconst();
				}
				break;
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4005;
				fconst();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4006;
				sconst();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case INTO:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case EXIT:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4007;
				colLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptconstrfromtableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public OptconstrfromtableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optconstrfromtable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptconstrfromtable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptconstrfromtable(this);
		}
	}

	[RuleVersion(0)]
	public OptconstrfromtableContext optconstrfromtable() {
		OptconstrfromtableContext _localctx = new OptconstrfromtableContext(Context, State);
		EnterRule(_localctx, 434, RULE_optconstrfromtable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4010;
			Match(FROM);
			State = 4011;
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintattributespecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributeElemContext[] constraintattributeElem() {
			return GetRuleContexts<ConstraintattributeElemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributeElemContext constraintattributeElem(int i) {
			return GetRuleContext<ConstraintattributeElemContext>(i);
		}
		public ConstraintattributespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintattributespec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintattributespec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintattributespec(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintattributespecContext constraintattributespec() {
		ConstraintattributespecContext _localctx = new ConstraintattributespecContext(Context, State);
		EnterRule(_localctx, 436, RULE_constraintattributespec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 8421377L) != 0) || _la==NO) {
				{
				{
				State = 4013;
				constraintattributeElem();
				}
				}
				State = 4018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintattributeElemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(PostgreSQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID() { return GetToken(PostgreSQLParser.VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		public ConstraintattributeElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintattributeElem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintattributeElem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintattributeElem(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintattributeElemContext constraintattributeElem() {
		ConstraintattributeElemContext _localctx = new ConstraintattributeElemContext(Context, State);
		EnterRule(_localctx, 438, RULE_constraintattributeElem);
		try {
			State = 4030;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,318,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4019;
				Match(NOT);
				State = 4020;
				Match(DEFERRABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4021;
				Match(DEFERRABLE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4022;
				Match(INITIALLY);
				State = 4023;
				Match(IMMEDIATE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4024;
				Match(INITIALLY);
				State = 4025;
				Match(DEFERRED);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4026;
				Match(NOT);
				State = 4027;
				Match(VALID);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4028;
				Match(NO);
				State = 4029;
				Match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateeventtrigstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext colLabel() {
			return GetRuleContext<ColLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_or_procedureContext function_or_procedure() {
			return GetRuleContext<Function_or_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_when_listContext event_trigger_when_list() {
			return GetRuleContext<Event_trigger_when_listContext>(0);
		}
		public CreateeventtrigstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createeventtrigstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateeventtrigstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateeventtrigstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateeventtrigstmtContext createeventtrigstmt() {
		CreateeventtrigstmtContext _localctx = new CreateeventtrigstmtContext(Context, State);
		EnterRule(_localctx, 440, RULE_createeventtrigstmt);
		try {
			State = 4058;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,319,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4032;
				Match(CREATE);
				State = 4033;
				Match(EVENT);
				State = 4034;
				Match(TRIGGER);
				State = 4035;
				name();
				State = 4036;
				Match(ON);
				State = 4037;
				colLabel();
				State = 4038;
				Match(EXECUTE);
				State = 4039;
				function_or_procedure();
				State = 4040;
				func_name();
				State = 4041;
				Match(OPEN_PAREN);
				State = 4042;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4044;
				Match(CREATE);
				State = 4045;
				Match(EVENT);
				State = 4046;
				Match(TRIGGER);
				State = 4047;
				name();
				State = 4048;
				Match(ON);
				State = 4049;
				colLabel();
				State = 4050;
				Match(WHEN);
				State = 4051;
				event_trigger_when_list();
				State = 4052;
				Match(EXECUTE);
				State = 4053;
				function_or_procedure();
				State = 4054;
				func_name();
				State = 4055;
				Match(OPEN_PAREN);
				State = 4056;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_trigger_when_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_when_itemContext[] event_trigger_when_item() {
			return GetRuleContexts<Event_trigger_when_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_when_itemContext event_trigger_when_item(int i) {
			return GetRuleContext<Event_trigger_when_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(PostgreSQLParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(PostgreSQLParser.AND, i);
		}
		public Event_trigger_when_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_trigger_when_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent_trigger_when_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent_trigger_when_list(this);
		}
	}

	[RuleVersion(0)]
	public Event_trigger_when_listContext event_trigger_when_list() {
		Event_trigger_when_listContext _localctx = new Event_trigger_when_listContext(Context, State);
		EnterRule(_localctx, 442, RULE_event_trigger_when_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4060;
			event_trigger_when_item();
			State = 4065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 4061;
				Match(AND);
				State = 4062;
				event_trigger_when_item();
				}
				}
				State = 4067;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_trigger_when_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_value_listContext event_trigger_value_list() {
			return GetRuleContext<Event_trigger_value_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Event_trigger_when_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_trigger_when_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent_trigger_when_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent_trigger_when_item(this);
		}
	}

	[RuleVersion(0)]
	public Event_trigger_when_itemContext event_trigger_when_item() {
		Event_trigger_when_itemContext _localctx = new Event_trigger_when_itemContext(Context, State);
		EnterRule(_localctx, 444, RULE_event_trigger_when_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4068;
			colid();
			State = 4069;
			Match(IN_P);
			State = 4070;
			Match(OPEN_PAREN);
			State = 4071;
			event_trigger_value_list();
			State = 4072;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_trigger_value_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Event_trigger_value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_trigger_value_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent_trigger_value_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent_trigger_value_list(this);
		}
	}

	[RuleVersion(0)]
	public Event_trigger_value_listContext event_trigger_value_list() {
		Event_trigger_value_listContext _localctx = new Event_trigger_value_listContext(Context, State);
		EnterRule(_localctx, 446, RULE_event_trigger_value_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4074;
			sconst();
			State = 4079;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4075;
				Match(COMMA);
				State = 4076;
				sconst();
				}
				}
				State = 4081;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltereventtrigstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enable_triggerContext enable_trigger() {
			return GetRuleContext<Enable_triggerContext>(0);
		}
		public AltereventtrigstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altereventtrigstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltereventtrigstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltereventtrigstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltereventtrigstmtContext altereventtrigstmt() {
		AltereventtrigstmtContext _localctx = new AltereventtrigstmtContext(Context, State);
		EnterRule(_localctx, 448, RULE_altereventtrigstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4082;
			Match(ALTER);
			State = 4083;
			Match(EVENT);
			State = 4084;
			Match(TRIGGER);
			State = 4085;
			name();
			State = 4086;
			enable_trigger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_triggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(PostgreSQLParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		public Enable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEnable_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEnable_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Enable_triggerContext enable_trigger() {
		Enable_triggerContext _localctx = new Enable_triggerContext(Context, State);
		EnterRule(_localctx, 450, RULE_enable_trigger);
		try {
			State = 4094;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,322,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4088;
				Match(ENABLE_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4089;
				Match(ENABLE_P);
				State = 4090;
				Match(REPLICA);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4091;
				Match(ENABLE_P);
				State = 4092;
				Match(ALWAYS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4093;
				Match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateassertionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERTION() { return GetToken(PostgreSQLParser.ASSERTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		public CreateassertionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createassertionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateassertionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateassertionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateassertionstmtContext createassertionstmt() {
		CreateassertionstmtContext _localctx = new CreateassertionstmtContext(Context, State);
		EnterRule(_localctx, 452, RULE_createassertionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4096;
			Match(CREATE);
			State = 4097;
			Match(ASSERTION);
			State = 4098;
			any_name();
			State = 4099;
			Match(CHECK);
			State = 4100;
			Match(OPEN_PAREN);
			State = 4101;
			a_expr();
			State = 4102;
			Match(CLOSE_PAREN);
			State = 4103;
			constraintattributespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argsContext aggr_args() {
			return GetRuleContext<Aggr_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_replace_Context or_replace_() {
			return GetRuleContext<Or_replace_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_definitionContext old_aggr_definition() {
			return GetRuleContext<Old_aggr_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttablefuncelementlistContext opttablefuncelementlist() {
			return GetRuleContext<OpttablefuncelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_P() { return GetToken(PostgreSQLParser.ENUM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_val_list_Context enum_val_list_() {
			return GetRuleContext<Enum_val_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PostgreSQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		public DefinestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefinestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefinestmt(this);
		}
	}

	[RuleVersion(0)]
	public DefinestmtContext definestmt() {
		DefinestmtContext _localctx = new DefinestmtContext(Context, State);
		EnterRule(_localctx, 454, RULE_definestmt);
		int _la;
		try {
			State = 4219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,327,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4105;
				Match(CREATE);
				State = 4107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 4106;
					or_replace_();
					}
				}

				State = 4109;
				Match(AGGREGATE);
				State = 4110;
				func_name();
				State = 4111;
				aggr_args();
				State = 4112;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4114;
				Match(CREATE);
				State = 4116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 4115;
					or_replace_();
					}
				}

				State = 4118;
				Match(AGGREGATE);
				State = 4119;
				func_name();
				State = 4120;
				old_aggr_definition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4122;
				Match(CREATE);
				State = 4123;
				Match(OPERATOR);
				State = 4124;
				any_operator();
				State = 4125;
				definition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4127;
				Match(CREATE);
				State = 4128;
				Match(TYPE_P);
				State = 4129;
				any_name();
				State = 4130;
				definition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4132;
				Match(CREATE);
				State = 4133;
				Match(TYPE_P);
				State = 4134;
				any_name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4135;
				Match(CREATE);
				State = 4136;
				Match(TYPE_P);
				State = 4137;
				any_name();
				State = 4138;
				Match(AS);
				State = 4139;
				Match(OPEN_PAREN);
				State = 4141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 4140;
					opttablefuncelementlist();
					}
				}

				State = 4143;
				Match(CLOSE_PAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4145;
				Match(CREATE);
				State = 4146;
				Match(TYPE_P);
				State = 4147;
				any_name();
				State = 4148;
				Match(AS);
				State = 4149;
				Match(ENUM_P);
				State = 4150;
				Match(OPEN_PAREN);
				State = 4152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 563)) & ~0x3f) == 0 && ((1L << (_la - 563)) & 134217749L) != 0)) {
					{
					State = 4151;
					enum_val_list_();
					}
				}

				State = 4154;
				Match(CLOSE_PAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4156;
				Match(CREATE);
				State = 4157;
				Match(TYPE_P);
				State = 4158;
				any_name();
				State = 4159;
				Match(AS);
				State = 4160;
				Match(RANGE);
				State = 4161;
				definition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4163;
				Match(CREATE);
				State = 4164;
				Match(TEXT_P);
				State = 4165;
				Match(SEARCH);
				State = 4166;
				Match(PARSER);
				State = 4167;
				any_name();
				State = 4168;
				definition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4170;
				Match(CREATE);
				State = 4171;
				Match(TEXT_P);
				State = 4172;
				Match(SEARCH);
				State = 4173;
				Match(DICTIONARY);
				State = 4174;
				any_name();
				State = 4175;
				definition();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4177;
				Match(CREATE);
				State = 4178;
				Match(TEXT_P);
				State = 4179;
				Match(SEARCH);
				State = 4180;
				Match(TEMPLATE);
				State = 4181;
				any_name();
				State = 4182;
				definition();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4184;
				Match(CREATE);
				State = 4185;
				Match(TEXT_P);
				State = 4186;
				Match(SEARCH);
				State = 4187;
				Match(CONFIGURATION);
				State = 4188;
				any_name();
				State = 4189;
				definition();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4191;
				Match(CREATE);
				State = 4192;
				Match(COLLATION);
				State = 4193;
				any_name();
				State = 4194;
				definition();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4196;
				Match(CREATE);
				State = 4197;
				Match(COLLATION);
				State = 4198;
				Match(IF_P);
				State = 4199;
				Match(NOT);
				State = 4200;
				Match(EXISTS);
				State = 4201;
				any_name();
				State = 4202;
				definition();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4204;
				Match(CREATE);
				State = 4205;
				Match(COLLATION);
				State = 4206;
				any_name();
				State = 4207;
				Match(FROM);
				State = 4208;
				any_name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4210;
				Match(CREATE);
				State = 4211;
				Match(COLLATION);
				State = 4212;
				Match(IF_P);
				State = 4213;
				Match(NOT);
				State = 4214;
				Match(EXISTS);
				State = 4215;
				any_name();
				State = 4216;
				Match(FROM);
				State = 4217;
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_listContext def_list() {
			return GetRuleContext<Def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 456, RULE_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4221;
			Match(OPEN_PAREN);
			State = 4222;
			def_list();
			State = 4223;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Def_elemContext[] def_elem() {
			return GetRuleContexts<Def_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Def_elemContext def_elem(int i) {
			return GetRuleContext<Def_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDef_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDef_list(this);
		}
	}

	[RuleVersion(0)]
	public Def_listContext def_list() {
		Def_listContext _localctx = new Def_listContext(Context, State);
		EnterRule(_localctx, 458, RULE_def_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4225;
			def_elem();
			State = 4230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4226;
				Match(COMMA);
				State = 4227;
				def_elem();
				}
				}
				State = 4232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext colLabel() {
			return GetRuleContext<ColLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_argContext def_arg() {
			return GetRuleContext<Def_argContext>(0);
		}
		public Def_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDef_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDef_elem(this);
		}
	}

	[RuleVersion(0)]
	public Def_elemContext def_elem() {
		Def_elemContext _localctx = new Def_elemContext(Context, State);
		EnterRule(_localctx, 460, RULE_def_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4233;
			colLabel();
			State = 4236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 4234;
				Match(EQUAL);
				State = 4235;
				def_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_all_opContext qual_all_op() {
			return GetRuleContext<Qual_all_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		public Def_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDef_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDef_arg(this);
		}
	}

	[RuleVersion(0)]
	public Def_argContext def_arg() {
		Def_argContext _localctx = new Def_argContext(Context, State);
		EnterRule(_localctx, 462, RULE_def_arg);
		try {
			State = 4244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,330,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4238;
				func_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4239;
				reserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4240;
				qual_all_op();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4241;
				numericonly();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4242;
				sconst();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4243;
				Match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Old_aggr_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_listContext old_aggr_list() {
			return GetRuleContext<Old_aggr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Old_aggr_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_old_aggr_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOld_aggr_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOld_aggr_definition(this);
		}
	}

	[RuleVersion(0)]
	public Old_aggr_definitionContext old_aggr_definition() {
		Old_aggr_definitionContext _localctx = new Old_aggr_definitionContext(Context, State);
		EnterRule(_localctx, 464, RULE_old_aggr_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4246;
			Match(OPEN_PAREN);
			State = 4247;
			old_aggr_list();
			State = 4248;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Old_aggr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_elemContext[] old_aggr_elem() {
			return GetRuleContexts<Old_aggr_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_elemContext old_aggr_elem(int i) {
			return GetRuleContext<Old_aggr_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Old_aggr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_old_aggr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOld_aggr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOld_aggr_list(this);
		}
	}

	[RuleVersion(0)]
	public Old_aggr_listContext old_aggr_list() {
		Old_aggr_listContext _localctx = new Old_aggr_listContext(Context, State);
		EnterRule(_localctx, 466, RULE_old_aggr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4250;
			old_aggr_elem();
			State = 4255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4251;
				Match(COMMA);
				State = 4252;
				old_aggr_elem();
				}
				}
				State = 4257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Old_aggr_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_argContext def_arg() {
			return GetRuleContext<Def_argContext>(0);
		}
		public Old_aggr_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_old_aggr_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOld_aggr_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOld_aggr_elem(this);
		}
	}

	[RuleVersion(0)]
	public Old_aggr_elemContext old_aggr_elem() {
		Old_aggr_elemContext _localctx = new Old_aggr_elemContext(Context, State);
		EnterRule(_localctx, 468, RULE_old_aggr_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4258;
			identifier();
			State = 4259;
			Match(EQUAL);
			State = 4260;
			def_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_val_list_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_val_listContext enum_val_list() {
			return GetRuleContext<Enum_val_listContext>(0);
		}
		public Enum_val_list_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_val_list_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEnum_val_list_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEnum_val_list_(this);
		}
	}

	[RuleVersion(0)]
	public Enum_val_list_Context enum_val_list_() {
		Enum_val_list_Context _localctx = new Enum_val_list_Context(Context, State);
		EnterRule(_localctx, 470, RULE_enum_val_list_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4262;
			enum_val_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_val_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Enum_val_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_val_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEnum_val_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEnum_val_list(this);
		}
	}

	[RuleVersion(0)]
	public Enum_val_listContext enum_val_list() {
		Enum_val_listContext _localctx = new Enum_val_listContext(Context, State);
		EnterRule(_localctx, 472, RULE_enum_val_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4264;
			sconst();
			State = 4269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4265;
				Match(COMMA);
				State = 4266;
				sconst();
				}
				}
				State = 4271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterenumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_not_exists_Context if_not_exists_() {
			return GetRuleContext<If_not_exists_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(PostgreSQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(PostgreSQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public AlterenumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterenumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterenumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterenumstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterenumstmtContext alterenumstmt() {
		AlterenumstmtContext _localctx = new AlterenumstmtContext(Context, State);
		EnterRule(_localctx, 474, RULE_alterenumstmt);
		int _la;
		try {
			State = 4315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,336,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4272;
				Match(ALTER);
				State = 4273;
				Match(TYPE_P);
				State = 4274;
				any_name();
				State = 4275;
				Match(ADD_P);
				State = 4276;
				Match(VALUE_P);
				State = 4278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF_P) {
					{
					State = 4277;
					if_not_exists_();
					}
				}

				State = 4280;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4282;
				Match(ALTER);
				State = 4283;
				Match(TYPE_P);
				State = 4284;
				any_name();
				State = 4285;
				Match(ADD_P);
				State = 4286;
				Match(VALUE_P);
				State = 4288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF_P) {
					{
					State = 4287;
					if_not_exists_();
					}
				}

				State = 4290;
				sconst();
				State = 4291;
				Match(BEFORE);
				State = 4292;
				sconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4294;
				Match(ALTER);
				State = 4295;
				Match(TYPE_P);
				State = 4296;
				any_name();
				State = 4297;
				Match(ADD_P);
				State = 4298;
				Match(VALUE_P);
				State = 4300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF_P) {
					{
					State = 4299;
					if_not_exists_();
					}
				}

				State = 4302;
				sconst();
				State = 4303;
				Match(AFTER);
				State = 4304;
				sconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4306;
				Match(ALTER);
				State = 4307;
				Match(TYPE_P);
				State = 4308;
				any_name();
				State = 4309;
				Match(RENAME);
				State = 4310;
				Match(VALUE_P);
				State = 4311;
				sconst();
				State = 4312;
				Match(TO);
				State = 4313;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_not_exists_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public If_not_exists_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_not_exists_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIf_not_exists_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIf_not_exists_(this);
		}
	}

	[RuleVersion(0)]
	public If_not_exists_Context if_not_exists_() {
		If_not_exists_Context _localctx = new If_not_exists_Context(Context, State);
		EnterRule(_localctx, 476, RULE_if_not_exists_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4317;
			Match(IF_P);
			State = 4318;
			Match(NOT);
			State = 4319;
			Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateopclassstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_item_listContext opclass_item_list() {
			return GetRuleContext<Opclass_item_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_Context default_() {
			return GetRuleContext<Default_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opfamily_Context opfamily_() {
			return GetRuleContext<Opfamily_Context>(0);
		}
		public CreateopclassstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createopclassstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateopclassstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateopclassstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateopclassstmtContext createopclassstmt() {
		CreateopclassstmtContext _localctx = new CreateopclassstmtContext(Context, State);
		EnterRule(_localctx, 478, RULE_createopclassstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4321;
			Match(CREATE);
			State = 4322;
			Match(OPERATOR);
			State = 4323;
			Match(CLASS);
			State = 4324;
			any_name();
			State = 4326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 4325;
				default_();
				}
			}

			State = 4328;
			Match(FOR);
			State = 4329;
			Match(TYPE_P);
			State = 4330;
			typename();
			State = 4331;
			Match(USING);
			State = 4332;
			name();
			State = 4334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FAMILY) {
				{
				State = 4333;
				opfamily_();
				}
			}

			State = 4336;
			Match(AS);
			State = 4337;
			opclass_item_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_item_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_itemContext[] opclass_item() {
			return GetRuleContexts<Opclass_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_itemContext opclass_item(int i) {
			return GetRuleContext<Opclass_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opclass_item_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_item_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_item_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_item_list(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_item_listContext opclass_item_list() {
		Opclass_item_listContext _localctx = new Opclass_item_listContext(Context, State);
		EnterRule(_localctx, 480, RULE_opclass_item_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4339;
			opclass_item();
			State = 4344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4340;
				Match(COMMA);
				State = 4341;
				opclass_item();
				}
				}
				State = 4346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_purposeContext opclass_purpose() {
			return GetRuleContext<Opclass_purposeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recheck_Context recheck_() {
			return GetRuleContext<Recheck_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public Opclass_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_item(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_itemContext opclass_item() {
		Opclass_itemContext _localctx = new Opclass_itemContext(Context, State);
		EnterRule(_localctx, 482, RULE_opclass_item);
		int _la;
		try {
			State = 4378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4347;
				Match(OPERATOR);
				State = 4348;
				iconst();
				State = 4349;
				any_operator();
				State = 4351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4350;
					opclass_purpose();
					}
				}

				State = 4354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RECHECK) {
					{
					State = 4353;
					recheck_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4356;
				Match(OPERATOR);
				State = 4357;
				iconst();
				State = 4358;
				operator_with_argtypes();
				State = 4360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4359;
					opclass_purpose();
					}
				}

				State = 4363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RECHECK) {
					{
					State = 4362;
					recheck_();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4365;
				Match(FUNCTION);
				State = 4366;
				iconst();
				State = 4367;
				function_with_argtypes();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4369;
				Match(FUNCTION);
				State = 4370;
				iconst();
				State = 4371;
				Match(OPEN_PAREN);
				State = 4372;
				type_list();
				State = 4373;
				Match(CLOSE_PAREN);
				State = 4374;
				function_with_argtypes();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4376;
				Match(STORAGE);
				State = 4377;
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Default_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefault_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefault_(this);
		}
	}

	[RuleVersion(0)]
	public Default_Context default_() {
		Default_Context _localctx = new Default_Context(Context, State);
		EnterRule(_localctx, 484, RULE_default_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4380;
			Match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opfamily_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opfamily_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opfamily_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpfamily_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpfamily_(this);
		}
	}

	[RuleVersion(0)]
	public Opfamily_Context opfamily_() {
		Opfamily_Context _localctx = new Opfamily_Context(Context, State);
		EnterRule(_localctx, 486, RULE_opfamily_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4382;
			Match(FAMILY);
			State = 4383;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_purposeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opclass_purposeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_purpose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_purpose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_purpose(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_purposeContext opclass_purpose() {
		Opclass_purposeContext _localctx = new Opclass_purposeContext(Context, State);
		EnterRule(_localctx, 488, RULE_opclass_purpose);
		try {
			State = 4391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,345,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4385;
				Match(FOR);
				State = 4386;
				Match(SEARCH);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4387;
				Match(FOR);
				State = 4388;
				Match(ORDER);
				State = 4389;
				Match(BY);
				State = 4390;
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recheck_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECHECK() { return GetToken(PostgreSQLParser.RECHECK, 0); }
		public Recheck_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recheck_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRecheck_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRecheck_(this);
		}
	}

	[RuleVersion(0)]
	public Recheck_Context recheck_() {
		Recheck_Context _localctx = new Recheck_Context(Context, State);
		EnterRule(_localctx, 490, RULE_recheck_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4393;
			Match(RECHECK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateopfamilystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public CreateopfamilystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createopfamilystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateopfamilystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateopfamilystmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateopfamilystmtContext createopfamilystmt() {
		CreateopfamilystmtContext _localctx = new CreateopfamilystmtContext(Context, State);
		EnterRule(_localctx, 492, RULE_createopfamilystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4395;
			Match(CREATE);
			State = 4396;
			Match(OPERATOR);
			State = 4397;
			Match(FAMILY);
			State = 4398;
			any_name();
			State = 4399;
			Match(USING);
			State = 4400;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlteropfamilystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_item_listContext opclass_item_list() {
			return GetRuleContext<Opclass_item_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_drop_listContext opclass_drop_list() {
			return GetRuleContext<Opclass_drop_listContext>(0);
		}
		public AlteropfamilystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteropfamilystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteropfamilystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteropfamilystmt(this);
		}
	}

	[RuleVersion(0)]
	public AlteropfamilystmtContext alteropfamilystmt() {
		AlteropfamilystmtContext _localctx = new AlteropfamilystmtContext(Context, State);
		EnterRule(_localctx, 494, RULE_alteropfamilystmt);
		try {
			State = 4420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4402;
				Match(ALTER);
				State = 4403;
				Match(OPERATOR);
				State = 4404;
				Match(FAMILY);
				State = 4405;
				any_name();
				State = 4406;
				Match(USING);
				State = 4407;
				name();
				State = 4408;
				Match(ADD_P);
				State = 4409;
				opclass_item_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4411;
				Match(ALTER);
				State = 4412;
				Match(OPERATOR);
				State = 4413;
				Match(FAMILY);
				State = 4414;
				any_name();
				State = 4415;
				Match(USING);
				State = 4416;
				name();
				State = 4417;
				Match(DROP);
				State = 4418;
				opclass_drop_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_drop_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_dropContext[] opclass_drop() {
			return GetRuleContexts<Opclass_dropContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_dropContext opclass_drop(int i) {
			return GetRuleContext<Opclass_dropContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opclass_drop_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_drop_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_drop_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_drop_list(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_drop_listContext opclass_drop_list() {
		Opclass_drop_listContext _localctx = new Opclass_drop_listContext(Context, State);
		EnterRule(_localctx, 496, RULE_opclass_drop_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4422;
			opclass_drop();
			State = 4427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4423;
				Match(COMMA);
				State = 4424;
				opclass_drop();
				}
				}
				State = 4429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_dropContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		public Opclass_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_drop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_drop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_drop(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_dropContext opclass_drop() {
		Opclass_dropContext _localctx = new Opclass_dropContext(Context, State);
		EnterRule(_localctx, 498, RULE_opclass_drop);
		try {
			State = 4442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPERATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4430;
				Match(OPERATOR);
				State = 4431;
				iconst();
				State = 4432;
				Match(OPEN_PAREN);
				State = 4433;
				type_list();
				State = 4434;
				Match(CLOSE_PAREN);
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4436;
				Match(FUNCTION);
				State = 4437;
				iconst();
				State = 4438;
				Match(OPEN_PAREN);
				State = 4439;
				type_list();
				State = 4440;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropopclassstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropopclassstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropopclassstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropopclassstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropopclassstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropopclassstmtContext dropopclassstmt() {
		DropopclassstmtContext _localctx = new DropopclassstmtContext(Context, State);
		EnterRule(_localctx, 500, RULE_dropopclassstmt);
		int _la;
		try {
			State = 4464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,351,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4444;
				Match(DROP);
				State = 4445;
				Match(OPERATOR);
				State = 4446;
				Match(CLASS);
				State = 4447;
				any_name();
				State = 4448;
				Match(USING);
				State = 4449;
				name();
				State = 4451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4450;
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4453;
				Match(DROP);
				State = 4454;
				Match(OPERATOR);
				State = 4455;
				Match(CLASS);
				State = 4456;
				Match(IF_P);
				State = 4457;
				Match(EXISTS);
				State = 4458;
				any_name();
				State = 4459;
				Match(USING);
				State = 4460;
				name();
				State = 4462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4461;
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropopfamilystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropopfamilystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropopfamilystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropopfamilystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropopfamilystmt(this);
		}
	}

	[RuleVersion(0)]
	public DropopfamilystmtContext dropopfamilystmt() {
		DropopfamilystmtContext _localctx = new DropopfamilystmtContext(Context, State);
		EnterRule(_localctx, 502, RULE_dropopfamilystmt);
		int _la;
		try {
			State = 4486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,354,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4466;
				Match(DROP);
				State = 4467;
				Match(OPERATOR);
				State = 4468;
				Match(FAMILY);
				State = 4469;
				any_name();
				State = 4470;
				Match(USING);
				State = 4471;
				name();
				State = 4473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4472;
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4475;
				Match(DROP);
				State = 4476;
				Match(OPERATOR);
				State = 4477;
				Match(FAMILY);
				State = 4478;
				Match(IF_P);
				State = 4479;
				Match(EXISTS);
				State = 4480;
				any_name();
				State = 4481;
				Match(USING);
				State = 4482;
				name();
				State = 4484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4483;
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropownedstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		public DropownedstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropownedstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropownedstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropownedstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropownedstmtContext dropownedstmt() {
		DropownedstmtContext _localctx = new DropownedstmtContext(Context, State);
		EnterRule(_localctx, 504, RULE_dropownedstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4488;
			Match(DROP);
			State = 4489;
			Match(OWNED);
			State = 4490;
			Match(BY);
			State = 4491;
			role_list();
			State = 4493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 4492;
				drop_behavior_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReassignownedstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASSIGN() { return GetToken(PostgreSQLParser.REASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public ReassignownedstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reassignownedstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReassignownedstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReassignownedstmt(this);
		}
	}

	[RuleVersion(0)]
	public ReassignownedstmtContext reassignownedstmt() {
		ReassignownedstmtContext _localctx = new ReassignownedstmtContext(Context, State);
		EnterRule(_localctx, 506, RULE_reassignownedstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4495;
			Match(REASSIGN);
			State = 4496;
			Match(OWNED);
			State = 4497;
			Match(BY);
			State = 4498;
			role_list();
			State = 4499;
			Match(TO);
			State = 4500;
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_list_Context any_name_list_() {
			return GetRuleContext<Any_name_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_type_nameContext drop_type_name() {
			return GetRuleContext<Drop_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return GetRuleContext<Object_type_name_on_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_listContext type_name_list() {
			return GetRuleContext<Type_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public DropstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropstmtContext dropstmt() {
		DropstmtContext _localctx = new DropstmtContext(Context, State);
		EnterRule(_localctx, 508, RULE_dropstmt);
		int _la;
		try {
			State = 4592;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4502;
				Match(DROP);
				State = 4503;
				object_type_any_name();
				State = 4504;
				Match(IF_P);
				State = 4505;
				Match(EXISTS);
				State = 4506;
				any_name_list_();
				State = 4508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4507;
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4510;
				Match(DROP);
				State = 4511;
				object_type_any_name();
				State = 4512;
				any_name_list_();
				State = 4514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4513;
					drop_behavior_();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4516;
				Match(DROP);
				State = 4517;
				drop_type_name();
				State = 4518;
				Match(IF_P);
				State = 4519;
				Match(EXISTS);
				State = 4520;
				name_list();
				State = 4522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4521;
					drop_behavior_();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4524;
				Match(DROP);
				State = 4525;
				drop_type_name();
				State = 4526;
				name_list();
				State = 4528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4527;
					drop_behavior_();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4530;
				Match(DROP);
				State = 4531;
				object_type_name_on_any_name();
				State = 4532;
				name();
				State = 4533;
				Match(ON);
				State = 4534;
				any_name();
				State = 4536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4535;
					drop_behavior_();
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4538;
				Match(DROP);
				State = 4539;
				object_type_name_on_any_name();
				State = 4540;
				Match(IF_P);
				State = 4541;
				Match(EXISTS);
				State = 4542;
				name();
				State = 4543;
				Match(ON);
				State = 4544;
				any_name();
				State = 4546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4545;
					drop_behavior_();
					}
				}

				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4548;
				Match(DROP);
				State = 4549;
				Match(TYPE_P);
				State = 4550;
				type_name_list();
				State = 4552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4551;
					drop_behavior_();
					}
				}

				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4554;
				Match(DROP);
				State = 4555;
				Match(TYPE_P);
				State = 4556;
				Match(IF_P);
				State = 4557;
				Match(EXISTS);
				State = 4558;
				type_name_list();
				State = 4560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4559;
					drop_behavior_();
					}
				}

				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4562;
				Match(DROP);
				State = 4563;
				Match(DOMAIN_P);
				State = 4564;
				type_name_list();
				State = 4566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4565;
					drop_behavior_();
					}
				}

				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4568;
				Match(DROP);
				State = 4569;
				Match(DOMAIN_P);
				State = 4570;
				Match(IF_P);
				State = 4571;
				Match(EXISTS);
				State = 4572;
				type_name_list();
				State = 4574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4573;
					drop_behavior_();
					}
				}

				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4576;
				Match(DROP);
				State = 4577;
				Match(INDEX);
				State = 4578;
				Match(CONCURRENTLY);
				State = 4579;
				any_name_list_();
				State = 4581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4580;
					drop_behavior_();
					}
				}

				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4583;
				Match(DROP);
				State = 4584;
				Match(INDEX);
				State = 4585;
				Match(CONCURRENTLY);
				State = 4586;
				Match(IF_P);
				State = 4587;
				Match(EXISTS);
				State = 4588;
				any_name_list_();
				State = 4590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 4589;
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		public Object_type_any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterObject_type_any_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitObject_type_any_name(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_any_nameContext object_type_any_name() {
		Object_type_any_nameContext _localctx = new Object_type_any_nameContext(Context, State);
		EnterRule(_localctx, 510, RULE_object_type_any_name);
		try {
			State = 4617;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4594;
				Match(TABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4595;
				Match(SEQUENCE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4596;
				Match(VIEW);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4597;
				Match(MATERIALIZED);
				State = 4598;
				Match(VIEW);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4599;
				Match(INDEX);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4600;
				Match(FOREIGN);
				State = 4601;
				Match(TABLE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4602;
				Match(COLLATION);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4603;
				Match(CONVERSION_P);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4604;
				Match(STATISTICS);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4605;
				Match(TEXT_P);
				State = 4606;
				Match(SEARCH);
				State = 4607;
				Match(PARSER);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4608;
				Match(TEXT_P);
				State = 4609;
				Match(SEARCH);
				State = 4610;
				Match(DICTIONARY);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4611;
				Match(TEXT_P);
				State = 4612;
				Match(SEARCH);
				State = 4613;
				Match(TEMPLATE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4614;
				Match(TEXT_P);
				State = 4615;
				Match(SEARCH);
				State = 4616;
				Match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Drop_type_nameContext drop_type_name() {
			return GetRuleContext<Drop_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		public Object_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterObject_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitObject_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_nameContext object_type_name() {
		Object_type_nameContext _localctx = new Object_type_nameContext(Context, State);
		EnterRule(_localctx, 512, RULE_object_type_name);
		try {
			State = 4624;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOREIGN:
			case ACCESS:
			case EVENT:
			case EXTENSION:
			case LANGUAGE:
			case PROCEDURAL:
			case SCHEMA:
			case SERVER:
			case PUBLICATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4619;
				drop_type_name();
				}
				break;
			case DATABASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4620;
				Match(DATABASE);
				}
				break;
			case ROLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4621;
				Match(ROLE);
				}
				break;
			case SUBSCRIPTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4622;
				Match(SUBSCRIPTION);
				}
				break;
			case TABLESPACE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4623;
				Match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(PostgreSQLParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedural_Context procedural_() {
			return GetRuleContext<Procedural_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		public Drop_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDrop_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDrop_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Drop_type_nameContext drop_type_name() {
		Drop_type_nameContext _localctx = new Drop_type_nameContext(Context, State);
		EnterRule(_localctx, 514, RULE_drop_type_name);
		int _la;
		try {
			State = 4641;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4626;
				Match(ACCESS);
				State = 4627;
				Match(METHOD);
				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4628;
				Match(EVENT);
				State = 4629;
				Match(TRIGGER);
				}
				break;
			case EXTENSION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4630;
				Match(EXTENSION);
				}
				break;
			case FOREIGN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4631;
				Match(FOREIGN);
				State = 4632;
				Match(DATA_P);
				State = 4633;
				Match(WRAPPER);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PROCEDURAL) {
					{
					State = 4634;
					procedural_();
					}
				}

				State = 4637;
				Match(LANGUAGE);
				}
				break;
			case PUBLICATION:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4638;
				Match(PUBLICATION);
				}
				break;
			case SCHEMA:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4639;
				Match(SCHEMA);
				}
				break;
			case SERVER:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4640;
				Match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_name_on_any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		public Object_type_name_on_any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_name_on_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterObject_type_name_on_any_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitObject_type_name_on_any_name(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
		Object_type_name_on_any_nameContext _localctx = new Object_type_name_on_any_nameContext(Context, State);
		EnterRule(_localctx, 516, RULE_object_type_name_on_any_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4643;
			_la = TokenStream.LA(1);
			if ( !(_la==RULE || _la==TRIGGER || _la==POLICY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_name_list_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Any_name_list_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name_list_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_name_list_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_name_list_(this);
		}
	}

	[RuleVersion(0)]
	public Any_name_list_Context any_name_list_() {
		Any_name_list_Context _localctx = new Any_name_list_Context(Context, State);
		EnterRule(_localctx, 518, RULE_any_name_list_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4645;
			any_name();
			State = 4650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4646;
				Match(COMMA);
				State = 4647;
				any_name();
				}
				}
				State = 4652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_name(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(Context, State);
		EnterRule(_localctx, 520, RULE_any_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4653;
			colid();
			State = 4655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,374,Context) ) {
			case 1:
				{
				State = 4654;
				attrs();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PostgreSQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PostgreSQLParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_nameContext[] attr_name() {
			return GetRuleContexts<Attr_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_nameContext attr_name(int i) {
			return GetRuleContext<Attr_nameContext>(i);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAttrs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAttrs(this);
		}
	}

	[RuleVersion(0)]
	public AttrsContext attrs() {
		AttrsContext _localctx = new AttrsContext(Context, State);
		EnterRule(_localctx, 522, RULE_attrs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4659;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4657;
					Match(DOT);
					State = 4658;
					attr_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4661;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,375,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Type_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_listContext type_name_list() {
		Type_name_listContext _localctx = new Type_name_listContext(Context, State);
		EnterRule(_localctx, 524, RULE_type_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4663;
			typename();
			State = 4668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4664;
				Match(COMMA);
				State = 4665;
				typename();
				}
				}
				State = 4670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(PostgreSQLParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_Context table_() {
			return GetRuleContext<Table_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Restart_seqs_Context restart_seqs_() {
			return GetRuleContext<Restart_seqs_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		public TruncatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncatestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTruncatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTruncatestmt(this);
		}
	}

	[RuleVersion(0)]
	public TruncatestmtContext truncatestmt() {
		TruncatestmtContext _localctx = new TruncatestmtContext(Context, State);
		EnterRule(_localctx, 526, RULE_truncatestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4671;
			Match(TRUNCATE);
			State = 4673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLE) {
				{
				State = 4672;
				table_();
				}
			}

			State = 4675;
			relation_expr_list();
			State = 4677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTINUE_P || _la==RESTART) {
				{
				State = 4676;
				restart_seqs_();
				}
			}

			State = 4680;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 4679;
				drop_behavior_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Restart_seqs_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		public Restart_seqs_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restart_seqs_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRestart_seqs_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRestart_seqs_(this);
		}
	}

	[RuleVersion(0)]
	public Restart_seqs_Context restart_seqs_() {
		Restart_seqs_Context _localctx = new Restart_seqs_Context(Context, State);
		EnterRule(_localctx, 528, RULE_restart_seqs_);
		try {
			State = 4686;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONTINUE_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4682;
				Match(CONTINUE_P);
				State = 4683;
				Match(IDENTITY_P);
				}
				break;
			case RESTART:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4684;
				Match(RESTART);
				State = 4685;
				Match(IDENTITY_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(PostgreSQLParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(PostgreSQLParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(PostgreSQLParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comment_textContext comment_text() {
			return GetRuleContext<Comment_textContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_nameContext object_type_name() {
			return GetRuleContext<Object_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return GetRuleContext<Object_type_name_on_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CommentstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCommentstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCommentstmt(this);
		}
	}

	[RuleVersion(0)]
	public CommentstmtContext commentstmt() {
		CommentstmtContext _localctx = new CommentstmtContext(Context, State);
		EnterRule(_localctx, 530, RULE_commentstmt);
		try {
			State = 4835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,381,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4688;
				Match(COMMENT);
				State = 4689;
				Match(ON);
				State = 4690;
				object_type_any_name();
				State = 4691;
				any_name();
				State = 4692;
				Match(IS);
				State = 4693;
				comment_text();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4695;
				Match(COMMENT);
				State = 4696;
				Match(ON);
				State = 4697;
				Match(COLUMN);
				State = 4698;
				any_name();
				State = 4699;
				Match(IS);
				State = 4700;
				comment_text();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4702;
				Match(COMMENT);
				State = 4703;
				Match(ON);
				State = 4704;
				object_type_name();
				State = 4705;
				name();
				State = 4706;
				Match(IS);
				State = 4707;
				comment_text();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4709;
				Match(COMMENT);
				State = 4710;
				Match(ON);
				State = 4711;
				Match(TYPE_P);
				State = 4712;
				typename();
				State = 4713;
				Match(IS);
				State = 4714;
				comment_text();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4716;
				Match(COMMENT);
				State = 4717;
				Match(ON);
				State = 4718;
				Match(DOMAIN_P);
				State = 4719;
				typename();
				State = 4720;
				Match(IS);
				State = 4721;
				comment_text();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4723;
				Match(COMMENT);
				State = 4724;
				Match(ON);
				State = 4725;
				Match(AGGREGATE);
				State = 4726;
				aggregate_with_argtypes();
				State = 4727;
				Match(IS);
				State = 4728;
				comment_text();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4730;
				Match(COMMENT);
				State = 4731;
				Match(ON);
				State = 4732;
				Match(FUNCTION);
				State = 4733;
				function_with_argtypes();
				State = 4734;
				Match(IS);
				State = 4735;
				comment_text();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4737;
				Match(COMMENT);
				State = 4738;
				Match(ON);
				State = 4739;
				Match(OPERATOR);
				State = 4740;
				operator_with_argtypes();
				State = 4741;
				Match(IS);
				State = 4742;
				comment_text();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4744;
				Match(COMMENT);
				State = 4745;
				Match(ON);
				State = 4746;
				Match(CONSTRAINT);
				State = 4747;
				name();
				State = 4748;
				Match(ON);
				State = 4749;
				any_name();
				State = 4750;
				Match(IS);
				State = 4751;
				comment_text();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4753;
				Match(COMMENT);
				State = 4754;
				Match(ON);
				State = 4755;
				Match(CONSTRAINT);
				State = 4756;
				name();
				State = 4757;
				Match(ON);
				State = 4758;
				Match(DOMAIN_P);
				State = 4759;
				any_name();
				State = 4760;
				Match(IS);
				State = 4761;
				comment_text();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4763;
				Match(COMMENT);
				State = 4764;
				Match(ON);
				State = 4765;
				object_type_name_on_any_name();
				State = 4766;
				name();
				State = 4767;
				Match(ON);
				State = 4768;
				any_name();
				State = 4769;
				Match(IS);
				State = 4770;
				comment_text();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4772;
				Match(COMMENT);
				State = 4773;
				Match(ON);
				State = 4774;
				Match(PROCEDURE);
				State = 4775;
				function_with_argtypes();
				State = 4776;
				Match(IS);
				State = 4777;
				comment_text();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4779;
				Match(COMMENT);
				State = 4780;
				Match(ON);
				State = 4781;
				Match(ROUTINE);
				State = 4782;
				function_with_argtypes();
				State = 4783;
				Match(IS);
				State = 4784;
				comment_text();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4786;
				Match(COMMENT);
				State = 4787;
				Match(ON);
				State = 4788;
				Match(TRANSFORM);
				State = 4789;
				Match(FOR);
				State = 4790;
				typename();
				State = 4791;
				Match(LANGUAGE);
				State = 4792;
				name();
				State = 4793;
				Match(IS);
				State = 4794;
				comment_text();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4796;
				Match(COMMENT);
				State = 4797;
				Match(ON);
				State = 4798;
				Match(OPERATOR);
				State = 4799;
				Match(CLASS);
				State = 4800;
				any_name();
				State = 4801;
				Match(USING);
				State = 4802;
				name();
				State = 4803;
				Match(IS);
				State = 4804;
				comment_text();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4806;
				Match(COMMENT);
				State = 4807;
				Match(ON);
				State = 4808;
				Match(OPERATOR);
				State = 4809;
				Match(FAMILY);
				State = 4810;
				any_name();
				State = 4811;
				Match(USING);
				State = 4812;
				name();
				State = 4813;
				Match(IS);
				State = 4814;
				comment_text();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 4816;
				Match(COMMENT);
				State = 4817;
				Match(ON);
				State = 4818;
				Match(LARGE_P);
				State = 4819;
				Match(OBJECT_P);
				State = 4820;
				numericonly();
				State = 4821;
				Match(IS);
				State = 4822;
				comment_text();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 4824;
				Match(COMMENT);
				State = 4825;
				Match(ON);
				State = 4826;
				Match(CAST);
				State = 4827;
				Match(OPEN_PAREN);
				State = 4828;
				typename();
				State = 4829;
				Match(AS);
				State = 4830;
				typename();
				State = 4831;
				Match(CLOSE_PAREN);
				State = 4832;
				Match(IS);
				State = 4833;
				comment_text();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Comment_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterComment_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitComment_text(this);
		}
	}

	[RuleVersion(0)]
	public Comment_textContext comment_text() {
		Comment_textContext _localctx = new Comment_textContext(Context, State);
		EnterRule(_localctx, 532, RULE_comment_text);
		try {
			State = 4839;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4837;
				sconst();
				}
				break;
			case NULL_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4838;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeclabelstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(PostgreSQLParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Security_labelContext security_label() {
			return GetRuleContext<Security_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Provider_Context provider_() {
			return GetRuleContext<Provider_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_nameContext object_type_name() {
			return GetRuleContext<Object_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		public SeclabelstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seclabelstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSeclabelstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSeclabelstmt(this);
		}
	}

	[RuleVersion(0)]
	public SeclabelstmtContext seclabelstmt() {
		SeclabelstmtContext _localctx = new SeclabelstmtContext(Context, State);
		EnterRule(_localctx, 534, RULE_seclabelstmt);
		int _la;
		try {
			State = 4952;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,393,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4841;
				Match(SECURITY);
				State = 4842;
				Match(LABEL);
				State = 4844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4843;
					provider_();
					}
				}

				State = 4846;
				Match(ON);
				State = 4847;
				object_type_any_name();
				State = 4848;
				any_name();
				State = 4849;
				Match(IS);
				State = 4850;
				security_label();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4852;
				Match(SECURITY);
				State = 4853;
				Match(LABEL);
				State = 4855;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4854;
					provider_();
					}
				}

				State = 4857;
				Match(ON);
				State = 4858;
				Match(COLUMN);
				State = 4859;
				any_name();
				State = 4860;
				Match(IS);
				State = 4861;
				security_label();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4863;
				Match(SECURITY);
				State = 4864;
				Match(LABEL);
				State = 4866;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4865;
					provider_();
					}
				}

				State = 4868;
				Match(ON);
				State = 4869;
				object_type_name();
				State = 4870;
				name();
				State = 4871;
				Match(IS);
				State = 4872;
				security_label();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4874;
				Match(SECURITY);
				State = 4875;
				Match(LABEL);
				State = 4877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4876;
					provider_();
					}
				}

				State = 4879;
				Match(ON);
				State = 4880;
				Match(TYPE_P);
				State = 4881;
				typename();
				State = 4882;
				Match(IS);
				State = 4883;
				security_label();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4885;
				Match(SECURITY);
				State = 4886;
				Match(LABEL);
				State = 4888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4887;
					provider_();
					}
				}

				State = 4890;
				Match(ON);
				State = 4891;
				Match(DOMAIN_P);
				State = 4892;
				typename();
				State = 4893;
				Match(IS);
				State = 4894;
				security_label();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4896;
				Match(SECURITY);
				State = 4897;
				Match(LABEL);
				State = 4899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4898;
					provider_();
					}
				}

				State = 4901;
				Match(ON);
				State = 4902;
				Match(AGGREGATE);
				State = 4903;
				aggregate_with_argtypes();
				State = 4904;
				Match(IS);
				State = 4905;
				security_label();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4907;
				Match(SECURITY);
				State = 4908;
				Match(LABEL);
				State = 4910;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4909;
					provider_();
					}
				}

				State = 4912;
				Match(ON);
				State = 4913;
				Match(FUNCTION);
				State = 4914;
				function_with_argtypes();
				State = 4915;
				Match(IS);
				State = 4916;
				security_label();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4918;
				Match(SECURITY);
				State = 4919;
				Match(LABEL);
				State = 4921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4920;
					provider_();
					}
				}

				State = 4923;
				Match(ON);
				State = 4924;
				Match(LARGE_P);
				State = 4925;
				Match(OBJECT_P);
				State = 4926;
				numericonly();
				State = 4927;
				Match(IS);
				State = 4928;
				security_label();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4930;
				Match(SECURITY);
				State = 4931;
				Match(LABEL);
				State = 4933;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4932;
					provider_();
					}
				}

				State = 4935;
				Match(ON);
				State = 4936;
				Match(PROCEDURE);
				State = 4937;
				function_with_argtypes();
				State = 4938;
				Match(IS);
				State = 4939;
				security_label();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4941;
				Match(SECURITY);
				State = 4942;
				Match(LABEL);
				State = 4944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4943;
					provider_();
					}
				}

				State = 4946;
				Match(ON);
				State = 4947;
				Match(ROUTINE);
				State = 4948;
				function_with_argtypes();
				State = 4949;
				Match(IS);
				State = 4950;
				security_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Provider_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Provider_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_provider_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProvider_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProvider_(this);
		}
	}

	[RuleVersion(0)]
	public Provider_Context provider_() {
		Provider_Context _localctx = new Provider_Context(Context, State);
		EnterRule(_localctx, 536, RULE_provider_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4954;
			Match(FOR);
			State = 4955;
			nonreservedword_or_sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Security_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Security_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_security_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSecurity_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSecurity_label(this);
		}
	}

	[RuleVersion(0)]
	public Security_labelContext security_label() {
		Security_labelContext _localctx = new Security_labelContext(Context, State);
		EnterRule(_localctx, 538, RULE_security_label);
		try {
			State = 4959;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4957;
				sconst();
				}
				break;
			case NULL_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4958;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FetchstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fetch_argsContext fetch_args() {
			return GetRuleContext<Fetch_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		public FetchstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetchstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFetchstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFetchstmt(this);
		}
	}

	[RuleVersion(0)]
	public FetchstmtContext fetchstmt() {
		FetchstmtContext _localctx = new FetchstmtContext(Context, State);
		EnterRule(_localctx, 540, RULE_fetchstmt);
		try {
			State = 4965;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FETCH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4961;
				Match(FETCH);
				State = 4962;
				fetch_args();
				}
				break;
			case MOVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4963;
				Match(MOVE);
				State = 4964;
				fetch_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_inContext from_in() {
			return GetRuleContext<From_inContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_in_Context from_in_() {
			return GetRuleContext<From_in_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		public Fetch_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFetch_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFetch_args(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_argsContext fetch_args() {
		Fetch_argsContext _localctx = new Fetch_argsContext(Context, State);
		EnterRule(_localctx, 542, RULE_fetch_args);
		int _la;
		try {
			State = 5052;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,410,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4967;
				cursor_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4968;
				from_in();
				State = 4969;
				cursor_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4971;
				Match(NEXT);
				State = 4973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					State = 4972;
					from_in_();
					}
				}

				State = 4975;
				cursor_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4976;
				Match(PRIOR);
				State = 4978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					State = 4977;
					from_in_();
					}
				}

				State = 4980;
				cursor_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4981;
				Match(FIRST_P);
				State = 4983;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					State = 4982;
					from_in_();
					}
				}

				State = 4985;
				cursor_name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4986;
				Match(LAST_P);
				State = 4988;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					State = 4987;
					from_in_();
					}
				}

				State = 4990;
				cursor_name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4991;
				Match(ABSOLUTE_P);
				State = 4992;
				signediconst();
				State = 4994;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					State = 4993;
					from_in_();
					}
				}

				State = 4996;
				cursor_name();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4998;
				Match(RELATIVE_P);
				State = 4999;
				signediconst();
				State = 5001;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					State = 5000;
					from_in_();
					}
				}

				State = 5003;
				cursor_name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5005;
				signediconst();
				State = 5007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					State = 5006;
					from_in_();
					}
				}

				State = 5009;
				cursor_name();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5011;
				Match(ALL);
				State = 5013;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					State = 5012;
					from_in_();
					}
				}

				State = 5015;
				cursor_name();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5016;
				Match(FORWARD);
				State = 5018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					State = 5017;
					from_in_();
					}
				}

				State = 5020;
				cursor_name();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5021;
				Match(FORWARD);
				State = 5022;
				signediconst();
				State = 5024;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					State = 5023;
					from_in_();
					}
				}

				State = 5026;
				cursor_name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5028;
				Match(FORWARD);
				State = 5029;
				Match(ALL);
				State = 5031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					State = 5030;
					from_in_();
					}
				}

				State = 5033;
				cursor_name();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5034;
				Match(BACKWARD);
				State = 5036;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					State = 5035;
					from_in_();
					}
				}

				State = 5038;
				cursor_name();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5039;
				Match(BACKWARD);
				State = 5040;
				signediconst();
				State = 5042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					State = 5041;
					from_in_();
					}
				}

				State = 5044;
				cursor_name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5046;
				Match(BACKWARD);
				State = 5047;
				Match(ALL);
				State = 5049;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					State = 5048;
					from_in_();
					}
				}

				State = 5051;
				cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		public From_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrom_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrom_in(this);
		}
	}

	[RuleVersion(0)]
	public From_inContext from_in() {
		From_inContext _localctx = new From_inContext(Context, State);
		EnterRule(_localctx, 544, RULE_from_in);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5054;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM || _la==IN_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_in_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_inContext from_in() {
			return GetRuleContext<From_inContext>(0);
		}
		public From_in_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_in_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrom_in_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrom_in_(this);
		}
	}

	[RuleVersion(0)]
	public From_in_Context from_in_() {
		From_in_Context _localctx = new From_in_Context(Context, State);
		EnterRule(_localctx, 546, RULE_from_in_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5056;
			from_in();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesContext privileges() {
			return GetRuleContext<PrivilegesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_targetContext privilege_target() {
			return GetRuleContext<Privilege_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grantee_listContext grantee_list() {
			return GetRuleContext<Grantee_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grant_grant_option_Context grant_grant_option_() {
			return GetRuleContext<Grant_grant_option_Context>(0);
		}
		public GrantstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantstmt(this);
		}
	}

	[RuleVersion(0)]
	public GrantstmtContext grantstmt() {
		GrantstmtContext _localctx = new GrantstmtContext(Context, State);
		EnterRule(_localctx, 548, RULE_grantstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5058;
			Match(GRANT);
			State = 5059;
			privileges();
			State = 5060;
			Match(ON);
			State = 5061;
			privilege_target();
			State = 5062;
			Match(TO);
			State = 5063;
			grantee_list();
			State = 5065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5064;
				grant_grant_option_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesContext privileges() {
			return GetRuleContext<PrivilegesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_targetContext privilege_target() {
			return GetRuleContext<Privilege_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grantee_listContext grantee_list() {
			return GetRuleContext<Grantee_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public RevokestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRevokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRevokestmt(this);
		}
	}

	[RuleVersion(0)]
	public RevokestmtContext revokestmt() {
		RevokestmtContext _localctx = new RevokestmtContext(Context, State);
		EnterRule(_localctx, 550, RULE_revokestmt);
		int _la;
		try {
			State = 5088;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,414,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5067;
				Match(REVOKE);
				State = 5068;
				privileges();
				State = 5069;
				Match(ON);
				State = 5070;
				privilege_target();
				State = 5071;
				Match(FROM);
				State = 5072;
				grantee_list();
				State = 5074;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5073;
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5076;
				Match(REVOKE);
				State = 5077;
				Match(GRANT);
				State = 5078;
				Match(OPTION);
				State = 5079;
				Match(FOR);
				State = 5080;
				privileges();
				State = 5081;
				Match(ON);
				State = 5082;
				privilege_target();
				State = 5083;
				Match(FROM);
				State = 5084;
				grantee_list();
				State = 5086;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5085;
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_listContext privilege_list() {
			return GetRuleContext<Privilege_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(PostgreSQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PrivilegesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privileges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivileges(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivileges(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegesContext privileges() {
		PrivilegesContext _localctx = new PrivilegesContext(Context, State);
		EnterRule(_localctx, 552, RULE_privileges);
		try {
			State = 5105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,415,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5090;
				privilege_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5091;
				Match(ALL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5092;
				Match(ALL);
				State = 5093;
				Match(PRIVILEGES);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5094;
				Match(ALL);
				State = 5095;
				Match(OPEN_PAREN);
				State = 5096;
				columnlist();
				State = 5097;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5099;
				Match(ALL);
				State = 5100;
				Match(PRIVILEGES);
				State = 5101;
				Match(OPEN_PAREN);
				State = 5102;
				columnlist();
				State = 5103;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Privilege_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext[] privilege() {
			return GetRuleContexts<PrivilegeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege(int i) {
			return GetRuleContext<PrivilegeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Privilege_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivilege_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivilege_list(this);
		}
	}

	[RuleVersion(0)]
	public Privilege_listContext privilege_list() {
		Privilege_listContext _localctx = new Privilege_listContext(Context, State);
		EnterRule(_localctx, 554, RULE_privilege_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5107;
			privilege();
			State = 5112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5108;
				Match(COMMA);
				State = 5109;
				privilege();
				}
				}
				State = 5114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_list_Context column_list_() {
			return GetRuleContext<Column_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivilege(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivilege(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeContext privilege() {
		PrivilegeContext _localctx = new PrivilegeContext(Context, State);
		EnterRule(_localctx, 556, RULE_privilege);
		int _la;
		try {
			State = 5131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5115;
				Match(SELECT);
				State = 5117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 5116;
					column_list_();
					}
				}

				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5119;
				Match(REFERENCES);
				State = 5121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 5120;
					column_list_();
					}
				}

				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5123;
				Match(CREATE);
				State = 5125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 5124;
					column_list_();
					}
				}

				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5127;
				colid();
				State = 5129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 5128;
					column_list_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Privilege_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypes_listContext function_with_argtypes_list() {
			return GetRuleContext<Function_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_list_Context any_name_list_() {
			return GetRuleContext<Any_name_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Numericonly_listContext numericonly_list() {
			return GetRuleContext<Numericonly_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(PostgreSQLParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURES() { return GetToken(PostgreSQLParser.PROCEDURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINES() { return GetToken(PostgreSQLParser.ROUTINES, 0); }
		public Privilege_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivilege_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivilege_target(this);
		}
	}

	[RuleVersion(0)]
	public Privilege_targetContext privilege_target() {
		Privilege_targetContext _localctx = new Privilege_targetContext(Context, State);
		EnterRule(_localctx, 558, RULE_privilege_target);
		try {
			State = 5191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,422,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5133;
				qualified_name_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5134;
				Match(TABLE);
				State = 5135;
				qualified_name_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5136;
				Match(SEQUENCE);
				State = 5137;
				qualified_name_list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5138;
				Match(FOREIGN);
				State = 5139;
				Match(DATA_P);
				State = 5140;
				Match(WRAPPER);
				State = 5141;
				name_list();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5142;
				Match(FOREIGN);
				State = 5143;
				Match(SERVER);
				State = 5144;
				name_list();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5145;
				Match(FUNCTION);
				State = 5146;
				function_with_argtypes_list();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5147;
				Match(PROCEDURE);
				State = 5148;
				function_with_argtypes_list();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5149;
				Match(ROUTINE);
				State = 5150;
				function_with_argtypes_list();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5151;
				Match(DATABASE);
				State = 5152;
				name_list();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5153;
				Match(DOMAIN_P);
				State = 5154;
				any_name_list_();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5155;
				Match(LANGUAGE);
				State = 5156;
				name_list();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5157;
				Match(LARGE_P);
				State = 5158;
				Match(OBJECT_P);
				State = 5159;
				numericonly_list();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5160;
				Match(SCHEMA);
				State = 5161;
				name_list();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5162;
				Match(TABLESPACE);
				State = 5163;
				name_list();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5164;
				Match(TYPE_P);
				State = 5165;
				any_name_list_();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5166;
				Match(ALL);
				State = 5167;
				Match(TABLES);
				State = 5168;
				Match(IN_P);
				State = 5169;
				Match(SCHEMA);
				State = 5170;
				name_list();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5171;
				Match(ALL);
				State = 5172;
				Match(SEQUENCES);
				State = 5173;
				Match(IN_P);
				State = 5174;
				Match(SCHEMA);
				State = 5175;
				name_list();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 5176;
				Match(ALL);
				State = 5177;
				Match(FUNCTIONS);
				State = 5178;
				Match(IN_P);
				State = 5179;
				Match(SCHEMA);
				State = 5180;
				name_list();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 5181;
				Match(ALL);
				State = 5182;
				Match(PROCEDURES);
				State = 5183;
				Match(IN_P);
				State = 5184;
				Match(SCHEMA);
				State = 5185;
				name_list();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 5186;
				Match(ALL);
				State = 5187;
				Match(ROUTINES);
				State = 5188;
				Match(IN_P);
				State = 5189;
				Match(SCHEMA);
				State = 5190;
				name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grantee_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GranteeContext[] grantee() {
			return GetRuleContexts<GranteeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GranteeContext grantee(int i) {
			return GetRuleContext<GranteeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Grantee_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantee_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantee_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantee_list(this);
		}
	}

	[RuleVersion(0)]
	public Grantee_listContext grantee_list() {
		Grantee_listContext _localctx = new Grantee_listContext(Context, State);
		EnterRule(_localctx, 560, RULE_grantee_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5193;
			grantee();
			State = 5198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5194;
				Match(COMMA);
				State = 5195;
				grantee();
				}
				}
				State = 5200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GranteeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantee; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantee(this);
		}
	}

	[RuleVersion(0)]
	public GranteeContext grantee() {
		GranteeContext _localctx = new GranteeContext(Context, State);
		EnterRule(_localctx, 562, RULE_grantee);
		try {
			State = 5204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case CURRENT_USER:
			case SESSION_USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5201;
				rolespec();
				}
				break;
			case GROUP_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5202;
				Match(GROUP_P);
				State = 5203;
				rolespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_grant_option_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		public Grant_grant_option_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_grant_option_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrant_grant_option_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrant_grant_option_(this);
		}
	}

	[RuleVersion(0)]
	public Grant_grant_option_Context grant_grant_option_() {
		Grant_grant_option_Context _localctx = new Grant_grant_option_Context(Context, State);
		EnterRule(_localctx, 564, RULE_grant_grant_option_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5206;
			Match(WITH);
			State = 5207;
			Match(GRANT);
			State = 5208;
			Match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantrolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_listContext privilege_list() {
			return GetRuleContext<Privilege_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grant_admin_option_Context grant_admin_option_() {
			return GetRuleContext<Grant_admin_option_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Granted_by_Context granted_by_() {
			return GetRuleContext<Granted_by_Context>(0);
		}
		public GrantrolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantrolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantrolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantrolestmt(this);
		}
	}

	[RuleVersion(0)]
	public GrantrolestmtContext grantrolestmt() {
		GrantrolestmtContext _localctx = new GrantrolestmtContext(Context, State);
		EnterRule(_localctx, 566, RULE_grantrolestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5210;
			Match(GRANT);
			State = 5211;
			privilege_list();
			State = 5212;
			Match(TO);
			State = 5213;
			role_list();
			State = 5215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5214;
				grant_admin_option_();
				}
			}

			State = 5218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GRANTED) {
				{
				State = 5217;
				granted_by_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokerolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_listContext privilege_list() {
			return GetRuleContext<Privilege_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Granted_by_Context granted_by_() {
			return GetRuleContext<Granted_by_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public RevokerolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokerolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRevokerolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRevokerolestmt(this);
		}
	}

	[RuleVersion(0)]
	public RevokerolestmtContext revokerolestmt() {
		RevokerolestmtContext _localctx = new RevokerolestmtContext(Context, State);
		EnterRule(_localctx, 568, RULE_revokerolestmt);
		int _la;
		try {
			State = 5243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,431,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5220;
				Match(REVOKE);
				State = 5221;
				privilege_list();
				State = 5222;
				Match(FROM);
				State = 5223;
				role_list();
				State = 5225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GRANTED) {
					{
					State = 5224;
					granted_by_();
					}
				}

				State = 5228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5227;
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5230;
				Match(REVOKE);
				State = 5231;
				Match(ADMIN);
				State = 5232;
				Match(OPTION);
				State = 5233;
				Match(FOR);
				State = 5234;
				privilege_list();
				State = 5235;
				Match(FROM);
				State = 5236;
				role_list();
				State = 5238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GRANTED) {
					{
					State = 5237;
					granted_by_();
					}
				}

				State = 5241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5240;
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_admin_option_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		public Grant_admin_option_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_admin_option_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrant_admin_option_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrant_admin_option_(this);
		}
	}

	[RuleVersion(0)]
	public Grant_admin_option_Context grant_admin_option_() {
		Grant_admin_option_Context _localctx = new Grant_admin_option_Context(Context, State);
		EnterRule(_localctx, 570, RULE_grant_admin_option_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5245;
			Match(WITH);
			State = 5246;
			Match(ADMIN);
			State = 5247;
			Match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Granted_by_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(PostgreSQLParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public Granted_by_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_granted_by_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGranted_by_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGranted_by_(this);
		}
	}

	[RuleVersion(0)]
	public Granted_by_Context granted_by_() {
		Granted_by_Context _localctx = new Granted_by_Context(Context, State);
		EnterRule(_localctx, 572, RULE_granted_by_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5249;
			Match(GRANTED);
			State = 5250;
			Match(BY);
			State = 5251;
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdefaultprivilegesstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(PostgreSQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefacloptionlistContext defacloptionlist() {
			return GetRuleContext<DefacloptionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaclactionContext defaclaction() {
			return GetRuleContext<DefaclactionContext>(0);
		}
		public AlterdefaultprivilegesstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdefaultprivilegesstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdefaultprivilegesstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdefaultprivilegesstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() {
		AlterdefaultprivilegesstmtContext _localctx = new AlterdefaultprivilegesstmtContext(Context, State);
		EnterRule(_localctx, 574, RULE_alterdefaultprivilegesstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5253;
			Match(ALTER);
			State = 5254;
			Match(DEFAULT);
			State = 5255;
			Match(PRIVILEGES);
			State = 5256;
			defacloptionlist();
			State = 5257;
			defaclaction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefacloptionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefacloptionContext[] defacloption() {
			return GetRuleContexts<DefacloptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefacloptionContext defacloption(int i) {
			return GetRuleContext<DefacloptionContext>(i);
		}
		public DefacloptionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defacloptionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefacloptionlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefacloptionlist(this);
		}
	}

	[RuleVersion(0)]
	public DefacloptionlistContext defacloptionlist() {
		DefacloptionlistContext _localctx = new DefacloptionlistContext(Context, State);
		EnterRule(_localctx, 576, RULE_defacloptionlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==IN_P) {
				{
				{
				State = 5259;
				defacloption();
				}
				}
				State = 5264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefacloptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		public DefacloptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defacloption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefacloption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefacloption(this);
		}
	}

	[RuleVersion(0)]
	public DefacloptionContext defacloption() {
		DefacloptionContext _localctx = new DefacloptionContext(Context, State);
		EnterRule(_localctx, 578, RULE_defacloption);
		try {
			State = 5274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,433,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5265;
				Match(IN_P);
				State = 5266;
				Match(SCHEMA);
				State = 5267;
				name_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5268;
				Match(FOR);
				State = 5269;
				Match(ROLE);
				State = 5270;
				role_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5271;
				Match(FOR);
				State = 5272;
				Match(USER);
				State = 5273;
				role_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaclactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesContext privileges() {
			return GetRuleContext<PrivilegesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Defacl_privilege_targetContext defacl_privilege_target() {
			return GetRuleContext<Defacl_privilege_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grantee_listContext grantee_list() {
			return GetRuleContext<Grantee_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grant_grant_option_Context grant_grant_option_() {
			return GetRuleContext<Grant_grant_option_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public DefaclactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaclaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefaclaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefaclaction(this);
		}
	}

	[RuleVersion(0)]
	public DefaclactionContext defaclaction() {
		DefaclactionContext _localctx = new DefaclactionContext(Context, State);
		EnterRule(_localctx, 580, RULE_defaclaction);
		int _la;
		try {
			State = 5306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,437,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5276;
				Match(GRANT);
				State = 5277;
				privileges();
				State = 5278;
				Match(ON);
				State = 5279;
				defacl_privilege_target();
				State = 5280;
				Match(TO);
				State = 5281;
				grantee_list();
				State = 5283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5282;
					grant_grant_option_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5285;
				Match(REVOKE);
				State = 5286;
				privileges();
				State = 5287;
				Match(ON);
				State = 5288;
				defacl_privilege_target();
				State = 5289;
				Match(FROM);
				State = 5290;
				grantee_list();
				State = 5292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5291;
					drop_behavior_();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5294;
				Match(REVOKE);
				State = 5295;
				Match(GRANT);
				State = 5296;
				Match(OPTION);
				State = 5297;
				Match(FOR);
				State = 5298;
				privileges();
				State = 5299;
				Match(ON);
				State = 5300;
				defacl_privilege_target();
				State = 5301;
				Match(FROM);
				State = 5302;
				grantee_list();
				State = 5304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5303;
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defacl_privilege_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(PostgreSQLParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINES() { return GetToken(PostgreSQLParser.ROUTINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_P() { return GetToken(PostgreSQLParser.TYPES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(PostgreSQLParser.SCHEMAS, 0); }
		public Defacl_privilege_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defacl_privilege_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefacl_privilege_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefacl_privilege_target(this);
		}
	}

	[RuleVersion(0)]
	public Defacl_privilege_targetContext defacl_privilege_target() {
		Defacl_privilege_targetContext _localctx = new Defacl_privilege_targetContext(Context, State);
		EnterRule(_localctx, 582, RULE_defacl_privilege_target);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5308;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTIONS || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & 4297064449L) != 0) || _la==ROUTINES || _la==SCHEMAS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_paramsContext index_params() {
			return GetRuleContext<Index_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unique_Context unique_() {
			return GetRuleContext<Unique_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrently_Context concurrently_() {
			return GetRuleContext<Concurrently_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_name_Context index_name_() {
			return GetRuleContext<Index_name_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_method_clauseContext access_method_clause() {
			return GetRuleContext<Access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Include_Context include_() {
			return GetRuleContext<Include_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reloptions_Context reloptions_() {
			return GetRuleContext<Reloptions_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public IndexstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndexstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndexstmt(this);
		}
	}

	[RuleVersion(0)]
	public IndexstmtContext indexstmt() {
		IndexstmtContext _localctx = new IndexstmtContext(Context, State);
		EnterRule(_localctx, 584, RULE_indexstmt);
		int _la;
		try {
			State = 5373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,453,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5310;
				Match(CREATE);
				State = 5312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNIQUE) {
					{
					State = 5311;
					unique_();
					}
				}

				State = 5314;
				Match(INDEX);
				State = 5316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONCURRENTLY) {
					{
					State = 5315;
					concurrently_();
					}
				}

				State = 5319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 5318;
					index_name_();
					}
				}

				State = 5321;
				Match(ON);
				State = 5322;
				relation_expr();
				State = 5324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 5323;
					access_method_clause();
					}
				}

				State = 5326;
				Match(OPEN_PAREN);
				State = 5327;
				index_params();
				State = 5328;
				Match(CLOSE_PAREN);
				State = 5330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INCLUDE) {
					{
					State = 5329;
					include_();
					}
				}

				State = 5333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5332;
					reloptions_();
					}
				}

				State = 5336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLESPACE) {
					{
					State = 5335;
					opttablespace();
					}
				}

				State = 5339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 5338;
					where_clause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5341;
				Match(CREATE);
				State = 5343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNIQUE) {
					{
					State = 5342;
					unique_();
					}
				}

				State = 5345;
				Match(INDEX);
				State = 5347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONCURRENTLY) {
					{
					State = 5346;
					concurrently_();
					}
				}

				State = 5349;
				Match(IF_P);
				State = 5350;
				Match(NOT);
				State = 5351;
				Match(EXISTS);
				State = 5352;
				name();
				State = 5353;
				Match(ON);
				State = 5354;
				relation_expr();
				State = 5356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 5355;
					access_method_clause();
					}
				}

				State = 5358;
				Match(OPEN_PAREN);
				State = 5359;
				index_params();
				State = 5360;
				Match(CLOSE_PAREN);
				State = 5362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INCLUDE) {
					{
					State = 5361;
					include_();
					}
				}

				State = 5365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5364;
					reloptions_();
					}
				}

				State = 5368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLESPACE) {
					{
					State = 5367;
					opttablespace();
					}
				}

				State = 5371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 5370;
					where_clause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unique_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		public Unique_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unique_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUnique_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUnique_(this);
		}
	}

	[RuleVersion(0)]
	public Unique_Context unique_() {
		Unique_Context _localctx = new Unique_Context(Context, State);
		EnterRule(_localctx, 586, RULE_unique_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5375;
			Match(UNIQUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_name_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Single_name_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_name_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSingle_name_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSingle_name_(this);
		}
	}

	[RuleVersion(0)]
	public Single_name_Context single_name_() {
		Single_name_Context _localctx = new Single_name_Context(Context, State);
		EnterRule(_localctx, 588, RULE_single_name_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5377;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrently_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public Concurrently_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrently_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConcurrently_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConcurrently_(this);
		}
	}

	[RuleVersion(0)]
	public Concurrently_Context concurrently_() {
		Concurrently_Context _localctx = new Concurrently_Context(Context, State);
		EnterRule(_localctx, 590, RULE_concurrently_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5379;
			Match(CONCURRENTLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_name_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Index_name_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_name_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_name_(this);
		}
	}

	[RuleVersion(0)]
	public Index_name_Context index_name_() {
		Index_name_Context _localctx = new Index_name_Context(Context, State);
		EnterRule(_localctx, 592, RULE_index_name_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5381;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_method_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Access_method_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_method_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAccess_method_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAccess_method_clause(this);
		}
	}

	[RuleVersion(0)]
	public Access_method_clauseContext access_method_clause() {
		Access_method_clauseContext _localctx = new Access_method_clauseContext(Context, State);
		EnterRule(_localctx, 594, RULE_access_method_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5383;
			Match(USING);
			State = 5384;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext[] index_elem() {
			return GetRuleContexts<Index_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext index_elem(int i) {
			return GetRuleContext<Index_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Index_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_params(this);
		}
	}

	[RuleVersion(0)]
	public Index_paramsContext index_params() {
		Index_paramsContext _localctx = new Index_paramsContext(Context, State);
		EnterRule(_localctx, 596, RULE_index_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5386;
			index_elem();
			State = 5391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5387;
				Match(COMMA);
				State = 5388;
				index_elem();
				}
				}
				State = 5393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_elem_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Collate_Context collate_() {
			return GetRuleContext<Collate_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Asc_desc_Context asc_desc_() {
			return GetRuleContext<Asc_desc_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nulls_order_Context nulls_order_() {
			return GetRuleContext<Nulls_order_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		public Index_elem_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_elem_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_elem_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_elem_options(this);
		}
	}

	[RuleVersion(0)]
	public Index_elem_optionsContext index_elem_options() {
		Index_elem_optionsContext _localctx = new Index_elem_optionsContext(Context, State);
		EnterRule(_localctx, 598, RULE_index_elem_options);
		int _la;
		try {
			State = 5417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,462,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 5394;
					collate_();
					}
				}

				State = 5398;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,456,Context) ) {
				case 1:
					{
					State = 5397;
					class_();
					}
					break;
				}
				State = 5401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 5400;
					asc_desc_();
					}
				}

				State = 5404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NULLS_P) {
					{
					State = 5403;
					nulls_order_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 5406;
					collate_();
					}
				}

				State = 5409;
				any_name();
				State = 5410;
				reloptions();
				State = 5412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 5411;
					asc_desc_();
					}
				}

				State = 5415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NULLS_P) {
					{
					State = 5414;
					nulls_order_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_elem_optionsContext index_elem_options() {
			return GetRuleContext<Index_elem_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Index_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_elem(this);
		}
	}

	[RuleVersion(0)]
	public Index_elemContext index_elem() {
		Index_elemContext _localctx = new Index_elemContext(Context, State);
		EnterRule(_localctx, 600, RULE_index_elem);
		try {
			State = 5430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,463,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5419;
				colid();
				State = 5420;
				index_elem_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5422;
				func_expr_windowless();
				State = 5423;
				index_elem_options();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5425;
				Match(OPEN_PAREN);
				State = 5426;
				a_expr();
				State = 5427;
				Match(CLOSE_PAREN);
				State = 5428;
				index_elem_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Include_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(PostgreSQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_including_paramsContext index_including_params() {
			return GetRuleContext<Index_including_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Include_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInclude_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInclude_(this);
		}
	}

	[RuleVersion(0)]
	public Include_Context include_() {
		Include_Context _localctx = new Include_Context(Context, State);
		EnterRule(_localctx, 602, RULE_include_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5432;
			Match(INCLUDE);
			State = 5433;
			Match(OPEN_PAREN);
			State = 5434;
			index_including_params();
			State = 5435;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_including_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext[] index_elem() {
			return GetRuleContexts<Index_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext index_elem(int i) {
			return GetRuleContext<Index_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Index_including_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_including_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_including_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_including_params(this);
		}
	}

	[RuleVersion(0)]
	public Index_including_paramsContext index_including_params() {
		Index_including_paramsContext _localctx = new Index_including_paramsContext(Context, State);
		EnterRule(_localctx, 604, RULE_index_including_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5437;
			index_elem();
			State = 5442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5438;
				Match(COMMA);
				State = 5439;
				index_elem();
				}
				}
				State = 5444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collate_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Collate_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collate_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCollate_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCollate_(this);
		}
	}

	[RuleVersion(0)]
	public Collate_Context collate_() {
		Collate_Context _localctx = new Collate_Context(Context, State);
		EnterRule(_localctx, 606, RULE_collate_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5445;
			Match(COLLATE);
			State = 5446;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Class_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterClass_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitClass_(this);
		}
	}

	[RuleVersion(0)]
	public Class_Context class_() {
		Class_Context _localctx = new Class_Context(Context, State);
		EnterRule(_localctx, 608, RULE_class_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5448;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asc_desc_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(PostgreSQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(PostgreSQLParser.DESC, 0); }
		public Asc_desc_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asc_desc_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAsc_desc_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAsc_desc_(this);
		}
	}

	[RuleVersion(0)]
	public Asc_desc_Context asc_desc_() {
		Asc_desc_Context _localctx = new Asc_desc_Context(Context, State);
		EnterRule(_localctx, 610, RULE_asc_desc_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5450;
			_la = TokenStream.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nulls_order_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_P() { return GetToken(PostgreSQLParser.NULLS_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		public Nulls_order_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nulls_order_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNulls_order_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNulls_order_(this);
		}
	}

	[RuleVersion(0)]
	public Nulls_order_Context nulls_order_() {
		Nulls_order_Context _localctx = new Nulls_order_Context(Context, State);
		EnterRule(_localctx, 612, RULE_nulls_order_);
		try {
			State = 5456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,465,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5452;
				Match(NULLS_P);
				State = 5453;
				Match(FIRST_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5454;
				Match(NULLS_P);
				State = 5455;
				Match(LAST_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatefunctionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_args_with_defaultsContext func_args_with_defaults() {
			return GetRuleContext<Func_args_with_defaultsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createfunc_opt_listContext createfunc_opt_list() {
			return GetRuleContext<Createfunc_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Or_replace_Context or_replace_() {
			return GetRuleContext<Or_replace_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostgreSQLParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_returnContext func_return() {
			return GetRuleContext<Func_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_func_column_listContext table_func_column_list() {
			return GetRuleContext<Table_func_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CreatefunctionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfunctionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefunctionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefunctionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatefunctionstmtContext createfunctionstmt() {
		CreatefunctionstmtContext _localctx = new CreatefunctionstmtContext(Context, State);
		EnterRule(_localctx, 614, RULE_createfunctionstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5458;
			Match(CREATE);
			State = 5460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 5459;
				or_replace_();
				}
			}

			State = 5462;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5463;
			func_name();
			State = 5464;
			func_args_with_defaults();
			State = 5474;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,468,Context) ) {
			case 1:
				{
				State = 5465;
				Match(RETURNS);
				State = 5472;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case JSON:
				case ABSENT:
				case ASENSITIVE:
				case ATOMIC:
				case BREADTH:
				case COMPRESSION:
				case CONDITIONAL:
				case DEPTH:
				case EMPTY_P:
				case FINALIZE:
				case INDENT:
				case KEEP:
				case KEYS:
				case NESTED:
				case OMIT:
				case PARAMETER:
				case PATH:
				case PLAN:
				case QUOTES:
				case SCALAR:
				case SOURCE:
				case STRING_P:
				case TARGET:
				case UNCONDITIONAL:
				case PERIOD:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATCHED:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case DEC:
				case DECIMAL_P:
				case FLOAT_P:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case NATIONAL:
				case NCHAR:
				case NUMERIC:
				case REAL:
				case SETOF:
				case SMALLINT:
				case TIME:
				case TIMESTAMP:
				case VARCHAR:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case COLUMNS:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case ERROR:
				case RETURN:
				case FORMAT:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
					{
					State = 5466;
					func_return();
					}
					break;
				case TABLE:
					{
					State = 5467;
					Match(TABLE);
					State = 5468;
					Match(OPEN_PAREN);
					State = 5469;
					table_func_column_list();
					State = 5470;
					Match(CLOSE_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			State = 5476;
			createfunc_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_replace_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		public Or_replace_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_replace_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOr_replace_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOr_replace_(this);
		}
	}

	[RuleVersion(0)]
	public Or_replace_Context or_replace_() {
		Or_replace_Context _localctx = new Or_replace_Context(Context, State);
		EnterRule(_localctx, 616, RULE_or_replace_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5478;
			Match(OR);
			State = 5479;
			Match(REPLACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_args_listContext func_args_list() {
			return GetRuleContext<Func_args_listContext>(0);
		}
		public Func_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args(this);
		}
	}

	[RuleVersion(0)]
	public Func_argsContext func_args() {
		Func_argsContext _localctx = new Func_argsContext(Context, State);
		EnterRule(_localctx, 618, RULE_func_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5481;
			Match(OPEN_PAREN);
			State = 5483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8795019280384L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4398046511111L) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & -31L) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & -1L) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -1L) != 0) || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & -5L) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & 637865130389929983L) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & 360259245446266879L) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & 1099511773185L) != 0)) {
				{
				State = 5482;
				func_args_list();
				}
			}

			State = 5485;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_args_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext[] func_arg() {
			return GetRuleContexts<Func_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext func_arg(int i) {
			return GetRuleContext<Func_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Func_args_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args_list(this);
		}
	}

	[RuleVersion(0)]
	public Func_args_listContext func_args_list() {
		Func_args_listContext _localctx = new Func_args_listContext(Context, State);
		EnterRule(_localctx, 620, RULE_func_args_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5487;
			func_arg();
			State = 5492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5488;
				Match(COMMA);
				State = 5489;
				func_arg();
				}
				}
				State = 5494;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_with_argtypes_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext[] function_with_argtypes() {
			return GetRuleContexts<Function_with_argtypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes(int i) {
			return GetRuleContext<Function_with_argtypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Function_with_argtypes_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_with_argtypes_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunction_with_argtypes_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunction_with_argtypes_list(this);
		}
	}

	[RuleVersion(0)]
	public Function_with_argtypes_listContext function_with_argtypes_list() {
		Function_with_argtypes_listContext _localctx = new Function_with_argtypes_listContext(Context, State);
		EnterRule(_localctx, 622, RULE_function_with_argtypes_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5495;
			function_with_argtypes();
			State = 5500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5496;
				Match(COMMA);
				State = 5497;
				function_with_argtypes();
				}
				}
				State = 5502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_with_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_argsContext func_args() {
			return GetRuleContext<Func_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public Function_with_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_with_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunction_with_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunction_with_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Function_with_argtypesContext function_with_argtypes() {
		Function_with_argtypesContext _localctx = new Function_with_argtypesContext(Context, State);
		EnterRule(_localctx, 624, RULE_function_with_argtypes);
		int _la;
		try {
			State = 5511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,473,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5503;
				func_name();
				State = 5504;
				func_args();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5506;
				type_func_name_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5507;
				colid();
				State = 5509;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_BRACKET || _la==DOT) {
					{
					State = 5508;
					indirection();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_args_with_defaultsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return GetRuleContext<Func_args_with_defaults_listContext>(0);
		}
		public Func_args_with_defaultsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args_with_defaults; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args_with_defaults(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args_with_defaults(this);
		}
	}

	[RuleVersion(0)]
	public Func_args_with_defaultsContext func_args_with_defaults() {
		Func_args_with_defaultsContext _localctx = new Func_args_with_defaultsContext(Context, State);
		EnterRule(_localctx, 626, RULE_func_args_with_defaults);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5513;
			Match(OPEN_PAREN);
			State = 5515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8795019280384L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4398046511111L) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & -31L) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & -1L) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -1L) != 0) || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & -5L) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & 637865130389929983L) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & 360259245446266879L) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & 1099511773185L) != 0)) {
				{
				State = 5514;
				func_args_with_defaults_list();
				}
			}

			State = 5517;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_args_with_defaults_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_with_defaultContext[] func_arg_with_default() {
			return GetRuleContexts<Func_arg_with_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_with_defaultContext func_arg_with_default(int i) {
			return GetRuleContext<Func_arg_with_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Func_args_with_defaults_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args_with_defaults_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args_with_defaults_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args_with_defaults_list(this);
		}
	}

	[RuleVersion(0)]
	public Func_args_with_defaults_listContext func_args_with_defaults_list() {
		Func_args_with_defaults_listContext _localctx = new Func_args_with_defaults_listContext(Context, State);
		EnterRule(_localctx, 628, RULE_func_args_with_defaults_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5519;
			func_arg_with_default();
			State = 5524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5520;
				Match(COMMA);
				State = 5521;
				func_arg_with_default();
				}
				}
				State = 5526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arg_classContext arg_class() {
			return GetRuleContext<Arg_classContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		public Func_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg(this);
		}
	}

	[RuleVersion(0)]
	public Func_argContext func_arg() {
		Func_argContext _localctx = new Func_argContext(Context, State);
		EnterRule(_localctx, 630, RULE_func_arg);
		int _la;
		try {
			State = 5540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,478,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5527;
				arg_class();
				State = 5529;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,476,Context) ) {
				case 1:
					{
					State = 5528;
					param_name();
					}
					break;
				}
				State = 5531;
				func_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5533;
				param_name();
				State = 5535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN_P || _la==VARIADIC || _la==INOUT || _la==OUT_P) {
					{
					State = 5534;
					arg_class();
					}
				}

				State = 5537;
				func_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5539;
				func_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_classContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_P() { return GetToken(PostgreSQLParser.OUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(PostgreSQLParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(PostgreSQLParser.VARIADIC, 0); }
		public Arg_classContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterArg_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitArg_class(this);
		}
	}

	[RuleVersion(0)]
	public Arg_classContext arg_class() {
		Arg_classContext _localctx = new Arg_classContext(Context, State);
		EnterRule(_localctx, 632, RULE_arg_class);
		int _la;
		try {
			State = 5549;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5542;
				Match(IN_P);
				State = 5544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUT_P) {
					{
					State = 5543;
					Match(OUT_P);
					}
				}

				}
				break;
			case OUT_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5546;
				Match(OUT_P);
				}
				break;
			case INOUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5547;
				Match(INOUT);
				}
				break;
			case VARIADIC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5548;
				Match(VARIADIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		public Param_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterParam_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitParam_name(this);
		}
	}

	[RuleVersion(0)]
	public Param_nameContext param_name() {
		Param_nameContext _localctx = new Param_nameContext(Context, State);
		EnterRule(_localctx, 634, RULE_param_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5551;
			type_function_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_return(this);
		}
	}

	[RuleVersion(0)]
	public Func_returnContext func_return() {
		Func_returnContext _localctx = new Func_returnContext(Context, State);
		EnterRule(_localctx, 636, RULE_func_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5553;
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETOF() { return GetToken(PostgreSQLParser.SETOF, 0); }
		public Func_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_type(this);
		}
	}

	[RuleVersion(0)]
	public Func_typeContext func_type() {
		Func_typeContext _localctx = new Func_typeContext(Context, State);
		EnterRule(_localctx, 638, RULE_func_type);
		int _la;
		try {
			State = 5564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,482,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5555;
				typename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SETOF) {
					{
					State = 5556;
					Match(SETOF);
					}
				}

				State = 5559;
				type_function_name();
				State = 5560;
				attrs();
				State = 5561;
				Match(PERCENT);
				State = 5562;
				Match(TYPE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_arg_with_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext func_arg() {
			return GetRuleContext<Func_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		public Func_arg_with_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg_with_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg_with_default(this);
		}
	}

	[RuleVersion(0)]
	public Func_arg_with_defaultContext func_arg_with_default() {
		Func_arg_with_defaultContext _localctx = new Func_arg_with_defaultContext(Context, State);
		EnterRule(_localctx, 640, RULE_func_arg_with_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5566;
			func_arg();
			State = 5569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL || _la==DEFAULT) {
				{
				State = 5567;
				_la = TokenStream.LA(1);
				if ( !(_la==EQUAL || _la==DEFAULT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5568;
				a_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggr_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext func_arg() {
			return GetRuleContext<Func_argContext>(0);
		}
		public Aggr_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggr_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggr_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggr_arg(this);
		}
	}

	[RuleVersion(0)]
	public Aggr_argContext aggr_arg() {
		Aggr_argContext _localctx = new Aggr_argContext(Context, State);
		EnterRule(_localctx, 642, RULE_aggr_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5571;
			func_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggr_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_args_listContext[] aggr_args_list() {
			return GetRuleContexts<Aggr_args_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_args_listContext aggr_args_list(int i) {
			return GetRuleContext<Aggr_args_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		public Aggr_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggr_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggr_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggr_args(this);
		}
	}

	[RuleVersion(0)]
	public Aggr_argsContext aggr_args() {
		Aggr_argsContext _localctx = new Aggr_argsContext(Context, State);
		EnterRule(_localctx, 644, RULE_aggr_args);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5573;
			Match(OPEN_PAREN);
			State = 5584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,484,Context) ) {
			case 1:
				{
				State = 5574;
				Match(STAR);
				}
				break;
			case 2:
				{
				State = 5575;
				aggr_args_list();
				}
				break;
			case 3:
				{
				State = 5576;
				Match(ORDER);
				State = 5577;
				Match(BY);
				State = 5578;
				aggr_args_list();
				}
				break;
			case 4:
				{
				State = 5579;
				aggr_args_list();
				State = 5580;
				Match(ORDER);
				State = 5581;
				Match(BY);
				State = 5582;
				aggr_args_list();
				}
				break;
			}
			State = 5586;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggr_args_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argContext[] aggr_arg() {
			return GetRuleContexts<Aggr_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argContext aggr_arg(int i) {
			return GetRuleContext<Aggr_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Aggr_args_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggr_args_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggr_args_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggr_args_list(this);
		}
	}

	[RuleVersion(0)]
	public Aggr_args_listContext aggr_args_list() {
		Aggr_args_listContext _localctx = new Aggr_args_listContext(Context, State);
		EnterRule(_localctx, 646, RULE_aggr_args_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5588;
			aggr_arg();
			State = 5593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5589;
				Match(COMMA);
				State = 5590;
				aggr_arg();
				}
				}
				State = 5595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_with_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argsContext aggr_args() {
			return GetRuleContext<Aggr_argsContext>(0);
		}
		public Aggregate_with_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_with_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggregate_with_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggregate_with_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_with_argtypesContext aggregate_with_argtypes() {
		Aggregate_with_argtypesContext _localctx = new Aggregate_with_argtypesContext(Context, State);
		EnterRule(_localctx, 648, RULE_aggregate_with_argtypes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5596;
			func_name();
			State = 5597;
			aggr_args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_with_argtypes_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext[] aggregate_with_argtypes() {
			return GetRuleContexts<Aggregate_with_argtypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes(int i) {
			return GetRuleContext<Aggregate_with_argtypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Aggregate_with_argtypes_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_with_argtypes_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggregate_with_argtypes_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggregate_with_argtypes_list(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
		Aggregate_with_argtypes_listContext _localctx = new Aggregate_with_argtypes_listContext(Context, State);
		EnterRule(_localctx, 650, RULE_aggregate_with_argtypes_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5599;
			aggregate_with_argtypes();
			State = 5604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5600;
				Match(COMMA);
				State = 5601;
				aggregate_with_argtypes();
				}
				}
				State = 5606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createfunc_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createfunc_opt_itemContext[] createfunc_opt_item() {
			return GetRuleContexts<Createfunc_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createfunc_opt_itemContext createfunc_opt_item(int i) {
			return GetRuleContext<Createfunc_opt_itemContext>(i);
		}
		public Createfunc_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfunc_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefunc_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefunc_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Createfunc_opt_listContext createfunc_opt_list() {
		Createfunc_opt_listContext _localctx = new Createfunc_opt_listContext(Context, State);
		EnterRule(_localctx, 652, RULE_createfunc_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5607;
				createfunc_opt_item();
				}
				}
				State = 5610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AS || _la==NOT || _la==WINDOW || _la==CALLED || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & 4503633987108865L) != 0) || _la==LANGUAGE || _la==LEAKPROOF || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & 8624554121L) != 0) || _la==VOLATILE || ((((_la - 481)) & ~0x3f) == 0 && ((1L << (_la - 481)) & 196609L) != 0) );
			this.ParseRoutineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_func_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(PostgreSQLParser.CALLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL_P() { return GetTokens(PostgreSQLParser.NULL_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P(int i) {
			return GetToken(PostgreSQLParser.NULL_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT_P() { return GetToken(PostgreSQLParser.INPUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostgreSQLParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(PostgreSQLParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STABLE() { return GetToken(PostgreSQLParser.STABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(PostgreSQLParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(PostgreSQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(PostgreSQLParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(PostgreSQLParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAKPROOF() { return GetToken(PostgreSQLParser.LEAKPROOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COST() { return GetToken(PostgreSQLParser.COST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPORT() { return GetToken(PostgreSQLParser.SUPPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsetresetclauseContext functionsetresetclause() {
			return GetRuleContext<FunctionsetresetclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(PostgreSQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Common_func_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_func_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCommon_func_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCommon_func_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Common_func_opt_itemContext common_func_opt_item() {
		Common_func_opt_itemContext _localctx = new Common_func_opt_itemContext(Context, State);
		EnterRule(_localctx, 654, RULE_common_func_opt_item);
		try {
			State = 5649;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,488,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5614;
				Match(CALLED);
				State = 5615;
				Match(ON);
				State = 5616;
				Match(NULL_P);
				State = 5617;
				Match(INPUT_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5618;
				Match(RETURNS);
				State = 5619;
				Match(NULL_P);
				State = 5620;
				Match(ON);
				State = 5621;
				Match(NULL_P);
				State = 5622;
				Match(INPUT_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5623;
				Match(STRICT_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5624;
				Match(IMMUTABLE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5625;
				Match(STABLE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5626;
				Match(VOLATILE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5627;
				Match(EXTERNAL);
				State = 5628;
				Match(SECURITY);
				State = 5629;
				Match(DEFINER);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5630;
				Match(EXTERNAL);
				State = 5631;
				Match(SECURITY);
				State = 5632;
				Match(INVOKER);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5633;
				Match(SECURITY);
				State = 5634;
				Match(DEFINER);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5635;
				Match(SECURITY);
				State = 5636;
				Match(INVOKER);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5637;
				Match(LEAKPROOF);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5638;
				Match(NOT);
				State = 5639;
				Match(LEAKPROOF);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5640;
				Match(COST);
				State = 5641;
				numericonly();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5642;
				Match(ROWS);
				State = 5643;
				numericonly();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5644;
				Match(SUPPORT);
				State = 5645;
				any_name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5646;
				functionsetresetclause();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5647;
				Match(PARALLEL);
				State = 5648;
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createfunc_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_asContext func_as() {
			return GetRuleContext<Func_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_type_listContext transform_type_list() {
			return GetRuleContext<Transform_type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(PostgreSQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Common_func_opt_itemContext common_func_opt_item() {
			return GetRuleContext<Common_func_opt_itemContext>(0);
		}
		public Createfunc_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfunc_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefunc_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefunc_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Createfunc_opt_itemContext createfunc_opt_item() {
		Createfunc_opt_itemContext _localctx = new Createfunc_opt_itemContext(Context, State);
		EnterRule(_localctx, 656, RULE_createfunc_opt_item);
		try {
			State = 5659;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5651;
				Match(AS);
				State = 5652;
				func_as();
				}
				break;
			case LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5653;
				Match(LANGUAGE);
				State = 5654;
				nonreservedword_or_sconst();
				}
				break;
			case TRANSFORM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5655;
				Match(TRANSFORM);
				State = 5656;
				transform_type_list();
				}
				break;
			case WINDOW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5657;
				Match(WINDOW);
				}
				break;
			case NOT:
			case CALLED:
			case COST:
			case EXTERNAL:
			case IMMUTABLE:
			case LEAKPROOF:
			case RESET:
			case RETURNS:
			case ROWS:
			case SECURITY:
			case SET:
			case STABLE:
			case STRICT_P:
			case VOLATILE:
			case SUPPORT:
			case PARALLEL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5658;
				common_func_opt_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_asContext : ParserRuleContext {
		public SconstContext def;
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Func_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_as; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_as(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_as(this);
		}
	}

	[RuleVersion(0)]
	public Func_asContext func_as() {
		Func_asContext _localctx = new Func_asContext(Context, State);
		EnterRule(_localctx, 658, RULE_func_as);
		try {
			State = 5666;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,490,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5661;
				_localctx.def = sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5662;
				sconst();
				State = 5663;
				Match(COMMA);
				State = 5664;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_type_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(PostgreSQLParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(PostgreSQLParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPE_P() { return GetTokens(PostgreSQLParser.TYPE_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P(int i) {
			return GetToken(PostgreSQLParser.TYPE_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Transform_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_type_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransform_type_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransform_type_list(this);
		}
	}

	[RuleVersion(0)]
	public Transform_type_listContext transform_type_list() {
		Transform_type_listContext _localctx = new Transform_type_listContext(Context, State);
		EnterRule(_localctx, 660, RULE_transform_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5668;
			Match(FOR);
			State = 5669;
			Match(TYPE_P);
			State = 5670;
			typename();
			State = 5677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5671;
				Match(COMMA);
				State = 5672;
				Match(FOR);
				State = 5673;
				Match(TYPE_P);
				State = 5674;
				typename();
				}
				}
				State = 5679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Definition_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public Definition_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefinition_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefinition_(this);
		}
	}

	[RuleVersion(0)]
	public Definition_Context definition_() {
		Definition_Context _localctx = new Definition_Context(Context, State);
		EnterRule(_localctx, 662, RULE_definition_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5680;
			Match(WITH);
			State = 5681;
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_func_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		public Table_func_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_func_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_func_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_func_column(this);
		}
	}

	[RuleVersion(0)]
	public Table_func_columnContext table_func_column() {
		Table_func_columnContext _localctx = new Table_func_columnContext(Context, State);
		EnterRule(_localctx, 664, RULE_table_func_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5683;
			param_name();
			State = 5684;
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_func_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_func_columnContext[] table_func_column() {
			return GetRuleContexts<Table_func_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_func_columnContext table_func_column(int i) {
			return GetRuleContext<Table_func_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Table_func_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_func_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_func_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_func_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Table_func_column_listContext table_func_column_list() {
		Table_func_column_listContext _localctx = new Table_func_column_listContext(Context, State);
		EnterRule(_localctx, 666, RULE_table_func_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5686;
			table_func_column();
			State = 5691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5687;
				Match(COMMA);
				State = 5688;
				table_func_column();
				}
				}
				State = 5693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterfunctionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alterfunc_opt_listContext alterfunc_opt_list() {
			return GetRuleContext<Alterfunc_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Restrict_Context restrict_() {
			return GetRuleContext<Restrict_Context>(0);
		}
		public AlterfunctionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterfunctionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterfunctionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterfunctionstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterfunctionstmtContext alterfunctionstmt() {
		AlterfunctionstmtContext _localctx = new AlterfunctionstmtContext(Context, State);
		EnterRule(_localctx, 668, RULE_alterfunctionstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5694;
			Match(ALTER);
			State = 5695;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE || _la==ROUTINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5696;
			function_with_argtypes();
			State = 5697;
			alterfunc_opt_list();
			State = 5699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RESTRICT) {
				{
				State = 5698;
				restrict_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alterfunc_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Common_func_opt_itemContext[] common_func_opt_item() {
			return GetRuleContexts<Common_func_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_func_opt_itemContext common_func_opt_item(int i) {
			return GetRuleContext<Common_func_opt_itemContext>(i);
		}
		public Alterfunc_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterfunc_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterfunc_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterfunc_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Alterfunc_opt_listContext alterfunc_opt_list() {
		Alterfunc_opt_listContext _localctx = new Alterfunc_opt_listContext(Context, State);
		EnterRule(_localctx, 670, RULE_alterfunc_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5701;
				common_func_opt_item();
				}
				}
				State = 5704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NOT || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & 72057594040025089L) != 0) || _la==IMMUTABLE || _la==LEAKPROOF || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & 8624554121L) != 0) || _la==VOLATILE || _la==SUPPORT || _la==PARALLEL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Restrict_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		public Restrict_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restrict_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRestrict_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRestrict_(this);
		}
	}

	[RuleVersion(0)]
	public Restrict_Context restrict_() {
		Restrict_Context _localctx = new Restrict_Context(Context, State);
		EnterRule(_localctx, 672, RULE_restrict_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5706;
			Match(RESTRICT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemovefuncstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypes_listContext function_with_argtypes_list() {
			return GetRuleContext<Function_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		public RemovefuncstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removefuncstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRemovefuncstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRemovefuncstmt(this);
		}
	}

	[RuleVersion(0)]
	public RemovefuncstmtContext removefuncstmt() {
		RemovefuncstmtContext _localctx = new RemovefuncstmtContext(Context, State);
		EnterRule(_localctx, 674, RULE_removefuncstmt);
		int _la;
		try {
			State = 5750;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,501,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5708;
				Match(DROP);
				State = 5709;
				Match(FUNCTION);
				State = 5710;
				function_with_argtypes_list();
				State = 5712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5711;
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5714;
				Match(DROP);
				State = 5715;
				Match(FUNCTION);
				State = 5716;
				Match(IF_P);
				State = 5717;
				Match(EXISTS);
				State = 5718;
				function_with_argtypes_list();
				State = 5720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5719;
					drop_behavior_();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5722;
				Match(DROP);
				State = 5723;
				Match(PROCEDURE);
				State = 5724;
				function_with_argtypes_list();
				State = 5726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5725;
					drop_behavior_();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5728;
				Match(DROP);
				State = 5729;
				Match(PROCEDURE);
				State = 5730;
				Match(IF_P);
				State = 5731;
				Match(EXISTS);
				State = 5732;
				function_with_argtypes_list();
				State = 5734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5733;
					drop_behavior_();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5736;
				Match(DROP);
				State = 5737;
				Match(ROUTINE);
				State = 5738;
				function_with_argtypes_list();
				State = 5740;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5739;
					drop_behavior_();
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5742;
				Match(DROP);
				State = 5743;
				Match(ROUTINE);
				State = 5744;
				Match(IF_P);
				State = 5745;
				Match(EXISTS);
				State = 5746;
				function_with_argtypes_list();
				State = 5748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5747;
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveaggrstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
			return GetRuleContext<Aggregate_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveaggrstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaggrstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRemoveaggrstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRemoveaggrstmt(this);
		}
	}

	[RuleVersion(0)]
	public RemoveaggrstmtContext removeaggrstmt() {
		RemoveaggrstmtContext _localctx = new RemoveaggrstmtContext(Context, State);
		EnterRule(_localctx, 676, RULE_removeaggrstmt);
		int _la;
		try {
			State = 5766;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,504,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5752;
				Match(DROP);
				State = 5753;
				Match(AGGREGATE);
				State = 5754;
				aggregate_with_argtypes_list();
				State = 5756;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5755;
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5758;
				Match(DROP);
				State = 5759;
				Match(AGGREGATE);
				State = 5760;
				Match(IF_P);
				State = 5761;
				Match(EXISTS);
				State = 5762;
				aggregate_with_argtypes_list();
				State = 5764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5763;
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveoperstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypes_listContext operator_with_argtypes_list() {
			return GetRuleContext<Operator_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveoperstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeoperstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRemoveoperstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRemoveoperstmt(this);
		}
	}

	[RuleVersion(0)]
	public RemoveoperstmtContext removeoperstmt() {
		RemoveoperstmtContext _localctx = new RemoveoperstmtContext(Context, State);
		EnterRule(_localctx, 678, RULE_removeoperstmt);
		int _la;
		try {
			State = 5782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,507,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5768;
				Match(DROP);
				State = 5769;
				Match(OPERATOR);
				State = 5770;
				operator_with_argtypes_list();
				State = 5772;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5771;
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5774;
				Match(DROP);
				State = 5775;
				Match(OPERATOR);
				State = 5776;
				Match(IF_P);
				State = 5777;
				Match(EXISTS);
				State = 5778;
				operator_with_argtypes_list();
				State = 5780;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 5779;
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Oper_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		public Oper_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oper_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOper_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOper_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Oper_argtypesContext oper_argtypes() {
		Oper_argtypesContext _localctx = new Oper_argtypesContext(Context, State);
		EnterRule(_localctx, 680, RULE_oper_argtypes);
		try {
			State = 5806;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,508,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5784;
				Match(OPEN_PAREN);
				State = 5785;
				typename();
				State = 5786;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5788;
				Match(OPEN_PAREN);
				State = 5789;
				typename();
				State = 5790;
				Match(COMMA);
				State = 5791;
				typename();
				State = 5792;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5794;
				Match(OPEN_PAREN);
				State = 5795;
				Match(NONE);
				State = 5796;
				Match(COMMA);
				State = 5797;
				typename();
				State = 5798;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5800;
				Match(OPEN_PAREN);
				State = 5801;
				typename();
				State = 5802;
				Match(COMMA);
				State = 5803;
				Match(NONE);
				State = 5804;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_opContext all_op() {
			return GetRuleContext<All_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext[] colid() {
			return GetRuleContexts<ColidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid(int i) {
			return GetRuleContext<ColidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PostgreSQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PostgreSQLParser.DOT, i);
		}
		public Any_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_operator(this);
		}
	}

	[RuleVersion(0)]
	public Any_operatorContext any_operator() {
		Any_operatorContext _localctx = new Any_operatorContext(Context, State);
		EnterRule(_localctx, 682, RULE_any_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
				{
				{
				State = 5808;
				colid();
				State = 5809;
				Match(DOT);
				}
				}
				State = 5815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5816;
			all_op();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_with_argtypes_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext[] operator_with_argtypes() {
			return GetRuleContexts<Operator_with_argtypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes(int i) {
			return GetRuleContext<Operator_with_argtypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Operator_with_argtypes_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_with_argtypes_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_with_argtypes_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_with_argtypes_list(this);
		}
	}

	[RuleVersion(0)]
	public Operator_with_argtypes_listContext operator_with_argtypes_list() {
		Operator_with_argtypes_listContext _localctx = new Operator_with_argtypes_listContext(Context, State);
		EnterRule(_localctx, 684, RULE_operator_with_argtypes_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5818;
			operator_with_argtypes();
			State = 5823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5819;
				Match(COMMA);
				State = 5820;
				operator_with_argtypes();
				}
				}
				State = 5825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_with_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Oper_argtypesContext oper_argtypes() {
			return GetRuleContext<Oper_argtypesContext>(0);
		}
		public Operator_with_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_with_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_with_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_with_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Operator_with_argtypesContext operator_with_argtypes() {
		Operator_with_argtypesContext _localctx = new Operator_with_argtypesContext(Context, State);
		EnterRule(_localctx, 686, RULE_operator_with_argtypes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5826;
			any_operator();
			State = 5827;
			oper_argtypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dostmt_opt_listContext dostmt_opt_list() {
			return GetRuleContext<Dostmt_opt_listContext>(0);
		}
		public DostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDostmt(this);
		}
	}

	[RuleVersion(0)]
	public DostmtContext dostmt() {
		DostmtContext _localctx = new DostmtContext(Context, State);
		EnterRule(_localctx, 688, RULE_dostmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5829;
			Match(DO);
			State = 5830;
			dostmt_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dostmt_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dostmt_opt_itemContext[] dostmt_opt_item() {
			return GetRuleContexts<Dostmt_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dostmt_opt_itemContext dostmt_opt_item(int i) {
			return GetRuleContext<Dostmt_opt_itemContext>(i);
		}
		public Dostmt_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dostmt_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDostmt_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDostmt_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Dostmt_opt_listContext dostmt_opt_list() {
		Dostmt_opt_listContext _localctx = new Dostmt_opt_listContext(Context, State);
		EnterRule(_localctx, 690, RULE_dostmt_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5832;
				dostmt_opt_item();
				}
				}
				State = 5835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LANGUAGE || ((((_la - 563)) & ~0x3f) == 0 && ((1L << (_la - 563)) & 134217749L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dostmt_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Dostmt_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dostmt_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDostmt_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDostmt_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Dostmt_opt_itemContext dostmt_opt_item() {
		Dostmt_opt_itemContext _localctx = new Dostmt_opt_itemContext(Context, State);
		EnterRule(_localctx, 692, RULE_dostmt_opt_item);
		try {
			State = 5840;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5837;
				sconst();
				}
				break;
			case LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5838;
				Match(LANGUAGE);
				State = 5839;
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatecaststmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cast_contextContext cast_context() {
			return GetRuleContext<Cast_contextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(PostgreSQLParser.INOUT, 0); }
		public CreatecaststmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createcaststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatecaststmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatecaststmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatecaststmtContext createcaststmt() {
		CreatecaststmtContext _localctx = new CreatecaststmtContext(Context, State);
		EnterRule(_localctx, 694, RULE_createcaststmt);
		int _la;
		try {
			State = 5879;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,516,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5842;
				Match(CREATE);
				State = 5843;
				Match(CAST);
				State = 5844;
				Match(OPEN_PAREN);
				State = 5845;
				typename();
				State = 5846;
				Match(AS);
				State = 5847;
				typename();
				State = 5848;
				Match(CLOSE_PAREN);
				State = 5849;
				Match(WITH);
				State = 5850;
				Match(FUNCTION);
				State = 5851;
				function_with_argtypes();
				State = 5853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 5852;
					cast_context();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5855;
				Match(CREATE);
				State = 5856;
				Match(CAST);
				State = 5857;
				Match(OPEN_PAREN);
				State = 5858;
				typename();
				State = 5859;
				Match(AS);
				State = 5860;
				typename();
				State = 5861;
				Match(CLOSE_PAREN);
				State = 5862;
				Match(WITHOUT);
				State = 5863;
				Match(FUNCTION);
				State = 5865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 5864;
					cast_context();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5867;
				Match(CREATE);
				State = 5868;
				Match(CAST);
				State = 5869;
				Match(OPEN_PAREN);
				State = 5870;
				typename();
				State = 5871;
				Match(AS);
				State = 5872;
				typename();
				State = 5873;
				Match(CLOSE_PAREN);
				State = 5874;
				Match(WITH);
				State = 5875;
				Match(INOUT);
				State = 5877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 5876;
					cast_context();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_contextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT_P() { return GetToken(PostgreSQLParser.IMPLICIT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public Cast_contextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_context; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCast_context(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCast_context(this);
		}
	}

	[RuleVersion(0)]
	public Cast_contextContext cast_context() {
		Cast_contextContext _localctx = new Cast_contextContext(Context, State);
		EnterRule(_localctx, 696, RULE_cast_context);
		try {
			State = 5885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,517,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5881;
				Match(AS);
				State = 5882;
				Match(IMPLICIT_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5883;
				Match(AS);
				State = 5884;
				Match(ASSIGNMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropcaststmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_exists_Context if_exists_() {
			return GetRuleContext<If_exists_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		public DropcaststmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropcaststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropcaststmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropcaststmt(this);
		}
	}

	[RuleVersion(0)]
	public DropcaststmtContext dropcaststmt() {
		DropcaststmtContext _localctx = new DropcaststmtContext(Context, State);
		EnterRule(_localctx, 698, RULE_dropcaststmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5887;
			Match(DROP);
			State = 5888;
			Match(CAST);
			State = 5890;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF_P) {
				{
				State = 5889;
				if_exists_();
				}
			}

			State = 5892;
			Match(OPEN_PAREN);
			State = 5893;
			typename();
			State = 5894;
			Match(AS);
			State = 5895;
			typename();
			State = 5896;
			Match(CLOSE_PAREN);
			State = 5898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 5897;
				drop_behavior_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_exists_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public If_exists_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_exists_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIf_exists_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIf_exists_(this);
		}
	}

	[RuleVersion(0)]
	public If_exists_Context if_exists_() {
		If_exists_Context _localctx = new If_exists_Context(Context, State);
		EnterRule(_localctx, 700, RULE_if_exists_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5900;
			Match(IF_P);
			State = 5901;
			Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatetransformstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_element_listContext transform_element_list() {
			return GetRuleContext<Transform_element_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Or_replace_Context or_replace_() {
			return GetRuleContext<Or_replace_Context>(0);
		}
		public CreatetransformstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createtransformstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatetransformstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatetransformstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatetransformstmtContext createtransformstmt() {
		CreatetransformstmtContext _localctx = new CreatetransformstmtContext(Context, State);
		EnterRule(_localctx, 702, RULE_createtransformstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5903;
			Match(CREATE);
			State = 5905;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 5904;
				or_replace_();
				}
			}

			State = 5907;
			Match(TRANSFORM);
			State = 5908;
			Match(FOR);
			State = 5909;
			typename();
			State = 5910;
			Match(LANGUAGE);
			State = 5911;
			name();
			State = 5912;
			Match(OPEN_PAREN);
			State = 5913;
			transform_element_list();
			State = 5914;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_element_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQL_P() { return GetTokens(PostgreSQLParser.SQL_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_P(int i) {
			return GetToken(PostgreSQLParser.SQL_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(PostgreSQLParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(PostgreSQLParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(PostgreSQLParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(PostgreSQLParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext[] function_with_argtypes() {
			return GetRuleContexts<Function_with_argtypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes(int i) {
			return GetRuleContext<Function_with_argtypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public Transform_element_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_element_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransform_element_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransform_element_list(this);
		}
	}

	[RuleVersion(0)]
	public Transform_element_listContext transform_element_list() {
		Transform_element_listContext _localctx = new Transform_element_listContext(Context, State);
		EnterRule(_localctx, 704, RULE_transform_element_list);
		try {
			State = 5950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,521,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5916;
				Match(FROM);
				State = 5917;
				Match(SQL_P);
				State = 5918;
				Match(WITH);
				State = 5919;
				Match(FUNCTION);
				State = 5920;
				function_with_argtypes();
				State = 5921;
				Match(COMMA);
				State = 5922;
				Match(TO);
				State = 5923;
				Match(SQL_P);
				State = 5924;
				Match(WITH);
				State = 5925;
				Match(FUNCTION);
				State = 5926;
				function_with_argtypes();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5928;
				Match(TO);
				State = 5929;
				Match(SQL_P);
				State = 5930;
				Match(WITH);
				State = 5931;
				Match(FUNCTION);
				State = 5932;
				function_with_argtypes();
				State = 5933;
				Match(COMMA);
				State = 5934;
				Match(FROM);
				State = 5935;
				Match(SQL_P);
				State = 5936;
				Match(WITH);
				State = 5937;
				Match(FUNCTION);
				State = 5938;
				function_with_argtypes();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5940;
				Match(FROM);
				State = 5941;
				Match(SQL_P);
				State = 5942;
				Match(WITH);
				State = 5943;
				Match(FUNCTION);
				State = 5944;
				function_with_argtypes();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5945;
				Match(TO);
				State = 5946;
				Match(SQL_P);
				State = 5947;
				Match(WITH);
				State = 5948;
				Match(FUNCTION);
				State = 5949;
				function_with_argtypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DroptransformstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_exists_Context if_exists_() {
			return GetRuleContext<If_exists_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		public DroptransformstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_droptransformstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDroptransformstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDroptransformstmt(this);
		}
	}

	[RuleVersion(0)]
	public DroptransformstmtContext droptransformstmt() {
		DroptransformstmtContext _localctx = new DroptransformstmtContext(Context, State);
		EnterRule(_localctx, 706, RULE_droptransformstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5952;
			Match(DROP);
			State = 5953;
			Match(TRANSFORM);
			State = 5955;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF_P) {
				{
				State = 5954;
				if_exists_();
				}
			}

			State = 5957;
			Match(FOR);
			State = 5958;
			typename();
			State = 5959;
			Match(LANGUAGE);
			State = 5960;
			name();
			State = 5962;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 5961;
				drop_behavior_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReindexstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(PostgreSQLParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_target_relationContext reindex_target_relation() {
			return GetRuleContext<Reindex_target_relationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_option_listContext reindex_option_list() {
			return GetRuleContext<Reindex_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrently_Context concurrently_() {
			return GetRuleContext<Concurrently_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_target_allContext reindex_target_all() {
			return GetRuleContext<Reindex_target_allContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_name_Context single_name_() {
			return GetRuleContext<Single_name_Context>(0);
		}
		public ReindexstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindexstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindexstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindexstmt(this);
		}
	}

	[RuleVersion(0)]
	public ReindexstmtContext reindexstmt() {
		ReindexstmtContext _localctx = new ReindexstmtContext(Context, State);
		EnterRule(_localctx, 708, RULE_reindexstmt);
		int _la;
		try {
			State = 5994;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,531,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5964;
				Match(REINDEX);
				State = 5966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 5965;
					reindex_option_list();
					}
				}

				State = 5968;
				reindex_target_relation();
				State = 5970;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONCURRENTLY) {
					{
					State = 5969;
					concurrently_();
					}
				}

				State = 5972;
				qualified_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5974;
				Match(REINDEX);
				State = 5976;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 5975;
					reindex_option_list();
					}
				}

				State = 5978;
				Match(SCHEMA);
				State = 5980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONCURRENTLY) {
					{
					State = 5979;
					concurrently_();
					}
				}

				State = 5982;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5983;
				Match(REINDEX);
				State = 5985;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 5984;
					reindex_option_list();
					}
				}

				State = 5987;
				reindex_target_all();
				State = 5989;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONCURRENTLY) {
					{
					State = 5988;
					concurrently_();
					}
				}

				State = 5992;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 5991;
					single_name_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_target_relationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		public Reindex_target_relationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_target_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_target_relation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_target_relation(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_target_relationContext reindex_target_relation() {
		Reindex_target_relationContext _localctx = new Reindex_target_relationContext(Context, State);
		EnterRule(_localctx, 710, RULE_reindex_target_relation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5996;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_target_allContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		public Reindex_target_allContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_target_all; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_target_all(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_target_all(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_target_allContext reindex_target_all() {
		Reindex_target_allContext _localctx = new Reindex_target_allContext(Context, State);
		EnterRule(_localctx, 712, RULE_reindex_target_all);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5998;
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SYSTEM_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Utility_option_listContext utility_option_list() {
			return GetRuleContext<Utility_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Reindex_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_option_listContext reindex_option_list() {
		Reindex_option_listContext _localctx = new Reindex_option_listContext(Context, State);
		EnterRule(_localctx, 714, RULE_reindex_option_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6000;
			Match(OPEN_PAREN);
			State = 6001;
			utility_option_list();
			State = 6002;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertblspcstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		public AltertblspcstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertblspcstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertblspcstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertblspcstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertblspcstmtContext altertblspcstmt() {
		AltertblspcstmtContext _localctx = new AltertblspcstmtContext(Context, State);
		EnterRule(_localctx, 716, RULE_altertblspcstmt);
		try {
			State = 6016;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,532,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6004;
				Match(ALTER);
				State = 6005;
				Match(TABLESPACE);
				State = 6006;
				name();
				State = 6007;
				Match(SET);
				State = 6008;
				reloptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6010;
				Match(ALTER);
				State = 6011;
				Match(TABLESPACE);
				State = 6012;
				name();
				State = 6013;
				Match(RESET);
				State = 6014;
				reloptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenamestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(PostgreSQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext[] roleid() {
			return GetRuleContexts<RoleidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid(int i) {
			return GetRuleContext<RoleidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedural_Context procedural_() {
			return GetRuleContext<Procedural_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_Context column_() {
			return GetRuleContext<Column_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(PostgreSQLParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		public RenamestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renamestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRenamestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRenamestmt(this);
		}
	}

	[RuleVersion(0)]
	public RenamestmtContext renamestmt() {
		RenamestmtContext _localctx = new RenamestmtContext(Context, State);
		EnterRule(_localctx, 718, RULE_renamestmt);
		int _la;
		try {
			State = 6505;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,543,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6018;
				Match(ALTER);
				State = 6019;
				Match(AGGREGATE);
				State = 6020;
				aggregate_with_argtypes();
				State = 6021;
				Match(RENAME);
				State = 6022;
				Match(TO);
				State = 6023;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6025;
				Match(ALTER);
				State = 6026;
				Match(COLLATION);
				State = 6027;
				any_name();
				State = 6028;
				Match(RENAME);
				State = 6029;
				Match(TO);
				State = 6030;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6032;
				Match(ALTER);
				State = 6033;
				Match(CONVERSION_P);
				State = 6034;
				any_name();
				State = 6035;
				Match(RENAME);
				State = 6036;
				Match(TO);
				State = 6037;
				name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6039;
				Match(ALTER);
				State = 6040;
				Match(DATABASE);
				State = 6041;
				name();
				State = 6042;
				Match(RENAME);
				State = 6043;
				Match(TO);
				State = 6044;
				name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6046;
				Match(ALTER);
				State = 6047;
				Match(DOMAIN_P);
				State = 6048;
				any_name();
				State = 6049;
				Match(RENAME);
				State = 6050;
				Match(TO);
				State = 6051;
				name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6053;
				Match(ALTER);
				State = 6054;
				Match(DOMAIN_P);
				State = 6055;
				any_name();
				State = 6056;
				Match(RENAME);
				State = 6057;
				Match(CONSTRAINT);
				State = 6058;
				name();
				State = 6059;
				Match(TO);
				State = 6060;
				name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6062;
				Match(ALTER);
				State = 6063;
				Match(FOREIGN);
				State = 6064;
				Match(DATA_P);
				State = 6065;
				Match(WRAPPER);
				State = 6066;
				name();
				State = 6067;
				Match(RENAME);
				State = 6068;
				Match(TO);
				State = 6069;
				name();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6071;
				Match(ALTER);
				State = 6072;
				Match(FUNCTION);
				State = 6073;
				function_with_argtypes();
				State = 6074;
				Match(RENAME);
				State = 6075;
				Match(TO);
				State = 6076;
				name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6078;
				Match(ALTER);
				State = 6079;
				Match(GROUP_P);
				State = 6080;
				roleid();
				State = 6081;
				Match(RENAME);
				State = 6082;
				Match(TO);
				State = 6083;
				roleid();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6085;
				Match(ALTER);
				State = 6087;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PROCEDURAL) {
					{
					State = 6086;
					procedural_();
					}
				}

				State = 6089;
				Match(LANGUAGE);
				State = 6090;
				name();
				State = 6091;
				Match(RENAME);
				State = 6092;
				Match(TO);
				State = 6093;
				name();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6095;
				Match(ALTER);
				State = 6096;
				Match(OPERATOR);
				State = 6097;
				Match(CLASS);
				State = 6098;
				any_name();
				State = 6099;
				Match(USING);
				State = 6100;
				name();
				State = 6101;
				Match(RENAME);
				State = 6102;
				Match(TO);
				State = 6103;
				name();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6105;
				Match(ALTER);
				State = 6106;
				Match(OPERATOR);
				State = 6107;
				Match(FAMILY);
				State = 6108;
				any_name();
				State = 6109;
				Match(USING);
				State = 6110;
				name();
				State = 6111;
				Match(RENAME);
				State = 6112;
				Match(TO);
				State = 6113;
				name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6115;
				Match(ALTER);
				State = 6116;
				Match(POLICY);
				State = 6117;
				name();
				State = 6118;
				Match(ON);
				State = 6119;
				qualified_name();
				State = 6120;
				Match(RENAME);
				State = 6121;
				Match(TO);
				State = 6122;
				name();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6124;
				Match(ALTER);
				State = 6125;
				Match(POLICY);
				State = 6126;
				Match(IF_P);
				State = 6127;
				Match(EXISTS);
				State = 6128;
				name();
				State = 6129;
				Match(ON);
				State = 6130;
				qualified_name();
				State = 6131;
				Match(RENAME);
				State = 6132;
				Match(TO);
				State = 6133;
				name();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6135;
				Match(ALTER);
				State = 6136;
				Match(PROCEDURE);
				State = 6137;
				function_with_argtypes();
				State = 6138;
				Match(RENAME);
				State = 6139;
				Match(TO);
				State = 6140;
				name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6142;
				Match(ALTER);
				State = 6143;
				Match(PUBLICATION);
				State = 6144;
				name();
				State = 6145;
				Match(RENAME);
				State = 6146;
				Match(TO);
				State = 6147;
				name();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6149;
				Match(ALTER);
				State = 6150;
				Match(ROUTINE);
				State = 6151;
				function_with_argtypes();
				State = 6152;
				Match(RENAME);
				State = 6153;
				Match(TO);
				State = 6154;
				name();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6156;
				Match(ALTER);
				State = 6157;
				Match(SCHEMA);
				State = 6158;
				name();
				State = 6159;
				Match(RENAME);
				State = 6160;
				Match(TO);
				State = 6161;
				name();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6163;
				Match(ALTER);
				State = 6164;
				Match(SERVER);
				State = 6165;
				name();
				State = 6166;
				Match(RENAME);
				State = 6167;
				Match(TO);
				State = 6168;
				name();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6170;
				Match(ALTER);
				State = 6171;
				Match(SUBSCRIPTION);
				State = 6172;
				name();
				State = 6173;
				Match(RENAME);
				State = 6174;
				Match(TO);
				State = 6175;
				name();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6177;
				Match(ALTER);
				State = 6178;
				Match(TABLE);
				State = 6179;
				relation_expr();
				State = 6180;
				Match(RENAME);
				State = 6181;
				Match(TO);
				State = 6182;
				name();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6184;
				Match(ALTER);
				State = 6185;
				Match(TABLE);
				State = 6186;
				Match(IF_P);
				State = 6187;
				Match(EXISTS);
				State = 6188;
				relation_expr();
				State = 6189;
				Match(RENAME);
				State = 6190;
				Match(TO);
				State = 6191;
				name();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6193;
				Match(ALTER);
				State = 6194;
				Match(SEQUENCE);
				State = 6195;
				qualified_name();
				State = 6196;
				Match(RENAME);
				State = 6197;
				Match(TO);
				State = 6198;
				name();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6200;
				Match(ALTER);
				State = 6201;
				Match(SEQUENCE);
				State = 6202;
				Match(IF_P);
				State = 6203;
				Match(EXISTS);
				State = 6204;
				qualified_name();
				State = 6205;
				Match(RENAME);
				State = 6206;
				Match(TO);
				State = 6207;
				name();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6209;
				Match(ALTER);
				State = 6210;
				Match(VIEW);
				State = 6211;
				qualified_name();
				State = 6212;
				Match(RENAME);
				State = 6213;
				Match(TO);
				State = 6214;
				name();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6216;
				Match(ALTER);
				State = 6217;
				Match(VIEW);
				State = 6218;
				Match(IF_P);
				State = 6219;
				Match(EXISTS);
				State = 6220;
				qualified_name();
				State = 6221;
				Match(RENAME);
				State = 6222;
				Match(TO);
				State = 6223;
				name();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6225;
				Match(ALTER);
				State = 6226;
				Match(MATERIALIZED);
				State = 6227;
				Match(VIEW);
				State = 6228;
				qualified_name();
				State = 6229;
				Match(RENAME);
				State = 6230;
				Match(TO);
				State = 6231;
				name();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 6233;
				Match(ALTER);
				State = 6234;
				Match(MATERIALIZED);
				State = 6235;
				Match(VIEW);
				State = 6236;
				Match(IF_P);
				State = 6237;
				Match(EXISTS);
				State = 6238;
				qualified_name();
				State = 6239;
				Match(RENAME);
				State = 6240;
				Match(TO);
				State = 6241;
				name();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 6243;
				Match(ALTER);
				State = 6244;
				Match(INDEX);
				State = 6245;
				qualified_name();
				State = 6246;
				Match(RENAME);
				State = 6247;
				Match(TO);
				State = 6248;
				name();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 6250;
				Match(ALTER);
				State = 6251;
				Match(INDEX);
				State = 6252;
				Match(IF_P);
				State = 6253;
				Match(EXISTS);
				State = 6254;
				qualified_name();
				State = 6255;
				Match(RENAME);
				State = 6256;
				Match(TO);
				State = 6257;
				name();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 6259;
				Match(ALTER);
				State = 6260;
				Match(FOREIGN);
				State = 6261;
				Match(TABLE);
				State = 6262;
				relation_expr();
				State = 6263;
				Match(RENAME);
				State = 6264;
				Match(TO);
				State = 6265;
				name();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 6267;
				Match(ALTER);
				State = 6268;
				Match(FOREIGN);
				State = 6269;
				Match(TABLE);
				State = 6270;
				Match(IF_P);
				State = 6271;
				Match(EXISTS);
				State = 6272;
				relation_expr();
				State = 6273;
				Match(RENAME);
				State = 6274;
				Match(TO);
				State = 6275;
				name();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 6277;
				Match(ALTER);
				State = 6278;
				Match(TABLE);
				State = 6279;
				relation_expr();
				State = 6280;
				Match(RENAME);
				State = 6282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 6281;
					column_();
					}
				}

				State = 6284;
				name();
				State = 6285;
				Match(TO);
				State = 6286;
				name();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 6288;
				Match(ALTER);
				State = 6289;
				Match(TABLE);
				State = 6290;
				Match(IF_P);
				State = 6291;
				Match(EXISTS);
				State = 6292;
				relation_expr();
				State = 6293;
				Match(RENAME);
				State = 6295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 6294;
					column_();
					}
				}

				State = 6297;
				name();
				State = 6298;
				Match(TO);
				State = 6299;
				name();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 6301;
				Match(ALTER);
				State = 6302;
				Match(VIEW);
				State = 6303;
				qualified_name();
				State = 6304;
				Match(RENAME);
				State = 6306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 6305;
					column_();
					}
				}

				State = 6308;
				name();
				State = 6309;
				Match(TO);
				State = 6310;
				name();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 6312;
				Match(ALTER);
				State = 6313;
				Match(VIEW);
				State = 6314;
				Match(IF_P);
				State = 6315;
				Match(EXISTS);
				State = 6316;
				qualified_name();
				State = 6317;
				Match(RENAME);
				State = 6319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 6318;
					column_();
					}
				}

				State = 6321;
				name();
				State = 6322;
				Match(TO);
				State = 6323;
				name();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 6325;
				Match(ALTER);
				State = 6326;
				Match(MATERIALIZED);
				State = 6327;
				Match(VIEW);
				State = 6328;
				qualified_name();
				State = 6329;
				Match(RENAME);
				State = 6331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 6330;
					column_();
					}
				}

				State = 6333;
				name();
				State = 6334;
				Match(TO);
				State = 6335;
				name();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 6337;
				Match(ALTER);
				State = 6338;
				Match(MATERIALIZED);
				State = 6339;
				Match(VIEW);
				State = 6340;
				Match(IF_P);
				State = 6341;
				Match(EXISTS);
				State = 6342;
				qualified_name();
				State = 6343;
				Match(RENAME);
				State = 6345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 6344;
					column_();
					}
				}

				State = 6347;
				name();
				State = 6348;
				Match(TO);
				State = 6349;
				name();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 6351;
				Match(ALTER);
				State = 6352;
				Match(TABLE);
				State = 6353;
				relation_expr();
				State = 6354;
				Match(RENAME);
				State = 6355;
				Match(CONSTRAINT);
				State = 6356;
				name();
				State = 6357;
				Match(TO);
				State = 6358;
				name();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 6360;
				Match(ALTER);
				State = 6361;
				Match(TABLE);
				State = 6362;
				Match(IF_P);
				State = 6363;
				Match(EXISTS);
				State = 6364;
				relation_expr();
				State = 6365;
				Match(RENAME);
				State = 6366;
				Match(CONSTRAINT);
				State = 6367;
				name();
				State = 6368;
				Match(TO);
				State = 6369;
				name();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 6371;
				Match(ALTER);
				State = 6372;
				Match(FOREIGN);
				State = 6373;
				Match(TABLE);
				State = 6374;
				relation_expr();
				State = 6375;
				Match(RENAME);
				State = 6377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 6376;
					column_();
					}
				}

				State = 6379;
				name();
				State = 6380;
				Match(TO);
				State = 6381;
				name();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 6383;
				Match(ALTER);
				State = 6384;
				Match(FOREIGN);
				State = 6385;
				Match(TABLE);
				State = 6386;
				Match(IF_P);
				State = 6387;
				Match(EXISTS);
				State = 6388;
				relation_expr();
				State = 6389;
				Match(RENAME);
				State = 6391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 6390;
					column_();
					}
				}

				State = 6393;
				name();
				State = 6394;
				Match(TO);
				State = 6395;
				name();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 6397;
				Match(ALTER);
				State = 6398;
				Match(RULE);
				State = 6399;
				name();
				State = 6400;
				Match(ON);
				State = 6401;
				qualified_name();
				State = 6402;
				Match(RENAME);
				State = 6403;
				Match(TO);
				State = 6404;
				name();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 6406;
				Match(ALTER);
				State = 6407;
				Match(TRIGGER);
				State = 6408;
				name();
				State = 6409;
				Match(ON);
				State = 6410;
				qualified_name();
				State = 6411;
				Match(RENAME);
				State = 6412;
				Match(TO);
				State = 6413;
				name();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 6415;
				Match(ALTER);
				State = 6416;
				Match(EVENT);
				State = 6417;
				Match(TRIGGER);
				State = 6418;
				name();
				State = 6419;
				Match(RENAME);
				State = 6420;
				Match(TO);
				State = 6421;
				name();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 6423;
				Match(ALTER);
				State = 6424;
				Match(ROLE);
				State = 6425;
				roleid();
				State = 6426;
				Match(RENAME);
				State = 6427;
				Match(TO);
				State = 6428;
				roleid();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 6430;
				Match(ALTER);
				State = 6431;
				Match(USER);
				State = 6432;
				roleid();
				State = 6433;
				Match(RENAME);
				State = 6434;
				Match(TO);
				State = 6435;
				roleid();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 6437;
				Match(ALTER);
				State = 6438;
				Match(TABLESPACE);
				State = 6439;
				name();
				State = 6440;
				Match(RENAME);
				State = 6441;
				Match(TO);
				State = 6442;
				name();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 6444;
				Match(ALTER);
				State = 6445;
				Match(STATISTICS);
				State = 6446;
				any_name();
				State = 6447;
				Match(RENAME);
				State = 6448;
				Match(TO);
				State = 6449;
				name();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 6451;
				Match(ALTER);
				State = 6452;
				Match(TEXT_P);
				State = 6453;
				Match(SEARCH);
				State = 6454;
				Match(PARSER);
				State = 6455;
				any_name();
				State = 6456;
				Match(RENAME);
				State = 6457;
				Match(TO);
				State = 6458;
				name();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 6460;
				Match(ALTER);
				State = 6461;
				Match(TEXT_P);
				State = 6462;
				Match(SEARCH);
				State = 6463;
				Match(DICTIONARY);
				State = 6464;
				any_name();
				State = 6465;
				Match(RENAME);
				State = 6466;
				Match(TO);
				State = 6467;
				name();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 6469;
				Match(ALTER);
				State = 6470;
				Match(TEXT_P);
				State = 6471;
				Match(SEARCH);
				State = 6472;
				Match(TEMPLATE);
				State = 6473;
				any_name();
				State = 6474;
				Match(RENAME);
				State = 6475;
				Match(TO);
				State = 6476;
				name();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 6478;
				Match(ALTER);
				State = 6479;
				Match(TEXT_P);
				State = 6480;
				Match(SEARCH);
				State = 6481;
				Match(CONFIGURATION);
				State = 6482;
				any_name();
				State = 6483;
				Match(RENAME);
				State = 6484;
				Match(TO);
				State = 6485;
				name();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 6487;
				Match(ALTER);
				State = 6488;
				Match(TYPE_P);
				State = 6489;
				any_name();
				State = 6490;
				Match(RENAME);
				State = 6491;
				Match(TO);
				State = 6492;
				name();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 6494;
				Match(ALTER);
				State = 6495;
				Match(TYPE_P);
				State = 6496;
				any_name();
				State = 6497;
				Match(RENAME);
				State = 6498;
				Match(ATTRIBUTE);
				State = 6499;
				name();
				State = 6500;
				Match(TO);
				State = 6501;
				name();
				State = 6503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 6502;
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		public Column_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumn_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumn_(this);
		}
	}

	[RuleVersion(0)]
	public Column_Context column_() {
		Column_Context _localctx = new Column_Context(Context, State);
		EnterRule(_localctx, 720, RULE_column_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6507;
			Match(COLUMN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_data_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		public Set_data_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_data_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_data_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_data_(this);
		}
	}

	[RuleVersion(0)]
	public Set_data_Context set_data_() {
		Set_data_Context _localctx = new Set_data_Context(Context, State);
		EnterRule(_localctx, 722, RULE_set_data_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6509;
			Match(SET);
			State = 6510;
			Match(DATA_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterobjectdependsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPENDS() { return GetToken(PostgreSQLParser.DEPENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(PostgreSQLParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(PostgreSQLParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public No_Context no_() {
			return GetRuleContext<No_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		public AlterobjectdependsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterobjectdependsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterobjectdependsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterobjectdependsstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterobjectdependsstmtContext alterobjectdependsstmt() {
		AlterobjectdependsstmtContext _localctx = new AlterobjectdependsstmtContext(Context, State);
		EnterRule(_localctx, 724, RULE_alterobjectdependsstmt);
		int _la;
		try {
			State = 6581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,550,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6512;
				Match(ALTER);
				State = 6513;
				Match(FUNCTION);
				State = 6514;
				function_with_argtypes();
				State = 6516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 6515;
					no_();
					}
				}

				State = 6518;
				Match(DEPENDS);
				State = 6519;
				Match(ON);
				State = 6520;
				Match(EXTENSION);
				State = 6521;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6523;
				Match(ALTER);
				State = 6524;
				Match(PROCEDURE);
				State = 6525;
				function_with_argtypes();
				State = 6527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 6526;
					no_();
					}
				}

				State = 6529;
				Match(DEPENDS);
				State = 6530;
				Match(ON);
				State = 6531;
				Match(EXTENSION);
				State = 6532;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6534;
				Match(ALTER);
				State = 6535;
				Match(ROUTINE);
				State = 6536;
				function_with_argtypes();
				State = 6538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 6537;
					no_();
					}
				}

				State = 6540;
				Match(DEPENDS);
				State = 6541;
				Match(ON);
				State = 6542;
				Match(EXTENSION);
				State = 6543;
				name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6545;
				Match(ALTER);
				State = 6546;
				Match(TRIGGER);
				State = 6547;
				name();
				State = 6548;
				Match(ON);
				State = 6549;
				qualified_name();
				State = 6551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 6550;
					no_();
					}
				}

				State = 6553;
				Match(DEPENDS);
				State = 6554;
				Match(ON);
				State = 6555;
				Match(EXTENSION);
				State = 6556;
				name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6558;
				Match(ALTER);
				State = 6559;
				Match(MATERIALIZED);
				State = 6560;
				Match(VIEW);
				State = 6561;
				qualified_name();
				State = 6563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 6562;
					no_();
					}
				}

				State = 6565;
				Match(DEPENDS);
				State = 6566;
				Match(ON);
				State = 6567;
				Match(EXTENSION);
				State = 6568;
				name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6570;
				Match(ALTER);
				State = 6571;
				Match(INDEX);
				State = 6572;
				qualified_name();
				State = 6574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 6573;
					no_();
					}
				}

				State = 6576;
				Match(DEPENDS);
				State = 6577;
				Match(ON);
				State = 6578;
				Match(EXTENSION);
				State = 6579;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public No_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_no_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNo_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNo_(this);
		}
	}

	[RuleVersion(0)]
	public No_Context no_() {
		No_Context _localctx = new No_Context(Context, State);
		EnterRule(_localctx, 726, RULE_no_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6583;
			Match(NO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterobjectschemastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterobjectschemastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterobjectschemastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterobjectschemastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterobjectschemastmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterobjectschemastmtContext alterobjectschemastmt() {
		AlterobjectschemastmtContext _localctx = new AlterobjectschemastmtContext(Context, State);
		EnterRule(_localctx, 728, RULE_alterobjectschemastmt);
		try {
			State = 6802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,551,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6585;
				Match(ALTER);
				State = 6586;
				Match(AGGREGATE);
				State = 6587;
				aggregate_with_argtypes();
				State = 6588;
				Match(SET);
				State = 6589;
				Match(SCHEMA);
				State = 6590;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6592;
				Match(ALTER);
				State = 6593;
				Match(COLLATION);
				State = 6594;
				any_name();
				State = 6595;
				Match(SET);
				State = 6596;
				Match(SCHEMA);
				State = 6597;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6599;
				Match(ALTER);
				State = 6600;
				Match(CONVERSION_P);
				State = 6601;
				any_name();
				State = 6602;
				Match(SET);
				State = 6603;
				Match(SCHEMA);
				State = 6604;
				name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6606;
				Match(ALTER);
				State = 6607;
				Match(DOMAIN_P);
				State = 6608;
				any_name();
				State = 6609;
				Match(SET);
				State = 6610;
				Match(SCHEMA);
				State = 6611;
				name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6613;
				Match(ALTER);
				State = 6614;
				Match(EXTENSION);
				State = 6615;
				name();
				State = 6616;
				Match(SET);
				State = 6617;
				Match(SCHEMA);
				State = 6618;
				name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6620;
				Match(ALTER);
				State = 6621;
				Match(FUNCTION);
				State = 6622;
				function_with_argtypes();
				State = 6623;
				Match(SET);
				State = 6624;
				Match(SCHEMA);
				State = 6625;
				name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6627;
				Match(ALTER);
				State = 6628;
				Match(OPERATOR);
				State = 6629;
				operator_with_argtypes();
				State = 6630;
				Match(SET);
				State = 6631;
				Match(SCHEMA);
				State = 6632;
				name();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6634;
				Match(ALTER);
				State = 6635;
				Match(OPERATOR);
				State = 6636;
				Match(CLASS);
				State = 6637;
				any_name();
				State = 6638;
				Match(USING);
				State = 6639;
				name();
				State = 6640;
				Match(SET);
				State = 6641;
				Match(SCHEMA);
				State = 6642;
				name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6644;
				Match(ALTER);
				State = 6645;
				Match(OPERATOR);
				State = 6646;
				Match(FAMILY);
				State = 6647;
				any_name();
				State = 6648;
				Match(USING);
				State = 6649;
				name();
				State = 6650;
				Match(SET);
				State = 6651;
				Match(SCHEMA);
				State = 6652;
				name();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6654;
				Match(ALTER);
				State = 6655;
				Match(PROCEDURE);
				State = 6656;
				function_with_argtypes();
				State = 6657;
				Match(SET);
				State = 6658;
				Match(SCHEMA);
				State = 6659;
				name();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6661;
				Match(ALTER);
				State = 6662;
				Match(ROUTINE);
				State = 6663;
				function_with_argtypes();
				State = 6664;
				Match(SET);
				State = 6665;
				Match(SCHEMA);
				State = 6666;
				name();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6668;
				Match(ALTER);
				State = 6669;
				Match(TABLE);
				State = 6670;
				relation_expr();
				State = 6671;
				Match(SET);
				State = 6672;
				Match(SCHEMA);
				State = 6673;
				name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6675;
				Match(ALTER);
				State = 6676;
				Match(TABLE);
				State = 6677;
				Match(IF_P);
				State = 6678;
				Match(EXISTS);
				State = 6679;
				relation_expr();
				State = 6680;
				Match(SET);
				State = 6681;
				Match(SCHEMA);
				State = 6682;
				name();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6684;
				Match(ALTER);
				State = 6685;
				Match(STATISTICS);
				State = 6686;
				any_name();
				State = 6687;
				Match(SET);
				State = 6688;
				Match(SCHEMA);
				State = 6689;
				name();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6691;
				Match(ALTER);
				State = 6692;
				Match(TEXT_P);
				State = 6693;
				Match(SEARCH);
				State = 6694;
				Match(PARSER);
				State = 6695;
				any_name();
				State = 6696;
				Match(SET);
				State = 6697;
				Match(SCHEMA);
				State = 6698;
				name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6700;
				Match(ALTER);
				State = 6701;
				Match(TEXT_P);
				State = 6702;
				Match(SEARCH);
				State = 6703;
				Match(DICTIONARY);
				State = 6704;
				any_name();
				State = 6705;
				Match(SET);
				State = 6706;
				Match(SCHEMA);
				State = 6707;
				name();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6709;
				Match(ALTER);
				State = 6710;
				Match(TEXT_P);
				State = 6711;
				Match(SEARCH);
				State = 6712;
				Match(TEMPLATE);
				State = 6713;
				any_name();
				State = 6714;
				Match(SET);
				State = 6715;
				Match(SCHEMA);
				State = 6716;
				name();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6718;
				Match(ALTER);
				State = 6719;
				Match(TEXT_P);
				State = 6720;
				Match(SEARCH);
				State = 6721;
				Match(CONFIGURATION);
				State = 6722;
				any_name();
				State = 6723;
				Match(SET);
				State = 6724;
				Match(SCHEMA);
				State = 6725;
				name();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6727;
				Match(ALTER);
				State = 6728;
				Match(SEQUENCE);
				State = 6729;
				qualified_name();
				State = 6730;
				Match(SET);
				State = 6731;
				Match(SCHEMA);
				State = 6732;
				name();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6734;
				Match(ALTER);
				State = 6735;
				Match(SEQUENCE);
				State = 6736;
				Match(IF_P);
				State = 6737;
				Match(EXISTS);
				State = 6738;
				qualified_name();
				State = 6739;
				Match(SET);
				State = 6740;
				Match(SCHEMA);
				State = 6741;
				name();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6743;
				Match(ALTER);
				State = 6744;
				Match(VIEW);
				State = 6745;
				qualified_name();
				State = 6746;
				Match(SET);
				State = 6747;
				Match(SCHEMA);
				State = 6748;
				name();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6750;
				Match(ALTER);
				State = 6751;
				Match(VIEW);
				State = 6752;
				Match(IF_P);
				State = 6753;
				Match(EXISTS);
				State = 6754;
				qualified_name();
				State = 6755;
				Match(SET);
				State = 6756;
				Match(SCHEMA);
				State = 6757;
				name();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6759;
				Match(ALTER);
				State = 6760;
				Match(MATERIALIZED);
				State = 6761;
				Match(VIEW);
				State = 6762;
				qualified_name();
				State = 6763;
				Match(SET);
				State = 6764;
				Match(SCHEMA);
				State = 6765;
				name();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6767;
				Match(ALTER);
				State = 6768;
				Match(MATERIALIZED);
				State = 6769;
				Match(VIEW);
				State = 6770;
				Match(IF_P);
				State = 6771;
				Match(EXISTS);
				State = 6772;
				qualified_name();
				State = 6773;
				Match(SET);
				State = 6774;
				Match(SCHEMA);
				State = 6775;
				name();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6777;
				Match(ALTER);
				State = 6778;
				Match(FOREIGN);
				State = 6779;
				Match(TABLE);
				State = 6780;
				relation_expr();
				State = 6781;
				Match(SET);
				State = 6782;
				Match(SCHEMA);
				State = 6783;
				name();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6785;
				Match(ALTER);
				State = 6786;
				Match(FOREIGN);
				State = 6787;
				Match(TABLE);
				State = 6788;
				Match(IF_P);
				State = 6789;
				Match(EXISTS);
				State = 6790;
				relation_expr();
				State = 6791;
				Match(SET);
				State = 6792;
				Match(SCHEMA);
				State = 6793;
				name();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6795;
				Match(ALTER);
				State = 6796;
				Match(TYPE_P);
				State = 6797;
				any_name();
				State = 6798;
				Match(SET);
				State = 6799;
				Match(SCHEMA);
				State = 6800;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlteroperatorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_listContext operator_def_list() {
			return GetRuleContext<Operator_def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AlteroperatorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteroperatorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteroperatorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteroperatorstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlteroperatorstmtContext alteroperatorstmt() {
		AlteroperatorstmtContext _localctx = new AlteroperatorstmtContext(Context, State);
		EnterRule(_localctx, 730, RULE_alteroperatorstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6804;
			Match(ALTER);
			State = 6805;
			Match(OPERATOR);
			State = 6806;
			operator_with_argtypes();
			State = 6807;
			Match(SET);
			State = 6808;
			Match(OPEN_PAREN);
			State = 6809;
			operator_def_list();
			State = 6810;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_elemContext[] operator_def_elem() {
			return GetRuleContexts<Operator_def_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_elemContext operator_def_elem(int i) {
			return GetRuleContext<Operator_def_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Operator_def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_def_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_def_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_def_list(this);
		}
	}

	[RuleVersion(0)]
	public Operator_def_listContext operator_def_list() {
		Operator_def_listContext _localctx = new Operator_def_listContext(Context, State);
		EnterRule(_localctx, 732, RULE_operator_def_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6812;
			operator_def_elem();
			State = 6817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6813;
				Match(COMMA);
				State = 6814;
				operator_def_elem();
				}
				}
				State = 6819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_def_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext colLabel() {
			return GetRuleContext<ColLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_argContext operator_def_arg() {
			return GetRuleContext<Operator_def_argContext>(0);
		}
		public Operator_def_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_def_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_def_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_def_elem(this);
		}
	}

	[RuleVersion(0)]
	public Operator_def_elemContext operator_def_elem() {
		Operator_def_elemContext _localctx = new Operator_def_elemContext(Context, State);
		EnterRule(_localctx, 734, RULE_operator_def_elem);
		try {
			State = 6828;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,553,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6820;
				colLabel();
				State = 6821;
				Match(EQUAL);
				State = 6822;
				Match(NONE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6824;
				colLabel();
				State = 6825;
				Match(EQUAL);
				State = 6826;
				operator_def_arg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_def_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_all_opContext qual_all_op() {
			return GetRuleContext<Qual_all_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Operator_def_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_def_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_def_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_def_arg(this);
		}
	}

	[RuleVersion(0)]
	public Operator_def_argContext operator_def_arg() {
		Operator_def_argContext _localctx = new Operator_def_argContext(Context, State);
		EnterRule(_localctx, 736, RULE_operator_def_arg);
		try {
			State = 6835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,554,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6830;
				func_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6831;
				reserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6832;
				qual_all_op();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6833;
				numericonly();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6834;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertypestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_listContext operator_def_list() {
			return GetRuleContext<Operator_def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AltertypestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertypestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertypestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertypestmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertypestmtContext altertypestmt() {
		AltertypestmtContext _localctx = new AltertypestmtContext(Context, State);
		EnterRule(_localctx, 738, RULE_altertypestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6837;
			Match(ALTER);
			State = 6838;
			Match(TYPE_P);
			State = 6839;
			any_name();
			State = 6840;
			Match(SET);
			State = 6841;
			Match(OPEN_PAREN);
			State = 6842;
			operator_def_list();
			State = 6843;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterownerstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedural_Context procedural_() {
			return GetRuleContext<Procedural_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public AlterownerstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterownerstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterownerstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterownerstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterownerstmtContext alterownerstmt() {
		AlterownerstmtContext _localctx = new AlterownerstmtContext(Context, State);
		EnterRule(_localctx, 740, RULE_alterownerstmt);
		int _la;
		try {
			State = 7030;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,556,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6845;
				Match(ALTER);
				State = 6846;
				Match(AGGREGATE);
				State = 6847;
				aggregate_with_argtypes();
				State = 6848;
				Match(OWNER);
				State = 6849;
				Match(TO);
				State = 6850;
				rolespec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6852;
				Match(ALTER);
				State = 6853;
				Match(COLLATION);
				State = 6854;
				any_name();
				State = 6855;
				Match(OWNER);
				State = 6856;
				Match(TO);
				State = 6857;
				rolespec();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6859;
				Match(ALTER);
				State = 6860;
				Match(CONVERSION_P);
				State = 6861;
				any_name();
				State = 6862;
				Match(OWNER);
				State = 6863;
				Match(TO);
				State = 6864;
				rolespec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6866;
				Match(ALTER);
				State = 6867;
				Match(DATABASE);
				State = 6868;
				name();
				State = 6869;
				Match(OWNER);
				State = 6870;
				Match(TO);
				State = 6871;
				rolespec();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6873;
				Match(ALTER);
				State = 6874;
				Match(DOMAIN_P);
				State = 6875;
				any_name();
				State = 6876;
				Match(OWNER);
				State = 6877;
				Match(TO);
				State = 6878;
				rolespec();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6880;
				Match(ALTER);
				State = 6881;
				Match(FUNCTION);
				State = 6882;
				function_with_argtypes();
				State = 6883;
				Match(OWNER);
				State = 6884;
				Match(TO);
				State = 6885;
				rolespec();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6887;
				Match(ALTER);
				State = 6889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PROCEDURAL) {
					{
					State = 6888;
					procedural_();
					}
				}

				State = 6891;
				Match(LANGUAGE);
				State = 6892;
				name();
				State = 6893;
				Match(OWNER);
				State = 6894;
				Match(TO);
				State = 6895;
				rolespec();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6897;
				Match(ALTER);
				State = 6898;
				Match(LARGE_P);
				State = 6899;
				Match(OBJECT_P);
				State = 6900;
				numericonly();
				State = 6901;
				Match(OWNER);
				State = 6902;
				Match(TO);
				State = 6903;
				rolespec();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6905;
				Match(ALTER);
				State = 6906;
				Match(OPERATOR);
				State = 6907;
				operator_with_argtypes();
				State = 6908;
				Match(OWNER);
				State = 6909;
				Match(TO);
				State = 6910;
				rolespec();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6912;
				Match(ALTER);
				State = 6913;
				Match(OPERATOR);
				State = 6914;
				Match(CLASS);
				State = 6915;
				any_name();
				State = 6916;
				Match(USING);
				State = 6917;
				name();
				State = 6918;
				Match(OWNER);
				State = 6919;
				Match(TO);
				State = 6920;
				rolespec();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6922;
				Match(ALTER);
				State = 6923;
				Match(OPERATOR);
				State = 6924;
				Match(FAMILY);
				State = 6925;
				any_name();
				State = 6926;
				Match(USING);
				State = 6927;
				name();
				State = 6928;
				Match(OWNER);
				State = 6929;
				Match(TO);
				State = 6930;
				rolespec();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6932;
				Match(ALTER);
				State = 6933;
				Match(PROCEDURE);
				State = 6934;
				function_with_argtypes();
				State = 6935;
				Match(OWNER);
				State = 6936;
				Match(TO);
				State = 6937;
				rolespec();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6939;
				Match(ALTER);
				State = 6940;
				Match(ROUTINE);
				State = 6941;
				function_with_argtypes();
				State = 6942;
				Match(OWNER);
				State = 6943;
				Match(TO);
				State = 6944;
				rolespec();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6946;
				Match(ALTER);
				State = 6947;
				Match(SCHEMA);
				State = 6948;
				name();
				State = 6949;
				Match(OWNER);
				State = 6950;
				Match(TO);
				State = 6951;
				rolespec();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6953;
				Match(ALTER);
				State = 6954;
				Match(TYPE_P);
				State = 6955;
				any_name();
				State = 6956;
				Match(OWNER);
				State = 6957;
				Match(TO);
				State = 6958;
				rolespec();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6960;
				Match(ALTER);
				State = 6961;
				Match(TABLESPACE);
				State = 6962;
				name();
				State = 6963;
				Match(OWNER);
				State = 6964;
				Match(TO);
				State = 6965;
				rolespec();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6967;
				Match(ALTER);
				State = 6968;
				Match(STATISTICS);
				State = 6969;
				any_name();
				State = 6970;
				Match(OWNER);
				State = 6971;
				Match(TO);
				State = 6972;
				rolespec();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6974;
				Match(ALTER);
				State = 6975;
				Match(TEXT_P);
				State = 6976;
				Match(SEARCH);
				State = 6977;
				Match(DICTIONARY);
				State = 6978;
				any_name();
				State = 6979;
				Match(OWNER);
				State = 6980;
				Match(TO);
				State = 6981;
				rolespec();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6983;
				Match(ALTER);
				State = 6984;
				Match(TEXT_P);
				State = 6985;
				Match(SEARCH);
				State = 6986;
				Match(CONFIGURATION);
				State = 6987;
				any_name();
				State = 6988;
				Match(OWNER);
				State = 6989;
				Match(TO);
				State = 6990;
				rolespec();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6992;
				Match(ALTER);
				State = 6993;
				Match(FOREIGN);
				State = 6994;
				Match(DATA_P);
				State = 6995;
				Match(WRAPPER);
				State = 6996;
				name();
				State = 6997;
				Match(OWNER);
				State = 6998;
				Match(TO);
				State = 6999;
				rolespec();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 7001;
				Match(ALTER);
				State = 7002;
				Match(SERVER);
				State = 7003;
				name();
				State = 7004;
				Match(OWNER);
				State = 7005;
				Match(TO);
				State = 7006;
				rolespec();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 7008;
				Match(ALTER);
				State = 7009;
				Match(EVENT);
				State = 7010;
				Match(TRIGGER);
				State = 7011;
				name();
				State = 7012;
				Match(OWNER);
				State = 7013;
				Match(TO);
				State = 7014;
				rolespec();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 7016;
				Match(ALTER);
				State = 7017;
				Match(PUBLICATION);
				State = 7018;
				name();
				State = 7019;
				Match(OWNER);
				State = 7020;
				Match(TO);
				State = 7021;
				rolespec();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 7023;
				Match(ALTER);
				State = 7024;
				Match(SUBSCRIPTION);
				State = 7025;
				name();
				State = 7026;
				Match(OWNER);
				State = 7027;
				Match(TO);
				State = 7028;
				rolespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatepublicationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Publication_for_tables_Context publication_for_tables_() {
			return GetRuleContext<Publication_for_tables_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definition_Context definition_() {
			return GetRuleContext<Definition_Context>(0);
		}
		public CreatepublicationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createpublicationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatepublicationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatepublicationstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatepublicationstmtContext createpublicationstmt() {
		CreatepublicationstmtContext _localctx = new CreatepublicationstmtContext(Context, State);
		EnterRule(_localctx, 742, RULE_createpublicationstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7032;
			Match(CREATE);
			State = 7033;
			Match(PUBLICATION);
			State = 7034;
			name();
			State = 7036;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 7035;
				publication_for_tables_();
				}
			}

			State = 7039;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 7038;
				definition_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Publication_for_tables_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Publication_for_tablesContext publication_for_tables() {
			return GetRuleContext<Publication_for_tablesContext>(0);
		}
		public Publication_for_tables_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publication_for_tables_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPublication_for_tables_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPublication_for_tables_(this);
		}
	}

	[RuleVersion(0)]
	public Publication_for_tables_Context publication_for_tables_() {
		Publication_for_tables_Context _localctx = new Publication_for_tables_Context(Context, State);
		EnterRule(_localctx, 744, RULE_publication_for_tables_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7041;
			publication_for_tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Publication_for_tablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		public Publication_for_tablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publication_for_tables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPublication_for_tables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPublication_for_tables(this);
		}
	}

	[RuleVersion(0)]
	public Publication_for_tablesContext publication_for_tables() {
		Publication_for_tablesContext _localctx = new Publication_for_tablesContext(Context, State);
		EnterRule(_localctx, 746, RULE_publication_for_tables);
		try {
			State = 7049;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,559,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7043;
				Match(FOR);
				State = 7044;
				Match(TABLE);
				State = 7045;
				relation_expr_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7046;
				Match(FOR);
				State = 7047;
				Match(ALL);
				State = 7048;
				Match(TABLES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterpublicationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		public AlterpublicationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterpublicationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterpublicationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterpublicationstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterpublicationstmtContext alterpublicationstmt() {
		AlterpublicationstmtContext _localctx = new AlterpublicationstmtContext(Context, State);
		EnterRule(_localctx, 748, RULE_alterpublicationstmt);
		try {
			State = 7078;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,560,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7051;
				Match(ALTER);
				State = 7052;
				Match(PUBLICATION);
				State = 7053;
				name();
				State = 7054;
				Match(SET);
				State = 7055;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7057;
				Match(ALTER);
				State = 7058;
				Match(PUBLICATION);
				State = 7059;
				name();
				State = 7060;
				Match(ADD_P);
				State = 7061;
				Match(TABLE);
				State = 7062;
				relation_expr_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7064;
				Match(ALTER);
				State = 7065;
				Match(PUBLICATION);
				State = 7066;
				name();
				State = 7067;
				Match(SET);
				State = 7068;
				Match(TABLE);
				State = 7069;
				relation_expr_list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7071;
				Match(ALTER);
				State = 7072;
				Match(PUBLICATION);
				State = 7073;
				name();
				State = 7074;
				Match(DROP);
				State = 7075;
				Match(TABLE);
				State = 7076;
				relation_expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatesubscriptionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_listContext publication_name_list() {
			return GetRuleContext<Publication_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definition_Context definition_() {
			return GetRuleContext<Definition_Context>(0);
		}
		public CreatesubscriptionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createsubscriptionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatesubscriptionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatesubscriptionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatesubscriptionstmtContext createsubscriptionstmt() {
		CreatesubscriptionstmtContext _localctx = new CreatesubscriptionstmtContext(Context, State);
		EnterRule(_localctx, 750, RULE_createsubscriptionstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7080;
			Match(CREATE);
			State = 7081;
			Match(SUBSCRIPTION);
			State = 7082;
			name();
			State = 7083;
			Match(CONNECTION);
			State = 7084;
			sconst();
			State = 7085;
			Match(PUBLICATION);
			State = 7086;
			publication_name_list();
			State = 7088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 7087;
				definition_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Publication_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_itemContext[] publication_name_item() {
			return GetRuleContexts<Publication_name_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_itemContext publication_name_item(int i) {
			return GetRuleContext<Publication_name_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Publication_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publication_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPublication_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPublication_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Publication_name_listContext publication_name_list() {
		Publication_name_listContext _localctx = new Publication_name_listContext(Context, State);
		EnterRule(_localctx, 752, RULE_publication_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7090;
			publication_name_item();
			State = 7095;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7091;
				Match(COMMA);
				State = 7092;
				publication_name_item();
				}
				}
				State = 7097;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Publication_name_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext colLabel() {
			return GetRuleContext<ColLabelContext>(0);
		}
		public Publication_name_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publication_name_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPublication_name_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPublication_name_item(this);
		}
	}

	[RuleVersion(0)]
	public Publication_name_itemContext publication_name_item() {
		Publication_name_itemContext _localctx = new Publication_name_itemContext(Context, State);
		EnterRule(_localctx, 754, RULE_publication_name_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7098;
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltersubscriptionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Definition_Context definition_() {
			return GetRuleContext<Definition_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_listContext publication_name_list() {
			return GetRuleContext<Publication_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		public AltersubscriptionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altersubscriptionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltersubscriptionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltersubscriptionstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltersubscriptionstmtContext altersubscriptionstmt() {
		AltersubscriptionstmtContext _localctx = new AltersubscriptionstmtContext(Context, State);
		EnterRule(_localctx, 756, RULE_altersubscriptionstmt);
		int _la;
		try {
			State = 7139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,565,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7100;
				Match(ALTER);
				State = 7101;
				Match(SUBSCRIPTION);
				State = 7102;
				name();
				State = 7103;
				Match(SET);
				State = 7104;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7106;
				Match(ALTER);
				State = 7107;
				Match(SUBSCRIPTION);
				State = 7108;
				name();
				State = 7109;
				Match(CONNECTION);
				State = 7110;
				sconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7112;
				Match(ALTER);
				State = 7113;
				Match(SUBSCRIPTION);
				State = 7114;
				name();
				State = 7115;
				Match(REFRESH);
				State = 7116;
				Match(PUBLICATION);
				State = 7118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 7117;
					definition_();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7120;
				Match(ALTER);
				State = 7121;
				Match(SUBSCRIPTION);
				State = 7122;
				name();
				State = 7123;
				Match(SET);
				State = 7124;
				Match(PUBLICATION);
				State = 7125;
				publication_name_list();
				State = 7127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 7126;
					definition_();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7129;
				Match(ALTER);
				State = 7130;
				Match(SUBSCRIPTION);
				State = 7131;
				name();
				State = 7132;
				Match(ENABLE_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7134;
				Match(ALTER);
				State = 7135;
				Match(SUBSCRIPTION);
				State = 7136;
				name();
				State = 7137;
				Match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropsubscriptionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropsubscriptionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropsubscriptionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropsubscriptionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropsubscriptionstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropsubscriptionstmtContext dropsubscriptionstmt() {
		DropsubscriptionstmtContext _localctx = new DropsubscriptionstmtContext(Context, State);
		EnterRule(_localctx, 758, RULE_dropsubscriptionstmt);
		int _la;
		try {
			State = 7155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,568,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7141;
				Match(DROP);
				State = 7142;
				Match(SUBSCRIPTION);
				State = 7143;
				name();
				State = 7145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 7144;
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7147;
				Match(DROP);
				State = 7148;
				Match(SUBSCRIPTION);
				State = 7149;
				Match(IF_P);
				State = 7150;
				Match(EXISTS);
				State = 7151;
				name();
				State = 7153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 7152;
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventContext @event() {
			return GetRuleContext<EventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionlistContext ruleactionlist() {
			return GetRuleContext<RuleactionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_replace_Context or_replace_() {
			return GetRuleContext<Or_replace_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instead_Context instead_() {
			return GetRuleContext<Instead_Context>(0);
		}
		public RulestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRulestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRulestmt(this);
		}
	}

	[RuleVersion(0)]
	public RulestmtContext rulestmt() {
		RulestmtContext _localctx = new RulestmtContext(Context, State);
		EnterRule(_localctx, 760, RULE_rulestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7157;
			Match(CREATE);
			State = 7159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 7158;
				or_replace_();
				}
			}

			State = 7161;
			Match(RULE);
			State = 7162;
			name();
			State = 7163;
			Match(AS);
			State = 7164;
			Match(ON);
			State = 7165;
			@event();
			State = 7166;
			Match(TO);
			State = 7167;
			qualified_name();
			State = 7169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 7168;
				where_clause();
				}
			}

			State = 7171;
			Match(DO);
			State = 7173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALSO || _la==INSTEAD) {
				{
				State = 7172;
				instead_();
				}
			}

			State = 7175;
			ruleactionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtContext ruleactionstmt() {
			return GetRuleContext<RuleactionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionmultiContext ruleactionmulti() {
			return GetRuleContext<RuleactionmultiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RuleactionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionlist(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionlistContext ruleactionlist() {
		RuleactionlistContext _localctx = new RuleactionlistContext(Context, State);
		EnterRule(_localctx, 762, RULE_ruleactionlist);
		try {
			State = 7183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,572,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7177;
				Match(NOTHING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7178;
				ruleactionstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7179;
				Match(OPEN_PAREN);
				State = 7180;
				ruleactionmulti();
				State = 7181;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionmultiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtOrEmptyContext[] ruleactionstmtOrEmpty() {
			return GetRuleContexts<RuleactionstmtOrEmptyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty(int i) {
			return GetRuleContext<RuleactionstmtOrEmptyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(PostgreSQLParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(PostgreSQLParser.SEMI, i);
		}
		public RuleactionmultiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionmulti; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionmulti(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionmulti(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionmultiContext ruleactionmulti() {
		RuleactionmultiContext _localctx = new RuleactionmultiContext(Context, State);
		EnterRule(_localctx, 764, RULE_ruleactionmulti);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & 131089L) != 0) || _la==DELETE_P || _la==INSERT || _la==NOTIFY || _la==UPDATE || _la==VALUES) {
				{
				State = 7185;
				ruleactionstmtOrEmpty();
				}
			}

			State = 7194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 7188;
				Match(SEMI);
				State = 7190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & 131089L) != 0) || _la==DELETE_P || _la==INSERT || _la==NOTIFY || _la==UPDATE || _la==VALUES) {
					{
					State = 7189;
					ruleactionstmtOrEmpty();
					}
				}

				}
				}
				State = 7196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotifystmtContext notifystmt() {
			return GetRuleContext<NotifystmtContext>(0);
		}
		public RuleactionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionstmt(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionstmtContext ruleactionstmt() {
		RuleactionstmtContext _localctx = new RuleactionstmtContext(Context, State);
		EnterRule(_localctx, 766, RULE_ruleactionstmt);
		try {
			State = 7202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,576,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7197;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7198;
				insertstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7199;
				updatestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7200;
				deletestmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7201;
				notifystmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionstmtOrEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtContext ruleactionstmt() {
			return GetRuleContext<RuleactionstmtContext>(0);
		}
		public RuleactionstmtOrEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionstmtOrEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionstmtOrEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionstmtOrEmpty(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty() {
		RuleactionstmtOrEmptyContext _localctx = new RuleactionstmtOrEmptyContext(Context, State);
		EnterRule(_localctx, 768, RULE_ruleactionstmtOrEmpty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7204;
			ruleactionstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent(this);
		}
	}

	[RuleVersion(0)]
	public EventContext @event() {
		EventContext _localctx = new EventContext(Context, State);
		EnterRule(_localctx, 770, RULE_event);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7206;
			_la = TokenStream.LA(1);
			if ( !(_la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instead_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(PostgreSQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO() { return GetToken(PostgreSQLParser.ALSO, 0); }
		public Instead_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instead_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInstead_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInstead_(this);
		}
	}

	[RuleVersion(0)]
	public Instead_Context instead_() {
		Instead_Context _localctx = new Instead_Context(Context, State);
		EnterRule(_localctx, 772, RULE_instead_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7208;
			_la = TokenStream.LA(1);
			if ( !(_la==ALSO || _la==INSTEAD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotifystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFY() { return GetToken(PostgreSQLParser.NOTIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Notify_payloadContext notify_payload() {
			return GetRuleContext<Notify_payloadContext>(0);
		}
		public NotifystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notifystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNotifystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNotifystmt(this);
		}
	}

	[RuleVersion(0)]
	public NotifystmtContext notifystmt() {
		NotifystmtContext _localctx = new NotifystmtContext(Context, State);
		EnterRule(_localctx, 774, RULE_notifystmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7210;
			Match(NOTIFY);
			State = 7211;
			colid();
			State = 7213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 7212;
				notify_payload();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Notify_payloadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Notify_payloadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notify_payload; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNotify_payload(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNotify_payload(this);
		}
	}

	[RuleVersion(0)]
	public Notify_payloadContext notify_payload() {
		Notify_payloadContext _localctx = new Notify_payloadContext(Context, State);
		EnterRule(_localctx, 776, RULE_notify_payload);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7215;
			Match(COMMA);
			State = 7216;
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListenstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTEN() { return GetToken(PostgreSQLParser.LISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public ListenstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listenstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterListenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitListenstmt(this);
		}
	}

	[RuleVersion(0)]
	public ListenstmtContext listenstmt() {
		ListenstmtContext _localctx = new ListenstmtContext(Context, State);
		EnterRule(_localctx, 778, RULE_listenstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7218;
			Match(LISTEN);
			State = 7219;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlistenstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLISTEN() { return GetToken(PostgreSQLParser.UNLISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		public UnlistenstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlistenstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUnlistenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUnlistenstmt(this);
		}
	}

	[RuleVersion(0)]
	public UnlistenstmtContext unlistenstmt() {
		UnlistenstmtContext _localctx = new UnlistenstmtContext(Context, State);
		EnterRule(_localctx, 780, RULE_unlistenstmt);
		try {
			State = 7225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,578,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7221;
				Match(UNLISTEN);
				State = 7222;
				colid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7223;
				Match(UNLISTEN);
				State = 7224;
				Match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_P() { return GetToken(PostgreSQLParser.ABORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_Context transaction_() {
			return GetRuleContext<Transaction_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_chain_Context transaction_chain_() {
			return GetRuleContext<Transaction_chain_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_P() { return GetToken(PostgreSQLParser.BEGIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
			return GetRuleContext<Transaction_mode_list_or_emptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(PostgreSQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(PostgreSQLParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(PostgreSQLParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARED() { return GetToken(PostgreSQLParser.PREPARED, 0); }
		public TransactionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionstmt(this);
		}
	}

	[RuleVersion(0)]
	public TransactionstmtContext transactionstmt() {
		TransactionstmtContext _localctx = new TransactionstmtContext(Context, State);
		EnterRule(_localctx, 782, RULE_transactionstmt);
		int _la;
		try {
			State = 7296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,592,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7227;
				Match(ABORT_P);
				State = 7229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					State = 7228;
					transaction_();
					}
				}

				State = 7232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 7231;
					transaction_chain_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7234;
				Match(BEGIN_P);
				State = 7236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					State = 7235;
					transaction_();
					}
				}

				State = 7239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFERRABLE || _la==NOT || _la==ISOLATION || _la==READ) {
					{
					State = 7238;
					transaction_mode_list_or_empty();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7241;
				Match(START);
				State = 7242;
				Match(TRANSACTION);
				State = 7244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFERRABLE || _la==NOT || _la==ISOLATION || _la==READ) {
					{
					State = 7243;
					transaction_mode_list_or_empty();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7246;
				Match(COMMIT);
				State = 7248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					State = 7247;
					transaction_();
					}
				}

				State = 7251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 7250;
					transaction_chain_();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7253;
				Match(END_P);
				State = 7255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					State = 7254;
					transaction_();
					}
				}

				State = 7258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 7257;
					transaction_chain_();
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7260;
				Match(ROLLBACK);
				State = 7262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					State = 7261;
					transaction_();
					}
				}

				State = 7265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 7264;
					transaction_chain_();
					}
				}

				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7267;
				Match(SAVEPOINT);
				State = 7268;
				colid();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7269;
				Match(RELEASE);
				State = 7270;
				Match(SAVEPOINT);
				State = 7271;
				colid();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7272;
				Match(RELEASE);
				State = 7273;
				colid();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7274;
				Match(ROLLBACK);
				State = 7276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					State = 7275;
					transaction_();
					}
				}

				State = 7278;
				Match(TO);
				State = 7279;
				Match(SAVEPOINT);
				State = 7280;
				colid();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7281;
				Match(ROLLBACK);
				State = 7283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					State = 7282;
					transaction_();
					}
				}

				State = 7285;
				Match(TO);
				State = 7286;
				colid();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7287;
				Match(PREPARE);
				State = 7288;
				Match(TRANSACTION);
				State = 7289;
				sconst();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7290;
				Match(COMMIT);
				State = 7291;
				Match(PREPARED);
				State = 7292;
				sconst();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7293;
				Match(ROLLBACK);
				State = 7294;
				Match(PREPARED);
				State = 7295;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(PostgreSQLParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		public Transaction_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransaction_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransaction_(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_Context transaction_() {
		Transaction_Context _localctx = new Transaction_Context(Context, State);
		EnterRule(_localctx, 784, RULE_transaction_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7298;
			_la = TokenStream.LA(1);
			if ( !(_la==TRANSACTION || _la==WORK) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_mode_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Iso_levelContext iso_level() {
			return GetRuleContext<Iso_levelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(PostgreSQLParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public Transaction_mode_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_mode_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransaction_mode_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransaction_mode_item(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_mode_itemContext transaction_mode_item() {
		Transaction_mode_itemContext _localctx = new Transaction_mode_itemContext(Context, State);
		EnterRule(_localctx, 786, RULE_transaction_mode_item);
		try {
			State = 7310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,593,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7300;
				Match(ISOLATION);
				State = 7301;
				Match(LEVEL);
				State = 7302;
				iso_level();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7303;
				Match(READ);
				State = 7304;
				Match(ONLY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7305;
				Match(READ);
				State = 7306;
				Match(WRITE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7307;
				Match(DEFERRABLE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7308;
				Match(NOT);
				State = 7309;
				Match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_mode_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_itemContext[] transaction_mode_item() {
			return GetRuleContexts<Transaction_mode_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_itemContext transaction_mode_item(int i) {
			return GetRuleContext<Transaction_mode_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_mode_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransaction_mode_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransaction_mode_list(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_mode_listContext transaction_mode_list() {
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(Context, State);
		EnterRule(_localctx, 788, RULE_transaction_mode_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7312;
			transaction_mode_item();
			State = 7319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA || _la==DEFERRABLE || _la==NOT || _la==ISOLATION || _la==READ) {
				{
				{
				State = 7314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7313;
					Match(COMMA);
					}
				}

				State = 7316;
				transaction_mode_item();
				}
				}
				State = 7321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_mode_list_or_emptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_listContext transaction_mode_list() {
			return GetRuleContext<Transaction_mode_listContext>(0);
		}
		public Transaction_mode_list_or_emptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_mode_list_or_empty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransaction_mode_list_or_empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransaction_mode_list_or_empty(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
		Transaction_mode_list_or_emptyContext _localctx = new Transaction_mode_list_or_emptyContext(Context, State);
		EnterRule(_localctx, 790, RULE_transaction_mode_list_or_empty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7322;
			transaction_mode_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_chain_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Transaction_chain_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_chain_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransaction_chain_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransaction_chain_(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_chain_Context transaction_chain_() {
		Transaction_chain_Context _localctx = new Transaction_chain_Context(Context, State);
		EnterRule(_localctx, 792, RULE_transaction_chain_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7324;
			Match(AND);
			State = 7326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO) {
				{
				State = 7325;
				Match(NO);
				}
			}

			State = 7328;
			Match(CHAIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(PostgreSQLParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Check_option_Context check_option_() {
			return GetRuleContext<Check_option_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_list_Context column_list_() {
			return GetRuleContext<Column_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reloptions_Context reloptions_() {
			return GetRuleContext<Reloptions_Context>(0);
		}
		public ViewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterViewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitViewstmt(this);
		}
	}

	[RuleVersion(0)]
	public ViewstmtContext viewstmt() {
		ViewstmtContext _localctx = new ViewstmtContext(Context, State);
		EnterRule(_localctx, 794, RULE_viewstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7330;
			Match(CREATE);
			State = 7333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 7331;
				Match(OR);
				State = 7332;
				Match(REPLACE);
				}
			}

			State = 7336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==LOCAL || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & 32773L) != 0)) {
				{
				State = 7335;
				opttemp();
				}
			}

			State = 7355;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VIEW:
				{
				State = 7338;
				Match(VIEW);
				State = 7339;
				qualified_name();
				State = 7341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 7340;
					column_list_();
					}
				}

				State = 7344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 7343;
					reloptions_();
					}
				}

				}
				break;
			case RECURSIVE:
				{
				State = 7346;
				Match(RECURSIVE);
				State = 7347;
				Match(VIEW);
				State = 7348;
				qualified_name();
				State = 7349;
				Match(OPEN_PAREN);
				State = 7350;
				columnlist();
				State = 7351;
				Match(CLOSE_PAREN);
				State = 7353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 7352;
					reloptions_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7357;
			Match(AS);
			State = 7358;
			selectstmt();
			State = 7360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 7359;
				check_option_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Check_option_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(PostgreSQLParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		public Check_option_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check_option_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCheck_option_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCheck_option_(this);
		}
	}

	[RuleVersion(0)]
	public Check_option_Context check_option_() {
		Check_option_Context _localctx = new Check_option_Context(Context, State);
		EnterRule(_localctx, 796, RULE_check_option_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7362;
			Match(WITH);
			State = 7364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADED || _la==LOCAL) {
				{
				State = 7363;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADED || _la==LOCAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 7366;
			Match(CHECK);
			State = 7367;
			Match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(PostgreSQLParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_nameContext file_name() {
			return GetRuleContext<File_nameContext>(0);
		}
		public LoadstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLoadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLoadstmt(this);
		}
	}

	[RuleVersion(0)]
	public LoadstmtContext loadstmt() {
		LoadstmtContext _localctx = new LoadstmtContext(Context, State);
		EnterRule(_localctx, 798, RULE_loadstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7369;
			Match(LOAD);
			State = 7370;
			file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedbstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_Context with_() {
			return GetRuleContext<With_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_listContext createdb_opt_list() {
			return GetRuleContext<Createdb_opt_listContext>(0);
		}
		public CreatedbstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdbstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedbstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedbstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatedbstmtContext createdbstmt() {
		CreatedbstmtContext _localctx = new CreatedbstmtContext(Context, State);
		EnterRule(_localctx, 800, RULE_createdbstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7372;
			Match(CREATE);
			State = 7373;
			Match(DATABASE);
			State = 7374;
			name();
			State = 7376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 7375;
				with_();
				}
			}

			State = 7379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONNECTION || _la==ENCODING || _la==LOCATION || _la==OWNER || _la==TABLESPACE || _la==TEMPLATE || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 268435491L) != 0)) {
				{
				State = 7378;
				createdb_opt_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_itemsContext createdb_opt_items() {
			return GetRuleContext<Createdb_opt_itemsContext>(0);
		}
		public Createdb_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_listContext createdb_opt_list() {
		Createdb_opt_listContext _localctx = new Createdb_opt_listContext(Context, State);
		EnterRule(_localctx, 802, RULE_createdb_opt_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7381;
			createdb_opt_items();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_itemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_itemContext[] createdb_opt_item() {
			return GetRuleContexts<Createdb_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_itemContext createdb_opt_item(int i) {
			return GetRuleContext<Createdb_opt_itemContext>(i);
		}
		public Createdb_opt_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_items; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_items(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_items(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_itemsContext createdb_opt_items() {
		Createdb_opt_itemsContext _localctx = new Createdb_opt_itemsContext(Context, State);
		EnterRule(_localctx, 804, RULE_createdb_opt_items);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 7383;
				createdb_opt_item();
				}
				}
				State = 7386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CONNECTION || _la==ENCODING || _la==LOCATION || _la==OWNER || _la==TABLESPACE || _la==TEMPLATE || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 268435491L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_nameContext createdb_opt_name() {
			return GetRuleContext<Createdb_opt_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_or_string_Context boolean_or_string_() {
			return GetRuleContext<Boolean_or_string_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Equal_Context equal_() {
			return GetRuleContext<Equal_Context>(0);
		}
		public Createdb_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_itemContext createdb_opt_item() {
		Createdb_opt_itemContext _localctx = new Createdb_opt_itemContext(Context, State);
		EnterRule(_localctx, 806, RULE_createdb_opt_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7388;
			createdb_opt_name();
			State = 7390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 7389;
				equal_();
				}
			}

			State = 7395;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
				{
				State = 7392;
				signediconst();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case FALSE_P:
			case ON:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				{
				State = 7393;
				boolean_or_string_();
				}
				break;
			case DEFAULT:
				{
				State = 7394;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(PostgreSQLParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION() { return GetToken(PostgreSQLParser.LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		public Createdb_opt_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_name(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_nameContext createdb_opt_name() {
		Createdb_opt_nameContext _localctx = new Createdb_opt_nameContext(Context, State);
		EnterRule(_localctx, 808, RULE_createdb_opt_name);
		try {
			State = 7405;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7397;
				identifier();
				}
				break;
			case CONNECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7398;
				Match(CONNECTION);
				State = 7399;
				Match(LIMIT);
				}
				break;
			case ENCODING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7400;
				Match(ENCODING);
				}
				break;
			case LOCATION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7401;
				Match(LOCATION);
				}
				break;
			case OWNER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7402;
				Match(OWNER);
				}
				break;
			case TABLESPACE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7403;
				Match(TABLESPACE);
				}
				break;
			case TEMPLATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7404;
				Match(TEMPLATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equal_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		public Equal_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equal_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEqual_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEqual_(this);
		}
	}

	[RuleVersion(0)]
	public Equal_Context equal_() {
		Equal_Context _localctx = new Equal_Context(Context, State);
		EnterRule(_localctx, 810, RULE_equal_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7407;
			Match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdatabasestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_listContext createdb_opt_list() {
			return GetRuleContext<Createdb_opt_listContext>(0);
		}
		public AlterdatabasestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdatabasestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdatabasestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdatabasestmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdatabasestmtContext alterdatabasestmt() {
		AlterdatabasestmtContext _localctx = new AlterdatabasestmtContext(Context, State);
		EnterRule(_localctx, 812, RULE_alterdatabasestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7409;
			Match(ALTER);
			State = 7410;
			Match(DATABASE);
			State = 7411;
			name();
			State = 7422;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 7412;
				Match(WITH);
				State = 7414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONNECTION || _la==ENCODING || _la==LOCATION || _la==OWNER || _la==TABLESPACE || _la==TEMPLATE || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 268435491L) != 0)) {
					{
					State = 7413;
					createdb_opt_list();
					}
				}

				}
				break;
			case Eof:
			case SEMI:
			case CONNECTION:
			case ENCODING:
			case LOCATION:
			case OWNER:
			case TABLESPACE:
			case TEMPLATE:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				{
				State = 7417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONNECTION || _la==ENCODING || _la==LOCATION || _la==OWNER || _la==TABLESPACE || _la==TEMPLATE || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 268435491L) != 0)) {
					{
					State = 7416;
					createdb_opt_list();
					}
				}

				}
				break;
			case SET:
				{
				State = 7419;
				Match(SET);
				State = 7420;
				Match(TABLESPACE);
				State = 7421;
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdatabasesetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetresetclauseContext setresetclause() {
			return GetRuleContext<SetresetclauseContext>(0);
		}
		public AlterdatabasesetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdatabasesetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdatabasesetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdatabasesetstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdatabasesetstmtContext alterdatabasesetstmt() {
		AlterdatabasesetstmtContext _localctx = new AlterdatabasesetstmtContext(Context, State);
		EnterRule(_localctx, 814, RULE_alterdatabasesetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7424;
			Match(ALTER);
			State = 7425;
			Match(DATABASE);
			State = 7426;
			name();
			State = 7427;
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropdbstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Drop_option_listContext drop_option_list() {
			return GetRuleContext<Drop_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_Context with_() {
			return GetRuleContext<With_Context>(0);
		}
		public DropdbstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropdbstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropdbstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropdbstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropdbstmtContext dropdbstmt() {
		DropdbstmtContext _localctx = new DropdbstmtContext(Context, State);
		EnterRule(_localctx, 816, RULE_dropdbstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7429;
			Match(DROP);
			State = 7430;
			Match(DATABASE);
			State = 7433;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,614,Context) ) {
			case 1:
				{
				State = 7431;
				Match(IF_P);
				State = 7432;
				Match(EXISTS);
				}
				break;
			}
			State = 7435;
			name();
			State = 7443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN || _la==WITH) {
				{
				State = 7437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 7436;
					with_();
					}
				}

				State = 7439;
				Match(OPEN_PAREN);
				State = 7440;
				drop_option_list();
				State = 7441;
				Match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Drop_optionContext[] drop_option() {
			return GetRuleContexts<Drop_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_optionContext drop_option(int i) {
			return GetRuleContext<Drop_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Drop_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDrop_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDrop_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Drop_option_listContext drop_option_list() {
		Drop_option_listContext _localctx = new Drop_option_listContext(Context, State);
		EnterRule(_localctx, 818, RULE_drop_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7445;
			drop_option();
			State = 7450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7446;
				Match(COMMA);
				State = 7447;
				drop_option();
				}
				}
				State = 7452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		public Drop_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDrop_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDrop_option(this);
		}
	}

	[RuleVersion(0)]
	public Drop_optionContext drop_option() {
		Drop_optionContext _localctx = new Drop_optionContext(Context, State);
		EnterRule(_localctx, 820, RULE_drop_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7453;
			Match(FORCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltercollationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		public AltercollationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altercollationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltercollationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltercollationstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltercollationstmtContext altercollationstmt() {
		AltercollationstmtContext _localctx = new AltercollationstmtContext(Context, State);
		EnterRule(_localctx, 822, RULE_altercollationstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7455;
			Match(ALTER);
			State = 7456;
			Match(COLLATION);
			State = 7457;
			any_name();
			State = 7458;
			Match(REFRESH);
			State = 7459;
			Match(VERSION_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltersystemstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_setContext generic_set() {
			return GetRuleContext<Generic_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		public AltersystemstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altersystemstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltersystemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltersystemstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltersystemstmtContext altersystemstmt() {
		AltersystemstmtContext _localctx = new AltersystemstmtContext(Context, State);
		EnterRule(_localctx, 824, RULE_altersystemstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7461;
			Match(ALTER);
			State = 7462;
			Match(SYSTEM_P);
			State = 7463;
			_la = TokenStream.LA(1);
			if ( !(_la==RESET || _la==SET) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7464;
			generic_set();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedomainstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColquallistContext colquallist() {
			return GetRuleContext<ColquallistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_Context as_() {
			return GetRuleContext<As_Context>(0);
		}
		public CreatedomainstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdomainstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedomainstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedomainstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatedomainstmtContext createdomainstmt() {
		CreatedomainstmtContext _localctx = new CreatedomainstmtContext(Context, State);
		EnterRule(_localctx, 826, RULE_createdomainstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7466;
			Match(CREATE);
			State = 7467;
			Match(DOMAIN_P);
			State = 7468;
			any_name();
			State = 7470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 7469;
				as_();
				}
			}

			State = 7472;
			typename();
			State = 7473;
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdomainstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_column_defaultContext alter_column_default() {
			return GetRuleContext<Alter_column_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(PostgreSQLParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Drop_behavior_Context drop_behavior_() {
			return GetRuleContext<Drop_behavior_Context>(0);
		}
		public AlterdomainstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdomainstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdomainstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdomainstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdomainstmtContext alterdomainstmt() {
		AlterdomainstmtContext _localctx = new AlterdomainstmtContext(Context, State);
		EnterRule(_localctx, 828, RULE_alterdomainstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7475;
			Match(ALTER);
			State = 7476;
			Match(DOMAIN_P);
			State = 7477;
			any_name();
			State = 7500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,621,Context) ) {
			case 1:
				{
				State = 7478;
				alter_column_default();
				}
				break;
			case 2:
				{
				State = 7479;
				Match(DROP);
				State = 7480;
				Match(NOT);
				State = 7481;
				Match(NULL_P);
				}
				break;
			case 3:
				{
				State = 7482;
				Match(SET);
				State = 7483;
				Match(NOT);
				State = 7484;
				Match(NULL_P);
				}
				break;
			case 4:
				{
				State = 7485;
				Match(ADD_P);
				State = 7486;
				tableconstraint();
				}
				break;
			case 5:
				{
				State = 7487;
				Match(DROP);
				State = 7488;
				Match(CONSTRAINT);
				State = 7491;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,619,Context) ) {
				case 1:
					{
					State = 7489;
					Match(IF_P);
					State = 7490;
					Match(EXISTS);
					}
					break;
				}
				State = 7493;
				name();
				State = 7495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					State = 7494;
					drop_behavior_();
					}
				}

				}
				break;
			case 6:
				{
				State = 7497;
				Match(VALIDATE);
				State = 7498;
				Match(CONSTRAINT);
				State = 7499;
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		public As_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAs_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAs_(this);
		}
	}

	[RuleVersion(0)]
	public As_Context as_() {
		As_Context _localctx = new As_Context(Context, State);
		EnterRule(_localctx, 830, RULE_as_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7502;
			Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertsdictionarystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public AltertsdictionarystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertsdictionarystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertsdictionarystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertsdictionarystmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertsdictionarystmtContext altertsdictionarystmt() {
		AltertsdictionarystmtContext _localctx = new AltertsdictionarystmtContext(Context, State);
		EnterRule(_localctx, 832, RULE_altertsdictionarystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7504;
			Match(ALTER);
			State = 7505;
			Match(TEXT_P);
			State = 7506;
			Match(SEARCH);
			State = 7507;
			Match(DICTIONARY);
			State = 7508;
			any_name();
			State = 7509;
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertsconfigurationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(PostgreSQLParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(PostgreSQLParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_withContext any_with() {
			return GetRuleContext<Any_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_list_Context any_name_list_() {
			return GetRuleContext<Any_name_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public AltertsconfigurationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertsconfigurationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertsconfigurationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertsconfigurationstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertsconfigurationstmtContext altertsconfigurationstmt() {
		AltertsconfigurationstmtContext _localctx = new AltertsconfigurationstmtContext(Context, State);
		EnterRule(_localctx, 834, RULE_altertsconfigurationstmt);
		try {
			State = 7583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,622,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7511;
				Match(ALTER);
				State = 7512;
				Match(TEXT_P);
				State = 7513;
				Match(SEARCH);
				State = 7514;
				Match(CONFIGURATION);
				State = 7515;
				any_name();
				State = 7516;
				Match(ADD_P);
				State = 7517;
				Match(MAPPING);
				State = 7518;
				Match(FOR);
				State = 7519;
				name_list();
				State = 7520;
				any_with();
				State = 7521;
				any_name_list_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7523;
				Match(ALTER);
				State = 7524;
				Match(TEXT_P);
				State = 7525;
				Match(SEARCH);
				State = 7526;
				Match(CONFIGURATION);
				State = 7527;
				any_name();
				State = 7528;
				Match(ALTER);
				State = 7529;
				Match(MAPPING);
				State = 7530;
				Match(FOR);
				State = 7531;
				name_list();
				State = 7532;
				any_with();
				State = 7533;
				any_name_list_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7535;
				Match(ALTER);
				State = 7536;
				Match(TEXT_P);
				State = 7537;
				Match(SEARCH);
				State = 7538;
				Match(CONFIGURATION);
				State = 7539;
				any_name();
				State = 7540;
				Match(ALTER);
				State = 7541;
				Match(MAPPING);
				State = 7542;
				Match(REPLACE);
				State = 7543;
				any_name();
				State = 7544;
				any_with();
				State = 7545;
				any_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7547;
				Match(ALTER);
				State = 7548;
				Match(TEXT_P);
				State = 7549;
				Match(SEARCH);
				State = 7550;
				Match(CONFIGURATION);
				State = 7551;
				any_name();
				State = 7552;
				Match(ALTER);
				State = 7553;
				Match(MAPPING);
				State = 7554;
				Match(FOR);
				State = 7555;
				name_list();
				State = 7556;
				Match(REPLACE);
				State = 7557;
				any_name();
				State = 7558;
				any_with();
				State = 7559;
				any_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7561;
				Match(ALTER);
				State = 7562;
				Match(TEXT_P);
				State = 7563;
				Match(SEARCH);
				State = 7564;
				Match(CONFIGURATION);
				State = 7565;
				any_name();
				State = 7566;
				Match(DROP);
				State = 7567;
				Match(MAPPING);
				State = 7568;
				Match(FOR);
				State = 7569;
				name_list();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7571;
				Match(ALTER);
				State = 7572;
				Match(TEXT_P);
				State = 7573;
				Match(SEARCH);
				State = 7574;
				Match(CONFIGURATION);
				State = 7575;
				any_name();
				State = 7576;
				Match(DROP);
				State = 7577;
				Match(MAPPING);
				State = 7578;
				Match(IF_P);
				State = 7579;
				Match(EXISTS);
				State = 7580;
				Match(FOR);
				State = 7581;
				name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_withContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		public Any_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_with(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_with(this);
		}
	}

	[RuleVersion(0)]
	public Any_withContext any_with() {
		Any_withContext _localctx = new Any_withContext(Context, State);
		EnterRule(_localctx, 836, RULE_any_with);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7585;
			Match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateconversionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Default_Context default_() {
			return GetRuleContext<Default_Context>(0);
		}
		public CreateconversionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createconversionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateconversionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateconversionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateconversionstmtContext createconversionstmt() {
		CreateconversionstmtContext _localctx = new CreateconversionstmtContext(Context, State);
		EnterRule(_localctx, 838, RULE_createconversionstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7587;
			Match(CREATE);
			State = 7589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 7588;
				default_();
				}
			}

			State = 7591;
			Match(CONVERSION_P);
			State = 7592;
			any_name();
			State = 7593;
			Match(FOR);
			State = 7594;
			sconst();
			State = 7595;
			Match(TO);
			State = 7596;
			sconst();
			State = 7597;
			Match(FROM);
			State = 7598;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusterstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(PostgreSQLParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Verbose_Context verbose_() {
			return GetRuleContext<Verbose_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cluster_index_specificationContext cluster_index_specification() {
			return GetRuleContext<Cluster_index_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		public ClusterstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clusterstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterClusterstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitClusterstmt(this);
		}
	}

	[RuleVersion(0)]
	public ClusterstmtContext clusterstmt() {
		ClusterstmtContext _localctx = new ClusterstmtContext(Context, State);
		EnterRule(_localctx, 840, RULE_clusterstmt);
		int _la;
		try {
			State = 7620;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,628,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7600;
				Match(CLUSTER);
				State = 7602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERBOSE) {
					{
					State = 7601;
					verbose_();
					}
				}

				State = 7604;
				qualified_name();
				State = 7606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 7605;
					cluster_index_specification();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7608;
				Match(CLUSTER);
				State = 7610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERBOSE) {
					{
					State = 7609;
					verbose_();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7612;
				Match(CLUSTER);
				State = 7614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERBOSE) {
					{
					State = 7613;
					verbose_();
					}
				}

				State = 7616;
				name();
				State = 7617;
				Match(ON);
				State = 7618;
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cluster_index_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Cluster_index_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cluster_index_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCluster_index_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCluster_index_specification(this);
		}
	}

	[RuleVersion(0)]
	public Cluster_index_specificationContext cluster_index_specification() {
		Cluster_index_specificationContext _localctx = new Cluster_index_specificationContext(Context, State);
		EnterRule(_localctx, 842, RULE_cluster_index_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7622;
			Match(USING);
			State = 7623;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VacuumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(PostgreSQLParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_Context full_() {
			return GetRuleContext<Full_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Freeze_Context freeze_() {
			return GetRuleContext<Freeze_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Verbose_Context verbose_() {
			return GetRuleContext<Verbose_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_Context analyze_() {
			return GetRuleContext<Analyze_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_relation_list_Context vacuum_relation_list_() {
			return GetRuleContext<Vacuum_relation_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_listContext vac_analyze_option_list() {
			return GetRuleContext<Vac_analyze_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public VacuumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVacuumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVacuumstmt(this);
		}
	}

	[RuleVersion(0)]
	public VacuumstmtContext vacuumstmt() {
		VacuumstmtContext _localctx = new VacuumstmtContext(Context, State);
		EnterRule(_localctx, 844, RULE_vacuumstmt);
		int _la;
		try {
			State = 7648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,635,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7625;
				Match(VACUUM);
				State = 7627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 7626;
					full_();
					}
				}

				State = 7630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FREEZE) {
					{
					State = 7629;
					freeze_();
					}
				}

				State = 7633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERBOSE) {
					{
					State = 7632;
					verbose_();
					}
				}

				State = 7636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANALYSE || _la==ANALYZE) {
					{
					State = 7635;
					analyze_();
					}
				}

				State = 7639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 7638;
					vacuum_relation_list_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7641;
				Match(VACUUM);
				State = 7642;
				Match(OPEN_PAREN);
				State = 7643;
				vac_analyze_option_list();
				State = 7644;
				Match(CLOSE_PAREN);
				State = 7646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 7645;
					vacuum_relation_list_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnalyzestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Verbose_Context verbose_() {
			return GetRuleContext<Verbose_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_relation_list_Context vacuum_relation_list_() {
			return GetRuleContext<Vacuum_relation_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_listContext vac_analyze_option_list() {
			return GetRuleContext<Vac_analyze_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AnalyzestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyzestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAnalyzestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAnalyzestmt(this);
		}
	}

	[RuleVersion(0)]
	public AnalyzestmtContext analyzestmt() {
		AnalyzestmtContext _localctx = new AnalyzestmtContext(Context, State);
		EnterRule(_localctx, 846, RULE_analyzestmt);
		int _la;
		try {
			State = 7664;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,639,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7650;
				analyze_keyword();
				State = 7652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERBOSE) {
					{
					State = 7651;
					verbose_();
					}
				}

				State = 7655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 7654;
					vacuum_relation_list_();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7657;
				analyze_keyword();
				State = 7658;
				Match(OPEN_PAREN);
				State = 7659;
				vac_analyze_option_list();
				State = 7660;
				Match(CLOSE_PAREN);
				State = 7662;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 7661;
					vacuum_relation_list_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Utility_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Utility_option_elemContext[] utility_option_elem() {
			return GetRuleContexts<Utility_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Utility_option_elemContext utility_option_elem(int i) {
			return GetRuleContext<Utility_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Utility_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utility_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUtility_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUtility_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Utility_option_listContext utility_option_list() {
		Utility_option_listContext _localctx = new Utility_option_listContext(Context, State);
		EnterRule(_localctx, 848, RULE_utility_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7666;
			utility_option_elem();
			State = 7671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7667;
				Match(COMMA);
				State = 7668;
				utility_option_elem();
				}
				}
				State = 7673;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_elemContext[] vac_analyze_option_elem() {
			return GetRuleContexts<Vac_analyze_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_elemContext vac_analyze_option_elem(int i) {
			return GetRuleContext<Vac_analyze_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Vac_analyze_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_listContext vac_analyze_option_list() {
		Vac_analyze_option_listContext _localctx = new Vac_analyze_option_listContext(Context, State);
		EnterRule(_localctx, 850, RULE_vac_analyze_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7674;
			vac_analyze_option_elem();
			State = 7679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7675;
				Match(COMMA);
				State = 7676;
				vac_analyze_option_elem();
				}
				}
				State = 7681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(PostgreSQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYSE() { return GetToken(PostgreSQLParser.ANALYSE, 0); }
		public Analyze_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAnalyze_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAnalyze_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_keywordContext analyze_keyword() {
		Analyze_keywordContext _localctx = new Analyze_keywordContext(Context, State);
		EnterRule(_localctx, 852, RULE_analyze_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7682;
			_la = TokenStream.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Utility_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Utility_option_nameContext utility_option_name() {
			return GetRuleContext<Utility_option_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Utility_option_argContext utility_option_arg() {
			return GetRuleContext<Utility_option_argContext>(0);
		}
		public Utility_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utility_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUtility_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUtility_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Utility_option_elemContext utility_option_elem() {
		Utility_option_elemContext _localctx = new Utility_option_elemContext(Context, State);
		EnterRule(_localctx, 854, RULE_utility_option_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7684;
			utility_option_name();
			State = 7686;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 36028795944960003L) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & -70300023652351L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -1L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132602249444351L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 138370110535L) != 0)) {
				{
				State = 7685;
				utility_option_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Utility_option_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_LA() { return GetToken(PostgreSQLParser.FORMAT_LA, 0); }
		public Utility_option_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utility_option_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUtility_option_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUtility_option_name(this);
		}
	}

	[RuleVersion(0)]
	public Utility_option_nameContext utility_option_name() {
		Utility_option_nameContext _localctx = new Utility_option_nameContext(Context, State);
		EnterRule(_localctx, 856, RULE_utility_option_name);
		try {
			State = 7691;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7688;
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7689;
				analyze_keyword();
				}
				break;
			case FORMAT_LA:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7690;
				Match(FORMAT_LA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Utility_option_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_or_string_Context boolean_or_string_() {
			return GetRuleContext<Boolean_or_string_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		public Utility_option_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utility_option_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUtility_option_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUtility_option_arg(this);
		}
	}

	[RuleVersion(0)]
	public Utility_option_argContext utility_option_arg() {
		Utility_option_argContext _localctx = new Utility_option_argContext(Context, State);
		EnterRule(_localctx, 858, RULE_utility_option_arg);
		try {
			State = 7695;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case FALSE_P:
			case ON:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7693;
				boolean_or_string_();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7694;
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_nameContext vac_analyze_option_name() {
			return GetRuleContext<Vac_analyze_option_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_argContext vac_analyze_option_arg() {
			return GetRuleContext<Vac_analyze_option_argContext>(0);
		}
		public Vac_analyze_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_elemContext vac_analyze_option_elem() {
		Vac_analyze_option_elemContext _localctx = new Vac_analyze_option_elemContext(Context, State);
		EnterRule(_localctx, 860, RULE_vac_analyze_option_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7697;
			vac_analyze_option_name();
			State = 7699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 36028795944960003L) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & -70300023652351L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -1L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132602249444351L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 138370110535L) != 0)) {
				{
				State = 7698;
				vac_analyze_option_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		public Vac_analyze_option_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_name(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_nameContext vac_analyze_option_name() {
		Vac_analyze_option_nameContext _localctx = new Vac_analyze_option_nameContext(Context, State);
		EnterRule(_localctx, 862, RULE_vac_analyze_option_name);
		try {
			State = 7703;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7701;
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7702;
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_or_string_Context boolean_or_string_() {
			return GetRuleContext<Boolean_or_string_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		public Vac_analyze_option_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_arg(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_argContext vac_analyze_option_arg() {
		Vac_analyze_option_argContext _localctx = new Vac_analyze_option_argContext(Context, State);
		EnterRule(_localctx, 864, RULE_vac_analyze_option_arg);
		try {
			State = 7707;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case FALSE_P:
			case ON:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7705;
				boolean_or_string_();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7706;
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		public Analyze_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAnalyze_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAnalyze_(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_Context analyze_() {
		Analyze_Context _localctx = new Analyze_Context(Context, State);
		EnterRule(_localctx, 866, RULE_analyze_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7709;
			analyze_keyword();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Verbose_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		public Verbose_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbose_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVerbose_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVerbose_(this);
		}
	}

	[RuleVersion(0)]
	public Verbose_Context verbose_() {
		Verbose_Context _localctx = new Verbose_Context(Context, State);
		EnterRule(_localctx, 868, RULE_verbose_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7711;
			Match(VERBOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		public Full_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFull_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFull_(this);
		}
	}

	[RuleVersion(0)]
	public Full_Context full_() {
		Full_Context _localctx = new Full_Context(Context, State);
		EnterRule(_localctx, 870, RULE_full_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7713;
			Match(FULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Freeze_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREEZE() { return GetToken(PostgreSQLParser.FREEZE, 0); }
		public Freeze_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freeze_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFreeze_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFreeze_(this);
		}
	}

	[RuleVersion(0)]
	public Freeze_Context freeze_() {
		Freeze_Context _localctx = new Freeze_Context(Context, State);
		EnterRule(_localctx, 872, RULE_freeze_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7715;
			Match(FREEZE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_list_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Name_list_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_list_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterName_list_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitName_list_(this);
		}
	}

	[RuleVersion(0)]
	public Name_list_Context name_list_() {
		Name_list_Context _localctx = new Name_list_Context(Context, State);
		EnterRule(_localctx, 874, RULE_name_list_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7717;
			Match(OPEN_PAREN);
			State = 7718;
			name_list();
			State = 7719;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_relationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_list_Context name_list_() {
			return GetRuleContext<Name_list_Context>(0);
		}
		public Vacuum_relationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVacuum_relation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVacuum_relation(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_relationContext vacuum_relation() {
		Vacuum_relationContext _localctx = new Vacuum_relationContext(Context, State);
		EnterRule(_localctx, 876, RULE_vacuum_relation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7721;
			qualified_name();
			State = 7723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 7722;
				name_list_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_relation_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_relationContext[] vacuum_relation() {
			return GetRuleContexts<Vacuum_relationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_relationContext vacuum_relation(int i) {
			return GetRuleContext<Vacuum_relationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Vacuum_relation_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_relation_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVacuum_relation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVacuum_relation_list(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_relation_listContext vacuum_relation_list() {
		Vacuum_relation_listContext _localctx = new Vacuum_relation_listContext(Context, State);
		EnterRule(_localctx, 878, RULE_vacuum_relation_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7725;
			vacuum_relation();
			State = 7730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7726;
				Match(COMMA);
				State = 7727;
				vacuum_relation();
				}
				}
				State = 7732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_relation_list_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_relation_listContext vacuum_relation_list() {
			return GetRuleContext<Vacuum_relation_listContext>(0);
		}
		public Vacuum_relation_list_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_relation_list_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVacuum_relation_list_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVacuum_relation_list_(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_relation_list_Context vacuum_relation_list_() {
		Vacuum_relation_list_Context _localctx = new Vacuum_relation_list_Context(Context, State);
		EnterRule(_localctx, 880, RULE_vacuum_relation_list_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7733;
			vacuum_relation_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(PostgreSQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplainablestmtContext explainablestmt() {
			return GetRuleContext<ExplainablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Verbose_Context verbose_() {
			return GetRuleContext<Verbose_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_listContext explain_option_list() {
			return GetRuleContext<Explain_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExplainstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplainstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplainstmt(this);
		}
	}

	[RuleVersion(0)]
	public ExplainstmtContext explainstmt() {
		ExplainstmtContext _localctx = new ExplainstmtContext(Context, State);
		EnterRule(_localctx, 882, RULE_explainstmt);
		int _la;
		try {
			State = 7753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,651,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7735;
				Match(EXPLAIN);
				State = 7736;
				explainablestmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7737;
				Match(EXPLAIN);
				State = 7738;
				analyze_keyword();
				State = 7740;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERBOSE) {
					{
					State = 7739;
					verbose_();
					}
				}

				State = 7742;
				explainablestmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7744;
				Match(EXPLAIN);
				State = 7745;
				Match(VERBOSE);
				State = 7746;
				explainablestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7747;
				Match(EXPLAIN);
				State = 7748;
				Match(OPEN_PAREN);
				State = 7749;
				explain_option_list();
				State = 7750;
				Match(CLOSE_PAREN);
				State = 7751;
				explainablestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarecursorstmtContext declarecursorstmt() {
			return GetRuleContext<DeclarecursorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateasstmtContext createasstmt() {
			return GetRuleContext<CreateasstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatematviewstmtContext creatematviewstmt() {
			return GetRuleContext<CreatematviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefreshmatviewstmtContext refreshmatviewstmt() {
			return GetRuleContext<RefreshmatviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutestmtContext executestmt() {
			return GetRuleContext<ExecutestmtContext>(0);
		}
		public ExplainablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplainablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplainablestmt(this);
		}
	}

	[RuleVersion(0)]
	public ExplainablestmtContext explainablestmt() {
		ExplainablestmtContext _localctx = new ExplainablestmtContext(Context, State);
		EnterRule(_localctx, 884, RULE_explainablestmt);
		try {
			State = 7764;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,652,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7755;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7756;
				insertstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7757;
				updatestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7758;
				deletestmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7759;
				declarecursorstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7760;
				createasstmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7761;
				creatematviewstmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7762;
				refreshmatviewstmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7763;
				executestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_elemContext[] explain_option_elem() {
			return GetRuleContexts<Explain_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_elemContext explain_option_elem(int i) {
			return GetRuleContext<Explain_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Explain_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_listContext explain_option_list() {
		Explain_option_listContext _localctx = new Explain_option_listContext(Context, State);
		EnterRule(_localctx, 886, RULE_explain_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7766;
			explain_option_elem();
			State = 7771;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7767;
				Match(COMMA);
				State = 7768;
				explain_option_elem();
				}
				}
				State = 7773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_nameContext explain_option_name() {
			return GetRuleContext<Explain_option_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_argContext explain_option_arg() {
			return GetRuleContext<Explain_option_argContext>(0);
		}
		public Explain_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_elemContext explain_option_elem() {
		Explain_option_elemContext _localctx = new Explain_option_elemContext(Context, State);
		EnterRule(_localctx, 888, RULE_explain_option_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7774;
			explain_option_name();
			State = 7776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 36028795944960003L) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & -70300023652351L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -1L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132602249444351L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 138370110535L) != 0)) {
				{
				State = 7775;
				explain_option_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		public Explain_option_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_name(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_nameContext explain_option_name() {
		Explain_option_nameContext _localctx = new Explain_option_nameContext(Context, State);
		EnterRule(_localctx, 890, RULE_explain_option_name);
		try {
			State = 7780;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7778;
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7779;
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_or_string_Context boolean_or_string_() {
			return GetRuleContext<Boolean_or_string_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		public Explain_option_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_arg(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_argContext explain_option_arg() {
		Explain_option_argContext _localctx = new Explain_option_argContext(Context, State);
		EnterRule(_localctx, 892, RULE_explain_option_arg);
		try {
			State = 7784;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case FALSE_P:
			case ON:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7782;
				boolean_or_string_();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7783;
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreparablestmtContext preparablestmt() {
			return GetRuleContext<PreparablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prep_type_clauseContext prep_type_clause() {
			return GetRuleContext<Prep_type_clauseContext>(0);
		}
		public PreparestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPreparestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPreparestmt(this);
		}
	}

	[RuleVersion(0)]
	public PreparestmtContext preparestmt() {
		PreparestmtContext _localctx = new PreparestmtContext(Context, State);
		EnterRule(_localctx, 894, RULE_preparestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7786;
			Match(PREPARE);
			State = 7787;
			name();
			State = 7789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 7788;
				prep_type_clause();
				}
			}

			State = 7791;
			Match(AS);
			State = 7792;
			preparablestmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prep_type_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Prep_type_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prep_type_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrep_type_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrep_type_clause(this);
		}
	}

	[RuleVersion(0)]
	public Prep_type_clauseContext prep_type_clause() {
		Prep_type_clauseContext _localctx = new Prep_type_clauseContext(Context, State);
		EnterRule(_localctx, 896, RULE_prep_type_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7794;
			Match(OPEN_PAREN);
			State = 7795;
			type_list();
			State = 7796;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		public PreparablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPreparablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPreparablestmt(this);
		}
	}

	[RuleVersion(0)]
	public PreparablestmtContext preparablestmt() {
		PreparablestmtContext _localctx = new PreparablestmtContext(Context, State);
		EnterRule(_localctx, 898, RULE_preparablestmt);
		try {
			State = 7802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,658,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7798;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7799;
				insertstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7800;
				updatestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7801;
				deletestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_param_clauseContext execute_param_clause() {
			return GetRuleContext<Execute_param_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_as_targetContext create_as_target() {
			return GetRuleContext<Create_as_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_data_Context with_data_() {
			return GetRuleContext<With_data_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public ExecutestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExecutestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExecutestmt(this);
		}
	}

	[RuleVersion(0)]
	public ExecutestmtContext executestmt() {
		ExecutestmtContext _localctx = new ExecutestmtContext(Context, State);
		EnterRule(_localctx, 900, RULE_executestmt);
		int _la;
		try {
			State = 7842;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,666,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7804;
				Match(EXECUTE);
				State = 7805;
				name();
				State = 7807;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 7806;
					execute_param_clause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7809;
				Match(CREATE);
				State = 7811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==LOCAL || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & 32773L) != 0)) {
					{
					State = 7810;
					opttemp();
					}
				}

				State = 7813;
				Match(TABLE);
				State = 7814;
				create_as_target();
				State = 7815;
				Match(AS);
				State = 7816;
				Match(EXECUTE);
				State = 7817;
				name();
				State = 7819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 7818;
					execute_param_clause();
					}
				}

				State = 7822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 7821;
					with_data_();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7824;
				Match(CREATE);
				State = 7826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==LOCAL || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & 32773L) != 0)) {
					{
					State = 7825;
					opttemp();
					}
				}

				State = 7828;
				Match(TABLE);
				State = 7829;
				Match(IF_P);
				State = 7830;
				Match(NOT);
				State = 7831;
				Match(EXISTS);
				State = 7832;
				create_as_target();
				State = 7833;
				Match(AS);
				State = 7834;
				Match(EXECUTE);
				State = 7835;
				name();
				State = 7837;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 7836;
					execute_param_clause();
					}
				}

				State = 7840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 7839;
					with_data_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_param_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Execute_param_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_param_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExecute_param_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExecute_param_clause(this);
		}
	}

	[RuleVersion(0)]
	public Execute_param_clauseContext execute_param_clause() {
		Execute_param_clauseContext _localctx = new Execute_param_clauseContext(Context, State);
		EnterRule(_localctx, 902, RULE_execute_param_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7844;
			Match(OPEN_PAREN);
			State = 7845;
			expr_list();
			State = 7846;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeallocatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(PostgreSQLParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public DeallocatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deallocatestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDeallocatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDeallocatestmt(this);
		}
	}

	[RuleVersion(0)]
	public DeallocatestmtContext deallocatestmt() {
		DeallocatestmtContext _localctx = new DeallocatestmtContext(Context, State);
		EnterRule(_localctx, 904, RULE_deallocatestmt);
		try {
			State = 7858;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,667,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7848;
				Match(DEALLOCATE);
				State = 7849;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7850;
				Match(DEALLOCATE);
				State = 7851;
				Match(PREPARE);
				State = 7852;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7853;
				Match(DEALLOCATE);
				State = 7854;
				Match(ALL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7855;
				Match(DEALLOCATE);
				State = 7856;
				Match(PREPARE);
				State = 7857;
				Match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_targetContext insert_target() {
			return GetRuleContext<Insert_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_restContext insert_rest() {
			return GetRuleContext<Insert_restContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clause_Context with_clause_() {
			return GetRuleContext<With_clause_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public On_conflict_Context on_conflict_() {
			return GetRuleContext<On_conflict_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public InsertstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsertstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsertstmt(this);
		}
	}

	[RuleVersion(0)]
	public InsertstmtContext insertstmt() {
		InsertstmtContext _localctx = new InsertstmtContext(Context, State);
		EnterRule(_localctx, 906, RULE_insertstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 7860;
				with_clause_();
				}
			}

			State = 7863;
			Match(INSERT);
			State = 7864;
			Match(INTO);
			State = 7865;
			insert_target();
			State = 7866;
			insert_rest();
			State = 7868;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 7867;
				on_conflict_();
				}
			}

			State = 7871;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 7870;
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Insert_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_target(this);
		}
	}

	[RuleVersion(0)]
	public Insert_targetContext insert_target() {
		Insert_targetContext _localctx = new Insert_targetContext(Context, State);
		EnterRule(_localctx, 908, RULE_insert_target);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7873;
			qualified_name();
			State = 7876;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 7874;
				Match(AS);
				State = 7875;
				colid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_restContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDING() { return GetToken(PostgreSQLParser.OVERRIDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Override_kindContext override_kind() {
			return GetRuleContext<Override_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_listContext insert_column_list() {
			return GetRuleContext<Insert_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		public Insert_restContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_rest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_rest(this);
		}
	}

	[RuleVersion(0)]
	public Insert_restContext insert_rest() {
		Insert_restContext _localctx = new Insert_restContext(Context, State);
		EnterRule(_localctx, 910, RULE_insert_rest);
		int _la;
		try {
			State = 7897;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,673,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7878;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7879;
				Match(OVERRIDING);
				State = 7880;
				override_kind();
				State = 7881;
				Match(VALUE_P);
				State = 7882;
				selectstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7884;
				Match(OPEN_PAREN);
				State = 7885;
				insert_column_list();
				State = 7886;
				Match(CLOSE_PAREN);
				State = 7891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OVERRIDING) {
					{
					State = 7887;
					Match(OVERRIDING);
					State = 7888;
					override_kind();
					State = 7889;
					Match(VALUE_P);
					}
				}

				State = 7893;
				selectstmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7895;
				Match(DEFAULT);
				State = 7896;
				Match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Override_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Override_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_override_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOverride_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOverride_kind(this);
		}
	}

	[RuleVersion(0)]
	public Override_kindContext override_kind() {
		Override_kindContext _localctx = new Override_kindContext(Context, State);
		EnterRule(_localctx, 912, RULE_override_kind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7899;
			_la = TokenStream.LA(1);
			if ( !(_la==USER || _la==SYSTEM_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_itemContext[] insert_column_item() {
			return GetRuleContexts<Insert_column_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_itemContext insert_column_item(int i) {
			return GetRuleContext<Insert_column_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Insert_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_listContext insert_column_list() {
		Insert_column_listContext _localctx = new Insert_column_listContext(Context, State);
		EnterRule(_localctx, 914, RULE_insert_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7901;
			insert_column_item();
			State = 7906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7902;
				Match(COMMA);
				State = 7903;
				insert_column_item();
				}
				}
				State = 7908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_indirectionContext opt_indirection() {
			return GetRuleContext<Opt_indirectionContext>(0);
		}
		public Insert_column_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_item(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_itemContext insert_column_item() {
		Insert_column_itemContext _localctx = new Insert_column_itemContext(Context, State);
		EnterRule(_localctx, 916, RULE_insert_column_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7909;
			colid();
			State = 7910;
			opt_indirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_conflict_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(PostgreSQLParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_listContext set_clause_list() {
			return GetRuleContext<Set_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Conf_expr_Context conf_expr_() {
			return GetRuleContext<Conf_expr_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public On_conflict_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_conflict_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOn_conflict_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOn_conflict_(this);
		}
	}

	[RuleVersion(0)]
	public On_conflict_Context on_conflict_() {
		On_conflict_Context _localctx = new On_conflict_Context(Context, State);
		EnterRule(_localctx, 918, RULE_on_conflict_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7912;
			Match(ON);
			State = 7913;
			Match(CONFLICT);
			State = 7915;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN || _la==ON) {
				{
				State = 7914;
				conf_expr_();
				}
			}

			State = 7917;
			Match(DO);
			State = 7925;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPDATE:
				{
				State = 7918;
				Match(UPDATE);
				State = 7919;
				Match(SET);
				State = 7920;
				set_clause_list();
				State = 7922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 7921;
					where_clause();
					}
				}

				}
				break;
			case NOTHING:
				{
				State = 7924;
				Match(NOTHING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conf_expr_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_paramsContext index_params() {
			return GetRuleContext<Index_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Conf_expr_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conf_expr_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConf_expr_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConf_expr_(this);
		}
	}

	[RuleVersion(0)]
	public Conf_expr_Context conf_expr_() {
		Conf_expr_Context _localctx = new Conf_expr_Context(Context, State);
		EnterRule(_localctx, 920, RULE_conf_expr_);
		int _la;
		try {
			State = 7936;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7927;
				Match(OPEN_PAREN);
				State = 7928;
				index_params();
				State = 7929;
				Match(CLOSE_PAREN);
				State = 7931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 7930;
					where_clause();
					}
				}

				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7933;
				Match(ON);
				State = 7934;
				Match(CONSTRAINT);
				State = 7935;
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Returning_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(PostgreSQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Target_listContext target_list() {
			return GetRuleContext<Target_listContext>(0);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returning_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReturning_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReturning_clause(this);
		}
	}

	[RuleVersion(0)]
	public Returning_clauseContext returning_clause() {
		Returning_clauseContext _localctx = new Returning_clauseContext(Context, State);
		EnterRule(_localctx, 922, RULE_returning_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7938;
			Match(RETURNING);
			State = 7939;
			target_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(PostgreSQLParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_insert_clauseContext merge_insert_clause() {
			return GetRuleContext<Merge_insert_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_update_clauseContext merge_update_clause() {
			return GetRuleContext<Merge_update_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alias_clauseContext[] alias_clause() {
			return GetRuleContexts<Alias_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_clauseContext alias_clause(int i) {
			return GetRuleContext<Alias_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_delete_clauseContext merge_delete_clause() {
			return GetRuleContext<Merge_delete_clauseContext>(0);
		}
		public MergestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMergestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMergestmt(this);
		}
	}

	[RuleVersion(0)]
	public MergestmtContext mergestmt() {
		MergestmtContext _localctx = new MergestmtContext(Context, State);
		EnterRule(_localctx, 924, RULE_mergestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7941;
			Match(MERGE);
			State = 7943;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 7942;
				Match(INTO);
				}
			}

			State = 7945;
			qualified_name();
			State = 7947;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
				{
				State = 7946;
				alias_clause();
				}
			}

			State = 7949;
			Match(USING);
			State = 7952;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				{
				State = 7950;
				select_with_parens();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				{
				State = 7951;
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7955;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
				{
				State = 7954;
				alias_clause();
				}
			}

			State = 7957;
			Match(ON);
			State = 7958;
			a_expr();
			State = 7967;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,686,Context) ) {
			case 1:
				{
				State = 7959;
				merge_insert_clause();
				State = 7961;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,684,Context) ) {
				case 1:
					{
					State = 7960;
					merge_update_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 7963;
				merge_update_clause();
				State = 7965;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,685,Context) ) {
				case 1:
					{
					State = 7964;
					merge_insert_clause();
					}
					break;
				}
				}
				break;
			}
			State = 7970;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 7969;
				merge_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_insert_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(PostgreSQLParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_listContext insert_column_list() {
			return GetRuleContext<Insert_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_insert_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMerge_insert_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMerge_insert_clause(this);
		}
	}

	[RuleVersion(0)]
	public Merge_insert_clauseContext merge_insert_clause() {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(Context, State);
		EnterRule(_localctx, 926, RULE_merge_insert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7972;
			Match(WHEN);
			State = 7973;
			Match(NOT);
			State = 7974;
			Match(MATCHED);
			State = 7977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 7975;
				Match(AND);
				State = 7976;
				a_expr();
				}
			}

			State = 7980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 7979;
				Match(THEN);
				}
			}

			State = 7982;
			Match(INSERT);
			State = 7987;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 7983;
				Match(OPEN_PAREN);
				State = 7984;
				insert_column_list();
				State = 7985;
				Match(CLOSE_PAREN);
				}
			}

			State = 7989;
			values_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_update_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(PostgreSQLParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_listContext set_clause_list() {
			return GetRuleContext<Set_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_update_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMerge_update_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMerge_update_clause(this);
		}
	}

	[RuleVersion(0)]
	public Merge_update_clauseContext merge_update_clause() {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(Context, State);
		EnterRule(_localctx, 928, RULE_merge_update_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7991;
			Match(WHEN);
			State = 7992;
			Match(MATCHED);
			State = 7995;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 7993;
				Match(AND);
				State = 7994;
				a_expr();
				}
			}

			State = 7998;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 7997;
				Match(THEN);
				}
			}

			State = 8000;
			Match(UPDATE);
			State = 8001;
			Match(SET);
			State = 8002;
			set_clause_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_delete_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(PostgreSQLParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		public Merge_delete_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_delete_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMerge_delete_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMerge_delete_clause(this);
		}
	}

	[RuleVersion(0)]
	public Merge_delete_clauseContext merge_delete_clause() {
		Merge_delete_clauseContext _localctx = new Merge_delete_clauseContext(Context, State);
		EnterRule(_localctx, 930, RULE_merge_delete_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8004;
			Match(WHEN);
			State = 8005;
			Match(MATCHED);
			State = 8007;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 8006;
				Match(THEN);
				}
			}

			State = 8009;
			Match(DELETE_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeletestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return GetRuleContext<Relation_expr_opt_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clause_Context with_clause_() {
			return GetRuleContext<With_clause_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_or_current_clauseContext where_or_current_clause() {
			return GetRuleContext<Where_or_current_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public DeletestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deletestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDeletestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDeletestmt(this);
		}
	}

	[RuleVersion(0)]
	public DeletestmtContext deletestmt() {
		DeletestmtContext _localctx = new DeletestmtContext(Context, State);
		EnterRule(_localctx, 932, RULE_deletestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 8011;
				with_clause_();
				}
			}

			State = 8014;
			Match(DELETE_P);
			State = 8015;
			Match(FROM);
			State = 8016;
			relation_expr_opt_alias();
			State = 8018;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 8017;
				using_clause();
				}
			}

			State = 8021;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 8020;
				where_or_current_clause();
				}
			}

			State = 8024;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 8023;
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_listContext from_list() {
			return GetRuleContext<From_listContext>(0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUsing_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUsing_clause(this);
		}
	}

	[RuleVersion(0)]
	public Using_clauseContext using_clause() {
		Using_clauseContext _localctx = new Using_clauseContext(Context, State);
		EnterRule(_localctx, 934, RULE_using_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8026;
			Match(USING);
			State = 8027;
			from_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_P() { return GetToken(PostgreSQLParser.LOCK_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_Context table_() {
			return GetRuleContext<Table_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lock_Context lock_() {
			return GetRuleContext<Lock_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nowait_Context nowait_() {
			return GetRuleContext<Nowait_Context>(0);
		}
		public LockstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLockstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLockstmt(this);
		}
	}

	[RuleVersion(0)]
	public LockstmtContext lockstmt() {
		LockstmtContext _localctx = new LockstmtContext(Context, State);
		EnterRule(_localctx, 936, RULE_lockstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8029;
			Match(LOCK_P);
			State = 8031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLE) {
				{
				State = 8030;
				table_();
				}
			}

			State = 8033;
			relation_expr_list();
			State = 8035;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN_P) {
				{
				State = 8034;
				lock_();
				}
			}

			State = 8038;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT) {
				{
				State = 8037;
				nowait_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lock_typeContext lock_type() {
			return GetRuleContext<Lock_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(PostgreSQLParser.MODE, 0); }
		public Lock_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLock_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLock_(this);
		}
	}

	[RuleVersion(0)]
	public Lock_Context lock_() {
		Lock_Context _localctx = new Lock_Context(Context, State);
		EnterRule(_localctx, 938, RULE_lock_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8040;
			Match(IN_P);
			State = 8041;
			lock_type();
			State = 8042;
			Match(MODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(PostgreSQLParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(PostgreSQLParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		public Lock_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLock_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLock_type(this);
		}
	}

	[RuleVersion(0)]
	public Lock_typeContext lock_type() {
		Lock_typeContext _localctx = new Lock_typeContext(Context, State);
		EnterRule(_localctx, 940, RULE_lock_type);
		int _la;
		try {
			State = 8056;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8044;
				Match(ACCESS);
				State = 8045;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ROW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8046;
				Match(ROW);
				State = 8047;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SHARE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8048;
				Match(SHARE);
				State = 8053;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UPDATE:
					{
					State = 8049;
					Match(UPDATE);
					State = 8050;
					Match(EXCLUSIVE);
					}
					break;
				case ROW:
					{
					State = 8051;
					Match(ROW);
					State = 8052;
					Match(EXCLUSIVE);
					}
					break;
				case MODE:
					break;
				default:
					break;
				}
				}
				break;
			case EXCLUSIVE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8055;
				Match(EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nowait_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(PostgreSQLParser.NOWAIT, 0); }
		public Nowait_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nowait_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNowait_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNowait_(this);
		}
	}

	[RuleVersion(0)]
	public Nowait_Context nowait_() {
		Nowait_Context _localctx = new Nowait_Context(Context, State);
		EnterRule(_localctx, 942, RULE_nowait_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8058;
			Match(NOWAIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nowait_or_skip_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(PostgreSQLParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_P() { return GetToken(PostgreSQLParser.SKIP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED() { return GetToken(PostgreSQLParser.LOCKED, 0); }
		public Nowait_or_skip_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nowait_or_skip_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNowait_or_skip_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNowait_or_skip_(this);
		}
	}

	[RuleVersion(0)]
	public Nowait_or_skip_Context nowait_or_skip_() {
		Nowait_or_skip_Context _localctx = new Nowait_or_skip_Context(Context, State);
		EnterRule(_localctx, 944, RULE_nowait_or_skip_);
		try {
			State = 8063;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOWAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8060;
				Match(NOWAIT);
				}
				break;
			case SKIP_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8061;
				Match(SKIP_P);
				State = 8062;
				Match(LOCKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return GetRuleContext<Relation_expr_opt_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_listContext set_clause_list() {
			return GetRuleContext<Set_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clause_Context with_clause_() {
			return GetRuleContext<With_clause_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_or_current_clauseContext where_or_current_clause() {
			return GetRuleContext<Where_or_current_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public UpdatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updatestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUpdatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUpdatestmt(this);
		}
	}

	[RuleVersion(0)]
	public UpdatestmtContext updatestmt() {
		UpdatestmtContext _localctx = new UpdatestmtContext(Context, State);
		EnterRule(_localctx, 946, RULE_updatestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8066;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 8065;
				with_clause_();
				}
			}

			State = 8068;
			Match(UPDATE);
			State = 8069;
			relation_expr_opt_alias();
			State = 8070;
			Match(SET);
			State = 8071;
			set_clause_list();
			State = 8073;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 8072;
				from_clause();
				}
			}

			State = 8076;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 8075;
				where_or_current_clause();
				}
			}

			State = 8079;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 8078;
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clause_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_clauseContext[] set_clause() {
			return GetRuleContexts<Set_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_clauseContext set_clause(int i) {
			return GetRuleContext<Set_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_clause_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_clause_list(this);
		}
	}

	[RuleVersion(0)]
	public Set_clause_listContext set_clause_list() {
		Set_clause_listContext _localctx = new Set_clause_listContext(Context, State);
		EnterRule(_localctx, 948, RULE_set_clause_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8081;
			set_clause();
			State = 8086;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8082;
				Match(COMMA);
				State = 8083;
				set_clause();
				}
				}
				State = 8088;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext set_target() {
			return GetRuleContext<Set_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_target_listContext set_target_list() {
			return GetRuleContext<Set_target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Set_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_clause(this);
		}
	}

	[RuleVersion(0)]
	public Set_clauseContext set_clause() {
		Set_clauseContext _localctx = new Set_clauseContext(Context, State);
		EnterRule(_localctx, 950, RULE_set_clause);
		try {
			State = 8099;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8089;
				set_target();
				State = 8090;
				Match(EQUAL);
				State = 8091;
				a_expr();
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8093;
				Match(OPEN_PAREN);
				State = 8094;
				set_target_list();
				State = 8095;
				Match(CLOSE_PAREN);
				State = 8096;
				Match(EQUAL);
				State = 8097;
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_indirectionContext opt_indirection() {
			return GetRuleContext<Opt_indirectionContext>(0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_target(this);
		}
	}

	[RuleVersion(0)]
	public Set_targetContext set_target() {
		Set_targetContext _localctx = new Set_targetContext(Context, State);
		EnterRule(_localctx, 952, RULE_set_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8101;
			colid();
			State = 8102;
			opt_indirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_target_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext[] set_target() {
			return GetRuleContexts<Set_targetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext set_target(int i) {
			return GetRuleContext<Set_targetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Set_target_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_target_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_target_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_target_list(this);
		}
	}

	[RuleVersion(0)]
	public Set_target_listContext set_target_list() {
		Set_target_listContext _localctx = new Set_target_listContext(Context, State);
		EnterRule(_localctx, 954, RULE_set_target_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8104;
			set_target();
			State = 8109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8105;
				Match(COMMA);
				State = 8106;
				set_target();
				}
				}
				State = 8111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarecursorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_optionsContext cursor_options() {
			return GetRuleContext<Cursor_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hold_Context hold_() {
			return GetRuleContext<Hold_Context>(0);
		}
		public DeclarecursorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarecursorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDeclarecursorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDeclarecursorstmt(this);
		}
	}

	[RuleVersion(0)]
	public DeclarecursorstmtContext declarecursorstmt() {
		DeclarecursorstmtContext _localctx = new DeclarecursorstmtContext(Context, State);
		EnterRule(_localctx, 956, RULE_declarecursorstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8112;
			Match(DECLARE);
			State = 8113;
			cursor_name();
			State = 8114;
			cursor_options();
			State = 8115;
			Match(CURSOR);
			State = 8117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH || _la==WITHOUT) {
				{
				State = 8116;
				hold_();
				}
			}

			State = 8119;
			Match(FOR);
			State = 8120;
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCursor_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCursor_name(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(Context, State);
		EnterRule(_localctx, 958, RULE_cursor_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8122;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(PostgreSQLParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(PostgreSQLParser.NO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCROLL() { return GetTokens(PostgreSQLParser.SCROLL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL(int i) {
			return GetToken(PostgreSQLParser.SCROLL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BINARY() { return GetTokens(PostgreSQLParser.BINARY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY(int i) {
			return GetToken(PostgreSQLParser.BINARY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INSENSITIVE() { return GetTokens(PostgreSQLParser.INSENSITIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE(int i) {
			return GetToken(PostgreSQLParser.INSENSITIVE, i);
		}
		public Cursor_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCursor_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCursor_options(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_optionsContext cursor_options() {
		Cursor_optionsContext _localctx = new Cursor_optionsContext(Context, State);
		EnterRule(_localctx, 960, RULE_cursor_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BINARY || _la==INSENSITIVE || _la==NO || _la==SCROLL) {
				{
				State = 8129;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NO:
					{
					State = 8124;
					Match(NO);
					State = 8125;
					Match(SCROLL);
					}
					break;
				case SCROLL:
					{
					State = 8126;
					Match(SCROLL);
					}
					break;
				case BINARY:
					{
					State = 8127;
					Match(BINARY);
					}
					break;
				case INSENSITIVE:
					{
					State = 8128;
					Match(INSENSITIVE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 8133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hold_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOLD() { return GetToken(PostgreSQLParser.HOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		public Hold_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hold_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHold_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHold_(this);
		}
	}

	[RuleVersion(0)]
	public Hold_Context hold_() {
		Hold_Context _localctx = new Hold_Context(Context, State);
		EnterRule(_localctx, 962, RULE_hold_);
		try {
			State = 8138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8134;
				Match(WITH);
				State = 8135;
				Match(HOLD);
				}
				break;
			case WITHOUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8136;
				Match(WITHOUT);
				State = 8137;
				Match(HOLD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_no_parensContext select_no_parens() {
			return GetRuleContext<Select_no_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public SelectstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelectstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelectstmt(this);
		}
	}

	[RuleVersion(0)]
	public SelectstmtContext selectstmt() {
		SelectstmtContext _localctx = new SelectstmtContext(Context, State);
		EnterRule(_localctx, 964, RULE_selectstmt);
		try {
			State = 8142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,715,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8140;
				select_no_parens();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8141;
				select_with_parens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_with_parensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_no_parensContext select_no_parens() {
			return GetRuleContext<Select_no_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public Select_with_parensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_with_parens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_with_parens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_with_parens(this);
		}
	}

	[RuleVersion(0)]
	public Select_with_parensContext select_with_parens() {
		Select_with_parensContext _localctx = new Select_with_parensContext(Context, State);
		EnterRule(_localctx, 966, RULE_select_with_parens);
		try {
			State = 8152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,716,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8144;
				Match(OPEN_PAREN);
				State = 8145;
				select_no_parens();
				State = 8146;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8148;
				Match(OPEN_PAREN);
				State = 8149;
				select_with_parens();
				State = 8150;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_no_parensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sort_clause_Context sort_clause_() {
			return GetRuleContext<Sort_clause_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_clauseContext for_locking_clause() {
			return GetRuleContext<For_locking_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_limitContext select_limit() {
			return GetRuleContext<Select_limitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_limit_Context select_limit_() {
			return GetRuleContext<Select_limit_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_clause_Context for_locking_clause_() {
			return GetRuleContext<For_locking_clause_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Select_no_parensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_no_parens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_no_parens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_no_parens(this);
		}
	}

	[RuleVersion(0)]
	public Select_no_parensContext select_no_parens() {
		Select_no_parensContext _localctx = new Select_no_parensContext(Context, State);
		EnterRule(_localctx, 968, RULE_select_no_parens);
		int _la;
		try {
			State = 8183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8154;
				select_clause();
				State = 8156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 8155;
					sort_clause_();
					}
				}

				State = 8166;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 8158;
					for_locking_clause();
					State = 8160;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 270337L) != 0)) {
						{
						State = 8159;
						select_limit_();
						}
					}

					}
					break;
				case FETCH:
				case LIMIT:
				case OFFSET:
					{
					State = 8162;
					select_limit();
					State = 8164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FOR) {
						{
						State = 8163;
						for_locking_clause_();
						}
					}

					}
					break;
				case Eof:
				case CLOSE_PAREN:
				case SEMI:
				case FORMAT_LA:
				case CREATE:
				case GRANT:
				case ON:
				case RETURNING:
				case WITH:
					break;
				default:
					break;
				}
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8168;
				with_clause();
				State = 8169;
				select_clause();
				State = 8171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 8170;
					sort_clause_();
					}
				}

				State = 8181;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 8173;
					for_locking_clause();
					State = 8175;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 270337L) != 0)) {
						{
						State = 8174;
						select_limit_();
						}
					}

					}
					break;
				case FETCH:
				case LIMIT:
				case OFFSET:
					{
					State = 8177;
					select_limit();
					State = 8179;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FOR) {
						{
						State = 8178;
						for_locking_clause_();
						}
					}

					}
					break;
				case Eof:
				case CLOSE_PAREN:
				case SEMI:
				case FORMAT_LA:
				case CREATE:
				case GRANT:
				case ON:
				case RETURNING:
				case WITH:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_select_intersectContext[] simple_select_intersect() {
			return GetRuleContexts<Simple_select_intersectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_select_intersectContext simple_select_intersect(int i) {
			return GetRuleContext<Simple_select_intersectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNION() { return GetTokens(PostgreSQLParser.UNION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION(int i) {
			return GetToken(PostgreSQLParser.UNION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCEPT() { return GetTokens(PostgreSQLParser.EXCEPT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT(int i) {
			return GetToken(PostgreSQLParser.EXCEPT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_or_distinctContext[] all_or_distinct() {
			return GetRuleContexts<All_or_distinctContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_or_distinctContext all_or_distinct(int i) {
			return GetRuleContext<All_or_distinctContext>(i);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_clause(this);
		}
	}

	[RuleVersion(0)]
	public Select_clauseContext select_clause() {
		Select_clauseContext _localctx = new Select_clauseContext(Context, State);
		EnterRule(_localctx, 970, RULE_select_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8185;
			simple_select_intersect();
			State = 8193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXCEPT || _la==UNION) {
				{
				{
				State = 8186;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCEPT || _la==UNION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 8187;
					all_or_distinct();
					}
				}

				State = 8190;
				simple_select_intersect();
				}
				}
				State = 8195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_select_intersectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_select_pramaryContext[] simple_select_pramary() {
			return GetRuleContexts<Simple_select_pramaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_select_pramaryContext simple_select_pramary(int i) {
			return GetRuleContext<Simple_select_pramaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERSECT() { return GetTokens(PostgreSQLParser.INTERSECT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT(int i) {
			return GetToken(PostgreSQLParser.INTERSECT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_or_distinctContext[] all_or_distinct() {
			return GetRuleContexts<All_or_distinctContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_or_distinctContext all_or_distinct(int i) {
			return GetRuleContext<All_or_distinctContext>(i);
		}
		public Simple_select_intersectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select_intersect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSimple_select_intersect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSimple_select_intersect(this);
		}
	}

	[RuleVersion(0)]
	public Simple_select_intersectContext simple_select_intersect() {
		Simple_select_intersectContext _localctx = new Simple_select_intersectContext(Context, State);
		EnterRule(_localctx, 972, RULE_simple_select_intersect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8196;
			simple_select_pramary();
			State = 8204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INTERSECT) {
				{
				{
				State = 8197;
				Match(INTERSECT);
				State = 8199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 8198;
					all_or_distinct();
					}
				}

				State = 8201;
				simple_select_pramary();
				}
				}
				State = 8206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_select_pramaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Distinct_clauseContext distinct_clause() {
			return GetRuleContext<Distinct_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_listContext target_list() {
			return GetRuleContext<Target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_clause_Context all_clause_() {
			return GetRuleContext<All_clause_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_list_Context target_list_() {
			return GetRuleContext<Target_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_clauseContext group_clause() {
			return GetRuleContext<Group_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Having_clauseContext having_clause() {
			return GetRuleContext<Having_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public Simple_select_pramaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select_pramary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSimple_select_pramary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSimple_select_pramary(this);
		}
	}

	[RuleVersion(0)]
	public Simple_select_pramaryContext simple_select_pramary() {
		Simple_select_pramaryContext _localctx = new Simple_select_pramaryContext(Context, State);
		EnterRule(_localctx, 974, RULE_simple_select_pramary);
		int _la;
		try {
			State = 8258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 8207;
				Match(SELECT);
				State = 8252;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Eof:
				case OPEN_PAREN:
				case CLOSE_PAREN:
				case SEMI:
				case STAR:
				case PLUS:
				case MINUS:
				case PARAM:
				case Operator:
				case JSON:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_EXISTS:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_QUERY:
				case JSON_SCALAR:
				case JSON_SERIALIZE:
				case JSON_TABLE:
				case JSON_VALUE:
				case MERGE_ACTION:
				case SYSTEM_USER:
				case ABSENT:
				case ASENSITIVE:
				case ATOMIC:
				case BREADTH:
				case COMPRESSION:
				case CONDITIONAL:
				case DEPTH:
				case EMPTY_P:
				case FINALIZE:
				case INDENT:
				case KEEP:
				case KEYS:
				case NESTED:
				case OMIT:
				case PARAMETER:
				case PATH:
				case PLAN:
				case QUOTES:
				case SCALAR:
				case SOURCE:
				case STRING_P:
				case TARGET:
				case UNCONDITIONAL:
				case PERIOD:
				case FORMAT_LA:
				case ALL:
				case ARRAY:
				case CASE:
				case CAST:
				case CREATE:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case EXCEPT:
				case FALSE_P:
				case FETCH:
				case FOR:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case INTERSECT:
				case INTO:
				case LIMIT:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case OFFSET:
				case ON:
				case ORDER:
				case RETURNING:
				case SESSION_USER:
				case TRUE_P:
				case UNION:
				case UNIQUE:
				case USER:
				case WHERE:
				case WINDOW:
				case WITH:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATCHED:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case ERROR:
				case RETURN:
				case FORMAT:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case BinaryStringConstant:
				case HexadecimalStringConstant:
				case Integral:
				case BinaryIntegral:
				case OctalIntegral:
				case HexadecimalIntegral:
				case Numeric:
				case PLSQLVARIABLENAME:
				case EscapeStringConstant:
					{
					State = 8209;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL) {
						{
						State = 8208;
						all_clause_();
						}
					}

					State = 8212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268422652L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4880034784790705153L) != 0) || _la==PLSQLVARIABLENAME || _la==EscapeStringConstant) {
						{
						State = 8211;
						target_list_();
						}
					}

					State = 8215;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==INTO) {
						{
						State = 8214;
						into_clause();
						}
					}

					State = 8218;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FROM) {
						{
						State = 8217;
						from_clause();
						}
					}

					State = 8221;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE) {
						{
						State = 8220;
						where_clause();
						}
					}

					State = 8224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==GROUP_P) {
						{
						State = 8223;
						group_clause();
						}
					}

					State = 8227;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==HAVING) {
						{
						State = 8226;
						having_clause();
						}
					}

					State = 8230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WINDOW) {
						{
						State = 8229;
						window_clause();
						}
					}

					}
					break;
				case DISTINCT:
					{
					State = 8232;
					distinct_clause();
					State = 8233;
					target_list();
					State = 8235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==INTO) {
						{
						State = 8234;
						into_clause();
						}
					}

					State = 8238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FROM) {
						{
						State = 8237;
						from_clause();
						}
					}

					State = 8241;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE) {
						{
						State = 8240;
						where_clause();
						}
					}

					State = 8244;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==GROUP_P) {
						{
						State = 8243;
						group_clause();
						}
					}

					State = 8247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==HAVING) {
						{
						State = 8246;
						having_clause();
						}
					}

					State = 8250;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WINDOW) {
						{
						State = 8249;
						window_clause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8254;
				values_clause();
				}
				break;
			case TABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8255;
				Match(TABLE);
				State = 8256;
				relation_expr();
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8257;
				select_with_parens();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cte_listContext cte_list() {
			return GetRuleContext<Cte_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(PostgreSQLParser.RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWith_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWith_clause(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(Context, State);
		EnterRule(_localctx, 976, RULE_with_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8260;
			Match(WITH);
			State = 8262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,746,Context) ) {
			case 1:
				{
				State = 8261;
				Match(RECURSIVE);
				}
				break;
			}
			State = 8264;
			cte_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cte_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_exprContext[] common_table_expr() {
			return GetRuleContexts<Common_table_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_exprContext common_table_expr(int i) {
			return GetRuleContext<Common_table_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Cte_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cte_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCte_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCte_list(this);
		}
	}

	[RuleVersion(0)]
	public Cte_listContext cte_list() {
		Cte_listContext _localctx = new Cte_listContext(Context, State);
		EnterRule(_localctx, 978, RULE_cte_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8266;
			common_table_expr();
			State = 8271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8267;
				Match(COMMA);
				State = 8268;
				common_table_expr();
				}
				}
				State = 8273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreparablestmtContext preparablestmt() {
			return GetRuleContext<PreparablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_list_Context name_list_() {
			return GetRuleContext<Name_list_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Materialized_Context materialized_() {
			return GetRuleContext<Materialized_Context>(0);
		}
		public Common_table_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_expr(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_exprContext common_table_expr() {
		Common_table_exprContext _localctx = new Common_table_exprContext(Context, State);
		EnterRule(_localctx, 980, RULE_common_table_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8274;
			name();
			State = 8276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 8275;
				name_list_();
				}
			}

			State = 8278;
			Match(AS);
			State = 8280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT || _la==MATERIALIZED) {
				{
				State = 8279;
				materialized_();
				}
			}

			State = 8282;
			Match(OPEN_PAREN);
			State = 8283;
			preparablestmt();
			State = 8284;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Materialized_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public Materialized_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialized_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMaterialized_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMaterialized_(this);
		}
	}

	[RuleVersion(0)]
	public Materialized_Context materialized_() {
		Materialized_Context _localctx = new Materialized_Context(Context, State);
		EnterRule(_localctx, 982, RULE_materialized_);
		try {
			State = 8289;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MATERIALIZED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8286;
				Match(MATERIALIZED);
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8287;
				Match(NOT);
				State = 8288;
				Match(MATERIALIZED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clause_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public With_clause_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWith_clause_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWith_clause_(this);
		}
	}

	[RuleVersion(0)]
	public With_clause_Context with_clause_() {
		With_clause_Context _localctx = new With_clause_Context(Context, State);
		EnterRule(_localctx, 984, RULE_with_clause_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8291;
			with_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempTableNameContext opttempTableName() {
			return GetRuleContext<OpttempTableNameContext>(0);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInto_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInto_clause(this);
		}
	}

	[RuleVersion(0)]
	public Into_clauseContext into_clause() {
		Into_clauseContext _localctx = new Into_clauseContext(Context, State);
		EnterRule(_localctx, 986, RULE_into_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8293;
			Match(INTO);
			State = 8294;
			opttempTableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Strict_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		public Strict_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strict_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStrict_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStrict_(this);
		}
	}

	[RuleVersion(0)]
	public Strict_Context strict_() {
		Strict_Context _localctx = new Strict_Context(Context, State);
		EnterRule(_localctx, 988, RULE_strict_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8296;
			Match(STRICT_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttempTableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_Context table_() {
			return GetRuleContext<Table_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(PostgreSQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		public OpttempTableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttempTableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttempTableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttempTableName(this);
		}
	}

	[RuleVersion(0)]
	public OpttempTableNameContext opttempTableName() {
		OpttempTableNameContext _localctx = new OpttempTableNameContext(Context, State);
		EnterRule(_localctx, 990, RULE_opttempTableName);
		int _la;
		try {
			State = 8314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,754,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					State = 8298;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 8301;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLE) {
					{
					State = 8302;
					table_();
					}
				}

				State = 8305;
				qualified_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8306;
				Match(UNLOGGED);
				State = 8308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLE) {
					{
					State = 8307;
					table_();
					}
				}

				State = 8310;
				qualified_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8311;
				Match(TABLE);
				State = 8312;
				qualified_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8313;
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		public Table_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_(this);
		}
	}

	[RuleVersion(0)]
	public Table_Context table_() {
		Table_Context _localctx = new Table_Context(Context, State);
		EnterRule(_localctx, 992, RULE_table_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8316;
			Match(TABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_or_distinctContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		public All_or_distinctContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_or_distinct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAll_or_distinct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAll_or_distinct(this);
		}
	}

	[RuleVersion(0)]
	public All_or_distinctContext all_or_distinct() {
		All_or_distinctContext _localctx = new All_or_distinctContext(Context, State);
		EnterRule(_localctx, 994, RULE_all_or_distinct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8318;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Distinct_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Distinct_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distinct_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDistinct_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDistinct_clause(this);
		}
	}

	[RuleVersion(0)]
	public Distinct_clauseContext distinct_clause() {
		Distinct_clauseContext _localctx = new Distinct_clauseContext(Context, State);
		EnterRule(_localctx, 996, RULE_distinct_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8320;
			Match(DISTINCT);
			State = 8326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 8321;
				Match(ON);
				State = 8322;
				Match(OPEN_PAREN);
				State = 8323;
				expr_list();
				State = 8324;
				Match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_clause_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public All_clause_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_clause_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAll_clause_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAll_clause_(this);
		}
	}

	[RuleVersion(0)]
	public All_clause_Context all_clause_() {
		All_clause_Context _localctx = new All_clause_Context(Context, State);
		EnterRule(_localctx, 998, RULE_all_clause_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8328;
			Match(ALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_clause_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sort_clauseContext sort_clause() {
			return GetRuleContext<Sort_clauseContext>(0);
		}
		public Sort_clause_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_clause_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSort_clause_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSort_clause_(this);
		}
	}

	[RuleVersion(0)]
	public Sort_clause_Context sort_clause_() {
		Sort_clause_Context _localctx = new Sort_clause_Context(Context, State);
		EnterRule(_localctx, 1000, RULE_sort_clause_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8330;
			sort_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sortby_listContext sortby_list() {
			return GetRuleContext<Sortby_listContext>(0);
		}
		public Sort_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSort_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSort_clause(this);
		}
	}

	[RuleVersion(0)]
	public Sort_clauseContext sort_clause() {
		Sort_clauseContext _localctx = new Sort_clauseContext(Context, State);
		EnterRule(_localctx, 1002, RULE_sort_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8332;
			Match(ORDER);
			State = 8333;
			Match(BY);
			State = 8334;
			sortby_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sortby_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SortbyContext[] sortby() {
			return GetRuleContexts<SortbyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortbyContext sortby(int i) {
			return GetRuleContext<SortbyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Sortby_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortby_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSortby_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSortby_list(this);
		}
	}

	[RuleVersion(0)]
	public Sortby_listContext sortby_list() {
		Sortby_listContext _localctx = new Sortby_listContext(Context, State);
		EnterRule(_localctx, 1004, RULE_sortby_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8336;
			sortby();
			State = 8341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8337;
				Match(COMMA);
				State = 8338;
				sortby();
				}
				}
				State = 8343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortbyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qual_all_opContext qual_all_op() {
			return GetRuleContext<Qual_all_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nulls_order_Context nulls_order_() {
			return GetRuleContext<Nulls_order_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Asc_desc_Context asc_desc_() {
			return GetRuleContext<Asc_desc_Context>(0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortby; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSortby(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSortby(this);
		}
	}

	[RuleVersion(0)]
	public SortbyContext sortby() {
		SortbyContext _localctx = new SortbyContext(Context, State);
		EnterRule(_localctx, 1006, RULE_sortby);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8344;
			a_expr();
			State = 8350;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				{
				State = 8345;
				Match(USING);
				State = 8346;
				qual_all_op();
				}
				break;
			case Eof:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ABSENT:
			case FORMAT_LA:
			case ASC:
			case CREATE:
			case DESC:
			case FETCH:
			case FOR:
			case GRANT:
			case LIMIT:
			case NULL_P:
			case OFFSET:
			case ON:
			case RETURNING:
			case WITH:
			case NULLS_P:
			case RANGE:
			case ROWS:
			case GROUPS:
				{
				State = 8348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 8347;
					asc_desc_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NULLS_P) {
				{
				State = 8352;
				nulls_order_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_limitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Offset_clauseContext offset_clause() {
			return GetRuleContext<Offset_clauseContext>(0);
		}
		public Select_limitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_limit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_limit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_limit(this);
		}
	}

	[RuleVersion(0)]
	public Select_limitContext select_limit() {
		Select_limitContext _localctx = new Select_limitContext(Context, State);
		EnterRule(_localctx, 1008, RULE_select_limit);
		int _la;
		try {
			State = 8363;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FETCH:
			case LIMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8355;
				limit_clause();
				State = 8357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OFFSET) {
					{
					State = 8356;
					offset_clause();
					}
				}

				}
				break;
			case OFFSET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8359;
				offset_clause();
				State = 8361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FETCH || _la==LIMIT) {
					{
					State = 8360;
					limit_clause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_limit_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_limitContext select_limit() {
			return GetRuleContext<Select_limitContext>(0);
		}
		public Select_limit_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_limit_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_limit_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_limit_(this);
		}
	}

	[RuleVersion(0)]
	public Select_limit_Context select_limit_() {
		Select_limit_Context _localctx = new Select_limit_Context(Context, State);
		EnterRule(_localctx, 1010, RULE_select_limit_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8365;
			select_limit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_limit_valueContext select_limit_value() {
			return GetRuleContext<Select_limit_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_offset_valueContext select_offset_value() {
			return GetRuleContext<Select_offset_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public First_or_nextContext first_or_next() {
			return GetRuleContext<First_or_nextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_fetch_first_valueContext select_fetch_first_value() {
			return GetRuleContext<Select_fetch_first_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_or_rowsContext row_or_rows() {
			return GetRuleContext<Row_or_rowsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(PostgreSQLParser.TIES, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLimit_clause(this);
		}
	}

	[RuleVersion(0)]
	public Limit_clauseContext limit_clause() {
		Limit_clauseContext _localctx = new Limit_clauseContext(Context, State);
		EnterRule(_localctx, 1012, RULE_limit_clause);
		int _la;
		try {
			State = 8390;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8367;
				Match(LIMIT);
				State = 8368;
				select_limit_value();
				State = 8371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 8369;
					Match(COMMA);
					State = 8370;
					select_offset_value();
					}
				}

				}
				break;
			case FETCH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8373;
				Match(FETCH);
				State = 8374;
				first_or_next();
				State = 8388;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,766,Context) ) {
				case 1:
					{
					State = 8375;
					select_fetch_first_value();
					State = 8376;
					row_or_rows();
					State = 8380;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ONLY:
						{
						State = 8377;
						Match(ONLY);
						}
						break;
					case WITH:
						{
						State = 8378;
						Match(WITH);
						State = 8379;
						Match(TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 2:
					{
					State = 8382;
					row_or_rows();
					State = 8386;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ONLY:
						{
						State = 8383;
						Match(ONLY);
						}
						break;
					case WITH:
						{
						State = 8384;
						Match(WITH);
						State = 8385;
						Match(TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Offset_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(PostgreSQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_offset_valueContext select_offset_value() {
			return GetRuleContext<Select_offset_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_fetch_first_valueContext select_fetch_first_value() {
			return GetRuleContext<Select_fetch_first_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_or_rowsContext row_or_rows() {
			return GetRuleContext<Row_or_rowsContext>(0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOffset_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOffset_clause(this);
		}
	}

	[RuleVersion(0)]
	public Offset_clauseContext offset_clause() {
		Offset_clauseContext _localctx = new Offset_clauseContext(Context, State);
		EnterRule(_localctx, 1014, RULE_offset_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8392;
			Match(OFFSET);
			State = 8397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,768,Context) ) {
			case 1:
				{
				State = 8393;
				select_offset_value();
				}
				break;
			case 2:
				{
				State = 8394;
				select_fetch_first_value();
				State = 8395;
				row_or_rows();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_limit_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Select_limit_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_limit_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_limit_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_limit_value(this);
		}
	}

	[RuleVersion(0)]
	public Select_limit_valueContext select_limit_value() {
		Select_limit_valueContext _localctx = new Select_limit_valueContext(Context, State);
		EnterRule(_localctx, 1016, RULE_select_limit_value);
		try {
			State = 8401;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case FALSE_P:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8399;
				a_expr();
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8400;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_offset_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Select_offset_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_offset_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_offset_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_offset_value(this);
		}
	}

	[RuleVersion(0)]
	public Select_offset_valueContext select_offset_value() {
		Select_offset_valueContext _localctx = new Select_offset_valueContext(Context, State);
		EnterRule(_localctx, 1018, RULE_select_offset_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8403;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_fetch_first_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public I_or_f_constContext i_or_f_const() {
			return GetRuleContext<I_or_f_constContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		public Select_fetch_first_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_fetch_first_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_fetch_first_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_fetch_first_value(this);
		}
	}

	[RuleVersion(0)]
	public Select_fetch_first_valueContext select_fetch_first_value() {
		Select_fetch_first_valueContext _localctx = new Select_fetch_first_valueContext(Context, State);
		EnterRule(_localctx, 1020, RULE_select_fetch_first_value);
		try {
			State = 8410;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PARAM:
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case FALSE_P:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8405;
				c_expr();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8406;
				Match(PLUS);
				State = 8407;
				i_or_f_const();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8408;
				Match(MINUS);
				State = 8409;
				i_or_f_const();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class I_or_f_constContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		public I_or_f_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_i_or_f_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterI_or_f_const(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitI_or_f_const(this);
		}
	}

	[RuleVersion(0)]
	public I_or_f_constContext i_or_f_const() {
		I_or_f_constContext _localctx = new I_or_f_constContext(Context, State);
		EnterRule(_localctx, 1022, RULE_i_or_f_const);
		try {
			State = 8414;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8412;
				iconst();
				}
				break;
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8413;
				fconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_or_rowsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		public Row_or_rowsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_or_rows; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRow_or_rows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRow_or_rows(this);
		}
	}

	[RuleVersion(0)]
	public Row_or_rowsContext row_or_rows() {
		Row_or_rowsContext _localctx = new Row_or_rowsContext(Context, State);
		EnterRule(_localctx, 1024, RULE_row_or_rows);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8416;
			_la = TokenStream.LA(1);
			if ( !(_la==ROWS || _la==ROW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class First_or_nextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		public First_or_nextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_first_or_next; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFirst_or_next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFirst_or_next(this);
		}
	}

	[RuleVersion(0)]
	public First_or_nextContext first_or_next() {
		First_or_nextContext _localctx = new First_or_nextContext(Context, State);
		EnterRule(_localctx, 1026, RULE_first_or_next);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8418;
			_la = TokenStream.LA(1);
			if ( !(_la==FIRST_P || _la==NEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_listContext group_by_list() {
			return GetRuleContext<Group_by_listContext>(0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGroup_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGroup_clause(this);
		}
	}

	[RuleVersion(0)]
	public Group_clauseContext group_clause() {
		Group_clauseContext _localctx = new Group_clauseContext(Context, State);
		EnterRule(_localctx, 1028, RULE_group_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8420;
			Match(GROUP_P);
			State = 8421;
			Match(BY);
			State = 8422;
			group_by_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Group_by_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_list(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_listContext group_by_list() {
		Group_by_listContext _localctx = new Group_by_listContext(Context, State);
		EnterRule(_localctx, 1030, RULE_group_by_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8424;
			group_by_item();
			State = 8429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8425;
				Match(COMMA);
				State = 8426;
				group_by_item();
				}
				}
				State = 8431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Empty_grouping_setContext empty_grouping_set() {
			return GetRuleContext<Empty_grouping_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cube_clauseContext cube_clause() {
			return GetRuleContext<Cube_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollup_clauseContext rollup_clause() {
			return GetRuleContext<Rollup_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_sets_clauseContext grouping_sets_clause() {
			return GetRuleContext<Grouping_sets_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_item(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_itemContext group_by_item() {
		Group_by_itemContext _localctx = new Group_by_itemContext(Context, State);
		EnterRule(_localctx, 1032, RULE_group_by_item);
		try {
			State = 8437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,773,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8432;
				empty_grouping_set();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8433;
				cube_clause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8434;
				rollup_clause();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8435;
				grouping_sets_clause();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8436;
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_grouping_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Empty_grouping_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_grouping_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEmpty_grouping_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEmpty_grouping_set(this);
		}
	}

	[RuleVersion(0)]
	public Empty_grouping_setContext empty_grouping_set() {
		Empty_grouping_setContext _localctx = new Empty_grouping_setContext(Context, State);
		EnterRule(_localctx, 1034, RULE_empty_grouping_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8439;
			Match(OPEN_PAREN);
			State = 8440;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollup_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(PostgreSQLParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Rollup_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRollup_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRollup_clause(this);
		}
	}

	[RuleVersion(0)]
	public Rollup_clauseContext rollup_clause() {
		Rollup_clauseContext _localctx = new Rollup_clauseContext(Context, State);
		EnterRule(_localctx, 1036, RULE_rollup_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8442;
			Match(ROLLUP);
			State = 8443;
			Match(OPEN_PAREN);
			State = 8444;
			expr_list();
			State = 8445;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cube_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(PostgreSQLParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Cube_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cube_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCube_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCube_clause(this);
		}
	}

	[RuleVersion(0)]
	public Cube_clauseContext cube_clause() {
		Cube_clauseContext _localctx = new Cube_clauseContext(Context, State);
		EnterRule(_localctx, 1038, RULE_cube_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8447;
			Match(CUBE);
			State = 8448;
			Match(OPEN_PAREN);
			State = 8449;
			expr_list();
			State = 8450;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(PostgreSQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(PostgreSQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_listContext group_by_list() {
			return GetRuleContext<Group_by_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrouping_sets_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrouping_sets_clause(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_clauseContext grouping_sets_clause() {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(Context, State);
		EnterRule(_localctx, 1040, RULE_grouping_sets_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8452;
			Match(GROUPING);
			State = 8453;
			Match(SETS);
			State = 8454;
			Match(OPEN_PAREN);
			State = 8455;
			group_by_list();
			State = 8456;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Having_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(PostgreSQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHaving_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHaving_clause(this);
		}
	}

	[RuleVersion(0)]
	public Having_clauseContext having_clause() {
		Having_clauseContext _localctx = new Having_clauseContext(Context, State);
		EnterRule(_localctx, 1042, RULE_having_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8458;
			Match(HAVING);
			State = 8459;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_itemsContext for_locking_items() {
			return GetRuleContext<For_locking_itemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		public For_locking_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_clause(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_clauseContext for_locking_clause() {
		For_locking_clauseContext _localctx = new For_locking_clauseContext(Context, State);
		EnterRule(_localctx, 1044, RULE_for_locking_clause);
		try {
			State = 8465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,774,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8461;
				for_locking_items();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8462;
				Match(FOR);
				State = 8463;
				Match(READ);
				State = 8464;
				Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_clause_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_clauseContext for_locking_clause() {
			return GetRuleContext<For_locking_clauseContext>(0);
		}
		public For_locking_clause_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_clause_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_clause_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_clause_(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_clause_Context for_locking_clause_() {
		For_locking_clause_Context _localctx = new For_locking_clause_Context(Context, State);
		EnterRule(_localctx, 1046, RULE_for_locking_clause_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8467;
			for_locking_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_itemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_itemContext[] for_locking_item() {
			return GetRuleContexts<For_locking_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_itemContext for_locking_item(int i) {
			return GetRuleContext<For_locking_itemContext>(i);
		}
		public For_locking_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_items; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_items(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_items(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_itemsContext for_locking_items() {
		For_locking_itemsContext _localctx = new For_locking_itemsContext(Context, State);
		EnterRule(_localctx, 1048, RULE_for_locking_items);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8469;
				for_locking_item();
				}
				}
				State = 8472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_strengthContext for_locking_strength() {
			return GetRuleContext<For_locking_strengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Locked_rels_listContext locked_rels_list() {
			return GetRuleContext<Locked_rels_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nowait_or_skip_Context nowait_or_skip_() {
			return GetRuleContext<Nowait_or_skip_Context>(0);
		}
		public For_locking_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_item(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_itemContext for_locking_item() {
		For_locking_itemContext _localctx = new For_locking_itemContext(Context, State);
		EnterRule(_localctx, 1050, RULE_for_locking_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8474;
			for_locking_strength();
			State = 8476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OF) {
				{
				State = 8475;
				locked_rels_list();
				}
			}

			State = 8479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==SKIP_P) {
				{
				State = 8478;
				nowait_or_skip_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_strengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(PostgreSQLParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		public For_locking_strengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_strength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_strength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_strength(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_strengthContext for_locking_strength() {
		For_locking_strengthContext _localctx = new For_locking_strengthContext(Context, State);
		EnterRule(_localctx, 1052, RULE_for_locking_strength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8481;
			Match(FOR);
			State = 8491;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
			case UPDATE:
				{
				State = 8484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 8482;
					Match(NO);
					State = 8483;
					Match(KEY);
					}
				}

				State = 8486;
				Match(UPDATE);
				}
				break;
			case KEY:
			case SHARE:
				{
				State = 8488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEY) {
					{
					State = 8487;
					Match(KEY);
					}
				}

				State = 8490;
				Match(SHARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Locked_rels_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		public Locked_rels_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locked_rels_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLocked_rels_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLocked_rels_list(this);
		}
	}

	[RuleVersion(0)]
	public Locked_rels_listContext locked_rels_list() {
		Locked_rels_listContext _localctx = new Locked_rels_listContext(Context, State);
		EnterRule(_localctx, 1054, RULE_locked_rels_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8493;
			Match(OF);
			State = 8494;
			qualified_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(PostgreSQLParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext[] expr_list() {
			return GetRuleContexts<Expr_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list(int i) {
			return GetRuleContext<Expr_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(PostgreSQLParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterValues_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitValues_clause(this);
		}
	}

	[RuleVersion(0)]
	public Values_clauseContext values_clause() {
		Values_clauseContext _localctx = new Values_clauseContext(Context, State);
		EnterRule(_localctx, 1056, RULE_values_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8496;
			Match(VALUES);
			State = 8497;
			Match(OPEN_PAREN);
			State = 8498;
			expr_list();
			State = 8499;
			Match(CLOSE_PAREN);
			State = 8507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8500;
				Match(COMMA);
				State = 8501;
				Match(OPEN_PAREN);
				State = 8502;
				expr_list();
				State = 8503;
				Match(CLOSE_PAREN);
				}
				}
				State = 8509;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_listContext from_list() {
			return GetRuleContext<From_listContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 1058, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8510;
			Match(FROM);
			State = 8511;
			from_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext[] table_ref() {
			return GetRuleContexts<Table_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext table_ref(int i) {
			return GetRuleContext<Table_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public From_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrom_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrom_list(this);
		}
	}

	[RuleVersion(0)]
	public From_listContext from_list() {
		From_listContext _localctx = new From_listContext(Context, State);
		EnterRule(_localctx, 1060, RULE_from_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8513;
			table_ref();
			State = 8518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8514;
				Match(COMMA);
				State = 8515;
				table_ref();
				}
				}
				State = 8520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_tableContext func_table() {
			return GetRuleContext<Func_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XmltableContext xmltable() {
			return GetRuleContext<XmltableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL_P() { return GetToken(PostgreSQLParser.LATERAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext[] table_ref() {
			return GetRuleContexts<Table_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext table_ref(int i) {
			return GetRuleContext<Table_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CROSS() { return GetTokens(PostgreSQLParser.CROSS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS(int i) {
			return GetToken(PostgreSQLParser.CROSS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] JOIN() { return GetTokens(PostgreSQLParser.JOIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN(int i) {
			return GetToken(PostgreSQLParser.JOIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NATURAL() { return GetTokens(PostgreSQLParser.NATURAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL(int i) {
			return GetToken(PostgreSQLParser.NATURAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_qualContext[] join_qual() {
			return GetRuleContexts<Join_qualContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_qualContext join_qual(int i) {
			return GetRuleContext<Join_qualContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_clauseContext alias_clause() {
			return GetRuleContext<Alias_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tablesample_clauseContext tablesample_clause() {
			return GetRuleContext<Tablesample_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_alias_clauseContext func_alias_clause() {
			return GetRuleContext<Func_alias_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_typeContext[] join_type() {
			return GetRuleContexts<Join_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_typeContext join_type(int i) {
			return GetRuleContext<Join_typeContext>(i);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_ref(this);
		}
	}

	[RuleVersion(0)]
	public Table_refContext table_ref() {
		Table_refContext _localctx = new Table_refContext(Context, State);
		EnterRule(_localctx, 1062, RULE_table_ref);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,796,Context) ) {
			case 1:
				{
				State = 8521;
				relation_expr();
				State = 8523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 8522;
					alias_clause();
					}
				}

				State = 8526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLESAMPLE) {
					{
					State = 8525;
					tablesample_clause();
					}
				}

				}
				break;
			case 2:
				{
				State = 8528;
				func_table();
				State = 8530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 8529;
					func_alias_clause();
					}
				}

				}
				break;
			case 3:
				{
				State = 8532;
				xmltable();
				State = 8534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 8533;
					alias_clause();
					}
				}

				}
				break;
			case 4:
				{
				State = 8536;
				select_with_parens();
				State = 8538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 8537;
					alias_clause();
					}
				}

				}
				break;
			case 5:
				{
				State = 8540;
				Match(LATERAL_P);
				State = 8553;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,791,Context) ) {
				case 1:
					{
					State = 8541;
					xmltable();
					State = 8543;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
						{
						State = 8542;
						alias_clause();
						}
					}

					}
					break;
				case 2:
					{
					State = 8545;
					func_table();
					State = 8547;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
						{
						State = 8546;
						func_alias_clause();
						}
					}

					}
					break;
				case 3:
					{
					State = 8549;
					select_with_parens();
					State = 8551;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
						{
						State = 8550;
						alias_clause();
						}
					}

					}
					break;
				}
				}
				break;
			case 6:
				{
				State = 8555;
				Match(OPEN_PAREN);
				State = 8556;
				table_ref();
				State = 8573;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CROSS:
					{
					State = 8557;
					Match(CROSS);
					State = 8558;
					Match(JOIN);
					State = 8559;
					table_ref();
					}
					break;
				case NATURAL:
					{
					State = 8560;
					Match(NATURAL);
					State = 8562;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 8261L) != 0)) {
						{
						State = 8561;
						join_type();
						}
					}

					State = 8564;
					Match(JOIN);
					State = 8565;
					table_ref();
					}
					break;
				case FULL:
				case INNER_P:
				case JOIN:
				case LEFT:
				case RIGHT:
					{
					State = 8567;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 8261L) != 0)) {
						{
						State = 8566;
						join_type();
						}
					}

					State = 8569;
					Match(JOIN);
					State = 8570;
					table_ref();
					State = 8571;
					join_qual();
					}
					break;
				case CLOSE_PAREN:
					break;
				default:
					break;
				}
				State = 8575;
				Match(CLOSE_PAREN);
				State = 8577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
					{
					State = 8576;
					alias_clause();
					}
				}

				}
				break;
			}
			State = 8599;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,800,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 8597;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CROSS:
						{
						State = 8581;
						Match(CROSS);
						State = 8582;
						Match(JOIN);
						State = 8583;
						table_ref();
						}
						break;
					case NATURAL:
						{
						State = 8584;
						Match(NATURAL);
						State = 8586;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 8261L) != 0)) {
							{
							State = 8585;
							join_type();
							}
						}

						State = 8588;
						Match(JOIN);
						State = 8589;
						table_ref();
						}
						break;
					case FULL:
					case INNER_P:
					case JOIN:
					case LEFT:
					case RIGHT:
						{
						State = 8591;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 8261L) != 0)) {
							{
							State = 8590;
							join_type();
							}
						}

						State = 8593;
						Match(JOIN);
						State = 8594;
						table_ref();
						State = 8595;
						join_qual();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 8601;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,800,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alias_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlias_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlias_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alias_clauseContext alias_clause() {
		Alias_clauseContext _localctx = new Alias_clauseContext(Context, State);
		EnterRule(_localctx, 1064, RULE_alias_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 8602;
				Match(AS);
				}
			}

			State = 8605;
			colid();
			State = 8610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 8606;
				Match(OPEN_PAREN);
				State = 8607;
				name_list();
				State = 8608;
				Match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_alias_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alias_clauseContext alias_clause() {
			return GetRuleContext<Alias_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementlistContext tablefuncelementlist() {
			return GetRuleContext<TablefuncelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Func_alias_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_alias_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_alias_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_alias_clause(this);
		}
	}

	[RuleVersion(0)]
	public Func_alias_clauseContext func_alias_clause() {
		Func_alias_clauseContext _localctx = new Func_alias_clauseContext(Context, State);
		EnterRule(_localctx, 1066, RULE_func_alias_clause);
		int _la;
		try {
			State = 8624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,805,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8612;
				alias_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8618;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AS:
					{
					State = 8613;
					Match(AS);
					State = 8615;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 536870983L) != 0)) {
						{
						State = 8614;
						colid();
						}
					}

					}
					break;
				case JSON:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_EXISTS:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_QUERY:
				case JSON_SCALAR:
				case JSON_SERIALIZE:
				case JSON_TABLE:
				case JSON_VALUE:
				case MERGE_ACTION:
				case ABSENT:
				case ASENSITIVE:
				case ATOMIC:
				case BREADTH:
				case COMPRESSION:
				case CONDITIONAL:
				case DEPTH:
				case EMPTY_P:
				case FINALIZE:
				case INDENT:
				case KEEP:
				case KEYS:
				case NESTED:
				case OMIT:
				case PARAMETER:
				case PATH:
				case PLAN:
				case QUOTES:
				case SCALAR:
				case SOURCE:
				case STRING_P:
				case TARGET:
				case UNCONDITIONAL:
				case PERIOD:
				case OVER:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATCHED:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case ERROR:
				case RETURN:
				case FORMAT:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
					{
					State = 8617;
					colid();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8620;
				Match(OPEN_PAREN);
				State = 8621;
				tablefuncelementlist();
				State = 8622;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_P() { return GetToken(PostgreSQLParser.INNER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_P() { return GetToken(PostgreSQLParser.OUTER_P, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJoin_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJoin_type(this);
		}
	}

	[RuleVersion(0)]
	public Join_typeContext join_type() {
		Join_typeContext _localctx = new Join_typeContext(Context, State);
		EnterRule(_localctx, 1068, RULE_join_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8626;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 8261L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTER_P) {
				{
				State = 8627;
				Match(OUTER_P);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_qualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Join_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_qual; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJoin_qual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJoin_qual(this);
		}
	}

	[RuleVersion(0)]
	public Join_qualContext join_qual() {
		Join_qualContext _localctx = new Join_qualContext(Context, State);
		EnterRule(_localctx, 1070, RULE_join_qual);
		try {
			State = 8637;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8630;
				Match(USING);
				State = 8631;
				Match(OPEN_PAREN);
				State = 8632;
				name_list();
				State = 8633;
				Match(CLOSE_PAREN);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8635;
				Match(ON);
				State = 8636;
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Relation_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRelation_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRelation_expr(this);
		}
	}

	[RuleVersion(0)]
	public Relation_exprContext relation_expr() {
		Relation_exprContext _localctx = new Relation_exprContext(Context, State);
		EnterRule(_localctx, 1072, RULE_relation_expr);
		int _la;
		try {
			State = 8651;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8639;
				qualified_name();
				State = 8641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR) {
					{
					State = 8640;
					Match(STAR);
					}
				}

				}
				break;
			case ONLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8643;
				Match(ONLY);
				State = 8649;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case JSON:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_EXISTS:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_QUERY:
				case JSON_SCALAR:
				case JSON_SERIALIZE:
				case JSON_TABLE:
				case JSON_VALUE:
				case MERGE_ACTION:
				case ABSENT:
				case ASENSITIVE:
				case ATOMIC:
				case BREADTH:
				case COMPRESSION:
				case CONDITIONAL:
				case DEPTH:
				case EMPTY_P:
				case FINALIZE:
				case INDENT:
				case KEEP:
				case KEYS:
				case NESTED:
				case OMIT:
				case PARAMETER:
				case PATH:
				case PLAN:
				case QUOTES:
				case SCALAR:
				case SOURCE:
				case STRING_P:
				case TARGET:
				case UNCONDITIONAL:
				case PERIOD:
				case OVER:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATCHED:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case ERROR:
				case RETURN:
				case FORMAT:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
					{
					State = 8644;
					qualified_name();
					}
					break;
				case OPEN_PAREN:
					{
					State = 8645;
					Match(OPEN_PAREN);
					State = 8646;
					qualified_name();
					State = 8647;
					Match(CLOSE_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext[] relation_expr() {
			return GetRuleContexts<Relation_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr(int i) {
			return GetRuleContext<Relation_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Relation_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRelation_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRelation_expr_list(this);
		}
	}

	[RuleVersion(0)]
	public Relation_expr_listContext relation_expr_list() {
		Relation_expr_listContext _localctx = new Relation_expr_listContext(Context, State);
		EnterRule(_localctx, 1074, RULE_relation_expr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8653;
			relation_expr();
			State = 8658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8654;
				Match(COMMA);
				State = 8655;
				relation_expr();
				}
				}
				State = 8660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_expr_opt_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		public Relation_expr_opt_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_expr_opt_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRelation_expr_opt_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRelation_expr_opt_alias(this);
		}
	}

	[RuleVersion(0)]
	public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
		Relation_expr_opt_aliasContext _localctx = new Relation_expr_opt_aliasContext(Context, State);
		EnterRule(_localctx, 1076, RULE_relation_expr_opt_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8661;
			relation_expr();
			State = 8666;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,813,Context) ) {
			case 1:
				{
				State = 8663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 8662;
					Match(AS);
					}
				}

				State = 8665;
				colid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablesample_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(PostgreSQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Repeatable_clause_Context repeatable_clause_() {
			return GetRuleContext<Repeatable_clause_Context>(0);
		}
		public Tablesample_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablesample_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablesample_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablesample_clause(this);
		}
	}

	[RuleVersion(0)]
	public Tablesample_clauseContext tablesample_clause() {
		Tablesample_clauseContext _localctx = new Tablesample_clauseContext(Context, State);
		EnterRule(_localctx, 1078, RULE_tablesample_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8668;
			Match(TABLESAMPLE);
			State = 8669;
			func_name();
			State = 8670;
			Match(OPEN_PAREN);
			State = 8671;
			expr_list();
			State = 8672;
			Match(CLOSE_PAREN);
			State = 8674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REPEATABLE) {
				{
				State = 8673;
				repeatable_clause_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeatable_clause_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(PostgreSQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Repeatable_clause_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatable_clause_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRepeatable_clause_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRepeatable_clause_(this);
		}
	}

	[RuleVersion(0)]
	public Repeatable_clause_Context repeatable_clause_() {
		Repeatable_clause_Context _localctx = new Repeatable_clause_Context(Context, State);
		EnterRule(_localctx, 1080, RULE_repeatable_clause_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8676;
			Match(REPEATABLE);
			State = 8677;
			Match(OPEN_PAREN);
			State = 8678;
			a_expr();
			State = 8679;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordinality_Context ordinality_() {
			return GetRuleContext<Ordinality_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rowsfrom_listContext rowsfrom_list() {
			return GetRuleContext<Rowsfrom_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_table(this);
		}
	}

	[RuleVersion(0)]
	public Func_tableContext func_table() {
		Func_tableContext _localctx = new Func_tableContext(Context, State);
		EnterRule(_localctx, 1082, RULE_func_table);
		try {
			State = 8693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,817,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8681;
				func_expr_windowless();
				State = 8683;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,815,Context) ) {
				case 1:
					{
					State = 8682;
					ordinality_();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8685;
				Match(ROWS);
				State = 8686;
				Match(FROM);
				State = 8687;
				Match(OPEN_PAREN);
				State = 8688;
				rowsfrom_list();
				State = 8689;
				Match(CLOSE_PAREN);
				State = 8691;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,816,Context) ) {
				case 1:
					{
					State = 8690;
					ordinality_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowsfrom_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_def_list_Context col_def_list_() {
			return GetRuleContext<Col_def_list_Context>(0);
		}
		public Rowsfrom_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsfrom_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsfrom_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsfrom_item(this);
		}
	}

	[RuleVersion(0)]
	public Rowsfrom_itemContext rowsfrom_item() {
		Rowsfrom_itemContext _localctx = new Rowsfrom_itemContext(Context, State);
		EnterRule(_localctx, 1084, RULE_rowsfrom_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8695;
			func_expr_windowless();
			State = 8697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 8696;
				col_def_list_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowsfrom_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rowsfrom_itemContext[] rowsfrom_item() {
			return GetRuleContexts<Rowsfrom_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rowsfrom_itemContext rowsfrom_item(int i) {
			return GetRuleContext<Rowsfrom_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Rowsfrom_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsfrom_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsfrom_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsfrom_list(this);
		}
	}

	[RuleVersion(0)]
	public Rowsfrom_listContext rowsfrom_list() {
		Rowsfrom_listContext _localctx = new Rowsfrom_listContext(Context, State);
		EnterRule(_localctx, 1086, RULE_rowsfrom_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8699;
			rowsfrom_item();
			State = 8704;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8700;
				Match(COMMA);
				State = 8701;
				rowsfrom_item();
				}
				}
				State = 8706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Col_def_list_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementlistContext tablefuncelementlist() {
			return GetRuleContext<TablefuncelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Col_def_list_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_col_def_list_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCol_def_list_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCol_def_list_(this);
		}
	}

	[RuleVersion(0)]
	public Col_def_list_Context col_def_list_() {
		Col_def_list_Context _localctx = new Col_def_list_Context(Context, State);
		EnterRule(_localctx, 1088, RULE_col_def_list_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8707;
			Match(AS);
			State = 8708;
			Match(OPEN_PAREN);
			State = 8709;
			tablefuncelementlist();
			State = 8710;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordinality_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(PostgreSQLParser.ORDINALITY, 0); }
		public Ordinality_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordinality_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOrdinality_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOrdinality_(this);
		}
	}

	[RuleVersion(0)]
	public Ordinality_Context ordinality_() {
		Ordinality_Context _localctx = new Ordinality_Context(Context, State);
		EnterRule(_localctx, 1090, RULE_ordinality_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8712;
			Match(WITH);
			State = 8713;
			Match(ORDINALITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 1092, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8715;
			Match(WHERE);
			State = 8716;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_or_current_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Where_or_current_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_or_current_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhere_or_current_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhere_or_current_clause(this);
		}
	}

	[RuleVersion(0)]
	public Where_or_current_clauseContext where_or_current_clause() {
		Where_or_current_clauseContext _localctx = new Where_or_current_clauseContext(Context, State);
		EnterRule(_localctx, 1094, RULE_where_or_current_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8718;
			Match(WHERE);
			State = 8723;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,820,Context) ) {
			case 1:
				{
				State = 8719;
				Match(CURRENT_P);
				State = 8720;
				Match(OF);
				State = 8721;
				cursor_name();
				}
				break;
			case 2:
				{
				State = 8722;
				a_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttablefuncelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementlistContext tablefuncelementlist() {
			return GetRuleContext<TablefuncelementlistContext>(0);
		}
		public OpttablefuncelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttablefuncelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttablefuncelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttablefuncelementlist(this);
		}
	}

	[RuleVersion(0)]
	public OpttablefuncelementlistContext opttablefuncelementlist() {
		OpttablefuncelementlistContext _localctx = new OpttablefuncelementlistContext(Context, State);
		EnterRule(_localctx, 1096, RULE_opttablefuncelementlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8725;
			tablefuncelementlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablefuncelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementContext[] tablefuncelement() {
			return GetRuleContexts<TablefuncelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementContext tablefuncelement(int i) {
			return GetRuleContext<TablefuncelementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public TablefuncelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablefuncelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablefuncelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablefuncelementlist(this);
		}
	}

	[RuleVersion(0)]
	public TablefuncelementlistContext tablefuncelementlist() {
		TablefuncelementlistContext _localctx = new TablefuncelementlistContext(Context, State);
		EnterRule(_localctx, 1098, RULE_tablefuncelementlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8727;
			tablefuncelement();
			State = 8732;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8728;
				Match(COMMA);
				State = 8729;
				tablefuncelement();
				}
				}
				State = 8734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablefuncelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Collate_clause_Context collate_clause_() {
			return GetRuleContext<Collate_clause_Context>(0);
		}
		public TablefuncelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablefuncelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablefuncelement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablefuncelement(this);
		}
	}

	[RuleVersion(0)]
	public TablefuncelementContext tablefuncelement() {
		TablefuncelementContext _localctx = new TablefuncelementContext(Context, State);
		EnterRule(_localctx, 1100, RULE_tablefuncelement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8735;
			colid();
			State = 8736;
			typename();
			State = 8738;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE) {
				{
				State = 8737;
				collate_clause_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmltableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLTABLE() { return GetToken(PostgreSQLParser.XMLTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(PostgreSQLParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(PostgreSQLParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmlexists_argumentContext xmlexists_argument() {
			return GetRuleContext<Xmlexists_argumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(PostgreSQLParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_listContext xmltable_column_list() {
			return GetRuleContext<Xmltable_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLNAMESPACES() { return GetToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_namespace_listContext xml_namespace_list() {
			return GetRuleContext<Xml_namespace_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public XmltableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable(this);
		}
	}

	[RuleVersion(0)]
	public XmltableContext xmltable() {
		XmltableContext _localctx = new XmltableContext(Context, State);
		EnterRule(_localctx, 1102, RULE_xmltable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8740;
			Match(XMLTABLE);
			State = 8741;
			Match(OPEN_PAREN);
			State = 8757;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,823,Context) ) {
			case 1:
				{
				State = 8742;
				c_expr();
				State = 8743;
				xmlexists_argument();
				State = 8744;
				Match(COLUMNS);
				State = 8745;
				xmltable_column_list();
				}
				break;
			case 2:
				{
				State = 8747;
				Match(XMLNAMESPACES);
				State = 8748;
				Match(OPEN_PAREN);
				State = 8749;
				xml_namespace_list();
				State = 8750;
				Match(CLOSE_PAREN);
				State = 8751;
				Match(COMMA);
				State = 8752;
				c_expr();
				State = 8753;
				xmlexists_argument();
				State = 8754;
				Match(COLUMNS);
				State = 8755;
				xmltable_column_list();
				}
				break;
			}
			State = 8759;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_elContext[] xmltable_column_el() {
			return GetRuleContexts<Xmltable_column_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_elContext xmltable_column_el(int i) {
			return GetRuleContext<Xmltable_column_elContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Xmltable_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_listContext xmltable_column_list() {
		Xmltable_column_listContext _localctx = new Xmltable_column_listContext(Context, State);
		EnterRule(_localctx, 1104, RULE_xmltable_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8761;
			xmltable_column_el();
			State = 8766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8762;
				Match(COMMA);
				State = 8763;
				xmltable_column_el();
				}
				}
				State = 8768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_column_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(PostgreSQLParser.ORDINALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_option_listContext xmltable_column_option_list() {
			return GetRuleContext<Xmltable_column_option_listContext>(0);
		}
		public Xmltable_column_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_el(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_elContext xmltable_column_el() {
		Xmltable_column_elContext _localctx = new Xmltable_column_elContext(Context, State);
		EnterRule(_localctx, 1106, RULE_xmltable_column_el);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8769;
			colid();
			State = 8776;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case DEC:
			case DECIMAL_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case NATIONAL:
			case NCHAR:
			case NUMERIC:
			case REAL:
			case SETOF:
			case SMALLINT:
			case TIME:
			case TIMESTAMP:
			case VARCHAR:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case COLUMNS:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				{
				State = 8770;
				typename();
				State = 8772;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 50331649L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 268435491L) != 0)) {
					{
					State = 8771;
					xmltable_column_option_list();
					}
				}

				}
				break;
			case FOR:
				{
				State = 8774;
				Match(FOR);
				State = 8775;
				Match(ORDINALITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_column_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_option_elContext[] xmltable_column_option_el() {
			return GetRuleContexts<Xmltable_column_option_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_option_elContext xmltable_column_option_el(int i) {
			return GetRuleContext<Xmltable_column_option_elContext>(i);
		}
		public Xmltable_column_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_option_listContext xmltable_column_option_list() {
		Xmltable_column_option_listContext _localctx = new Xmltable_column_option_listContext(Context, State);
		EnterRule(_localctx, 1108, RULE_xmltable_column_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8779;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8778;
				xmltable_column_option_el();
				}
				}
				State = 8781;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 50331649L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 268435491L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_column_option_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Xmltable_column_option_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_option_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_option_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_option_el(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_option_elContext xmltable_column_option_el() {
		Xmltable_column_option_elContext _localctx = new Xmltable_column_option_elContext(Context, State);
		EnterRule(_localctx, 1110, RULE_xmltable_column_option_el);
		try {
			State = 8791;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8783;
				Match(DEFAULT);
				State = 8784;
				a_expr();
				}
				break;
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8785;
				identifier();
				State = 8786;
				a_expr();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8788;
				Match(NOT);
				State = 8789;
				Match(NULL_P);
				}
				break;
			case NULL_P:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8790;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_namespace_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xml_namespace_elContext[] xml_namespace_el() {
			return GetRuleContexts<Xml_namespace_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_namespace_elContext xml_namespace_el(int i) {
			return GetRuleContext<Xml_namespace_elContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Xml_namespace_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_namespace_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_namespace_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_namespace_list(this);
		}
	}

	[RuleVersion(0)]
	public Xml_namespace_listContext xml_namespace_list() {
		Xml_namespace_listContext _localctx = new Xml_namespace_listContext(Context, State);
		EnterRule(_localctx, 1112, RULE_xml_namespace_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8793;
			xml_namespace_el();
			State = 8798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8794;
				Match(COMMA);
				State = 8795;
				xml_namespace_el();
				}
				}
				State = 8800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_namespace_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext colLabel() {
			return GetRuleContext<ColLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Xml_namespace_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_namespace_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_namespace_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_namespace_el(this);
		}
	}

	[RuleVersion(0)]
	public Xml_namespace_elContext xml_namespace_el() {
		Xml_namespace_elContext _localctx = new Xml_namespace_elContext(Context, State);
		EnterRule(_localctx, 1114, RULE_xml_namespace_el);
		try {
			State = 8807;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,830,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8801;
				b_expr(0);
				State = 8802;
				Match(AS);
				State = 8803;
				colLabel();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8805;
				Match(DEFAULT);
				State = 8806;
				b_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpletypenameContext simpletypename() {
			return GetRuleContext<SimpletypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_array_boundsContext opt_array_bounds() {
			return GetRuleContext<Opt_array_boundsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETOF() { return GetToken(PostgreSQLParser.SETOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTypename(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 1116, RULE_typename);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8810;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SETOF) {
				{
				State = 8809;
				Match(SETOF);
				}
			}

			State = 8812;
			simpletypename();
			State = 8821;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,833,Context) ) {
			case 1:
				{
				State = 8813;
				opt_array_bounds();
				}
				break;
			case 2:
				{
				State = 8814;
				Match(ARRAY);
				State = 8819;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,832,Context) ) {
				case 1:
					{
					State = 8815;
					Match(OPEN_BRACKET);
					State = 8816;
					iconst();
					State = 8817;
					Match(CLOSE_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_array_boundsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(PostgreSQLParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(PostgreSQLParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext[] iconst() {
			return GetRuleContexts<IconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst(int i) {
			return GetRuleContext<IconstContext>(i);
		}
		public Opt_array_boundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_array_bounds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_array_bounds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_array_bounds(this);
		}
	}

	[RuleVersion(0)]
	public Opt_array_boundsContext opt_array_bounds() {
		Opt_array_boundsContext _localctx = new Opt_array_boundsContext(Context, State);
		EnterRule(_localctx, 1118, RULE_opt_array_bounds);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8830;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,835,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8823;
					Match(OPEN_BRACKET);
					State = 8825;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & 15L) != 0)) {
						{
						State = 8824;
						iconst();
						}
					}

					State = 8827;
					Match(CLOSE_BRACKET);
					}
					} 
				}
				State = 8832;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,835,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpletypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenerictypeContext generictype() {
			return GetRuleContext<GenerictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitContext bit() {
			return GetRuleContext<BitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstdatetimeContext constdatetime() {
			return GetRuleContext<ConstdatetimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstintervalContext constinterval() {
			return GetRuleContext<ConstintervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interval_Context interval_() {
			return GetRuleContext<Interval_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public SimpletypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpletypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSimpletypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSimpletypename(this);
		}
	}

	[RuleVersion(0)]
	public SimpletypenameContext simpletypename() {
		SimpletypenameContext _localctx = new SimpletypenameContext(Context, State);
		EnterRule(_localctx, 1120, RULE_simpletypename);
		try {
			State = 8849;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,838,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8833;
				generictype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8834;
				numeric();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8835;
				bit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8836;
				character();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8837;
				constdatetime();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8838;
				constinterval();
				State = 8846;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,837,Context) ) {
				case 1:
					{
					State = 8840;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,836,Context) ) {
					case 1:
						{
						State = 8839;
						interval_();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 8842;
					Match(OPEN_PAREN);
					State = 8843;
					iconst();
					State = 8844;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8848;
				jsonType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConsttypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstbitContext constbit() {
			return GetRuleContext<ConstbitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstcharacterContext constcharacter() {
			return GetRuleContext<ConstcharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstdatetimeContext constdatetime() {
			return GetRuleContext<ConstdatetimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonTypeContext jsonType() {
			return GetRuleContext<JsonTypeContext>(0);
		}
		public ConsttypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consttypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConsttypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConsttypename(this);
		}
	}

	[RuleVersion(0)]
	public ConsttypenameContext consttypename() {
		ConsttypenameContext _localctx = new ConsttypenameContext(Context, State);
		EnterRule(_localctx, 1122, RULE_consttypename);
		try {
			State = 8856;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE_P:
			case BIGINT:
			case BOOLEAN_P:
			case DEC:
			case DECIMAL_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case NUMERIC:
			case REAL:
			case SMALLINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8851;
				numeric();
				}
				break;
			case BIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8852;
				constbit();
				}
				break;
			case CHAR_P:
			case CHARACTER:
			case NATIONAL:
			case NCHAR:
			case VARCHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8853;
				constcharacter();
				}
				break;
			case TIME:
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8854;
				constdatetime();
				}
				break;
			case JSON:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8855;
				jsonType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenerictypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_modifiers_Context type_modifiers_() {
			return GetRuleContext<Type_modifiers_Context>(0);
		}
		public GenerictypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generictype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGenerictype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGenerictype(this);
		}
	}

	[RuleVersion(0)]
	public GenerictypeContext generictype() {
		GenerictypeContext _localctx = new GenerictypeContext(Context, State);
		EnterRule(_localctx, 1124, RULE_generictype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8858;
			type_function_name();
			State = 8860;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,840,Context) ) {
			case 1:
				{
				State = 8859;
				attrs();
				}
				break;
			}
			State = 8863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,841,Context) ) {
			case 1:
				{
				State = 8862;
				type_modifiers_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_modifiers_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Type_modifiers_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_modifiers_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_modifiers_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_modifiers_(this);
		}
	}

	[RuleVersion(0)]
	public Type_modifiers_Context type_modifiers_() {
		Type_modifiers_Context _localctx = new Type_modifiers_Context(Context, State);
		EnterRule(_localctx, 1126, RULE_type_modifiers_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8865;
			Match(OPEN_PAREN);
			State = 8866;
			expr_list();
			State = 8867;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_P() { return GetToken(PostgreSQLParser.INT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(PostgreSQLParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(PostgreSQLParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(PostgreSQLParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(PostgreSQLParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_P() { return GetToken(PostgreSQLParser.FLOAT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Float_Context float_() {
			return GetRuleContext<Float_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_P() { return GetToken(PostgreSQLParser.DOUBLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(PostgreSQLParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_P() { return GetToken(PostgreSQLParser.DECIMAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_modifiers_Context type_modifiers_() {
			return GetRuleContext<Type_modifiers_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(PostgreSQLParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(PostgreSQLParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_P() { return GetToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNumeric(this);
		}
	}

	[RuleVersion(0)]
	public NumericContext numeric() {
		NumericContext _localctx = new NumericContext(Context, State);
		EnterRule(_localctx, 1128, RULE_numeric);
		try {
			State = 8893;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8869;
				Match(INT_P);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8870;
				Match(INTEGER);
				}
				break;
			case SMALLINT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8871;
				Match(SMALLINT);
				}
				break;
			case BIGINT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8872;
				Match(BIGINT);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8873;
				Match(REAL);
				}
				break;
			case FLOAT_P:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8874;
				Match(FLOAT_P);
				State = 8876;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,842,Context) ) {
				case 1:
					{
					State = 8875;
					float_();
					}
					break;
				}
				}
				break;
			case DOUBLE_P:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8878;
				Match(DOUBLE_P);
				State = 8879;
				Match(PRECISION);
				}
				break;
			case DECIMAL_P:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8880;
				Match(DECIMAL_P);
				State = 8882;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,843,Context) ) {
				case 1:
					{
					State = 8881;
					type_modifiers_();
					}
					break;
				}
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8884;
				Match(DEC);
				State = 8886;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,844,Context) ) {
				case 1:
					{
					State = 8885;
					type_modifiers_();
					}
					break;
				}
				}
				break;
			case NUMERIC:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8888;
				Match(NUMERIC);
				State = 8890;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,845,Context) ) {
				case 1:
					{
					State = 8889;
					type_modifiers_();
					}
					break;
				}
				}
				break;
			case BOOLEAN_P:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8892;
				Match(BOOLEAN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Float_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Float_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFloat_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFloat_(this);
		}
	}

	[RuleVersion(0)]
	public Float_Context float_() {
		Float_Context _localctx = new Float_Context(Context, State);
		EnterRule(_localctx, 1130, RULE_float_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8895;
			Match(OPEN_PAREN);
			State = 8896;
			iconst();
			State = 8897;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwithlengthContext bitwithlength() {
			return GetRuleContext<BitwithlengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwithoutlengthContext bitwithoutlength() {
			return GetRuleContext<BitwithoutlengthContext>(0);
		}
		public BitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBit(this);
		}
	}

	[RuleVersion(0)]
	public BitContext bit() {
		BitContext _localctx = new BitContext(Context, State);
		EnterRule(_localctx, 1132, RULE_bit);
		try {
			State = 8901;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,847,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8899;
				bitwithlength();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8900;
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstbitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwithlengthContext bitwithlength() {
			return GetRuleContext<BitwithlengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwithoutlengthContext bitwithoutlength() {
			return GetRuleContext<BitwithoutlengthContext>(0);
		}
		public ConstbitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constbit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstbit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstbit(this);
		}
	}

	[RuleVersion(0)]
	public ConstbitContext constbit() {
		ConstbitContext _localctx = new ConstbitContext(Context, State);
		EnterRule(_localctx, 1134, RULE_constbit);
		try {
			State = 8905;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,848,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8903;
				bitwithlength();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8904;
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwithlengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(PostgreSQLParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Varying_Context varying_() {
			return GetRuleContext<Varying_Context>(0);
		}
		public BitwithlengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwithlength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBitwithlength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBitwithlength(this);
		}
	}

	[RuleVersion(0)]
	public BitwithlengthContext bitwithlength() {
		BitwithlengthContext _localctx = new BitwithlengthContext(Context, State);
		EnterRule(_localctx, 1136, RULE_bitwithlength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8907;
			Match(BIT);
			State = 8909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARYING) {
				{
				State = 8908;
				varying_();
				}
			}

			State = 8911;
			Match(OPEN_PAREN);
			State = 8912;
			expr_list();
			State = 8913;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwithoutlengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(PostgreSQLParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Varying_Context varying_() {
			return GetRuleContext<Varying_Context>(0);
		}
		public BitwithoutlengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwithoutlength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBitwithoutlength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBitwithoutlength(this);
		}
	}

	[RuleVersion(0)]
	public BitwithoutlengthContext bitwithoutlength() {
		BitwithoutlengthContext _localctx = new BitwithoutlengthContext(Context, State);
		EnterRule(_localctx, 1138, RULE_bitwithoutlength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8915;
			Match(BIT);
			State = 8917;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,850,Context) ) {
			case 1:
				{
				State = 8916;
				varying_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Character_cContext character_c() {
			return GetRuleContext<Character_cContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(Context, State);
		EnterRule(_localctx, 1140, RULE_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8919;
			character_c();
			State = 8924;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,851,Context) ) {
			case 1:
				{
				State = 8920;
				Match(OPEN_PAREN);
				State = 8921;
				iconst();
				State = 8922;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstcharacterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Character_cContext character_c() {
			return GetRuleContext<Character_cContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constcharacter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstcharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstcharacter(this);
		}
	}

	[RuleVersion(0)]
	public ConstcharacterContext constcharacter() {
		ConstcharacterContext _localctx = new ConstcharacterContext(Context, State);
		EnterRule(_localctx, 1142, RULE_constcharacter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8926;
			character_c();
			State = 8931;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 8927;
				Match(OPEN_PAREN);
				State = 8928;
				iconst();
				State = 8929;
				Match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_cContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(PostgreSQLParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_P() { return GetToken(PostgreSQLParser.CHAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(PostgreSQLParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Varying_Context varying_() {
			return GetRuleContext<Varying_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(PostgreSQLParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(PostgreSQLParser.NATIONAL, 0); }
		public Character_cContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_c; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCharacter_c(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCharacter_c(this);
		}
	}

	[RuleVersion(0)]
	public Character_cContext character_c() {
		Character_cContext _localctx = new Character_cContext(Context, State);
		EnterRule(_localctx, 1144, RULE_character_c);
		int _la;
		try {
			State = 8943;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_P:
			case CHARACTER:
			case NCHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8933;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & 32771L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8935;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,853,Context) ) {
				case 1:
					{
					State = 8934;
					varying_();
					}
					break;
				}
				}
				break;
			case VARCHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8937;
				Match(VARCHAR);
				}
				break;
			case NATIONAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8938;
				Match(NATIONAL);
				State = 8939;
				_la = TokenStream.LA(1);
				if ( !(_la==CHAR_P || _la==CHARACTER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8941;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,854,Context) ) {
				case 1:
					{
					State = 8940;
					varying_();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Varying_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(PostgreSQLParser.VARYING, 0); }
		public Varying_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varying_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVarying_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVarying_(this);
		}
	}

	[RuleVersion(0)]
	public Varying_Context varying_() {
		Varying_Context _localctx = new Varying_Context(Context, State);
		EnterRule(_localctx, 1146, RULE_varying_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8945;
			Match(VARYING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstdatetimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(PostgreSQLParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Timezone_Context timezone_() {
			return GetRuleContext<Timezone_Context>(0);
		}
		public ConstdatetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constdatetime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstdatetime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstdatetime(this);
		}
	}

	[RuleVersion(0)]
	public ConstdatetimeContext constdatetime() {
		ConstdatetimeContext _localctx = new ConstdatetimeContext(Context, State);
		EnterRule(_localctx, 1148, RULE_constdatetime);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8947;
			_la = TokenStream.LA(1);
			if ( !(_la==TIME || _la==TIMESTAMP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8952;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,856,Context) ) {
			case 1:
				{
				State = 8948;
				Match(OPEN_PAREN);
				State = 8949;
				iconst();
				State = 8950;
				Match(CLOSE_PAREN);
				}
				break;
			}
			State = 8955;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,857,Context) ) {
			case 1:
				{
				State = 8954;
				timezone_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstintervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(PostgreSQLParser.INTERVAL, 0); }
		public ConstintervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constinterval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstinterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstinterval(this);
		}
	}

	[RuleVersion(0)]
	public ConstintervalContext constinterval() {
		ConstintervalContext _localctx = new ConstintervalContext(Context, State);
		EnterRule(_localctx, 1150, RULE_constinterval);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8957;
			Match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Timezone_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		public Timezone_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timezone_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTimezone_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTimezone_(this);
		}
	}

	[RuleVersion(0)]
	public Timezone_Context timezone_() {
		Timezone_Context _localctx = new Timezone_Context(Context, State);
		EnterRule(_localctx, 1152, RULE_timezone_);
		try {
			State = 8965;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8959;
				Match(WITH);
				State = 8960;
				Match(TIME);
				State = 8961;
				Match(ZONE);
				}
				break;
			case WITHOUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8962;
				Match(WITHOUT);
				State = 8963;
				Match(TIME);
				State = 8964;
				Match(ZONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interval_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_P() { return GetToken(PostgreSQLParser.YEAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_P() { return GetToken(PostgreSQLParser.MONTH_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_P() { return GetToken(PostgreSQLParser.DAY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_P() { return GetToken(PostgreSQLParser.HOUR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_P() { return GetToken(PostgreSQLParser.MINUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interval_secondContext interval_second() {
			return GetRuleContext<Interval_secondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public Interval_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInterval_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInterval_(this);
		}
	}

	[RuleVersion(0)]
	public Interval_Context interval_() {
		Interval_Context _localctx = new Interval_Context(Context, State);
		EnterRule(_localctx, 1154, RULE_interval_);
		try {
			State = 8992;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,861,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8967;
				Match(YEAR_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8968;
				Match(MONTH_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8969;
				Match(DAY_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8970;
				Match(HOUR_P);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8971;
				Match(MINUTE_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8972;
				interval_second();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8973;
				Match(YEAR_P);
				State = 8974;
				Match(TO);
				State = 8975;
				Match(MONTH_P);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8976;
				Match(DAY_P);
				State = 8977;
				Match(TO);
				State = 8981;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case HOUR_P:
					{
					State = 8978;
					Match(HOUR_P);
					}
					break;
				case MINUTE_P:
					{
					State = 8979;
					Match(MINUTE_P);
					}
					break;
				case SECOND_P:
					{
					State = 8980;
					interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8983;
				Match(HOUR_P);
				State = 8984;
				Match(TO);
				State = 8987;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MINUTE_P:
					{
					State = 8985;
					Match(MINUTE_P);
					}
					break;
				case SECOND_P:
					{
					State = 8986;
					interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8989;
				Match(MINUTE_P);
				State = 8990;
				Match(TO);
				State = 8991;
				interval_second();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interval_secondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_P() { return GetToken(PostgreSQLParser.SECOND_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Interval_secondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_second; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInterval_second(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInterval_second(this);
		}
	}

	[RuleVersion(0)]
	public Interval_secondContext interval_second() {
		Interval_secondContext _localctx = new Interval_secondContext(Context, State);
		EnterRule(_localctx, 1156, RULE_interval_second);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8994;
			Match(SECOND_P);
			State = 8999;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,862,Context) ) {
			case 1:
				{
				State = 8995;
				Match(OPEN_PAREN);
				State = 8996;
				iconst();
				State = 8997;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(PostgreSQLParser.JSON, 0); }
		public JsonTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJsonType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJsonType(this);
		}
	}

	[RuleVersion(0)]
	public JsonTypeContext jsonType() {
		JsonTypeContext _localctx = new JsonTypeContext(Context, State);
		EnterRule(_localctx, 1158, RULE_jsonType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9001;
			Match(JSON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Escape_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Escape_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escape_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEscape_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEscape_(this);
		}
	}

	[RuleVersion(0)]
	public Escape_Context escape_() {
		Escape_Context _localctx = new Escape_Context(Context, State);
		EnterRule(_localctx, 1160, RULE_escape_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9003;
			Match(ESCAPE);
			State = 9004;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_qualContext a_expr_qual() {
			return GetRuleContext<A_expr_qualContext>(0);
		}
		public A_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr(this);
		}
	}

	[RuleVersion(0)]
	public A_exprContext a_expr() {
		A_exprContext _localctx = new A_exprContext(Context, State);
		EnterRule(_localctx, 1162, RULE_a_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9006;
			a_expr_qual();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_qualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_lesslessContext a_expr_lessless() {
			return GetRuleContext<A_expr_lesslessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext qual_op() {
			return GetRuleContext<Qual_opContext>(0);
		}
		public A_expr_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_qual; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_qual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_qual(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_qualContext a_expr_qual() {
		A_expr_qualContext _localctx = new A_expr_qualContext(Context, State);
		EnterRule(_localctx, 1164, RULE_a_expr_qual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9008;
			a_expr_lessless();
			State = 9012;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,863,Context) ) {
			case 1:
				{
				State = 9009;
				if (!(this.OnlyAcceptableOps())) throw new FailedPredicateException(this, "this.OnlyAcceptableOps()");
				State = 9010;
				qual_op();
				}
				break;
			case 2:
				{
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_lesslessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_orContext[] a_expr_or() {
			return GetRuleContexts<A_expr_orContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_orContext a_expr_or(int i) {
			return GetRuleContext<A_expr_orContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_LESS() { return GetTokens(PostgreSQLParser.LESS_LESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_LESS(int i) {
			return GetToken(PostgreSQLParser.LESS_LESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_GREATER() { return GetTokens(PostgreSQLParser.GREATER_GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_GREATER(int i) {
			return GetToken(PostgreSQLParser.GREATER_GREATER, i);
		}
		public A_expr_lesslessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_lessless; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_lessless(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_lessless(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_lesslessContext a_expr_lessless() {
		A_expr_lesslessContext _localctx = new A_expr_lesslessContext(Context, State);
		EnterRule(_localctx, 1166, RULE_a_expr_lessless);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9014;
			a_expr_or();
			State = 9019;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,864,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9015;
					_la = TokenStream.LA(1);
					if ( !(_la==LESS_LESS || _la==GREATER_GREATER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 9016;
					a_expr_or();
					}
					} 
				}
				State = 9021;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,864,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_andContext[] a_expr_and() {
			return GetRuleContexts<A_expr_andContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_andContext a_expr_and(int i) {
			return GetRuleContext<A_expr_andContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(PostgreSQLParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(PostgreSQLParser.OR, i);
		}
		public A_expr_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_or(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_orContext a_expr_or() {
		A_expr_orContext _localctx = new A_expr_orContext(Context, State);
		EnterRule(_localctx, 1168, RULE_a_expr_or);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9022;
			a_expr_and();
			State = 9027;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,865,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9023;
					Match(OR);
					State = 9024;
					a_expr_and();
					}
					} 
				}
				State = 9029;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,865,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_betweenContext[] a_expr_between() {
			return GetRuleContexts<A_expr_betweenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_betweenContext a_expr_between(int i) {
			return GetRuleContext<A_expr_betweenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(PostgreSQLParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(PostgreSQLParser.AND, i);
		}
		public A_expr_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_and(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_andContext a_expr_and() {
		A_expr_andContext _localctx = new A_expr_andContext(Context, State);
		EnterRule(_localctx, 1170, RULE_a_expr_and);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9030;
			a_expr_between();
			State = 9035;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,866,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9031;
					Match(AND);
					State = 9032;
					a_expr_between();
					}
					} 
				}
				State = 9037;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,866,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_betweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_inContext[] a_expr_in() {
			return GetRuleContexts<A_expr_inContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_inContext a_expr_in(int i) {
			return GetRuleContext<A_expr_inContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(PostgreSQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(PostgreSQLParser.SYMMETRIC, 0); }
		public A_expr_betweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_between; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_between(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_between(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_betweenContext a_expr_between() {
		A_expr_betweenContext _localctx = new A_expr_betweenContext(Context, State);
		EnterRule(_localctx, 1172, RULE_a_expr_between);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9038;
			a_expr_in();
			State = 9050;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,869,Context) ) {
			case 1:
				{
				State = 9040;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 9039;
					Match(NOT);
					}
				}

				State = 9042;
				Match(BETWEEN);
				State = 9044;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SYMMETRIC) {
					{
					State = 9043;
					Match(SYMMETRIC);
					}
				}

				State = 9046;
				a_expr_in();
				State = 9047;
				Match(AND);
				State = 9048;
				a_expr_in();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_unary_notContext a_expr_unary_not() {
			return GetRuleContext<A_expr_unary_notContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public In_exprContext in_expr() {
			return GetRuleContext<In_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public A_expr_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_in(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_inContext a_expr_in() {
		A_expr_inContext _localctx = new A_expr_inContext(Context, State);
		EnterRule(_localctx, 1174, RULE_a_expr_in);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9052;
			a_expr_unary_not();
			State = 9058;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,871,Context) ) {
			case 1:
				{
				State = 9054;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 9053;
					Match(NOT);
					}
				}

				State = 9056;
				Match(IN_P);
				State = 9057;
				in_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_unary_notContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_isnullContext a_expr_isnull() {
			return GetRuleContext<A_expr_isnullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public A_expr_unary_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_unary_not; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_unary_not(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_unary_not(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_unary_notContext a_expr_unary_not() {
		A_expr_unary_notContext _localctx = new A_expr_unary_notContext(Context, State);
		EnterRule(_localctx, 1176, RULE_a_expr_unary_not);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9061;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 9060;
				Match(NOT);
				}
			}

			State = 9063;
			a_expr_isnull();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_isnullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_is_notContext a_expr_is_not() {
			return GetRuleContext<A_expr_is_notContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(PostgreSQLParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(PostgreSQLParser.NOTNULL, 0); }
		public A_expr_isnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_isnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_isnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_isnull(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_isnullContext a_expr_isnull() {
		A_expr_isnullContext _localctx = new A_expr_isnullContext(Context, State);
		EnterRule(_localctx, 1178, RULE_a_expr_isnull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9065;
			a_expr_is_not();
			State = 9067;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,873,Context) ) {
			case 1:
				{
				State = 9066;
				_la = TokenStream.LA(1);
				if ( !(_la==ISNULL || _la==NOTNULL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_is_notContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_compareContext a_expr_compare() {
			return GetRuleContext<A_expr_compareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(PostgreSQLParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZED() { return GetToken(PostgreSQLParser.NORMALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unicode_normal_formContext unicode_normal_form() {
			return GetRuleContext<Unicode_normal_formContext>(0);
		}
		public A_expr_is_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_is_not; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_is_not(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_is_not(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_is_notContext a_expr_is_not() {
		A_expr_is_notContext _localctx = new A_expr_is_notContext(Context, State);
		EnterRule(_localctx, 1180, RULE_a_expr_is_not);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9069;
			a_expr_compare();
			State = 9093;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,877,Context) ) {
			case 1:
				{
				State = 9070;
				Match(IS);
				State = 9072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 9071;
					Match(NOT);
					}
				}

				State = 9091;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NULL_P:
					{
					State = 9074;
					Match(NULL_P);
					}
					break;
				case TRUE_P:
					{
					State = 9075;
					Match(TRUE_P);
					}
					break;
				case FALSE_P:
					{
					State = 9076;
					Match(FALSE_P);
					}
					break;
				case UNKNOWN:
					{
					State = 9077;
					Match(UNKNOWN);
					}
					break;
				case DISTINCT:
					{
					State = 9078;
					Match(DISTINCT);
					State = 9079;
					Match(FROM);
					State = 9080;
					a_expr();
					}
					break;
				case OF:
					{
					State = 9081;
					Match(OF);
					State = 9082;
					Match(OPEN_PAREN);
					State = 9083;
					type_list();
					State = 9084;
					Match(CLOSE_PAREN);
					}
					break;
				case DOCUMENT_P:
					{
					State = 9086;
					Match(DOCUMENT_P);
					}
					break;
				case NORMALIZED:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
					{
					State = 9088;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & 15L) != 0)) {
						{
						State = 9087;
						unicode_normal_form();
						}
					}

					State = 9090;
					Match(NORMALIZED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_compareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_likeContext[] a_expr_like() {
			return GetRuleContexts<A_expr_likeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_likeContext a_expr_like(int i) {
			return GetRuleContext<A_expr_likeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subquery_OpContext subquery_Op() {
			return GetRuleContext<Subquery_OpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_typeContext sub_type() {
			return GetRuleContext<Sub_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(PostgreSQLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(PostgreSQLParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(PostgreSQLParser.LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(PostgreSQLParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public A_expr_compareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_compare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_compare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_compare(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_compareContext a_expr_compare() {
		A_expr_compareContext _localctx = new A_expr_compareContext(Context, State);
		EnterRule(_localctx, 1182, RULE_a_expr_compare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9095;
			a_expr_like();
			State = 9107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,879,Context) ) {
			case 1:
				{
				State = 9096;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 44237824L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9097;
				a_expr_like();
				}
				break;
			case 2:
				{
				State = 9098;
				subquery_Op();
				State = 9099;
				sub_type();
				State = 9105;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,878,Context) ) {
				case 1:
					{
					State = 9100;
					select_with_parens();
					}
					break;
				case 2:
					{
					State = 9101;
					Match(OPEN_PAREN);
					State = 9102;
					a_expr();
					State = 9103;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_likeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_qual_opContext[] a_expr_qual_op() {
			return GetRuleContexts<A_expr_qual_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_qual_opContext a_expr_qual_op(int i) {
			return GetRuleContext<A_expr_qual_opContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(PostgreSQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(PostgreSQLParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Escape_Context escape_() {
			return GetRuleContext<Escape_Context>(0);
		}
		public A_expr_likeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_like; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_like(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_like(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_likeContext a_expr_like() {
		A_expr_likeContext _localctx = new A_expr_likeContext(Context, State);
		EnterRule(_localctx, 1184, RULE_a_expr_like);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9109;
			a_expr_qual_op();
			State = 9123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,883,Context) ) {
			case 1:
				{
				State = 9111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 9110;
					Match(NOT);
					}
				}

				State = 9117;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LIKE:
					{
					State = 9113;
					Match(LIKE);
					}
					break;
				case ILIKE:
					{
					State = 9114;
					Match(ILIKE);
					}
					break;
				case SIMILAR:
					{
					State = 9115;
					Match(SIMILAR);
					State = 9116;
					Match(TO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9119;
				a_expr_qual_op();
				State = 9121;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,882,Context) ) {
				case 1:
					{
					State = 9120;
					escape_();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_qual_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_unary_qualopContext[] a_expr_unary_qualop() {
			return GetRuleContexts<A_expr_unary_qualopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_unary_qualopContext a_expr_unary_qualop(int i) {
			return GetRuleContext<A_expr_unary_qualopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext[] qual_op() {
			return GetRuleContexts<Qual_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext qual_op(int i) {
			return GetRuleContext<Qual_opContext>(i);
		}
		public A_expr_qual_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_qual_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_qual_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_qual_op(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_qual_opContext a_expr_qual_op() {
		A_expr_qual_opContext _localctx = new A_expr_qual_opContext(Context, State);
		EnterRule(_localctx, 1186, RULE_a_expr_qual_op);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9125;
			a_expr_unary_qualop();
			State = 9131;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,884,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9126;
					qual_op();
					State = 9127;
					a_expr_unary_qualop();
					}
					} 
				}
				State = 9133;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,884,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_unary_qualopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_addContext a_expr_add() {
			return GetRuleContext<A_expr_addContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext qual_op() {
			return GetRuleContext<Qual_opContext>(0);
		}
		public A_expr_unary_qualopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_unary_qualop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_unary_qualop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_unary_qualop(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_unary_qualopContext a_expr_unary_qualop() {
		A_expr_unary_qualopContext _localctx = new A_expr_unary_qualopContext(Context, State);
		EnterRule(_localctx, 1188, RULE_a_expr_unary_qualop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,885,Context) ) {
			case 1:
				{
				State = 9134;
				qual_op();
				}
				break;
			}
			State = 9137;
			a_expr_add();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_addContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_mulContext[] a_expr_mul() {
			return GetRuleContexts<A_expr_mulContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_mulContext a_expr_mul(int i) {
			return GetRuleContext<A_expr_mulContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(PostgreSQLParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(PostgreSQLParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(PostgreSQLParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(PostgreSQLParser.PLUS, i);
		}
		public A_expr_addContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_add(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_addContext a_expr_add() {
		A_expr_addContext _localctx = new A_expr_addContext(Context, State);
		EnterRule(_localctx, 1190, RULE_a_expr_add);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9139;
			a_expr_mul();
			State = 9144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,886,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9140;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 9141;
					a_expr_mul();
					}
					} 
				}
				State = 9146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,886,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_mulContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_caretContext[] a_expr_caret() {
			return GetRuleContexts<A_expr_caretContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_caretContext a_expr_caret(int i) {
			return GetRuleContext<A_expr_caretContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(PostgreSQLParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(PostgreSQLParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(PostgreSQLParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(PostgreSQLParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(PostgreSQLParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(PostgreSQLParser.PERCENT, i);
		}
		public A_expr_mulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_mul; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_mul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_mul(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_mulContext a_expr_mul() {
		A_expr_mulContext _localctx = new A_expr_mulContext(Context, State);
		EnterRule(_localctx, 1192, RULE_a_expr_mul);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9147;
			a_expr_caret();
			State = 9152;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,887,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9148;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 134234624L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 9149;
					a_expr_caret();
					}
					} 
				}
				State = 9154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,887,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_caretContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_unary_signContext[] a_expr_unary_sign() {
			return GetRuleContexts<A_expr_unary_signContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_unary_signContext a_expr_unary_sign(int i) {
			return GetRuleContext<A_expr_unary_signContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(PostgreSQLParser.CARET, 0); }
		public A_expr_caretContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_caret; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_caret(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_caret(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_caretContext a_expr_caret() {
		A_expr_caretContext _localctx = new A_expr_caretContext(Context, State);
		EnterRule(_localctx, 1194, RULE_a_expr_caret);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9155;
			a_expr_unary_sign();
			State = 9158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,888,Context) ) {
			case 1:
				{
				State = 9156;
				Match(CARET);
				State = 9157;
				a_expr_unary_sign();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_unary_signContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_at_time_zoneContext a_expr_at_time_zone() {
			return GetRuleContext<A_expr_at_time_zoneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		public A_expr_unary_signContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_unary_sign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_unary_sign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_unary_sign(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_unary_signContext a_expr_unary_sign() {
		A_expr_unary_signContext _localctx = new A_expr_unary_signContext(Context, State);
		EnterRule(_localctx, 1196, RULE_a_expr_unary_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 9160;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 9163;
			a_expr_at_time_zone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_at_time_zoneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_collateContext a_expr_collate() {
			return GetRuleContext<A_expr_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PostgreSQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public A_expr_at_time_zoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_at_time_zone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_at_time_zone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_at_time_zone(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_at_time_zoneContext a_expr_at_time_zone() {
		A_expr_at_time_zoneContext _localctx = new A_expr_at_time_zoneContext(Context, State);
		EnterRule(_localctx, 1198, RULE_a_expr_at_time_zone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9165;
			a_expr_collate();
			State = 9170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,890,Context) ) {
			case 1:
				{
				State = 9166;
				Match(AT);
				State = 9167;
				Match(TIME);
				State = 9168;
				Match(ZONE);
				State = 9169;
				a_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_collateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_typecastContext a_expr_typecast() {
			return GetRuleContext<A_expr_typecastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public A_expr_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_collate(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_collateContext a_expr_collate() {
		A_expr_collateContext _localctx = new A_expr_collateContext(Context, State);
		EnterRule(_localctx, 1200, RULE_a_expr_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9172;
			a_expr_typecast();
			State = 9175;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,891,Context) ) {
			case 1:
				{
				State = 9173;
				Match(COLLATE);
				State = 9174;
				any_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_typecastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPECAST() { return GetTokens(PostgreSQLParser.TYPECAST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST(int i) {
			return GetToken(PostgreSQLParser.TYPECAST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		public A_expr_typecastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_typecast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_typecast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_typecast(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_typecastContext a_expr_typecast() {
		A_expr_typecastContext _localctx = new A_expr_typecastContext(Context, State);
		EnterRule(_localctx, 1202, RULE_a_expr_typecast);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9177;
			c_expr();
			State = 9182;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,892,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9178;
					Match(TYPECAST);
					State = 9179;
					typename();
					}
					} 
				}
				State = 9184;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,892,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class B_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext[] b_expr() {
			return GetRuleContexts<B_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr(int i) {
			return GetRuleContext<B_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext qual_op() {
			return GetRuleContext<Qual_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(PostgreSQLParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(PostgreSQLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(PostgreSQLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(PostgreSQLParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(PostgreSQLParser.LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(PostgreSQLParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST() { return GetToken(PostgreSQLParser.TYPECAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public B_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_b_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterB_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitB_expr(this);
		}
	}

	[RuleVersion(0)]
	public B_exprContext b_expr() {
		return b_expr(0);
	}

	private B_exprContext b_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		B_exprContext _localctx = new B_exprContext(Context, _parentState);
		B_exprContext _prevctx = _localctx;
		int _startState = 1204;
		EnterRecursionRule(_localctx, 1204, RULE_b_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,893,Context) ) {
			case 1:
				{
				State = 9186;
				c_expr();
				}
				break;
			case 2:
				{
				State = 9187;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9188;
				b_expr(9);
				}
				break;
			case 3:
				{
				State = 9189;
				qual_op();
				State = 9190;
				b_expr(3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,897,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 9231;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,896,Context) ) {
					case 1:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9194;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 9195;
						Match(CARET);
						State = 9196;
						b_expr(9);
						}
						break;
					case 2:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9197;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 9198;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 134234624L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 9199;
						b_expr(8);
						}
						break;
					case 3:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9200;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 9201;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 9202;
						b_expr(7);
						}
						break;
					case 4:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9203;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 9204;
						qual_op();
						State = 9205;
						b_expr(6);
						}
						break;
					case 5:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9207;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 9208;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 44237824L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 9209;
						b_expr(5);
						}
						break;
					case 6:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9210;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 9211;
						Match(TYPECAST);
						State = 9212;
						typename();
						}
						break;
					case 7:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9213;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 9214;
						qual_op();
						}
						break;
					case 8:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9215;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 9216;
						Match(IS);
						State = 9218;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 9217;
							Match(NOT);
							}
						}

						State = 9229;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case DISTINCT:
							{
							State = 9220;
							Match(DISTINCT);
							State = 9221;
							Match(FROM);
							State = 9222;
							b_expr(0);
							}
							break;
						case OF:
							{
							State = 9223;
							Match(OF);
							State = 9224;
							Match(OPEN_PAREN);
							State = 9225;
							type_list();
							State = 9226;
							Match(CLOSE_PAREN);
							}
							break;
						case DOCUMENT_P:
							{
							State = 9228;
							Match(DOCUMENT_P);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				State = 9235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,897,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class C_exprContext : ParserRuleContext {
		public C_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_expr; } }
	 
		public C_exprContext() { }
		public virtual void CopyFrom(C_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class C_expr_existsContext : C_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public C_expr_existsContext(C_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterC_expr_exists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitC_expr_exists(this);
		}
	}
	public partial class C_expr_caseContext : C_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Case_exprContext case_expr() {
			return GetRuleContext<Case_exprContext>(0);
		}
		public C_expr_caseContext(C_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterC_expr_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitC_expr_case(this);
		}
	}
	public partial class C_expr_exprContext : C_exprContext {
		public A_exprContext a_expr_in_parens;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr() {
			return GetRuleContext<Array_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(PostgreSQLParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_indirectionContext opt_indirection() {
			return GetRuleContext<Opt_indirectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(PostgreSQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnrefContext columnref() {
			return GetRuleContext<ColumnrefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AexprconstContext aexprconst() {
			return GetRuleContext<AexprconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_exprContext func_expr() {
			return GetRuleContext<Func_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_rowContext explicit_row() {
			return GetRuleContext<Explicit_rowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_rowContext implicit_row() {
			return GetRuleContext<Implicit_rowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowContext[] row() {
			return GetRuleContexts<RowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowContext row(int i) {
			return GetRuleContext<RowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(PostgreSQLParser.OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public C_expr_exprContext(C_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterC_expr_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitC_expr_expr(this);
		}
	}

	[RuleVersion(0)]
	public C_exprContext c_expr() {
		C_exprContext _localctx = new C_exprContext(Context, State);
		EnterRule(_localctx, 1206, RULE_c_expr);
		try {
			State = 9272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,900,Context) ) {
			case 1:
				_localctx = new C_expr_existsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 9236;
				Match(EXISTS);
				State = 9237;
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 9238;
				Match(ARRAY);
				State = 9241;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAREN:
					{
					State = 9239;
					select_with_parens();
					}
					break;
				case OPEN_BRACKET:
					{
					State = 9240;
					array_expr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 9243;
				Match(PARAM);
				State = 9244;
				opt_indirection();
				}
				break;
			case 4:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 9245;
				Match(GROUPING);
				State = 9246;
				Match(OPEN_PAREN);
				State = 9247;
				expr_list();
				State = 9248;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 9250;
				Match(UNIQUE);
				State = 9251;
				select_with_parens();
				}
				break;
			case 6:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 9252;
				columnref();
				}
				break;
			case 7:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 9253;
				aexprconst();
				}
				break;
			case 8:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 9254;
				Match(OPEN_PAREN);
				State = 9255;
				((C_expr_exprContext)_localctx).a_expr_in_parens = a_expr();
				State = 9256;
				Match(CLOSE_PAREN);
				State = 9257;
				opt_indirection();
				}
				break;
			case 9:
				_localctx = new C_expr_caseContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 9259;
				case_expr();
				}
				break;
			case 10:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 9260;
				func_expr();
				}
				break;
			case 11:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 9261;
				select_with_parens();
				State = 9263;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,899,Context) ) {
				case 1:
					{
					State = 9262;
					indirection();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 9265;
				explicit_row();
				}
				break;
			case 13:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 9266;
				implicit_row();
				}
				break;
			case 14:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 9267;
				row();
				State = 9268;
				Match(OVERLAPS);
				State = 9269;
				row();
				}
				break;
			case 15:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 9271;
				Match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlsqlvariablenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLSQLVARIABLENAME() { return GetToken(PostgreSQLParser.PLSQLVARIABLENAME, 0); }
		public PlsqlvariablenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsqlvariablename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsqlvariablename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsqlvariablename(this);
		}
	}

	[RuleVersion(0)]
	public PlsqlvariablenameContext plsqlvariablename() {
		PlsqlvariablenameContext _localctx = new PlsqlvariablenameContext(Context, State);
		EnterRule(_localctx, 1208, RULE_plsqlvariablename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9274;
			Match(PLSQLVARIABLENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_applicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_listContext func_arg_list() {
			return GetRuleContext<Func_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(PostgreSQLParser.VARIADIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_exprContext func_arg_expr() {
			return GetRuleContext<Func_arg_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sort_clause_Context sort_clause_() {
			return GetRuleContext<Sort_clause_Context>(0);
		}
		public Func_applicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_application; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_application(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_application(this);
		}
	}

	[RuleVersion(0)]
	public Func_applicationContext func_application() {
		Func_applicationContext _localctx = new Func_applicationContext(Context, State);
		EnterRule(_localctx, 1210, RULE_func_application);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9276;
			func_name();
			State = 9277;
			Match(OPEN_PAREN);
			State = 9299;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case FALSE_P:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				{
				State = 9278;
				func_arg_list();
				State = 9282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9279;
					Match(COMMA);
					State = 9280;
					Match(VARIADIC);
					State = 9281;
					func_arg_expr();
					}
				}

				State = 9285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 9284;
					sort_clause_();
					}
				}

				}
				break;
			case VARIADIC:
				{
				State = 9287;
				Match(VARIADIC);
				State = 9288;
				func_arg_expr();
				State = 9290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 9289;
					sort_clause_();
					}
				}

				}
				break;
			case ALL:
			case DISTINCT:
				{
				State = 9292;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9293;
				func_arg_list();
				State = 9295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 9294;
					sort_clause_();
					}
				}

				}
				break;
			case STAR:
				{
				State = 9297;
				Match(STAR);
				}
				break;
			case CLOSE_PAREN:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 9301;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_applicationContext func_application() {
			return GetRuleContext<Func_applicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Within_group_clauseContext within_group_clause() {
			return GetRuleContext<Within_group_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return GetRuleContext<Func_expr_common_subexprContext>(0);
		}
		public Func_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_expr(this);
		}
	}

	[RuleVersion(0)]
	public Func_exprContext func_expr() {
		Func_exprContext _localctx = new Func_exprContext(Context, State);
		EnterRule(_localctx, 1212, RULE_func_expr);
		try {
			State = 9314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,909,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9303;
				func_application();
				State = 9305;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,906,Context) ) {
				case 1:
					{
					State = 9304;
					within_group_clause();
					}
					break;
				}
				State = 9308;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,907,Context) ) {
				case 1:
					{
					State = 9307;
					filter_clause();
					}
					break;
				}
				State = 9311;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,908,Context) ) {
				case 1:
					{
					State = 9310;
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9313;
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_expr_windowlessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_applicationContext func_application() {
			return GetRuleContext<Func_applicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return GetRuleContext<Func_expr_common_subexprContext>(0);
		}
		public Func_expr_windowlessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr_windowless; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_expr_windowless(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_expr_windowless(this);
		}
	}

	[RuleVersion(0)]
	public Func_expr_windowlessContext func_expr_windowless() {
		Func_expr_windowlessContext _localctx = new Func_expr_windowlessContext(Context, State);
		EnterRule(_localctx, 1214, RULE_func_expr_windowless);
		try {
			State = 9318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,910,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9316;
				func_application();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9317;
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_expr_common_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(PostgreSQLParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(PostgreSQLParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(PostgreSQLParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ROLE() { return GetToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(PostgreSQLParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(PostgreSQLParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(PostgreSQLParser.SYSTEM_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_CATALOG() { return GetToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SCHEMA() { return GetToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(PostgreSQLParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Extract_listContext extract_list() {
			return GetRuleContext<Extract_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZE() { return GetToken(PostgreSQLParser.NORMALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unicode_normal_formContext unicode_normal_form() {
			return GetRuleContext<Unicode_normal_formContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAY() { return GetToken(PostgreSQLParser.OVERLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Overlay_listContext overlay_list() {
			return GetRuleContext<Overlay_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_listContext func_arg_list() {
			return GetRuleContext<Func_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(PostgreSQLParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Position_listContext position_list() {
			return GetRuleContext<Position_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(PostgreSQLParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Substr_listContext substr_list() {
			return GetRuleContext<Substr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREAT() { return GetToken(PostgreSQLParser.TREAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(PostgreSQLParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Trim_listContext trim_list() {
			return GetRuleContext<Trim_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(PostgreSQLParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(PostgreSQLParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(PostgreSQLParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(PostgreSQLParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(PostgreSQLParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEST() { return GetToken(PostgreSQLParser.GREATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAST() { return GetToken(PostgreSQLParser.LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLCONCAT() { return GetToken(PostgreSQLParser.XMLCONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLELEMENT() { return GetToken(PostgreSQLParser.XMLELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_P() { return GetToken(PostgreSQLParser.NAME_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext colLabel() {
			return GetRuleContext<ColLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attributesContext xml_attributes() {
			return GetRuleContext<Xml_attributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLEXISTS() { return GetToken(PostgreSQLParser.XMLEXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmlexists_argumentContext xmlexists_argument() {
			return GetRuleContext<Xmlexists_argumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLFOREST() { return GetToken(PostgreSQLParser.XMLFOREST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_listContext xml_attribute_list() {
			return GetRuleContext<Xml_attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPARSE() { return GetToken(PostgreSQLParser.XMLPARSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Document_or_contentContext document_or_content() {
			return GetRuleContext<Document_or_contentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_whitespace_optionContext xml_whitespace_option() {
			return GetRuleContext<Xml_whitespace_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPI() { return GetToken(PostgreSQLParser.XMLPI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLROOT() { return GetToken(PostgreSQLParser.XMLROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_P() { return GetToken(PostgreSQLParser.XML_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_root_versionContext xml_root_version() {
			return GetRuleContext<Xml_root_versionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_root_standalone_Context xml_root_standalone_() {
			return GetRuleContext<Xml_root_standalone_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLSERIALIZE() { return GetToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpletypenameContext simpletypename() {
			return GetRuleContext<SimpletypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECT() { return GetToken(PostgreSQLParser.JSON_OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_name_and_value_listContext json_name_and_value_list() {
			return GetRuleContext<Json_name_and_value_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_object_constructor_null_clauseContext json_object_constructor_null_clause() {
			return GetRuleContext<Json_object_constructor_null_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_key_uniqueness_constraintContext json_key_uniqueness_constraint() {
			return GetRuleContext<Json_key_uniqueness_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_returning_clauseContext json_returning_clause() {
			return GetRuleContext<Json_returning_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY() { return GetToken(PostgreSQLParser.JSON_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_value_expr_listContext json_value_expr_list() {
			return GetRuleContext<Json_value_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_no_parensContext select_no_parens() {
			return GetRuleContext<Select_no_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_array_constructor_null_clauseContext json_array_constructor_null_clause() {
			return GetRuleContext<Json_array_constructor_null_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_format_clauseContext json_format_clause() {
			return GetRuleContext<Json_format_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(PostgreSQLParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_value_exprContext json_value_expr() {
			return GetRuleContext<Json_value_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SCALAR() { return GetToken(PostgreSQLParser.JSON_SCALAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SERIALIZE() { return GetToken(PostgreSQLParser.JSON_SERIALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE_ACTION() { return GetToken(PostgreSQLParser.MERGE_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_QUERY() { return GetToken(PostgreSQLParser.JSON_QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_wrapper_behaviorContext json_wrapper_behavior() {
			return GetRuleContext<Json_wrapper_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_passing_clauseContext json_passing_clause() {
			return GetRuleContext<Json_passing_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_quotes_clauseContext json_quotes_clause() {
			return GetRuleContext<Json_quotes_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_behavior_clauseContext json_behavior_clause() {
			return GetRuleContext<Json_behavior_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_EXISTS() { return GetToken(PostgreSQLParser.JSON_EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_on_error_clauseContext json_on_error_clause() {
			return GetRuleContext<Json_on_error_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(PostgreSQLParser.JSON_VALUE, 0); }
		public Func_expr_common_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr_common_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_expr_common_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_expr_common_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Func_expr_common_subexprContext func_expr_common_subexpr() {
		Func_expr_common_subexprContext _localctx = new Func_expr_common_subexprContext(Context, State);
		EnterRule(_localctx, 1216, RULE_func_expr_common_subexpr);
		int _la;
		try {
			State = 9626;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLLATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9320;
				Match(COLLATION);
				State = 9321;
				Match(FOR);
				State = 9322;
				Match(OPEN_PAREN);
				State = 9323;
				a_expr();
				State = 9324;
				Match(CLOSE_PAREN);
				}
				break;
			case CURRENT_DATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9326;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9327;
				Match(CURRENT_TIME);
				State = 9332;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,911,Context) ) {
				case 1:
					{
					State = 9328;
					Match(OPEN_PAREN);
					State = 9329;
					iconst();
					State = 9330;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CURRENT_TIMESTAMP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9334;
				Match(CURRENT_TIMESTAMP);
				State = 9339;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,912,Context) ) {
				case 1:
					{
					State = 9335;
					Match(OPEN_PAREN);
					State = 9336;
					iconst();
					State = 9337;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case LOCALTIME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9341;
				Match(LOCALTIME);
				State = 9346;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,913,Context) ) {
				case 1:
					{
					State = 9342;
					Match(OPEN_PAREN);
					State = 9343;
					iconst();
					State = 9344;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case LOCALTIMESTAMP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9348;
				Match(LOCALTIMESTAMP);
				State = 9353;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,914,Context) ) {
				case 1:
					{
					State = 9349;
					Match(OPEN_PAREN);
					State = 9350;
					iconst();
					State = 9351;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CURRENT_ROLE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9355;
				Match(CURRENT_ROLE);
				}
				break;
			case CURRENT_USER:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9356;
				Match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9357;
				Match(SESSION_USER);
				}
				break;
			case SYSTEM_USER:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9358;
				Match(SYSTEM_USER);
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9359;
				Match(USER);
				}
				break;
			case CURRENT_CATALOG:
				EnterOuterAlt(_localctx, 12);
				{
				State = 9360;
				Match(CURRENT_CATALOG);
				}
				break;
			case CURRENT_SCHEMA:
				EnterOuterAlt(_localctx, 13);
				{
				State = 9361;
				Match(CURRENT_SCHEMA);
				}
				break;
			case CAST:
				EnterOuterAlt(_localctx, 14);
				{
				State = 9362;
				Match(CAST);
				State = 9363;
				Match(OPEN_PAREN);
				State = 9364;
				a_expr();
				State = 9365;
				Match(AS);
				State = 9366;
				typename();
				State = 9367;
				Match(CLOSE_PAREN);
				}
				break;
			case EXTRACT:
				EnterOuterAlt(_localctx, 15);
				{
				State = 9369;
				Match(EXTRACT);
				State = 9370;
				Match(OPEN_PAREN);
				State = 9372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DAY_P || _la==HOUR_P || _la==MINUTE_P || _la==MONTH_P || _la==SECOND_P || _la==YEAR_P || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 68987922979L) != 0)) {
					{
					State = 9371;
					extract_list();
					}
				}

				State = 9374;
				Match(CLOSE_PAREN);
				}
				break;
			case NORMALIZE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 9375;
				Match(NORMALIZE);
				State = 9376;
				Match(OPEN_PAREN);
				State = 9377;
				a_expr();
				State = 9380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9378;
					Match(COMMA);
					State = 9379;
					unicode_normal_form();
					}
				}

				State = 9382;
				Match(CLOSE_PAREN);
				}
				break;
			case OVERLAY:
				EnterOuterAlt(_localctx, 17);
				{
				State = 9384;
				Match(OVERLAY);
				State = 9385;
				Match(OPEN_PAREN);
				State = 9390;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,918,Context) ) {
				case 1:
					{
					State = 9386;
					overlay_list();
					}
					break;
				case 2:
					{
					State = 9388;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4880034784790705153L) != 0) || _la==PLSQLVARIABLENAME || _la==EscapeStringConstant) {
						{
						State = 9387;
						func_arg_list();
						}
					}

					}
					break;
				}
				State = 9392;
				Match(CLOSE_PAREN);
				}
				break;
			case POSITION:
				EnterOuterAlt(_localctx, 18);
				{
				State = 9393;
				Match(POSITION);
				State = 9394;
				Match(OPEN_PAREN);
				State = 9396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9217179569920884217L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4880034784790705153L) != 0) || _la==PLSQLVARIABLENAME || _la==EscapeStringConstant) {
					{
					State = 9395;
					position_list();
					}
				}

				State = 9398;
				Match(CLOSE_PAREN);
				}
				break;
			case SUBSTRING:
				EnterOuterAlt(_localctx, 19);
				{
				State = 9399;
				Match(SUBSTRING);
				State = 9400;
				Match(OPEN_PAREN);
				State = 9405;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,921,Context) ) {
				case 1:
					{
					State = 9401;
					substr_list();
					}
					break;
				case 2:
					{
					State = 9403;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4880034784790705153L) != 0) || _la==PLSQLVARIABLENAME || _la==EscapeStringConstant) {
						{
						State = 9402;
						func_arg_list();
						}
					}

					}
					break;
				}
				State = 9407;
				Match(CLOSE_PAREN);
				}
				break;
			case TREAT:
				EnterOuterAlt(_localctx, 20);
				{
				State = 9408;
				Match(TREAT);
				State = 9409;
				Match(OPEN_PAREN);
				State = 9410;
				a_expr();
				State = 9411;
				Match(AS);
				State = 9412;
				typename();
				State = 9413;
				Match(CLOSE_PAREN);
				}
				break;
			case TRIM:
				EnterOuterAlt(_localctx, 21);
				{
				State = 9415;
				Match(TRIM);
				State = 9416;
				Match(OPEN_PAREN);
				State = 9418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 72057611217797121L) != 0)) {
					{
					State = 9417;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 72057611217797121L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 9420;
				trim_list();
				State = 9421;
				Match(CLOSE_PAREN);
				}
				break;
			case NULLIF:
				EnterOuterAlt(_localctx, 22);
				{
				State = 9423;
				Match(NULLIF);
				State = 9424;
				Match(OPEN_PAREN);
				State = 9425;
				a_expr();
				State = 9426;
				Match(COMMA);
				State = 9427;
				a_expr();
				State = 9428;
				Match(CLOSE_PAREN);
				}
				break;
			case COALESCE:
				EnterOuterAlt(_localctx, 23);
				{
				State = 9430;
				Match(COALESCE);
				State = 9431;
				Match(OPEN_PAREN);
				State = 9432;
				expr_list();
				State = 9433;
				Match(CLOSE_PAREN);
				}
				break;
			case GREATEST:
				EnterOuterAlt(_localctx, 24);
				{
				State = 9435;
				Match(GREATEST);
				State = 9436;
				Match(OPEN_PAREN);
				State = 9437;
				expr_list();
				State = 9438;
				Match(CLOSE_PAREN);
				}
				break;
			case LEAST:
				EnterOuterAlt(_localctx, 25);
				{
				State = 9440;
				Match(LEAST);
				State = 9441;
				Match(OPEN_PAREN);
				State = 9442;
				expr_list();
				State = 9443;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLCONCAT:
				EnterOuterAlt(_localctx, 26);
				{
				State = 9445;
				Match(XMLCONCAT);
				State = 9446;
				Match(OPEN_PAREN);
				State = 9447;
				expr_list();
				State = 9448;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLELEMENT:
				EnterOuterAlt(_localctx, 27);
				{
				State = 9450;
				Match(XMLELEMENT);
				State = 9451;
				Match(OPEN_PAREN);
				State = 9452;
				Match(NAME_P);
				State = 9453;
				colLabel();
				State = 9459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9454;
					Match(COMMA);
					State = 9457;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,923,Context) ) {
					case 1:
						{
						State = 9455;
						xml_attributes();
						}
						break;
					case 2:
						{
						State = 9456;
						expr_list();
						}
						break;
					}
					}
				}

				State = 9461;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLEXISTS:
				EnterOuterAlt(_localctx, 28);
				{
				State = 9463;
				Match(XMLEXISTS);
				State = 9464;
				Match(OPEN_PAREN);
				State = 9465;
				c_expr();
				State = 9466;
				xmlexists_argument();
				State = 9467;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLFOREST:
				EnterOuterAlt(_localctx, 29);
				{
				State = 9469;
				Match(XMLFOREST);
				State = 9470;
				Match(OPEN_PAREN);
				State = 9471;
				xml_attribute_list();
				State = 9472;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLPARSE:
				EnterOuterAlt(_localctx, 30);
				{
				State = 9474;
				Match(XMLPARSE);
				State = 9475;
				Match(OPEN_PAREN);
				State = 9476;
				document_or_content();
				State = 9477;
				a_expr();
				State = 9479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRESERVE || _la==STRIP_P) {
					{
					State = 9478;
					xml_whitespace_option();
					}
				}

				State = 9481;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLPI:
				EnterOuterAlt(_localctx, 31);
				{
				State = 9483;
				Match(XMLPI);
				State = 9484;
				Match(OPEN_PAREN);
				State = 9485;
				Match(NAME_P);
				State = 9486;
				colLabel();
				State = 9489;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9487;
					Match(COMMA);
					State = 9488;
					a_expr();
					}
				}

				State = 9491;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLROOT:
				EnterOuterAlt(_localctx, 32);
				{
				State = 9493;
				Match(XMLROOT);
				State = 9494;
				Match(OPEN_PAREN);
				State = 9495;
				Match(XML_P);
				State = 9496;
				a_expr();
				State = 9497;
				Match(COMMA);
				State = 9498;
				xml_root_version();
				State = 9500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9499;
					xml_root_standalone_();
					}
				}

				State = 9502;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLSERIALIZE:
				EnterOuterAlt(_localctx, 33);
				{
				State = 9504;
				Match(XMLSERIALIZE);
				State = 9505;
				Match(OPEN_PAREN);
				State = 9506;
				document_or_content();
				State = 9507;
				a_expr();
				State = 9508;
				Match(AS);
				State = 9509;
				simpletypename();
				State = 9510;
				Match(CLOSE_PAREN);
				}
				break;
			case JSON_OBJECT:
				EnterOuterAlt(_localctx, 34);
				{
				State = 9512;
				Match(JSON_OBJECT);
				State = 9513;
				Match(OPEN_PAREN);
				State = 9528;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,932,Context) ) {
				case 1:
					{
					State = 9514;
					func_arg_list();
					}
					break;
				case 2:
					{
					State = 9515;
					json_name_and_value_list(0);
					State = 9517;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ABSENT || _la==NULL_P) {
						{
						State = 9516;
						json_object_constructor_null_clause();
						}
					}

					State = 9520;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH || _la==WITHOUT) {
						{
						State = 9519;
						json_key_uniqueness_constraint();
						}
					}

					State = 9523;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETURNING) {
						{
						State = 9522;
						json_returning_clause();
						}
					}

					}
					break;
				case 3:
					{
					State = 9526;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETURNING) {
						{
						State = 9525;
						json_returning_clause();
						}
					}

					}
					break;
				}
				State = 9530;
				Match(CLOSE_PAREN);
				}
				break;
			case JSON_ARRAY:
				EnterOuterAlt(_localctx, 35);
				{
				State = 9531;
				Match(JSON_ARRAY);
				State = 9532;
				Match(OPEN_PAREN);
				State = 9550;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,938,Context) ) {
				case 1:
					{
					State = 9533;
					json_value_expr_list(0);
					State = 9535;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ABSENT || _la==NULL_P) {
						{
						State = 9534;
						json_array_constructor_null_clause();
						}
					}

					State = 9538;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETURNING) {
						{
						State = 9537;
						json_returning_clause();
						}
					}

					}
					break;
				case 2:
					{
					State = 9540;
					select_no_parens();
					State = 9542;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FORMAT_LA) {
						{
						State = 9541;
						json_format_clause();
						}
					}

					State = 9545;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETURNING) {
						{
						State = 9544;
						json_returning_clause();
						}
					}

					}
					break;
				case 3:
					{
					State = 9548;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETURNING) {
						{
						State = 9547;
						json_returning_clause();
						}
					}

					}
					break;
				}
				State = 9552;
				Match(CLOSE_PAREN);
				}
				break;
			case JSON:
				EnterOuterAlt(_localctx, 36);
				{
				State = 9553;
				Match(JSON);
				State = 9554;
				Match(OPEN_PAREN);
				State = 9555;
				json_value_expr();
				State = 9557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					State = 9556;
					json_key_uniqueness_constraint();
					}
				}

				State = 9559;
				Match(CLOSE_PAREN);
				}
				break;
			case JSON_SCALAR:
				EnterOuterAlt(_localctx, 37);
				{
				State = 9561;
				Match(JSON_SCALAR);
				State = 9562;
				Match(OPEN_PAREN);
				State = 9563;
				a_expr();
				State = 9564;
				Match(CLOSE_PAREN);
				}
				break;
			case JSON_SERIALIZE:
				EnterOuterAlt(_localctx, 38);
				{
				State = 9566;
				Match(JSON_SERIALIZE);
				State = 9567;
				Match(OPEN_PAREN);
				State = 9568;
				json_value_expr();
				State = 9570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING) {
					{
					State = 9569;
					json_returning_clause();
					}
				}

				State = 9572;
				Match(CLOSE_PAREN);
				}
				break;
			case MERGE_ACTION:
				EnterOuterAlt(_localctx, 39);
				{
				State = 9574;
				Match(MERGE_ACTION);
				State = 9575;
				Match(OPEN_PAREN);
				State = 9576;
				Match(CLOSE_PAREN);
				}
				break;
			case JSON_QUERY:
				EnterOuterAlt(_localctx, 40);
				{
				State = 9577;
				Match(JSON_QUERY);
				State = 9578;
				Match(OPEN_PAREN);
				State = 9579;
				json_value_expr();
				State = 9580;
				Match(COMMA);
				State = 9581;
				a_expr();
				State = 9583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PASSING) {
					{
					State = 9582;
					json_passing_clause();
					}
				}

				State = 9586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING) {
					{
					State = 9585;
					json_returning_clause();
					}
				}

				State = 9588;
				json_wrapper_behavior();
				State = 9590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEEP || _la==OMIT) {
					{
					State = 9589;
					json_quotes_clause();
					}
				}

				State = 9593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EMPTY_P || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 8796126576769L) != 0) || _la==UNKNOWN || _la==ERROR) {
					{
					State = 9592;
					json_behavior_clause();
					}
				}

				State = 9595;
				Match(CLOSE_PAREN);
				}
				break;
			case JSON_EXISTS:
				EnterOuterAlt(_localctx, 41);
				{
				State = 9597;
				Match(JSON_EXISTS);
				State = 9598;
				Match(OPEN_PAREN);
				State = 9599;
				json_value_expr();
				State = 9600;
				Match(COMMA);
				State = 9601;
				a_expr();
				State = 9603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PASSING) {
					{
					State = 9602;
					json_passing_clause();
					}
				}

				State = 9606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EMPTY_P || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 8796126576769L) != 0) || _la==UNKNOWN || _la==ERROR) {
					{
					State = 9605;
					json_on_error_clause();
					}
				}

				State = 9608;
				Match(CLOSE_PAREN);
				}
				break;
			case JSON_VALUE:
				EnterOuterAlt(_localctx, 42);
				{
				State = 9610;
				Match(JSON_VALUE);
				State = 9611;
				Match(OPEN_PAREN);
				State = 9612;
				json_value_expr();
				State = 9613;
				Match(COMMA);
				State = 9614;
				a_expr();
				State = 9616;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PASSING) {
					{
					State = 9615;
					json_passing_clause();
					}
				}

				State = 9619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING) {
					{
					State = 9618;
					json_returning_clause();
					}
				}

				State = 9622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EMPTY_P || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 8796126576769L) != 0) || _la==UNKNOWN || _la==ERROR) {
					{
					State = 9621;
					json_behavior_clause();
					}
				}

				State = 9624;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_root_versionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_root_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_root_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_root_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_root_version(this);
		}
	}

	[RuleVersion(0)]
	public Xml_root_versionContext xml_root_version() {
		Xml_root_versionContext _localctx = new Xml_root_versionContext(Context, State);
		EnterRule(_localctx, 1218, RULE_xml_root_version);
		try {
			State = 9633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,951,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9628;
				Match(VERSION_P);
				State = 9629;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9630;
				Match(VERSION_P);
				State = 9631;
				Match(NO);
				State = 9632;
				Match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_root_standalone_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STANDALONE_P() { return GetToken(PostgreSQLParser.STANDALONE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YES_P() { return GetToken(PostgreSQLParser.YES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_root_standalone_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_root_standalone_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_root_standalone_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_root_standalone_(this);
		}
	}

	[RuleVersion(0)]
	public Xml_root_standalone_Context xml_root_standalone_() {
		Xml_root_standalone_Context _localctx = new Xml_root_standalone_Context(Context, State);
		EnterRule(_localctx, 1220, RULE_xml_root_standalone_);
		try {
			State = 9645;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,952,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9635;
				Match(COMMA);
				State = 9636;
				Match(STANDALONE_P);
				State = 9637;
				Match(YES_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9638;
				Match(COMMA);
				State = 9639;
				Match(STANDALONE_P);
				State = 9640;
				Match(NO);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9641;
				Match(COMMA);
				State = 9642;
				Match(STANDALONE_P);
				State = 9643;
				Match(NO);
				State = 9644;
				Match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_attributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLATTRIBUTES() { return GetToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_listContext xml_attribute_list() {
			return GetRuleContext<Xml_attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Xml_attributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_attributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_attributes(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attributesContext xml_attributes() {
		Xml_attributesContext _localctx = new Xml_attributesContext(Context, State);
		EnterRule(_localctx, 1222, RULE_xml_attributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9647;
			Match(XMLATTRIBUTES);
			State = 9648;
			Match(OPEN_PAREN);
			State = 9649;
			xml_attribute_list();
			State = 9650;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_attribute_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_elContext[] xml_attribute_el() {
			return GetRuleContexts<Xml_attribute_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_elContext xml_attribute_el(int i) {
			return GetRuleContext<Xml_attribute_elContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Xml_attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attribute_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_attribute_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_attribute_list(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attribute_listContext xml_attribute_list() {
		Xml_attribute_listContext _localctx = new Xml_attribute_listContext(Context, State);
		EnterRule(_localctx, 1224, RULE_xml_attribute_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9652;
			xml_attribute_el();
			State = 9657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9653;
				Match(COMMA);
				State = 9654;
				xml_attribute_el();
				}
				}
				State = 9659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_attribute_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext colLabel() {
			return GetRuleContext<ColLabelContext>(0);
		}
		public Xml_attribute_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attribute_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_attribute_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_attribute_el(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attribute_elContext xml_attribute_el() {
		Xml_attribute_elContext _localctx = new Xml_attribute_elContext(Context, State);
		EnterRule(_localctx, 1226, RULE_xml_attribute_el);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9660;
			a_expr();
			State = 9663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 9661;
				Match(AS);
				State = 9662;
				colLabel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Document_or_contentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT_P() { return GetToken(PostgreSQLParser.CONTENT_P, 0); }
		public Document_or_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document_or_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDocument_or_content(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDocument_or_content(this);
		}
	}

	[RuleVersion(0)]
	public Document_or_contentContext document_or_content() {
		Document_or_contentContext _localctx = new Document_or_contentContext(Context, State);
		EnterRule(_localctx, 1228, RULE_document_or_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9665;
			_la = TokenStream.LA(1);
			if ( !(_la==CONTENT_P || _la==DOCUMENT_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_whitespace_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(PostgreSQLParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE_P() { return GetToken(PostgreSQLParser.WHITESPACE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRIP_P() { return GetToken(PostgreSQLParser.STRIP_P, 0); }
		public Xml_whitespace_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_whitespace_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_whitespace_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_whitespace_option(this);
		}
	}

	[RuleVersion(0)]
	public Xml_whitespace_optionContext xml_whitespace_option() {
		Xml_whitespace_optionContext _localctx = new Xml_whitespace_optionContext(Context, State);
		EnterRule(_localctx, 1230, RULE_xml_whitespace_option);
		try {
			State = 9671;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRESERVE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9667;
				Match(PRESERVE);
				State = 9668;
				Match(WHITESPACE_P);
				}
				break;
			case STRIP_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9669;
				Match(STRIP_P);
				State = 9670;
				Match(WHITESPACE_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlexists_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(PostgreSQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_passing_mechContext[] xml_passing_mech() {
			return GetRuleContexts<Xml_passing_mechContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_passing_mechContext xml_passing_mech(int i) {
			return GetRuleContext<Xml_passing_mechContext>(i);
		}
		public Xmlexists_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlexists_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmlexists_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmlexists_argument(this);
		}
	}

	[RuleVersion(0)]
	public Xmlexists_argumentContext xmlexists_argument() {
		Xmlexists_argumentContext _localctx = new Xmlexists_argumentContext(Context, State);
		EnterRule(_localctx, 1232, RULE_xmlexists_argument);
		try {
			State = 9688;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,956,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9673;
				Match(PASSING);
				State = 9674;
				c_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9675;
				Match(PASSING);
				State = 9676;
				c_expr();
				State = 9677;
				xml_passing_mech();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9679;
				Match(PASSING);
				State = 9680;
				xml_passing_mech();
				State = 9681;
				c_expr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9683;
				Match(PASSING);
				State = 9684;
				xml_passing_mech();
				State = 9685;
				c_expr();
				State = 9686;
				xml_passing_mech();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_passing_mechContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(PostgreSQLParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_passing_mechContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_passing_mech; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_passing_mech(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_passing_mech(this);
		}
	}

	[RuleVersion(0)]
	public Xml_passing_mechContext xml_passing_mech() {
		Xml_passing_mechContext _localctx = new Xml_passing_mechContext(Context, State);
		EnterRule(_localctx, 1234, RULE_xml_passing_mech);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9690;
			Match(BY);
			State = 9691;
			_la = TokenStream.LA(1);
			if ( !(_la==REF || _la==VALUE_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Within_group_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(PostgreSQLParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sort_clauseContext sort_clause() {
			return GetRuleContext<Sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Within_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_within_group_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWithin_group_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWithin_group_clause(this);
		}
	}

	[RuleVersion(0)]
	public Within_group_clauseContext within_group_clause() {
		Within_group_clauseContext _localctx = new Within_group_clauseContext(Context, State);
		EnterRule(_localctx, 1236, RULE_within_group_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9693;
			Match(WITHIN);
			State = 9694;
			Match(GROUP_P);
			State = 9695;
			Match(OPEN_PAREN);
			State = 9696;
			sort_clause();
			State = 9697;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(PostgreSQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFilter_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFilter_clause(this);
		}
	}

	[RuleVersion(0)]
	public Filter_clauseContext filter_clause() {
		Filter_clauseContext _localctx = new Filter_clauseContext(Context, State);
		EnterRule(_localctx, 1238, RULE_filter_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9699;
			Match(FILTER);
			State = 9700;
			Match(OPEN_PAREN);
			State = 9701;
			Match(WHERE);
			State = 9702;
			a_expr();
			State = 9703;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(PostgreSQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_definition_listContext window_definition_list() {
			return GetRuleContext<Window_definition_listContext>(0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_clause(this);
		}
	}

	[RuleVersion(0)]
	public Window_clauseContext window_clause() {
		Window_clauseContext _localctx = new Window_clauseContext(Context, State);
		EnterRule(_localctx, 1240, RULE_window_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9705;
			Match(WINDOW);
			State = 9706;
			window_definition_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_definition_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_definitionContext[] window_definition() {
			return GetRuleContexts<Window_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_definitionContext window_definition(int i) {
			return GetRuleContext<Window_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Window_definition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_definition_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_definition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_definition_list(this);
		}
	}

	[RuleVersion(0)]
	public Window_definition_listContext window_definition_list() {
		Window_definition_listContext _localctx = new Window_definition_listContext(Context, State);
		EnterRule(_localctx, 1242, RULE_window_definition_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9708;
			window_definition();
			State = 9713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9709;
				Match(COMMA);
				State = 9710;
				window_definition();
				}
				}
				State = 9715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_definition(this);
		}
	}

	[RuleVersion(0)]
	public Window_definitionContext window_definition() {
		Window_definitionContext _localctx = new Window_definitionContext(Context, State);
		EnterRule(_localctx, 1244, RULE_window_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9716;
			colid();
			State = 9717;
			Match(AS);
			State = 9718;
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(PostgreSQLParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 1246, RULE_over_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9720;
			Match(OVER);
			State = 9723;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				{
				State = 9721;
				window_specification();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				{
				State = 9722;
				colid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Existing_window_name_Context existing_window_name_() {
			return GetRuleContext<Existing_window_name_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Partition_clause_Context partition_clause_() {
			return GetRuleContext<Partition_clause_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sort_clause_Context sort_clause_() {
			return GetRuleContext<Sort_clause_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_clause_Context frame_clause_() {
			return GetRuleContext<Frame_clause_Context>(0);
		}
		public Window_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_specification(this);
		}
	}

	[RuleVersion(0)]
	public Window_specificationContext window_specification() {
		Window_specificationContext _localctx = new Window_specificationContext(Context, State);
		EnterRule(_localctx, 1248, RULE_window_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9725;
			Match(OPEN_PAREN);
			State = 9727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,959,Context) ) {
			case 1:
				{
				State = 9726;
				existing_window_name_();
				}
				break;
			}
			State = 9730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 9729;
				partition_clause_();
				}
			}

			State = 9733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 9732;
				sort_clause_();
				}
			}

			State = 9736;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS || _la==GROUPS) {
				{
				State = 9735;
				frame_clause_();
				}
			}

			State = 9738;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Existing_window_name_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Existing_window_name_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existing_window_name_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExisting_window_name_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExisting_window_name_(this);
		}
	}

	[RuleVersion(0)]
	public Existing_window_name_Context existing_window_name_() {
		Existing_window_name_Context _localctx = new Existing_window_name_Context(Context, State);
		EnterRule(_localctx, 1250, RULE_existing_window_name_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9740;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_clause_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Partition_clause_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_clause_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPartition_clause_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPartition_clause_(this);
		}
	}

	[RuleVersion(0)]
	public Partition_clause_Context partition_clause_() {
		Partition_clause_Context _localctx = new Partition_clause_Context(Context, State);
		EnterRule(_localctx, 1252, RULE_partition_clause_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9742;
			Match(PARTITION);
			State = 9743;
			Match(BY);
			State = 9744;
			expr_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_clause_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PostgreSQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_extentContext frame_extent() {
			return GetRuleContext<Frame_extentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_exclusion_clause_Context window_exclusion_clause_() {
			return GetRuleContext<Window_exclusion_clause_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(PostgreSQLParser.GROUPS, 0); }
		public Frame_clause_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_clause_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrame_clause_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrame_clause_(this);
		}
	}

	[RuleVersion(0)]
	public Frame_clause_Context frame_clause_() {
		Frame_clause_Context _localctx = new Frame_clause_Context(Context, State);
		EnterRule(_localctx, 1254, RULE_frame_clause_);
		int _la;
		try {
			State = 9761;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9746;
				Match(RANGE);
				State = 9747;
				frame_extent();
				State = 9749;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCLUDE) {
					{
					State = 9748;
					window_exclusion_clause_();
					}
				}

				}
				break;
			case ROWS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9751;
				Match(ROWS);
				State = 9752;
				frame_extent();
				State = 9754;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCLUDE) {
					{
					State = 9753;
					window_exclusion_clause_();
					}
				}

				}
				break;
			case GROUPS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9756;
				Match(GROUPS);
				State = 9757;
				frame_extent();
				State = 9759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCLUDE) {
					{
					State = 9758;
					window_exclusion_clause_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_extentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Frame_boundContext[] frame_bound() {
			return GetRuleContexts<Frame_boundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_boundContext frame_bound(int i) {
			return GetRuleContext<Frame_boundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(PostgreSQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		public Frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_extent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrame_extent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrame_extent(this);
		}
	}

	[RuleVersion(0)]
	public Frame_extentContext frame_extent() {
		Frame_extentContext _localctx = new Frame_extentContext(Context, State);
		EnterRule(_localctx, 1256, RULE_frame_extent);
		try {
			State = 9769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,967,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9763;
				frame_bound();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9764;
				Match(BETWEEN);
				State = 9765;
				frame_bound();
				State = 9766;
				Match(AND);
				State = 9767;
				frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(PostgreSQLParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(PostgreSQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(PostgreSQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrame_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrame_bound(this);
		}
	}

	[RuleVersion(0)]
	public Frame_boundContext frame_bound() {
		Frame_boundContext _localctx = new Frame_boundContext(Context, State);
		EnterRule(_localctx, 1258, RULE_frame_bound);
		int _la;
		try {
			State = 9778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,968,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9771;
				Match(UNBOUNDED);
				State = 9772;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9773;
				Match(CURRENT_P);
				State = 9774;
				Match(ROW);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9775;
				a_expr();
				State = 9776;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_exclusion_clause_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(PostgreSQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(PostgreSQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(PostgreSQLParser.OTHERS, 0); }
		public Window_exclusion_clause_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_exclusion_clause_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_exclusion_clause_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_exclusion_clause_(this);
		}
	}

	[RuleVersion(0)]
	public Window_exclusion_clause_Context window_exclusion_clause_() {
		Window_exclusion_clause_Context _localctx = new Window_exclusion_clause_Context(Context, State);
		EnterRule(_localctx, 1260, RULE_window_exclusion_clause_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9780;
			Match(EXCLUDE);
			State = 9787;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_P:
				{
				State = 9781;
				Match(CURRENT_P);
				State = 9782;
				Match(ROW);
				}
				break;
			case GROUP_P:
				{
				State = 9783;
				Match(GROUP_P);
				}
				break;
			case TIES:
				{
				State = 9784;
				Match(TIES);
				}
				break;
			case NO:
				{
				State = 9785;
				Match(NO);
				State = 9786;
				Match(OTHERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public RowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRow(this);
		}
	}

	[RuleVersion(0)]
	public RowContext row() {
		RowContext _localctx = new RowContext(Context, State);
		EnterRule(_localctx, 1262, RULE_row);
		int _la;
		try {
			State = 9801;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9789;
				Match(ROW);
				State = 9790;
				Match(OPEN_PAREN);
				State = 9792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4880034784790705153L) != 0) || _la==PLSQLVARIABLENAME || _la==EscapeStringConstant) {
					{
					State = 9791;
					expr_list();
					}
				}

				State = 9794;
				Match(CLOSE_PAREN);
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9795;
				Match(OPEN_PAREN);
				State = 9796;
				expr_list();
				State = 9797;
				Match(COMMA);
				State = 9798;
				a_expr();
				State = 9799;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_rowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Explicit_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplicit_row(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplicit_row(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_rowContext explicit_row() {
		Explicit_rowContext _localctx = new Explicit_rowContext(Context, State);
		EnterRule(_localctx, 1264, RULE_explicit_row);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9803;
			Match(ROW);
			State = 9804;
			Match(OPEN_PAREN);
			State = 9806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4880034784790705153L) != 0) || _la==PLSQLVARIABLENAME || _la==EscapeStringConstant) {
				{
				State = 9805;
				expr_list();
				}
			}

			State = 9808;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_rowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Implicit_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImplicit_row(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImplicit_row(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_rowContext implicit_row() {
		Implicit_rowContext _localctx = new Implicit_rowContext(Context, State);
		EnterRule(_localctx, 1266, RULE_implicit_row);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9810;
			Match(OPEN_PAREN);
			State = 9811;
			expr_list();
			State = 9812;
			Match(COMMA);
			State = 9813;
			a_expr();
			State = 9814;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(PostgreSQLParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(PostgreSQLParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Sub_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSub_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSub_type(this);
		}
	}

	[RuleVersion(0)]
	public Sub_typeContext sub_type() {
		Sub_typeContext _localctx = new Sub_typeContext(Context, State);
		EnterRule(_localctx, 1268, RULE_sub_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9816;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 1152921504606846993L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(PostgreSQLParser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathopContext mathop() {
			return GetRuleContext<MathopContext>(0);
		}
		public All_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAll_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAll_op(this);
		}
	}

	[RuleVersion(0)]
	public All_opContext all_op() {
		All_opContext _localctx = new All_opContext(Context, State);
		EnterRule(_localctx, 1270, RULE_all_op);
		try {
			State = 9820;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Operator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9818;
				Match(Operator);
				}
				break;
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9819;
				mathop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(PostgreSQLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(PostgreSQLParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(PostgreSQLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(PostgreSQLParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(PostgreSQLParser.LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public MathopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMathop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMathop(this);
		}
	}

	[RuleVersion(0)]
	public MathopContext mathop() {
		MathopContext _localctx = new MathopContext(Context, State);
		EnterRule(_localctx, 1272, RULE_mathop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9822;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 178517504L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qual_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(PostgreSQLParser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQual_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQual_op(this);
		}
	}

	[RuleVersion(0)]
	public Qual_opContext qual_op() {
		Qual_opContext _localctx = new Qual_opContext(Context, State);
		EnterRule(_localctx, 1274, RULE_qual_op);
		try {
			State = 9830;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Operator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9824;
				Match(Operator);
				}
				break;
			case OPERATOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9825;
				Match(OPERATOR);
				State = 9826;
				Match(OPEN_PAREN);
				State = 9827;
				any_operator();
				State = 9828;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qual_all_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_opContext all_op() {
			return GetRuleContext<All_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_all_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual_all_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQual_all_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQual_all_op(this);
		}
	}

	[RuleVersion(0)]
	public Qual_all_opContext qual_all_op() {
		Qual_all_opContext _localctx = new Qual_all_opContext(Context, State);
		EnterRule(_localctx, 1276, RULE_qual_all_op);
		try {
			State = 9838;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
			case Operator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9832;
				all_op();
				}
				break;
			case OPERATOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9833;
				Match(OPERATOR);
				State = 9834;
				Match(OPEN_PAREN);
				State = 9835;
				any_operator();
				State = 9836;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_OpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_opContext all_op() {
			return GetRuleContext<All_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(PostgreSQLParser.ILIKE, 0); }
		public Subquery_OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_Op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSubquery_Op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSubquery_Op(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_OpContext subquery_Op() {
		Subquery_OpContext _localctx = new Subquery_OpContext(Context, State);
		EnterRule(_localctx, 1278, RULE_subquery_Op);
		try {
			State = 9852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,976,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9840;
				all_op();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9841;
				Match(OPERATOR);
				State = 9842;
				Match(OPEN_PAREN);
				State = 9843;
				any_operator();
				State = 9844;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9846;
				Match(LIKE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9847;
				Match(NOT);
				State = 9848;
				Match(LIKE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9849;
				Match(ILIKE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9850;
				Match(NOT);
				State = 9851;
				Match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_list(this);
		}
	}

	[RuleVersion(0)]
	public Expr_listContext expr_list() {
		Expr_listContext _localctx = new Expr_listContext(Context, State);
		EnterRule(_localctx, 1280, RULE_expr_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9854;
			a_expr();
			State = 9859;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,977,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9855;
					Match(COMMA);
					State = 9856;
					a_expr();
					}
					} 
				}
				State = 9861;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,977,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_exprContext[] func_arg_expr() {
			return GetRuleContexts<Func_arg_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_exprContext func_arg_expr(int i) {
			return GetRuleContext<Func_arg_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Func_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg_list(this);
		}
	}

	[RuleVersion(0)]
	public Func_arg_listContext func_arg_list() {
		Func_arg_listContext _localctx = new Func_arg_listContext(Context, State);
		EnterRule(_localctx, 1282, RULE_func_arg_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9862;
			func_arg_expr();
			State = 9867;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,978,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9863;
					Match(COMMA);
					State = 9864;
					func_arg_expr();
					}
					} 
				}
				State = 9869;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,978,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_arg_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_EQUALS() { return GetToken(PostgreSQLParser.COLON_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS_GREATER() { return GetToken(PostgreSQLParser.EQUALS_GREATER, 0); }
		public Func_arg_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg_expr(this);
		}
	}

	[RuleVersion(0)]
	public Func_arg_exprContext func_arg_expr() {
		Func_arg_exprContext _localctx = new Func_arg_exprContext(Context, State);
		EnterRule(_localctx, 1284, RULE_func_arg_expr);
		int _la;
		try {
			State = 9875;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,979,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9870;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9871;
				param_name();
				State = 9872;
				_la = TokenStream.LA(1);
				if ( !(_la==COLON_EQUALS || _la==EQUALS_GREATER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9873;
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_listContext type_list() {
		Type_listContext _localctx = new Type_listContext(Context, State);
		EnterRule(_localctx, 1286, RULE_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9877;
			typename();
			State = 9882;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9878;
				Match(COMMA);
				State = 9879;
				typename();
				}
				}
				State = 9884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_expr_listContext array_expr_list() {
			return GetRuleContext<Array_expr_listContext>(0);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterArray_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitArray_expr(this);
		}
	}

	[RuleVersion(0)]
	public Array_exprContext array_expr() {
		Array_exprContext _localctx = new Array_exprContext(Context, State);
		EnterRule(_localctx, 1288, RULE_array_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9885;
			Match(OPEN_BRACKET);
			State = 9888;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case FALSE_P:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				{
				State = 9886;
				expr_list();
				}
				break;
			case OPEN_BRACKET:
				{
				State = 9887;
				array_expr_list();
				}
				break;
			case CLOSE_BRACKET:
				break;
			default:
				break;
			}
			State = 9890;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext[] array_expr() {
			return GetRuleContexts<Array_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr(int i) {
			return GetRuleContext<Array_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Array_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterArray_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitArray_expr_list(this);
		}
	}

	[RuleVersion(0)]
	public Array_expr_listContext array_expr_list() {
		Array_expr_listContext _localctx = new Array_expr_listContext(Context, State);
		EnterRule(_localctx, 1290, RULE_array_expr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9892;
			array_expr();
			State = 9897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9893;
				Match(COMMA);
				State = 9894;
				array_expr();
				}
				}
				State = 9899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extract_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Extract_argContext extract_arg() {
			return GetRuleContext<Extract_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Extract_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extract_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExtract_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExtract_list(this);
		}
	}

	[RuleVersion(0)]
	public Extract_listContext extract_list() {
		Extract_listContext _localctx = new Extract_listContext(Context, State);
		EnterRule(_localctx, 1292, RULE_extract_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9900;
			extract_arg();
			State = 9901;
			Match(FROM);
			State = 9902;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extract_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_P() { return GetToken(PostgreSQLParser.YEAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_P() { return GetToken(PostgreSQLParser.MONTH_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_P() { return GetToken(PostgreSQLParser.DAY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_P() { return GetToken(PostgreSQLParser.HOUR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_P() { return GetToken(PostgreSQLParser.MINUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_P() { return GetToken(PostgreSQLParser.SECOND_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Extract_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extract_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExtract_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExtract_arg(this);
		}
	}

	[RuleVersion(0)]
	public Extract_argContext extract_arg() {
		Extract_argContext _localctx = new Extract_argContext(Context, State);
		EnterRule(_localctx, 1294, RULE_extract_arg);
		try {
			State = 9912;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9904;
				identifier();
				}
				break;
			case YEAR_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9905;
				Match(YEAR_P);
				}
				break;
			case MONTH_P:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9906;
				Match(MONTH_P);
				}
				break;
			case DAY_P:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9907;
				Match(DAY_P);
				}
				break;
			case HOUR_P:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9908;
				Match(HOUR_P);
				}
				break;
			case MINUTE_P:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9909;
				Match(MINUTE_P);
				}
				break;
			case SECOND_P:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9910;
				Match(SECOND_P);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9911;
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unicode_normal_formContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(PostgreSQLParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(PostgreSQLParser.NFD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKC() { return GetToken(PostgreSQLParser.NFKC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKD() { return GetToken(PostgreSQLParser.NFKD, 0); }
		public Unicode_normal_formContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unicode_normal_form; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUnicode_normal_form(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUnicode_normal_form(this);
		}
	}

	[RuleVersion(0)]
	public Unicode_normal_formContext unicode_normal_form() {
		Unicode_normal_formContext _localctx = new Unicode_normal_formContext(Context, State);
		EnterRule(_localctx, 1296, RULE_unicode_normal_form);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9914;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overlay_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACING() { return GetToken(PostgreSQLParser.PLACING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public Overlay_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overlay_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOverlay_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOverlay_list(this);
		}
	}

	[RuleVersion(0)]
	public Overlay_listContext overlay_list() {
		Overlay_listContext _localctx = new Overlay_listContext(Context, State);
		EnterRule(_localctx, 1298, RULE_overlay_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9916;
			a_expr();
			State = 9917;
			Match(PLACING);
			State = 9918;
			a_expr();
			State = 9919;
			Match(FROM);
			State = 9920;
			a_expr();
			State = 9923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 9921;
				Match(FOR);
				State = 9922;
				a_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Position_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext[] b_expr() {
			return GetRuleContexts<B_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr(int i) {
			return GetRuleContext<B_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		public Position_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPosition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPosition_list(this);
		}
	}

	[RuleVersion(0)]
	public Position_listContext position_list() {
		Position_listContext _localctx = new Position_listContext(Context, State);
		EnterRule(_localctx, 1300, RULE_position_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9925;
			b_expr(0);
			State = 9926;
			Match(IN_P);
			State = 9927;
			b_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Substr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(PostgreSQLParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		public Substr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSubstr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSubstr_list(this);
		}
	}

	[RuleVersion(0)]
	public Substr_listContext substr_list() {
		Substr_listContext _localctx = new Substr_listContext(Context, State);
		EnterRule(_localctx, 1302, RULE_substr_list);
		try {
			State = 9955;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,985,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9929;
				a_expr();
				State = 9930;
				Match(FROM);
				State = 9931;
				a_expr();
				State = 9932;
				Match(FOR);
				State = 9933;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9935;
				a_expr();
				State = 9936;
				Match(FOR);
				State = 9937;
				a_expr();
				State = 9938;
				Match(FROM);
				State = 9939;
				a_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9941;
				a_expr();
				State = 9942;
				Match(FROM);
				State = 9943;
				a_expr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9945;
				a_expr();
				State = 9946;
				Match(FOR);
				State = 9947;
				a_expr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9949;
				a_expr();
				State = 9950;
				Match(SIMILAR);
				State = 9951;
				a_expr();
				State = 9952;
				Match(ESCAPE);
				State = 9953;
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trim_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Trim_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trim_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTrim_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTrim_list(this);
		}
	}

	[RuleVersion(0)]
	public Trim_listContext trim_list() {
		Trim_listContext _localctx = new Trim_listContext(Context, State);
		EnterRule(_localctx, 1304, RULE_trim_list);
		try {
			State = 9964;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,986,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9957;
				a_expr();
				State = 9958;
				Match(FROM);
				State = 9959;
				expr_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9961;
				Match(FROM);
				State = 9962;
				expr_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9963;
				expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_exprContext : ParserRuleContext {
		public In_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_expr; } }
	 
		public In_exprContext() { }
		public virtual void CopyFrom(In_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class In_expr_listContext : In_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public In_expr_listContext(In_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIn_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIn_expr_list(this);
		}
	}
	public partial class In_expr_selectContext : In_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public In_expr_selectContext(In_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIn_expr_select(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIn_expr_select(this);
		}
	}

	[RuleVersion(0)]
	public In_exprContext in_expr() {
		In_exprContext _localctx = new In_exprContext(Context, State);
		EnterRule(_localctx, 1306, RULE_in_expr);
		try {
			State = 9971;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,987,Context) ) {
			case 1:
				_localctx = new In_expr_selectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 9966;
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new In_expr_listContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 9967;
				Match(OPEN_PAREN);
				State = 9968;
				expr_list();
				State = 9969;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(PostgreSQLParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public When_clause_listContext when_clause_list() {
			return GetRuleContext<When_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_argContext case_arg() {
			return GetRuleContext<Case_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_defaultContext case_default() {
			return GetRuleContext<Case_defaultContext>(0);
		}
		public Case_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_expr(this);
		}
	}

	[RuleVersion(0)]
	public Case_exprContext case_expr() {
		Case_exprContext _localctx = new Case_exprContext(Context, State);
		EnterRule(_localctx, 1308, RULE_case_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9973;
			Match(CASE);
			State = 9975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4880034784790705153L) != 0) || _la==PLSQLVARIABLENAME || _la==EscapeStringConstant) {
				{
				State = 9974;
				case_arg();
				}
			}

			State = 9977;
			when_clause_list();
			State = 9979;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 9978;
				case_default();
				}
			}

			State = 9981;
			Match(END_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_clause_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public When_clauseContext[] when_clause() {
			return GetRuleContexts<When_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_clauseContext when_clause(int i) {
			return GetRuleContext<When_clauseContext>(i);
		}
		public When_clause_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_clause_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhen_clause_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhen_clause_list(this);
		}
	}

	[RuleVersion(0)]
	public When_clause_listContext when_clause_list() {
		When_clause_listContext _localctx = new When_clause_listContext(Context, State);
		EnterRule(_localctx, 1310, RULE_when_clause_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 9983;
				when_clause();
				}
				}
				State = 9986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhen_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhen_clause(this);
		}
	}

	[RuleVersion(0)]
	public When_clauseContext when_clause() {
		When_clauseContext _localctx = new When_clauseContext(Context, State);
		EnterRule(_localctx, 1312, RULE_when_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9988;
			Match(WHEN);
			State = 9989;
			a_expr();
			State = 9990;
			Match(THEN);
			State = 9991;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Case_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_default(this);
		}
	}

	[RuleVersion(0)]
	public Case_defaultContext case_default() {
		Case_defaultContext _localctx = new Case_defaultContext(Context, State);
		EnterRule(_localctx, 1314, RULE_case_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9993;
			Match(ELSE);
			State = 9994;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Case_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_arg(this);
		}
	}

	[RuleVersion(0)]
	public Case_argContext case_arg() {
		Case_argContext _localctx = new Case_argContext(Context, State);
		EnterRule(_localctx, 1316, RULE_case_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9996;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnrefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnref(this);
		}
	}

	[RuleVersion(0)]
	public ColumnrefContext columnref() {
		ColumnrefContext _localctx = new ColumnrefContext(Context, State);
		EnterRule(_localctx, 1318, RULE_columnref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9998;
			colid();
			State = 10000;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,991,Context) ) {
			case 1:
				{
				State = 9999;
				indirection();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indirection_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PostgreSQLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attr_nameContext attr_name() {
			return GetRuleContext<Attr_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PostgreSQLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Slice_bound_Context[] slice_bound_() {
			return GetRuleContexts<Slice_bound_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Slice_bound_Context slice_bound_(int i) {
			return GetRuleContext<Slice_bound_Context>(i);
		}
		public Indirection_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirection_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndirection_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndirection_el(this);
		}
	}

	[RuleVersion(0)]
	public Indirection_elContext indirection_el() {
		Indirection_elContext _localctx = new Indirection_elContext(Context, State);
		EnterRule(_localctx, 1320, RULE_indirection_el);
		int _la;
		try {
			State = 10019;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10002;
				Match(DOT);
				State = 10005;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case JSON:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_EXISTS:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_QUERY:
				case JSON_SCALAR:
				case JSON_SERIALIZE:
				case JSON_TABLE:
				case JSON_VALUE:
				case MERGE_ACTION:
				case SYSTEM_USER:
				case ABSENT:
				case ASENSITIVE:
				case ATOMIC:
				case BREADTH:
				case COMPRESSION:
				case CONDITIONAL:
				case DEPTH:
				case EMPTY_P:
				case FINALIZE:
				case INDENT:
				case KEEP:
				case KEYS:
				case NESTED:
				case OMIT:
				case PARAMETER:
				case PATH:
				case PLAN:
				case QUOTES:
				case SCALAR:
				case SOURCE:
				case STRING_P:
				case TARGET:
				case UNCONDITIONAL:
				case PERIOD:
				case ALL:
				case ANALYSE:
				case ANALYZE:
				case AND:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASYMMETRIC:
				case BOTH:
				case CASE:
				case CAST:
				case CHECK:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case CREATE:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DEFERRABLE:
				case DESC:
				case DISTINCT:
				case DO:
				case ELSE:
				case EXCEPT:
				case FALSE_P:
				case FETCH:
				case FOR:
				case FOREIGN:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case IN_P:
				case INITIALLY:
				case INTERSECT:
				case INTO:
				case LATERAL_P:
				case LEADING:
				case LIMIT:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case OFFSET:
				case ON:
				case ONLY:
				case OR:
				case ORDER:
				case PLACING:
				case PRIMARY:
				case REFERENCES:
				case RETURNING:
				case SELECT:
				case SESSION_USER:
				case SOME:
				case SYMMETRIC:
				case TABLE:
				case THEN:
				case TO:
				case TRAILING:
				case TRUE_P:
				case UNION:
				case UNIQUE:
				case USER:
				case USING:
				case VARIADIC:
				case WHEN:
				case WHERE:
				case WINDOW:
				case WITH:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATCHED:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case END_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case ERROR:
				case EXIT:
				case RETURN:
				case FORMAT:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
					{
					State = 10003;
					attr_name();
					}
					break;
				case STAR:
					{
					State = 10004;
					Match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10007;
				Match(OPEN_BRACKET);
				State = 10016;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,995,Context) ) {
				case 1:
					{
					State = 10008;
					a_expr();
					}
					break;
				case 2:
					{
					State = 10010;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4880034784790705153L) != 0) || _la==PLSQLVARIABLENAME || _la==EscapeStringConstant) {
						{
						State = 10009;
						slice_bound_();
						}
					}

					State = 10012;
					Match(COLON);
					State = 10014;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4880034784790705153L) != 0) || _la==PLSQLVARIABLENAME || _la==EscapeStringConstant) {
						{
						State = 10013;
						slice_bound_();
						}
					}

					}
					break;
				}
				State = 10018;
				Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice_bound_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Slice_bound_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice_bound_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSlice_bound_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSlice_bound_(this);
		}
	}

	[RuleVersion(0)]
	public Slice_bound_Context slice_bound_() {
		Slice_bound_Context _localctx = new Slice_bound_Context(Context, State);
		EnterRule(_localctx, 1322, RULE_slice_bound_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10021;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indirection_elContext[] indirection_el() {
			return GetRuleContexts<Indirection_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indirection_elContext indirection_el(int i) {
			return GetRuleContext<Indirection_elContext>(i);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndirection(this);
		}
	}

	[RuleVersion(0)]
	public IndirectionContext indirection() {
		IndirectionContext _localctx = new IndirectionContext(Context, State);
		EnterRule(_localctx, 1324, RULE_indirection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10024;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 10023;
					indirection_el();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 10026;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,997,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_indirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indirection_elContext[] indirection_el() {
			return GetRuleContexts<Indirection_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indirection_elContext indirection_el(int i) {
			return GetRuleContext<Indirection_elContext>(i);
		}
		public Opt_indirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_indirection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_indirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_indirection(this);
		}
	}

	[RuleVersion(0)]
	public Opt_indirectionContext opt_indirection() {
		Opt_indirectionContext _localctx = new Opt_indirectionContext(Context, State);
		EnterRule(_localctx, 1326, RULE_opt_indirection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10031;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,998,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 10028;
					indirection_el();
					}
					} 
				}
				State = 10033;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,998,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_passing_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(PostgreSQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_argumentsContext json_arguments() {
			return GetRuleContext<Json_argumentsContext>(0);
		}
		public Json_passing_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_passing_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_passing_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_passing_clause(this);
		}
	}

	[RuleVersion(0)]
	public Json_passing_clauseContext json_passing_clause() {
		Json_passing_clauseContext _localctx = new Json_passing_clauseContext(Context, State);
		EnterRule(_localctx, 1328, RULE_json_passing_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10034;
			Match(PASSING);
			State = 10035;
			json_arguments(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Json_argumentContext json_argument() {
			return GetRuleContext<Json_argumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_argumentsContext json_arguments() {
			return GetRuleContext<Json_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Json_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Json_argumentsContext json_arguments() {
		return json_arguments(0);
	}

	private Json_argumentsContext json_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Json_argumentsContext _localctx = new Json_argumentsContext(Context, _parentState);
		Json_argumentsContext _prevctx = _localctx;
		int _startState = 1330;
		EnterRecursionRule(_localctx, 1330, RULE_json_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10038;
			json_argument();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10045;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,999,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Json_argumentsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_json_arguments);
					State = 10040;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10041;
					Match(COMMA);
					State = 10042;
					json_argument();
					}
					} 
				}
				State = 10047;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,999,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Json_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Json_value_exprContext json_value_expr() {
			return GetRuleContext<Json_value_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext colLabel() {
			return GetRuleContext<ColLabelContext>(0);
		}
		public Json_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_argument(this);
		}
	}

	[RuleVersion(0)]
	public Json_argumentContext json_argument() {
		Json_argumentContext _localctx = new Json_argumentContext(Context, State);
		EnterRule(_localctx, 1332, RULE_json_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10048;
			json_value_expr();
			State = 10049;
			Match(AS);
			State = 10050;
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_wrapper_behaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL() { return GetToken(PostgreSQLParser.CONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCONDITIONAL() { return GetToken(PostgreSQLParser.UNCONDITIONAL, 0); }
		public Json_wrapper_behaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_wrapper_behavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_wrapper_behavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_wrapper_behavior(this);
		}
	}

	[RuleVersion(0)]
	public Json_wrapper_behaviorContext json_wrapper_behavior() {
		Json_wrapper_behaviorContext _localctx = new Json_wrapper_behaviorContext(Context, State);
		EnterRule(_localctx, 1334, RULE_json_wrapper_behavior);
		try {
			State = 10077;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1000,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10052;
				Match(WITHOUT);
				State = 10053;
				Match(WRAPPER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10054;
				Match(WITHOUT);
				State = 10055;
				Match(ARRAY);
				State = 10056;
				Match(WRAPPER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10057;
				Match(WITH);
				State = 10058;
				Match(WRAPPER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10059;
				Match(WITH);
				State = 10060;
				Match(ARRAY);
				State = 10061;
				Match(WRAPPER);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10062;
				Match(WITH);
				State = 10063;
				Match(CONDITIONAL);
				State = 10064;
				Match(ARRAY);
				State = 10065;
				Match(WRAPPER);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10066;
				Match(WITH);
				State = 10067;
				Match(UNCONDITIONAL);
				State = 10068;
				Match(ARRAY);
				State = 10069;
				Match(WRAPPER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10070;
				Match(WITH);
				State = 10071;
				Match(CONDITIONAL);
				State = 10072;
				Match(WRAPPER);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10073;
				Match(WITH);
				State = 10074;
				Match(UNCONDITIONAL);
				State = 10075;
				Match(WRAPPER);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_behaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_behavior_typeContext json_behavior_type() {
			return GetRuleContext<Json_behavior_typeContext>(0);
		}
		public Json_behaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_behavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_behavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_behavior(this);
		}
	}

	[RuleVersion(0)]
	public Json_behaviorContext json_behavior() {
		Json_behaviorContext _localctx = new Json_behaviorContext(Context, State);
		EnterRule(_localctx, 1336, RULE_json_behavior);
		try {
			State = 10082;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10079;
				Match(DEFAULT);
				State = 10080;
				a_expr();
				}
				break;
			case EMPTY_P:
			case FALSE_P:
			case NULL_P:
			case TRUE_P:
			case UNKNOWN:
			case ERROR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10081;
				json_behavior_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_behavior_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(PostgreSQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(PostgreSQLParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_P() { return GetToken(PostgreSQLParser.EMPTY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		public Json_behavior_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_behavior_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_behavior_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_behavior_type(this);
		}
	}

	[RuleVersion(0)]
	public Json_behavior_typeContext json_behavior_type() {
		Json_behavior_typeContext _localctx = new Json_behavior_typeContext(Context, State);
		EnterRule(_localctx, 1338, RULE_json_behavior_type);
		try {
			State = 10094;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1002,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10084;
				Match(ERROR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10085;
				Match(NULL_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10086;
				Match(TRUE_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10087;
				Match(FALSE_P);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10088;
				Match(UNKNOWN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10089;
				Match(EMPTY_P);
				State = 10090;
				Match(ARRAY);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10091;
				Match(EMPTY_P);
				State = 10092;
				Match(OBJECT_P);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10093;
				Match(EMPTY_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_behavior_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Json_behaviorContext[] json_behavior() {
			return GetRuleContexts<Json_behaviorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_behaviorContext json_behavior(int i) {
			return GetRuleContext<Json_behaviorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(PostgreSQLParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(PostgreSQLParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_P() { return GetToken(PostgreSQLParser.EMPTY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(PostgreSQLParser.ERROR, 0); }
		public Json_behavior_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_behavior_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_behavior_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_behavior_clause(this);
		}
	}

	[RuleVersion(0)]
	public Json_behavior_clauseContext json_behavior_clause() {
		Json_behavior_clauseContext _localctx = new Json_behavior_clauseContext(Context, State);
		EnterRule(_localctx, 1340, RULE_json_behavior_clause);
		try {
			State = 10111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1003,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10096;
				json_behavior();
				State = 10097;
				Match(ON);
				State = 10098;
				Match(EMPTY_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10100;
				json_behavior();
				State = 10101;
				Match(ON);
				State = 10102;
				Match(ERROR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10104;
				json_behavior();
				State = 10105;
				Match(ON);
				State = 10106;
				Match(EMPTY_P);
				State = 10107;
				json_behavior();
				State = 10108;
				Match(ON);
				State = 10109;
				Match(ERROR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_on_error_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Json_behaviorContext json_behavior() {
			return GetRuleContext<Json_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(PostgreSQLParser.ERROR, 0); }
		public Json_on_error_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_on_error_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_on_error_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_on_error_clause(this);
		}
	}

	[RuleVersion(0)]
	public Json_on_error_clauseContext json_on_error_clause() {
		Json_on_error_clauseContext _localctx = new Json_on_error_clauseContext(Context, State);
		EnterRule(_localctx, 1342, RULE_json_on_error_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10113;
			json_behavior();
			State = 10114;
			Match(ON);
			State = 10115;
			Match(ERROR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_value_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_format_clauseContext json_format_clause() {
			return GetRuleContext<Json_format_clauseContext>(0);
		}
		public Json_value_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_value_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_value_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_value_expr(this);
		}
	}

	[RuleVersion(0)]
	public Json_value_exprContext json_value_expr() {
		Json_value_exprContext _localctx = new Json_value_exprContext(Context, State);
		EnterRule(_localctx, 1344, RULE_json_value_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10117;
			a_expr();
			State = 10119;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1004,Context) ) {
			case 1:
				{
				State = 10118;
				json_format_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_format_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_LA() { return GetToken(PostgreSQLParser.FORMAT_LA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(PostgreSQLParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(PostgreSQLParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Json_format_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_format_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_format_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_format_clause(this);
		}
	}

	[RuleVersion(0)]
	public Json_format_clauseContext json_format_clause() {
		Json_format_clauseContext _localctx = new Json_format_clauseContext(Context, State);
		EnterRule(_localctx, 1346, RULE_json_format_clause);
		try {
			State = 10127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1005,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10121;
				Match(FORMAT_LA);
				State = 10122;
				Match(JSON);
				State = 10123;
				Match(ENCODING);
				State = 10124;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10125;
				Match(FORMAT_LA);
				State = 10126;
				Match(JSON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_quotes_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEEP() { return GetToken(PostgreSQLParser.KEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTES() { return GetToken(PostgreSQLParser.QUOTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALAR() { return GetToken(PostgreSQLParser.SCALAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_P() { return GetToken(PostgreSQLParser.STRING_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMIT() { return GetToken(PostgreSQLParser.OMIT, 0); }
		public Json_quotes_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_quotes_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_quotes_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_quotes_clause(this);
		}
	}

	[RuleVersion(0)]
	public Json_quotes_clauseContext json_quotes_clause() {
		Json_quotes_clauseContext _localctx = new Json_quotes_clauseContext(Context, State);
		EnterRule(_localctx, 1348, RULE_json_quotes_clause);
		try {
			State = 10143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1006,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10129;
				Match(KEEP);
				State = 10130;
				Match(QUOTES);
				State = 10131;
				Match(ON);
				State = 10132;
				Match(SCALAR);
				State = 10133;
				Match(STRING_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10134;
				Match(KEEP);
				State = 10135;
				Match(QUOTES);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10136;
				Match(OMIT);
				State = 10137;
				Match(QUOTES);
				State = 10138;
				Match(ON);
				State = 10139;
				Match(SCALAR);
				State = 10140;
				Match(STRING_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10141;
				Match(OMIT);
				State = 10142;
				Match(QUOTES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_returning_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(PostgreSQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_format_clauseContext json_format_clause() {
			return GetRuleContext<Json_format_clauseContext>(0);
		}
		public Json_returning_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_returning_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_returning_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_returning_clause(this);
		}
	}

	[RuleVersion(0)]
	public Json_returning_clauseContext json_returning_clause() {
		Json_returning_clauseContext _localctx = new Json_returning_clauseContext(Context, State);
		EnterRule(_localctx, 1350, RULE_json_returning_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10145;
			Match(RETURNING);
			State = 10146;
			typename();
			State = 10148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORMAT_LA) {
				{
				State = 10147;
				json_format_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_predicate_type_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(PostgreSQLParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALAR() { return GetToken(PostgreSQLParser.SCALAR, 0); }
		public Json_predicate_type_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_predicate_type_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_predicate_type_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_predicate_type_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Json_predicate_type_constraintContext json_predicate_type_constraint() {
		Json_predicate_type_constraintContext _localctx = new Json_predicate_type_constraintContext(Context, State);
		EnterRule(_localctx, 1352, RULE_json_predicate_type_constraint);
		try {
			State = 10159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1008,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10150;
				Match(JSON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10151;
				Match(JSON);
				State = 10152;
				Match(VALUE_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10153;
				Match(JSON);
				State = 10154;
				Match(ARRAY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10155;
				Match(JSON);
				State = 10156;
				Match(OBJECT_P);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10157;
				Match(JSON);
				State = 10158;
				Match(SCALAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_key_uniqueness_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(PostgreSQLParser.KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		public Json_key_uniqueness_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_key_uniqueness_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_key_uniqueness_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_key_uniqueness_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Json_key_uniqueness_constraintContext json_key_uniqueness_constraint() {
		Json_key_uniqueness_constraintContext _localctx = new Json_key_uniqueness_constraintContext(Context, State);
		EnterRule(_localctx, 1354, RULE_json_key_uniqueness_constraint);
		try {
			State = 10171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1009,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10161;
				Match(WITH);
				State = 10162;
				Match(UNIQUE);
				State = 10163;
				Match(KEYS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10164;
				Match(WITH);
				State = 10165;
				Match(UNIQUE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10166;
				Match(WITHOUT);
				State = 10167;
				Match(UNIQUE);
				State = 10168;
				Match(KEYS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10169;
				Match(WITHOUT);
				State = 10170;
				Match(UNIQUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_name_and_value_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Json_name_and_valueContext json_name_and_value() {
			return GetRuleContext<Json_name_and_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_name_and_value_listContext json_name_and_value_list() {
			return GetRuleContext<Json_name_and_value_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Json_name_and_value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_name_and_value_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_name_and_value_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_name_and_value_list(this);
		}
	}

	[RuleVersion(0)]
	public Json_name_and_value_listContext json_name_and_value_list() {
		return json_name_and_value_list(0);
	}

	private Json_name_and_value_listContext json_name_and_value_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Json_name_and_value_listContext _localctx = new Json_name_and_value_listContext(Context, _parentState);
		Json_name_and_value_listContext _prevctx = _localctx;
		int _startState = 1356;
		EnterRecursionRule(_localctx, 1356, RULE_json_name_and_value_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10174;
			json_name_and_value();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10181;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1010,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Json_name_and_value_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_json_name_and_value_list);
					State = 10176;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10177;
					Match(COMMA);
					State = 10178;
					json_name_and_value();
					}
					} 
				}
				State = 10183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1010,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Json_name_and_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_value_exprContext json_value_expr() {
			return GetRuleContext<Json_value_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PostgreSQLParser.COLON, 0); }
		public Json_name_and_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_name_and_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_name_and_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_name_and_value(this);
		}
	}

	[RuleVersion(0)]
	public Json_name_and_valueContext json_name_and_value() {
		Json_name_and_valueContext _localctx = new Json_name_and_valueContext(Context, State);
		EnterRule(_localctx, 1358, RULE_json_name_and_value);
		try {
			State = 10192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1011,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10184;
				c_expr();
				State = 10185;
				Match(VALUE_P);
				State = 10186;
				json_value_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10188;
				a_expr();
				State = 10189;
				Match(COLON);
				State = 10190;
				json_value_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_object_constructor_null_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL_P() { return GetTokens(PostgreSQLParser.NULL_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P(int i) {
			return GetToken(PostgreSQLParser.NULL_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSENT() { return GetToken(PostgreSQLParser.ABSENT, 0); }
		public Json_object_constructor_null_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_object_constructor_null_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_object_constructor_null_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_object_constructor_null_clause(this);
		}
	}

	[RuleVersion(0)]
	public Json_object_constructor_null_clauseContext json_object_constructor_null_clause() {
		Json_object_constructor_null_clauseContext _localctx = new Json_object_constructor_null_clauseContext(Context, State);
		EnterRule(_localctx, 1360, RULE_json_object_constructor_null_clause);
		try {
			State = 10200;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10194;
				Match(NULL_P);
				State = 10195;
				Match(ON);
				State = 10196;
				Match(NULL_P);
				}
				break;
			case ABSENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10197;
				Match(ABSENT);
				State = 10198;
				Match(ON);
				State = 10199;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_array_constructor_null_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL_P() { return GetTokens(PostgreSQLParser.NULL_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P(int i) {
			return GetToken(PostgreSQLParser.NULL_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSENT() { return GetToken(PostgreSQLParser.ABSENT, 0); }
		public Json_array_constructor_null_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_array_constructor_null_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_array_constructor_null_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_array_constructor_null_clause(this);
		}
	}

	[RuleVersion(0)]
	public Json_array_constructor_null_clauseContext json_array_constructor_null_clause() {
		Json_array_constructor_null_clauseContext _localctx = new Json_array_constructor_null_clauseContext(Context, State);
		EnterRule(_localctx, 1362, RULE_json_array_constructor_null_clause);
		try {
			State = 10208;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10202;
				Match(NULL_P);
				State = 10203;
				Match(ON);
				State = 10204;
				Match(NULL_P);
				}
				break;
			case ABSENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10205;
				Match(ABSENT);
				State = 10206;
				Match(ON);
				State = 10207;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_value_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Json_value_exprContext json_value_expr() {
			return GetRuleContext<Json_value_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_value_expr_listContext json_value_expr_list() {
			return GetRuleContext<Json_value_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Json_value_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_value_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_value_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_value_expr_list(this);
		}
	}

	[RuleVersion(0)]
	public Json_value_expr_listContext json_value_expr_list() {
		return json_value_expr_list(0);
	}

	private Json_value_expr_listContext json_value_expr_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Json_value_expr_listContext _localctx = new Json_value_expr_listContext(Context, _parentState);
		Json_value_expr_listContext _prevctx = _localctx;
		int _startState = 1364;
		EnterRecursionRule(_localctx, 1364, RULE_json_value_expr_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10211;
			json_value_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10218;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1014,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Json_value_expr_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_json_value_expr_list);
					State = 10213;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10214;
					Match(COMMA);
					State = 10215;
					json_value_expr();
					}
					} 
				}
				State = 10220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1014,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Json_aggregate_funcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECTAGG() { return GetToken(PostgreSQLParser.JSON_OBJECTAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_name_and_valueContext json_name_and_value() {
			return GetRuleContext<Json_name_and_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_returning_clauseContext json_returning_clause() {
			return GetRuleContext<Json_returning_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_object_constructor_null_clauseContext json_object_constructor_null_clause() {
			return GetRuleContext<Json_object_constructor_null_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_key_uniqueness_constraintContext json_key_uniqueness_constraint() {
			return GetRuleContext<Json_key_uniqueness_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAYAGG() { return GetToken(PostgreSQLParser.JSON_ARRAYAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_value_exprContext json_value_expr() {
			return GetRuleContext<Json_value_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_array_aggregate_order_by_clauseContext json_array_aggregate_order_by_clause() {
			return GetRuleContext<Json_array_aggregate_order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_array_constructor_null_clauseContext json_array_constructor_null_clause() {
			return GetRuleContext<Json_array_constructor_null_clauseContext>(0);
		}
		public Json_aggregate_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_aggregate_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_aggregate_func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_aggregate_func(this);
		}
	}

	[RuleVersion(0)]
	public Json_aggregate_funcContext json_aggregate_func() {
		Json_aggregate_funcContext _localctx = new Json_aggregate_funcContext(Context, State);
		EnterRule(_localctx, 1366, RULE_json_aggregate_func);
		int _la;
		try {
			State = 10245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON_OBJECTAGG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10221;
				Match(JSON_OBJECTAGG);
				State = 10222;
				Match(OPEN_PAREN);
				State = 10223;
				json_name_and_value();
				State = 10225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ABSENT || _la==NULL_P) {
					{
					State = 10224;
					json_object_constructor_null_clause();
					}
				}

				State = 10228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					State = 10227;
					json_key_uniqueness_constraint();
					}
				}

				State = 10230;
				json_returning_clause();
				State = 10231;
				Match(CLOSE_PAREN);
				}
				break;
			case JSON_ARRAYAGG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10233;
				Match(JSON_ARRAYAGG);
				State = 10234;
				Match(OPEN_PAREN);
				State = 10235;
				json_value_expr();
				State = 10237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 10236;
					json_array_aggregate_order_by_clause();
					}
				}

				State = 10240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ABSENT || _la==NULL_P) {
					{
					State = 10239;
					json_array_constructor_null_clause();
					}
				}

				State = 10242;
				json_returning_clause();
				State = 10243;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_array_aggregate_order_by_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sortby_listContext sortby_list() {
			return GetRuleContext<Sortby_listContext>(0);
		}
		public Json_array_aggregate_order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_array_aggregate_order_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJson_array_aggregate_order_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJson_array_aggregate_order_by_clause(this);
		}
	}

	[RuleVersion(0)]
	public Json_array_aggregate_order_by_clauseContext json_array_aggregate_order_by_clause() {
		Json_array_aggregate_order_by_clauseContext _localctx = new Json_array_aggregate_order_by_clauseContext(Context, State);
		EnterRule(_localctx, 1368, RULE_json_array_aggregate_order_by_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10247;
			Match(ORDER);
			State = 10248;
			Match(BY);
			State = 10249;
			sortby_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_list_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Target_listContext target_list() {
			return GetRuleContext<Target_listContext>(0);
		}
		public Target_list_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_list_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTarget_list_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTarget_list_(this);
		}
	}

	[RuleVersion(0)]
	public Target_list_Context target_list_() {
		Target_list_Context _localctx = new Target_list_Context(Context, State);
		EnterRule(_localctx, 1370, RULE_target_list_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10251;
			target_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Target_elContext[] target_el() {
			return GetRuleContexts<Target_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_elContext target_el(int i) {
			return GetRuleContext<Target_elContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Target_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTarget_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTarget_list(this);
		}
	}

	[RuleVersion(0)]
	public Target_listContext target_list() {
		Target_listContext _localctx = new Target_listContext(Context, State);
		EnterRule(_localctx, 1372, RULE_target_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10253;
			target_el();
			State = 10258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10254;
				Match(COMMA);
				State = 10255;
				target_el();
				}
				}
				State = 10260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_elContext : ParserRuleContext {
		public Target_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_el; } }
	 
		public Target_elContext() { }
		public virtual void CopyFrom(Target_elContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Target_labelContext : Target_elContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext colLabel() {
			return GetRuleContext<ColLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BareColLabelContext bareColLabel() {
			return GetRuleContext<BareColLabelContext>(0);
		}
		public Target_labelContext(Target_elContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTarget_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTarget_label(this);
		}
	}
	public partial class Target_starContext : Target_elContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		public Target_starContext(Target_elContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTarget_star(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTarget_star(this);
		}
	}

	[RuleVersion(0)]
	public Target_elContext target_el() {
		Target_elContext _localctx = new Target_elContext(Context, State);
		EnterRule(_localctx, 1374, RULE_target_el);
		try {
			State = 10269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case FALSE_P:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				_localctx = new Target_labelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 10261;
				a_expr();
				State = 10266;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AS:
					{
					State = 10262;
					Match(AS);
					State = 10263;
					colLabel();
					}
					break;
				case JSON:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_EXISTS:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_QUERY:
				case JSON_SCALAR:
				case JSON_SERIALIZE:
				case JSON_TABLE:
				case JSON_VALUE:
				case MERGE_ACTION:
				case SYSTEM_USER:
				case ABSENT:
				case ASENSITIVE:
				case ATOMIC:
				case BREADTH:
				case COMPRESSION:
				case CONDITIONAL:
				case DEPTH:
				case EMPTY_P:
				case FINALIZE:
				case INDENT:
				case KEEP:
				case KEYS:
				case NESTED:
				case OMIT:
				case PARAMETER:
				case PATH:
				case PLAN:
				case QUOTES:
				case SCALAR:
				case SOURCE:
				case STRING_P:
				case TARGET:
				case UNCONDITIONAL:
				case PERIOD:
				case ALL:
				case ANALYSE:
				case ANALYZE:
				case AND:
				case ANY:
				case ASC:
				case ASYMMETRIC:
				case BOTH:
				case CASE:
				case CAST:
				case CHECK:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DEFERRABLE:
				case DESC:
				case DISTINCT:
				case DO:
				case ELSE:
				case FALSE_P:
				case FOREIGN:
				case IN_P:
				case INITIALLY:
				case LATERAL_P:
				case LEADING:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case ONLY:
				case OR:
				case PLACING:
				case PRIMARY:
				case REFERENCES:
				case SELECT:
				case SESSION_USER:
				case SOME:
				case SYMMETRIC:
				case TABLE:
				case THEN:
				case TRAILING:
				case TRUE_P:
				case UNIQUE:
				case USER:
				case USING:
				case VARIADIC:
				case WHEN:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case OUTER_P:
				case RIGHT:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATCHED:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINVALUE:
				case MODE:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case END_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case NORMALIZED:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case ERROR:
				case RETURN:
				case FORMAT:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
					{
					State = 10264;
					bareColLabel();
					}
					break;
				case Eof:
				case CLOSE_PAREN:
				case COMMA:
				case SEMI:
				case FORMAT_LA:
				case CREATE:
				case EXCEPT:
				case FETCH:
				case FOR:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case INTERSECT:
				case INTO:
				case LIMIT:
				case OFFSET:
				case ON:
				case ORDER:
				case RETURNING:
				case UNION:
				case WHERE:
				case WINDOW:
				case WITH:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case STAR:
				_localctx = new Target_starContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 10268;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Qualified_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQualified_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQualified_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_name_listContext qualified_name_list() {
		Qualified_name_listContext _localctx = new Qualified_name_listContext(Context, State);
		EnterRule(_localctx, 1376, RULE_qualified_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10271;
			qualified_name();
			State = 10276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10272;
				Match(COMMA);
				State = 10273;
				qualified_name();
				}
				}
				State = 10278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQualified_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQualified_name(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_nameContext qualified_name() {
		Qualified_nameContext _localctx = new Qualified_nameContext(Context, State);
		EnterRule(_localctx, 1378, RULE_qualified_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10279;
			colid();
			State = 10281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET || _la==DOT) {
				{
				State = 10280;
				indirection();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterName_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitName_list(this);
		}
	}

	[RuleVersion(0)]
	public Name_listContext name_list() {
		Name_listContext _localctx = new Name_listContext(Context, State);
		EnterRule(_localctx, 1380, RULE_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10283;
			name();
			State = 10288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10284;
				Match(COMMA);
				State = 10285;
				name();
				}
				}
				State = 10290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 1382, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10291;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attr_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColLabelContext colLabel() {
			return GetRuleContext<ColLabelContext>(0);
		}
		public Attr_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAttr_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAttr_name(this);
		}
	}

	[RuleVersion(0)]
	public Attr_nameContext attr_name() {
		Attr_nameContext _localctx = new Attr_nameContext(Context, State);
		EnterRule(_localctx, 1384, RULE_attr_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10293;
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public File_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFile_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFile_name(this);
		}
	}

	[RuleVersion(0)]
	public File_nameContext file_name() {
		File_nameContext _localctx = new File_nameContext(Context, State);
		EnterRule(_localctx, 1386, RULE_file_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10295;
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public Func_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_name(this);
		}
	}

	[RuleVersion(0)]
	public Func_nameContext func_name() {
		Func_nameContext _localctx = new Func_nameContext(Context, State);
		EnterRule(_localctx, 1388, RULE_func_name);
		try {
			State = 10301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1026,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10297;
				type_function_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10298;
				colid();
				State = 10299;
				indirection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AexprconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BconstContext bconst() {
			return GetRuleContext<BconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XconstContext xconst() {
			return GetRuleContext<XconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_listContext func_arg_list() {
			return GetRuleContext<Func_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sort_clause_Context sort_clause_() {
			return GetRuleContext<Sort_clause_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConsttypenameContext consttypename() {
			return GetRuleContext<ConsttypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstintervalContext constinterval() {
			return GetRuleContext<ConstintervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interval_Context interval_() {
			return GetRuleContext<Interval_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public AexprconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aexprconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAexprconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAexprconst(this);
		}
	}

	[RuleVersion(0)]
	public AexprconstContext aexprconst() {
		AexprconstContext _localctx = new AexprconstContext(Context, State);
		EnterRule(_localctx, 1390, RULE_aexprconst);
		int _la;
		try {
			State = 10338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1031,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10303;
				iconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10304;
				fconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10305;
				sconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10306;
				bconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10307;
				xconst();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10308;
				func_name();
				State = 10318;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					State = 10309;
					sconst();
					}
					break;
				case OPEN_PAREN:
					{
					State = 10310;
					Match(OPEN_PAREN);
					State = 10311;
					func_arg_list();
					State = 10313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ORDER) {
						{
						State = 10312;
						sort_clause_();
						}
					}

					State = 10315;
					Match(CLOSE_PAREN);
					State = 10316;
					sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10320;
				consttypename();
				State = 10321;
				sconst();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10323;
				constinterval();
				State = 10333;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					State = 10324;
					sconst();
					State = 10326;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1029,Context) ) {
					case 1:
						{
						State = 10325;
						interval_();
						}
						break;
					}
					}
					break;
				case OPEN_PAREN:
					{
					State = 10328;
					Match(OPEN_PAREN);
					State = 10329;
					iconst();
					State = 10330;
					Match(CLOSE_PAREN);
					State = 10331;
					sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10335;
				Match(TRUE_P);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10336;
				Match(FALSE_P);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10337;
				Match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexadecimalStringConstant() { return GetToken(PostgreSQLParser.HexadecimalStringConstant, 0); }
		public XconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXconst(this);
		}
	}

	[RuleVersion(0)]
	public XconstContext xconst() {
		XconstContext _localctx = new XconstContext(Context, State);
		EnterRule(_localctx, 1392, RULE_xconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10340;
			Match(HexadecimalStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryStringConstant() { return GetToken(PostgreSQLParser.BinaryStringConstant, 0); }
		public BconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBconst(this);
		}
	}

	[RuleVersion(0)]
	public BconstContext bconst() {
		BconstContext _localctx = new BconstContext(Context, State);
		EnterRule(_localctx, 1394, RULE_bconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10342;
			Match(BinaryStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeric() { return GetToken(PostgreSQLParser.Numeric, 0); }
		public FconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFconst(this);
		}
	}

	[RuleVersion(0)]
	public FconstContext fconst() {
		FconstContext _localctx = new FconstContext(Context, State);
		EnterRule(_localctx, 1396, RULE_fconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10344;
			Match(Numeric);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integral() { return GetToken(PostgreSQLParser.Integral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryIntegral() { return GetToken(PostgreSQLParser.BinaryIntegral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegral() { return GetToken(PostgreSQLParser.OctalIntegral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexadecimalIntegral() { return GetToken(PostgreSQLParser.HexadecimalIntegral, 0); }
		public IconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIconst(this);
		}
	}

	[RuleVersion(0)]
	public IconstContext iconst() {
		IconstContext _localctx = new IconstContext(Context, State);
		EnterRule(_localctx, 1398, RULE_iconst);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10346;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnysconstContext anysconst() {
			return GetRuleContext<AnysconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Uescape_Context uescape_() {
			return GetRuleContext<Uescape_Context>(0);
		}
		public SconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSconst(this);
		}
	}

	[RuleVersion(0)]
	public SconstContext sconst() {
		SconstContext _localctx = new SconstContext(Context, State);
		EnterRule(_localctx, 1400, RULE_sconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10348;
			anysconst();
			State = 10350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1032,Context) ) {
			case 1:
				{
				State = 10349;
				uescape_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnysconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringConstant() { return GetToken(PostgreSQLParser.StringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnicodeEscapeStringConstant() { return GetToken(PostgreSQLParser.UnicodeEscapeStringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BeginDollarStringConstant() { return GetToken(PostgreSQLParser.BeginDollarStringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndDollarStringConstant() { return GetToken(PostgreSQLParser.EndDollarStringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DollarText() { return GetTokens(PostgreSQLParser.DollarText); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DollarText(int i) {
			return GetToken(PostgreSQLParser.DollarText, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EscapeStringConstant() { return GetToken(PostgreSQLParser.EscapeStringConstant, 0); }
		public AnysconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anysconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAnysconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAnysconst(this);
		}
	}

	[RuleVersion(0)]
	public AnysconstContext anysconst() {
		AnysconstContext _localctx = new AnysconstContext(Context, State);
		EnterRule(_localctx, 1402, RULE_anysconst);
		int _la;
		try {
			State = 10363;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10352;
				Match(StringConstant);
				}
				break;
			case UnicodeEscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10353;
				Match(UnicodeEscapeStringConstant);
				}
				break;
			case BeginDollarStringConstant:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10354;
				Match(BeginDollarStringConstant);
				State = 10358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DollarText) {
					{
					{
					State = 10355;
					Match(DollarText);
					}
					}
					State = 10360;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 10361;
				Match(EndDollarStringConstant);
				}
				break;
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10362;
				Match(EscapeStringConstant);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Uescape_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UESCAPE() { return GetToken(PostgreSQLParser.UESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnysconstContext anysconst() {
			return GetRuleContext<AnysconstContext>(0);
		}
		public Uescape_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uescape_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUescape_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUescape_(this);
		}
	}

	[RuleVersion(0)]
	public Uescape_Context uescape_() {
		Uescape_Context _localctx = new Uescape_Context(Context, State);
		EnterRule(_localctx, 1404, RULE_uescape_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10365;
			Match(UESCAPE);
			State = 10366;
			anysconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignediconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		public SignediconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signediconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSignediconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSignediconst(this);
		}
	}

	[RuleVersion(0)]
	public SignediconstContext signediconst() {
		SignediconstContext _localctx = new SignediconstContext(Context, State);
		EnterRule(_localctx, 1406, RULE_signediconst);
		try {
			State = 10373;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10368;
				iconst();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10369;
				Match(PLUS);
				State = 10370;
				iconst();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10371;
				Match(MINUS);
				State = 10372;
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public RoleidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRoleid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRoleid(this);
		}
	}

	[RuleVersion(0)]
	public RoleidContext roleid() {
		RoleidContext _localctx = new RoleidContext(Context, State);
		EnterRule(_localctx, 1408, RULE_roleid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10375;
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RolespecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(PostgreSQLParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(PostgreSQLParser.SESSION_USER, 0); }
		public RolespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rolespec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRolespec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRolespec(this);
		}
	}

	[RuleVersion(0)]
	public RolespecContext rolespec() {
		RolespecContext _localctx = new RolespecContext(Context, State);
		EnterRule(_localctx, 1410, RULE_rolespec);
		try {
			State = 10380;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10377;
				nonreservedword();
				}
				break;
			case CURRENT_USER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10378;
				Match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10379;
				Match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Role_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext[] rolespec() {
			return GetRuleContexts<RolespecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec(int i) {
			return GetRuleContext<RolespecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Role_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRole_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRole_list(this);
		}
	}

	[RuleVersion(0)]
	public Role_listContext role_list() {
		Role_listContext _localctx = new Role_listContext(Context, State);
		EnterRule(_localctx, 1412, RULE_role_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10382;
			rolespec();
			State = 10387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10383;
				Match(COMMA);
				State = 10384;
				rolespec();
				}
				}
				State = 10389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_name_keywordContext col_name_keyword() {
			return GetRuleContext<Col_name_keywordContext>(0);
		}
		public ColidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColid(this);
		}
	}

	[RuleVersion(0)]
	public ColidContext colid() {
		ColidContext _localctx = new ColidContext(Context, State);
		EnterRule(_localctx, 1414, RULE_colid);
		try {
			State = 10393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10390;
				identifier();
				}
				break;
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case ORDINALITY:
			case COLUMNS:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case ERROR:
			case RETURN:
			case FORMAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10391;
				unreserved_keyword();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case OUT_P:
			case GROUPING:
			case XMLTABLE:
			case XMLNAMESPACES:
			case NORMALIZE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10392;
				col_name_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		public Type_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_function_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_function_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_function_nameContext type_function_name() {
		Type_function_nameContext _localctx = new Type_function_nameContext(Context, State);
		EnterRule(_localctx, 1416, RULE_type_function_name);
		try {
			State = 10398;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10395;
				identifier();
				}
				break;
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case ORDINALITY:
			case COLUMNS:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case ERROR:
			case RETURN:
			case FORMAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10396;
				unreserved_keyword();
				}
				break;
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case TABLESAMPLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10397;
				type_func_name_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonreservedwordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_name_keywordContext col_name_keyword() {
			return GetRuleContext<Col_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		public NonreservedwordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonreservedword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNonreservedword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNonreservedword(this);
		}
	}

	[RuleVersion(0)]
	public NonreservedwordContext nonreservedword() {
		NonreservedwordContext _localctx = new NonreservedwordContext(Context, State);
		EnterRule(_localctx, 1418, RULE_nonreservedword);
		try {
			State = 10404;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10400;
				identifier();
				}
				break;
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case ORDINALITY:
			case COLUMNS:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case ERROR:
			case RETURN:
			case FORMAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10401;
				unreserved_keyword();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case OUT_P:
			case GROUPING:
			case XMLTABLE:
			case XMLNAMESPACES:
			case NORMALIZE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10402;
				col_name_keyword();
				}
				break;
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case TABLESAMPLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10403;
				type_func_name_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_name_keywordContext col_name_keyword() {
			return GetRuleContext<Col_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(PostgreSQLParser.EXIT, 0); }
		public ColLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColLabel(this);
		}
	}

	[RuleVersion(0)]
	public ColLabelContext colLabel() {
		ColLabelContext _localctx = new ColLabelContext(Context, State);
		EnterRule(_localctx, 1420, RULE_colLabel);
		try {
			State = 10412;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10406;
				identifier();
				}
				break;
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case ORDINALITY:
			case COLUMNS:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case ERROR:
			case RETURN:
			case FORMAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10407;
				unreserved_keyword();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case OUT_P:
			case GROUPING:
			case XMLTABLE:
			case XMLNAMESPACES:
			case NORMALIZE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10408;
				col_name_keyword();
				}
				break;
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case TABLESAMPLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10409;
				type_func_name_keyword();
				}
				break;
			case SYSTEM_USER:
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case INTO:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case END_P:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10410;
				reserved_keyword();
				}
				break;
			case EXIT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10411;
				Match(EXIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BareColLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bare_label_keywordContext bare_label_keyword() {
			return GetRuleContext<Bare_label_keywordContext>(0);
		}
		public BareColLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bareColLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBareColLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBareColLabel(this);
		}
	}

	[RuleVersion(0)]
	public BareColLabelContext bareColLabel() {
		BareColLabelContext _localctx = new BareColLabelContext(Context, State);
		EnterRule(_localctx, 1422, RULE_bareColLabel);
		try {
			State = 10416;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10414;
				identifier();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case FALSE_P:
			case FOREIGN:
			case IN_P:
			case INITIALLY:
			case LATERAL_P:
			case LEADING:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case ONLY:
			case OR:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TRAILING:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case OUTER_P:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINVALUE:
			case MODE:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10415;
				bare_label_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unreserved_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_P() { return GetToken(PostgreSQLParser.ABORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSENT() { return GetToken(PostgreSQLParser.ABSENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(PostgreSQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO() { return GetToken(PostgreSQLParser.ALSO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASENSITIVE() { return GetToken(PostgreSQLParser.ASENSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERTION() { return GetToken(PostgreSQLParser.ASSERTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(PostgreSQLParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PostgreSQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATOMIC() { return GetToken(PostgreSQLParser.ATOMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(PostgreSQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(PostgreSQLParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(PostgreSQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_P() { return GetToken(PostgreSQLParser.BEGIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREADTH() { return GetToken(PostgreSQLParser.BREADTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(PostgreSQLParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(PostgreSQLParser.CALLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(PostgreSQLParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(PostgreSQLParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTERISTICS() { return GetToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKPOINT() { return GetToken(PostgreSQLParser.CHECKPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(PostgreSQLParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(PostgreSQLParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(PostgreSQLParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENTS() { return GetToken(PostgreSQLParser.COMMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(PostgreSQLParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION() { return GetToken(PostgreSQLParser.COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL() { return GetToken(PostgreSQLParser.CONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(PostgreSQLParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINTS() { return GetToken(PostgreSQLParser.CONSTRAINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT_P() { return GetToken(PostgreSQLParser.CONTENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(PostgreSQLParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COST() { return GetToken(PostgreSQLParser.COST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSV() { return GetToken(PostgreSQLParser.CSV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(PostgreSQLParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(PostgreSQLParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_P() { return GetToken(PostgreSQLParser.DAY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(PostgreSQLParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULTS() { return GetToken(PostgreSQLParser.DEFAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(PostgreSQLParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITER() { return GetToken(PostgreSQLParser.DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITERS() { return GetToken(PostgreSQLParser.DELIMITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPENDS() { return GetToken(PostgreSQLParser.DEPENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPTH() { return GetToken(PostgreSQLParser.DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(PostgreSQLParser.DETACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(PostgreSQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_P() { return GetToken(PostgreSQLParser.DOUBLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(PostgreSQLParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_P() { return GetToken(PostgreSQLParser.EMPTY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(PostgreSQLParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(PostgreSQLParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_P() { return GetToken(PostgreSQLParser.ENUM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(PostgreSQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(PostgreSQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDING() { return GetToken(PostgreSQLParser.EXCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(PostgreSQLParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(PostgreSQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(PostgreSQLParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(PostgreSQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(PostgreSQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALIZE() { return GetToken(PostgreSQLParser.FINALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(PostgreSQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(PostgreSQLParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(PostgreSQLParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(PostgreSQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(PostgreSQLParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(PostgreSQLParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_P() { return GetToken(PostgreSQLParser.HEADER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOLD() { return GetToken(PostgreSQLParser.HOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_P() { return GetToken(PostgreSQLParser.HOUR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(PostgreSQLParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT_P() { return GetToken(PostgreSQLParser.IMPLICIT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_P() { return GetToken(PostgreSQLParser.IMPORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(PostgreSQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDING() { return GetToken(PostgreSQLParser.INCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(PostgreSQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(PostgreSQLParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(PostgreSQLParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(PostgreSQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE_P() { return GetToken(PostgreSQLParser.INLINE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT_P() { return GetToken(PostgreSQLParser.INPUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE() { return GetToken(PostgreSQLParser.INSENSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(PostgreSQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(PostgreSQLParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEEP() { return GetToken(PostgreSQLParser.KEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(PostgreSQLParser.KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(PostgreSQLParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAKPROOF() { return GetToken(PostgreSQLParser.LEAKPROOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTEN() { return GetToken(PostgreSQLParser.LISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(PostgreSQLParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION() { return GetToken(PostgreSQLParser.LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_P() { return GetToken(PostgreSQLParser.LOCK_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED() { return GetToken(PostgreSQLParser.LOCKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGGED() { return GetToken(PostgreSQLParser.LOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(PostgreSQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(PostgreSQLParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(PostgreSQLParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(PostgreSQLParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(PostgreSQLParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_P() { return GetToken(PostgreSQLParser.MINUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(PostgreSQLParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(PostgreSQLParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_P() { return GetToken(PostgreSQLParser.MONTH_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_P() { return GetToken(PostgreSQLParser.NAME_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(PostgreSQLParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED() { return GetToken(PostgreSQLParser.NESTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(PostgreSQLParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(PostgreSQLParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(PostgreSQLParser.NFD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKC() { return GetToken(PostgreSQLParser.NFKC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKD() { return GetToken(PostgreSQLParser.NFKD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZED() { return GetToken(PostgreSQLParser.NORMALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFY() { return GetToken(PostgreSQLParser.NOTIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(PostgreSQLParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_P() { return GetToken(PostgreSQLParser.NULLS_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(PostgreSQLParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OIDS() { return GetToken(PostgreSQLParser.OIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD() { return GetToken(PostgreSQLParser.OLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMIT() { return GetToken(PostgreSQLParser.OMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(PostgreSQLParser.ORDINALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(PostgreSQLParser.OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(PostgreSQLParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDING() { return GetToken(PostgreSQLParser.OVERRIDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(PostgreSQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(PostgreSQLParser.PARAMETER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(PostgreSQLParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(PostgreSQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(PostgreSQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(PostgreSQLParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(PostgreSQLParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAN() { return GetToken(PostgreSQLParser.PLAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLANS() { return GetToken(PostgreSQLParser.PLANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(PostgreSQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARED() { return GetToken(PostgreSQLParser.PREPARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(PostgreSQLParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(PostgreSQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURAL() { return GetToken(PostgreSQLParser.PROCEDURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURES() { return GetToken(PostgreSQLParser.PROCEDURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(PostgreSQLParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(PostgreSQLParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTES() { return GetToken(PostgreSQLParser.QUOTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PostgreSQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASSIGN() { return GetToken(PostgreSQLParser.REASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(PostgreSQLParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(PostgreSQLParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCING() { return GetToken(PostgreSQLParser.REFERENCING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(PostgreSQLParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(PostgreSQLParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(PostgreSQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(PostgreSQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(PostgreSQLParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(PostgreSQLParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostgreSQLParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(PostgreSQLParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINES() { return GetToken(PostgreSQLParser.ROUTINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(PostgreSQLParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALAR() { return GetToken(PostgreSQLParser.SCALAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(PostgreSQLParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_P() { return GetToken(PostgreSQLParser.SECOND_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(PostgreSQLParser.SERIALIZABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(PostgreSQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(PostgreSQLParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(PostgreSQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(PostgreSQLParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_P() { return GetToken(PostgreSQLParser.SKIP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(PostgreSQLParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(PostgreSQLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_P() { return GetToken(PostgreSQLParser.SQL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STABLE() { return GetToken(PostgreSQLParser.STABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STANDALONE_P() { return GetToken(PostgreSQLParser.STANDALONE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(PostgreSQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT() { return GetToken(PostgreSQLParser.STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDIN() { return GetToken(PostgreSQLParser.STDIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDOUT() { return GetToken(PostgreSQLParser.STDOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(PostgreSQLParser.STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_P() { return GetToken(PostgreSQLParser.STRING_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRIP_P() { return GetToken(PostgreSQLParser.STRIP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPORT() { return GetToken(PostgreSQLParser.SUPPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSID() { return GetToken(PostgreSQLParser.SYSID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET() { return GetToken(PostgreSQLParser.TARGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(PostgreSQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(PostgreSQLParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUSTED() { return GetToken(PostgreSQLParser.TRUSTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_P() { return GetToken(PostgreSQLParser.TYPES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UESCAPE() { return GetToken(PostgreSQLParser.UESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(PostgreSQLParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(PostgreSQLParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCONDITIONAL() { return GetToken(PostgreSQLParser.UNCONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNENCRYPTED() { return GetToken(PostgreSQLParser.UNENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(PostgreSQLParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLISTEN() { return GetToken(PostgreSQLParser.UNLISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(PostgreSQLParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(PostgreSQLParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID() { return GetToken(PostgreSQLParser.VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(PostgreSQLParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATOR() { return GetToken(PostgreSQLParser.VALIDATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(PostgreSQLParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEWS() { return GetToken(PostgreSQLParser.VIEWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(PostgreSQLParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE_P() { return GetToken(PostgreSQLParser.WHITESPACE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(PostgreSQLParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(PostgreSQLParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(PostgreSQLParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_P() { return GetToken(PostgreSQLParser.XML_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_P() { return GetToken(PostgreSQLParser.YEAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YES_P() { return GetToken(PostgreSQLParser.YES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		public Unreserved_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unreserved_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUnreserved_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUnreserved_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Unreserved_keywordContext unreserved_keyword() {
		Unreserved_keywordContext _localctx = new Unreserved_keywordContext(Context, State);
		EnterRule(_localctx, 1424, RULE_unreserved_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10418;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 16777215L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & 360258695689404415L) != 0) || _la==RETURN || _la==FORMAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Col_name_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(PostgreSQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(PostgreSQLParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(PostgreSQLParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_P() { return GetToken(PostgreSQLParser.BOOLEAN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_P() { return GetToken(PostgreSQLParser.CHAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(PostgreSQLParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(PostgreSQLParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_P() { return GetToken(PostgreSQLParser.DECIMAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(PostgreSQLParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_P() { return GetToken(PostgreSQLParser.FLOAT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEST() { return GetToken(PostgreSQLParser.GREATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(PostgreSQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(PostgreSQLParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_P() { return GetToken(PostgreSQLParser.INT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(PostgreSQLParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(PostgreSQLParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(PostgreSQLParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY() { return GetToken(PostgreSQLParser.JSON_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAYAGG() { return GetToken(PostgreSQLParser.JSON_ARRAYAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_EXISTS() { return GetToken(PostgreSQLParser.JSON_EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECT() { return GetToken(PostgreSQLParser.JSON_OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECTAGG() { return GetToken(PostgreSQLParser.JSON_OBJECTAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_QUERY() { return GetToken(PostgreSQLParser.JSON_QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SCALAR() { return GetToken(PostgreSQLParser.JSON_SCALAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SERIALIZE() { return GetToken(PostgreSQLParser.JSON_SERIALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TABLE() { return GetToken(PostgreSQLParser.JSON_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(PostgreSQLParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAST() { return GetToken(PostgreSQLParser.LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE_ACTION() { return GetToken(PostgreSQLParser.MERGE_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(PostgreSQLParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(PostgreSQLParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZE() { return GetToken(PostgreSQLParser.NORMALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(PostgreSQLParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(PostgreSQLParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_P() { return GetToken(PostgreSQLParser.OUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAY() { return GetToken(PostgreSQLParser.OVERLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(PostgreSQLParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(PostgreSQLParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(PostgreSQLParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETOF() { return GetToken(PostgreSQLParser.SETOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(PostgreSQLParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(PostgreSQLParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(PostgreSQLParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREAT() { return GetToken(PostgreSQLParser.TREAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(PostgreSQLParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(PostgreSQLParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLATTRIBUTES() { return GetToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLCONCAT() { return GetToken(PostgreSQLParser.XMLCONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLELEMENT() { return GetToken(PostgreSQLParser.XMLELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLEXISTS() { return GetToken(PostgreSQLParser.XMLEXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLFOREST() { return GetToken(PostgreSQLParser.XMLFOREST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLNAMESPACES() { return GetToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPARSE() { return GetToken(PostgreSQLParser.XMLPARSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPI() { return GetToken(PostgreSQLParser.XMLPI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLROOT() { return GetToken(PostgreSQLParser.XMLROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLSERIALIZE() { return GetToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLTABLE() { return GetToken(PostgreSQLParser.XMLTABLE, 0); }
		public Col_name_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_col_name_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCol_name_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCol_name_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Col_name_keywordContext col_name_keyword() {
		Col_name_keywordContext _localctx = new Col_name_keywordContext(Context, State);
		EnterRule(_localctx, 1426, RULE_col_name_keyword);
		try {
			State = 10483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1043,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10420;
				Match(BETWEEN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10421;
				Match(BIGINT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10422;
				Match(BIT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10423;
				Match(BOOLEAN_P);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10424;
				Match(CHAR_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10425;
				character();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10426;
				Match(COALESCE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10427;
				Match(DEC);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10428;
				Match(DECIMAL_P);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10429;
				Match(EXISTS);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10430;
				Match(EXTRACT);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 10431;
				Match(FLOAT_P);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 10432;
				Match(GREATEST);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 10433;
				Match(GROUPING);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 10434;
				Match(INOUT);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 10435;
				Match(INT_P);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 10436;
				Match(INTEGER);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 10437;
				Match(INTERVAL);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 10438;
				Match(JSON);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 10439;
				Match(JSON_ARRAY);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 10440;
				Match(JSON_ARRAYAGG);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 10441;
				Match(JSON_EXISTS);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 10442;
				Match(JSON_OBJECT);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 10443;
				Match(JSON_OBJECTAGG);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 10444;
				Match(JSON_QUERY);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 10445;
				Match(JSON_SCALAR);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 10446;
				Match(JSON_SERIALIZE);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 10447;
				Match(JSON_TABLE);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 10448;
				Match(JSON_VALUE);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 10449;
				Match(LEAST);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 10450;
				Match(MERGE_ACTION);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 10451;
				Match(NATIONAL);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 10452;
				Match(NCHAR);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 10453;
				Match(NONE);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 10454;
				Match(NORMALIZE);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 10455;
				Match(NULLIF);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 10456;
				Match(NUMERIC);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 10457;
				Match(OUT_P);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 10458;
				Match(OVERLAY);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 10459;
				Match(POSITION);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 10460;
				Match(PRECISION);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 10461;
				Match(REAL);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 10462;
				Match(ROW);
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 10463;
				Match(SETOF);
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 10464;
				Match(SMALLINT);
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 10465;
				Match(SUBSTRING);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 10466;
				Match(TIME);
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 10467;
				Match(TIMESTAMP);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 10468;
				Match(TREAT);
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 10469;
				Match(TRIM);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 10470;
				Match(VALUES);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 10471;
				Match(VARCHAR);
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 10472;
				Match(XMLATTRIBUTES);
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 10473;
				Match(XMLCONCAT);
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 10474;
				Match(XMLELEMENT);
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 10475;
				Match(XMLEXISTS);
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 10476;
				Match(XMLFOREST);
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 10477;
				Match(XMLNAMESPACES);
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 10478;
				Match(XMLPARSE);
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 10479;
				Match(XMLPI);
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 10480;
				Match(XMLROOT);
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 10481;
				Match(XMLSERIALIZE);
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 10482;
				Match(XMLTABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_func_name_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostgreSQLParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(PostgreSQLParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SCHEMA() { return GetToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREEZE() { return GetToken(PostgreSQLParser.FREEZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(PostgreSQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_P() { return GetToken(PostgreSQLParser.INNER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(PostgreSQLParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(PostgreSQLParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(PostgreSQLParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(PostgreSQLParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_P() { return GetToken(PostgreSQLParser.OUTER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(PostgreSQLParser.OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(PostgreSQLParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(PostgreSQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		public Type_func_name_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_func_name_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_func_name_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_func_name_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Type_func_name_keywordContext type_func_name_keyword() {
		Type_func_name_keywordContext _localctx = new Type_func_name_keywordContext(Context, State);
		EnterRule(_localctx, 1428, RULE_type_func_name_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10485;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & 8126463L) != 0) || _la==TABLESAMPLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reserved_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYSE() { return GetToken(PostgreSQLParser.ANALYSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(PostgreSQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(PostgreSQLParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(PostgreSQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(PostgreSQLParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(PostgreSQLParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(PostgreSQLParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_CATALOG() { return GetToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(PostgreSQLParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ROLE() { return GetToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(PostgreSQLParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(PostgreSQLParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(PostgreSQLParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(PostgreSQLParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(PostgreSQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(PostgreSQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(PostgreSQLParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL_P() { return GetToken(PostgreSQLParser.LATERAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(PostgreSQLParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(PostgreSQLParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(PostgreSQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACING() { return GetToken(PostgreSQLParser.PLACING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(PostgreSQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(PostgreSQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(PostgreSQLParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(PostgreSQLParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(PostgreSQLParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(PostgreSQLParser.SYSTEM_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(PostgreSQLParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(PostgreSQLParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(PostgreSQLParser.VARIADIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(PostgreSQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		public Reserved_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reserved_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReserved_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReserved_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Reserved_keywordContext reserved_keyword() {
		Reserved_keywordContext _localctx = new Reserved_keywordContext(Context, State);
		EnterRule(_localctx, 1430, RULE_reserved_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10487;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & -67108863L) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 274877906943L) != 0) || _la==END_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bare_label_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_P() { return GetToken(PostgreSQLParser.ABORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSENT() { return GetToken(PostgreSQLParser.ABSENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(PostgreSQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO() { return GetToken(PostgreSQLParser.ALSO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYSE() { return GetToken(PostgreSQLParser.ANALYSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(PostgreSQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(PostgreSQLParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(PostgreSQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASENSITIVE() { return GetToken(PostgreSQLParser.ASENSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERTION() { return GetToken(PostgreSQLParser.ASSERTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(PostgreSQLParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(PostgreSQLParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PostgreSQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATOMIC() { return GetToken(PostgreSQLParser.ATOMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(PostgreSQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(PostgreSQLParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(PostgreSQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_P() { return GetToken(PostgreSQLParser.BEGIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(PostgreSQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(PostgreSQLParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostgreSQLParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(PostgreSQLParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_P() { return GetToken(PostgreSQLParser.BOOLEAN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(PostgreSQLParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREADTH() { return GetToken(PostgreSQLParser.BREADTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(PostgreSQLParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(PostgreSQLParser.CALLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(PostgreSQLParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(PostgreSQLParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(PostgreSQLParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTERISTICS() { return GetToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKPOINT() { return GetToken(PostgreSQLParser.CHECKPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(PostgreSQLParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(PostgreSQLParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(PostgreSQLParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(PostgreSQLParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENTS() { return GetToken(PostgreSQLParser.COMMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(PostgreSQLParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION() { return GetToken(PostgreSQLParser.COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL() { return GetToken(PostgreSQLParser.CONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(PostgreSQLParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINTS() { return GetToken(PostgreSQLParser.CONSTRAINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT_P() { return GetToken(PostgreSQLParser.CONTENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(PostgreSQLParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COST() { return GetToken(PostgreSQLParser.COST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(PostgreSQLParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSV() { return GetToken(PostgreSQLParser.CSV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(PostgreSQLParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_CATALOG() { return GetToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(PostgreSQLParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ROLE() { return GetToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SCHEMA() { return GetToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(PostgreSQLParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(PostgreSQLParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(PostgreSQLParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(PostgreSQLParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(PostgreSQLParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_P() { return GetToken(PostgreSQLParser.DECIMAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULTS() { return GetToken(PostgreSQLParser.DEFAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(PostgreSQLParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITER() { return GetToken(PostgreSQLParser.DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITERS() { return GetToken(PostgreSQLParser.DELIMITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPENDS() { return GetToken(PostgreSQLParser.DEPENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPTH() { return GetToken(PostgreSQLParser.DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(PostgreSQLParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(PostgreSQLParser.DETACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(PostgreSQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_P() { return GetToken(PostgreSQLParser.DOUBLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(PostgreSQLParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_P() { return GetToken(PostgreSQLParser.EMPTY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(PostgreSQLParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(PostgreSQLParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_P() { return GetToken(PostgreSQLParser.ENUM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(PostgreSQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(PostgreSQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDING() { return GetToken(PostgreSQLParser.EXCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(PostgreSQLParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(PostgreSQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(PostgreSQLParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(PostgreSQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(PostgreSQLParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALIZE() { return GetToken(PostgreSQLParser.FINALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_P() { return GetToken(PostgreSQLParser.FLOAT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(PostgreSQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(PostgreSQLParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREEZE() { return GetToken(PostgreSQLParser.FREEZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(PostgreSQLParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(PostgreSQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(PostgreSQLParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEST() { return GetToken(PostgreSQLParser.GREATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(PostgreSQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(PostgreSQLParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_P() { return GetToken(PostgreSQLParser.HEADER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOLD() { return GetToken(PostgreSQLParser.HOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(PostgreSQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(PostgreSQLParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT_P() { return GetToken(PostgreSQLParser.IMPLICIT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_P() { return GetToken(PostgreSQLParser.IMPORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(PostgreSQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDING() { return GetToken(PostgreSQLParser.INCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(PostgreSQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(PostgreSQLParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(PostgreSQLParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(PostgreSQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(PostgreSQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE_P() { return GetToken(PostgreSQLParser.INLINE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_P() { return GetToken(PostgreSQLParser.INNER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(PostgreSQLParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT_P() { return GetToken(PostgreSQLParser.INPUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE() { return GetToken(PostgreSQLParser.INSENSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(PostgreSQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_P() { return GetToken(PostgreSQLParser.INT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(PostgreSQLParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(PostgreSQLParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(PostgreSQLParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(PostgreSQLParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(PostgreSQLParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY() { return GetToken(PostgreSQLParser.JSON_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAYAGG() { return GetToken(PostgreSQLParser.JSON_ARRAYAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_EXISTS() { return GetToken(PostgreSQLParser.JSON_EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECT() { return GetToken(PostgreSQLParser.JSON_OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECTAGG() { return GetToken(PostgreSQLParser.JSON_OBJECTAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_QUERY() { return GetToken(PostgreSQLParser.JSON_QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SCALAR() { return GetToken(PostgreSQLParser.JSON_SCALAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SERIALIZE() { return GetToken(PostgreSQLParser.JSON_SERIALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TABLE() { return GetToken(PostgreSQLParser.JSON_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(PostgreSQLParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEEP() { return GetToken(PostgreSQLParser.KEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(PostgreSQLParser.KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(PostgreSQLParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL_P() { return GetToken(PostgreSQLParser.LATERAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(PostgreSQLParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAKPROOF() { return GetToken(PostgreSQLParser.LEAKPROOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAST() { return GetToken(PostgreSQLParser.LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTEN() { return GetToken(PostgreSQLParser.LISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(PostgreSQLParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(PostgreSQLParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION() { return GetToken(PostgreSQLParser.LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_P() { return GetToken(PostgreSQLParser.LOCK_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED() { return GetToken(PostgreSQLParser.LOCKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGGED() { return GetToken(PostgreSQLParser.LOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(PostgreSQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(PostgreSQLParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(PostgreSQLParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(PostgreSQLParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE_ACTION() { return GetToken(PostgreSQLParser.MERGE_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(PostgreSQLParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(PostgreSQLParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(PostgreSQLParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_P() { return GetToken(PostgreSQLParser.NAME_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(PostgreSQLParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(PostgreSQLParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(PostgreSQLParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(PostgreSQLParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED() { return GetToken(PostgreSQLParser.NESTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(PostgreSQLParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(PostgreSQLParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(PostgreSQLParser.NFD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKC() { return GetToken(PostgreSQLParser.NFKC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKD() { return GetToken(PostgreSQLParser.NFKD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZE() { return GetToken(PostgreSQLParser.NORMALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZED() { return GetToken(PostgreSQLParser.NORMALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFY() { return GetToken(PostgreSQLParser.NOTIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(PostgreSQLParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(PostgreSQLParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_P() { return GetToken(PostgreSQLParser.NULLS_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(PostgreSQLParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(PostgreSQLParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OIDS() { return GetToken(PostgreSQLParser.OIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD() { return GetToken(PostgreSQLParser.OLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMIT() { return GetToken(PostgreSQLParser.OMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(PostgreSQLParser.ORDINALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(PostgreSQLParser.OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_P() { return GetToken(PostgreSQLParser.OUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_P() { return GetToken(PostgreSQLParser.OUTER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAY() { return GetToken(PostgreSQLParser.OVERLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDING() { return GetToken(PostgreSQLParser.OVERRIDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(PostgreSQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(PostgreSQLParser.PARAMETER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(PostgreSQLParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(PostgreSQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(PostgreSQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(PostgreSQLParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(PostgreSQLParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACING() { return GetToken(PostgreSQLParser.PLACING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAN() { return GetToken(PostgreSQLParser.PLAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLANS() { return GetToken(PostgreSQLParser.PLANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(PostgreSQLParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(PostgreSQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARED() { return GetToken(PostgreSQLParser.PREPARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(PostgreSQLParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(PostgreSQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(PostgreSQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURAL() { return GetToken(PostgreSQLParser.PROCEDURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURES() { return GetToken(PostgreSQLParser.PROCEDURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(PostgreSQLParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(PostgreSQLParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTES() { return GetToken(PostgreSQLParser.QUOTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PostgreSQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(PostgreSQLParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASSIGN() { return GetToken(PostgreSQLParser.REASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(PostgreSQLParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(PostgreSQLParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCING() { return GetToken(PostgreSQLParser.REFERENCING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(PostgreSQLParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(PostgreSQLParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(PostgreSQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(PostgreSQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(PostgreSQLParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(PostgreSQLParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostgreSQLParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(PostgreSQLParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINES() { return GetToken(PostgreSQLParser.ROUTINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(PostgreSQLParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALAR() { return GetToken(PostgreSQLParser.SCALAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(PostgreSQLParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(PostgreSQLParser.SERIALIZABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(PostgreSQLParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETOF() { return GetToken(PostgreSQLParser.SETOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(PostgreSQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(PostgreSQLParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(PostgreSQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(PostgreSQLParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(PostgreSQLParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_P() { return GetToken(PostgreSQLParser.SKIP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(PostgreSQLParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(PostgreSQLParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(PostgreSQLParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(PostgreSQLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_P() { return GetToken(PostgreSQLParser.SQL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STABLE() { return GetToken(PostgreSQLParser.STABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STANDALONE_P() { return GetToken(PostgreSQLParser.STANDALONE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(PostgreSQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT() { return GetToken(PostgreSQLParser.STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDIN() { return GetToken(PostgreSQLParser.STDIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDOUT() { return GetToken(PostgreSQLParser.STDOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(PostgreSQLParser.STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_P() { return GetToken(PostgreSQLParser.STRING_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRIP_P() { return GetToken(PostgreSQLParser.STRIP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(PostgreSQLParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPORT() { return GetToken(PostgreSQLParser.SUPPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(PostgreSQLParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSID() { return GetToken(PostgreSQLParser.SYSID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(PostgreSQLParser.SYSTEM_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(PostgreSQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET() { return GetToken(PostgreSQLParser.TARGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(PostgreSQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(PostgreSQLParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(PostgreSQLParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREAT() { return GetToken(PostgreSQLParser.TREAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(PostgreSQLParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(PostgreSQLParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUSTED() { return GetToken(PostgreSQLParser.TRUSTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_P() { return GetToken(PostgreSQLParser.TYPES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UESCAPE() { return GetToken(PostgreSQLParser.UESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(PostgreSQLParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(PostgreSQLParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCONDITIONAL() { return GetToken(PostgreSQLParser.UNCONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNENCRYPTED() { return GetToken(PostgreSQLParser.UNENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(PostgreSQLParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLISTEN() { return GetToken(PostgreSQLParser.UNLISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(PostgreSQLParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(PostgreSQLParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID() { return GetToken(PostgreSQLParser.VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(PostgreSQLParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATOR() { return GetToken(PostgreSQLParser.VALIDATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(PostgreSQLParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(PostgreSQLParser.VARIADIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEWS() { return GetToken(PostgreSQLParser.VIEWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(PostgreSQLParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE_P() { return GetToken(PostgreSQLParser.WHITESPACE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(PostgreSQLParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(PostgreSQLParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_P() { return GetToken(PostgreSQLParser.XML_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLATTRIBUTES() { return GetToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLCONCAT() { return GetToken(PostgreSQLParser.XMLCONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLELEMENT() { return GetToken(PostgreSQLParser.XMLELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLEXISTS() { return GetToken(PostgreSQLParser.XMLEXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLFOREST() { return GetToken(PostgreSQLParser.XMLFOREST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLNAMESPACES() { return GetToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPARSE() { return GetToken(PostgreSQLParser.XMLPARSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPI() { return GetToken(PostgreSQLParser.XMLPI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLROOT() { return GetToken(PostgreSQLParser.XMLROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLSERIALIZE() { return GetToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLTABLE() { return GetToken(PostgreSQLParser.XMLTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YES_P() { return GetToken(PostgreSQLParser.YES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		public Bare_label_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bare_label_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBare_label_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBare_label_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Bare_label_keywordContext bare_label_keyword() {
		Bare_label_keywordContext _localctx = new Bare_label_keywordContext(Context, State);
		EnterRule(_localctx, 1432, RULE_bare_label_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10489;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -1073741824L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -2477318281427420681L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -55968850065L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -4194305L) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & -309237645313L) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & -68719480833L) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & -288230789576916993L) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & -16257L) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & 1100048596939L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Any_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Any_identifierContext any_identifier() {
		Any_identifierContext _localctx = new Any_identifierContext(Context, State);
		EnterRule(_localctx, 1434, RULE_any_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10491;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PostgreSQLParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Uescape_Context uescape_() {
			return GetRuleContext<Uescape_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuotedIdentifier() { return GetToken(PostgreSQLParser.QuotedIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnicodeQuotedIdentifier() { return GetToken(PostgreSQLParser.UnicodeQuotedIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLSQLVARIABLENAME() { return GetToken(PostgreSQLParser.PLSQLVARIABLENAME, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 1436, RULE_identifier);
		try {
			State = 10500;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10493;
				Match(Identifier);
				State = 10495;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1044,Context) ) {
				case 1:
					{
					State = 10494;
					uescape_();
					}
					break;
				}
				}
				break;
			case QuotedIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10497;
				Match(QuotedIdentifier);
				}
				break;
			case UnicodeQuotedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10498;
				Match(UnicodeQuotedIdentifier);
				}
				break;
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10499;
				Match(PLSQLVARIABLENAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 582: return a_expr_qual_sempred((A_expr_qualContext)_localctx, predIndex);
		case 602: return b_expr_sempred((B_exprContext)_localctx, predIndex);
		case 665: return json_arguments_sempred((Json_argumentsContext)_localctx, predIndex);
		case 678: return json_name_and_value_list_sempred((Json_name_and_value_listContext)_localctx, predIndex);
		case 682: return json_value_expr_list_sempred((Json_value_expr_listContext)_localctx, predIndex);
		}
		return true;
	}
	private bool a_expr_qual_sempred(A_expr_qualContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.OnlyAcceptableOps();
		}
		return true;
	}
	private bool b_expr_sempred(B_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 10);
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool json_arguments_sempred(Json_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool json_name_and_value_list_sempred(Json_name_and_value_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool json_value_expr_list_sempred(Json_value_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,599,10503,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
		21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
		28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
		35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
		42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
		49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
		56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
		63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
		70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
		77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
		84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
		91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,
		98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,
		2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,
		2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
		2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
		2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,
		2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,
		2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,
		2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,
		2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,
		2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,
		2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,
		2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,
		2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,
		2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
		2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
		2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,
		2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,
		2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,
		2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,
		2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,
		2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,
		2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,
		2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,
		2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,
		2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,
		2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
		2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,
		2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,
		2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,
		2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,
		2,513,7,513,2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,
		2,519,7,519,2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,
		2,525,7,525,2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,
		2,531,7,531,2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,
		2,537,7,537,2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,
		2,543,7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,
		2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
		2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,
		2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,
		2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,
		2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,7,578,
		2,579,7,579,2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,7,584,
		2,585,7,585,2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,7,590,
		2,591,7,591,2,592,7,592,2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,
		2,597,7,597,2,598,7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,
		2,603,7,603,2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,
		2,609,7,609,2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,
		2,615,7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,7,620,
		2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,2,626,7,626,
		2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,7,631,2,632,7,632,
		2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,2,637,7,637,2,638,7,638,
		2,639,7,639,2,640,7,640,2,641,7,641,2,642,7,642,2,643,7,643,2,644,7,644,
		2,645,7,645,2,646,7,646,2,647,7,647,2,648,7,648,2,649,7,649,2,650,7,650,
		2,651,7,651,2,652,7,652,2,653,7,653,2,654,7,654,2,655,7,655,2,656,7,656,
		2,657,7,657,2,658,7,658,2,659,7,659,2,660,7,660,2,661,7,661,2,662,7,662,
		2,663,7,663,2,664,7,664,2,665,7,665,2,666,7,666,2,667,7,667,2,668,7,668,
		2,669,7,669,2,670,7,670,2,671,7,671,2,672,7,672,2,673,7,673,2,674,7,674,
		2,675,7,675,2,676,7,676,2,677,7,677,2,678,7,678,2,679,7,679,2,680,7,680,
		2,681,7,681,2,682,7,682,2,683,7,683,2,684,7,684,2,685,7,685,2,686,7,686,
		2,687,7,687,2,688,7,688,2,689,7,689,2,690,7,690,2,691,7,691,2,692,7,692,
		2,693,7,693,2,694,7,694,2,695,7,695,2,696,7,696,2,697,7,697,2,698,7,698,
		2,699,7,699,2,700,7,700,2,701,7,701,2,702,7,702,2,703,7,703,2,704,7,704,
		2,705,7,705,2,706,7,706,2,707,7,707,2,708,7,708,2,709,7,709,2,710,7,710,
		2,711,7,711,2,712,7,712,2,713,7,713,2,714,7,714,2,715,7,715,2,716,7,716,
		2,717,7,717,2,718,7,718,1,0,1,0,1,0,1,1,1,1,1,2,3,2,1445,8,2,1,2,1,2,3,
		2,1449,8,2,5,2,1451,8,2,10,2,12,2,1454,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,1580,8,3,1,4,1,4,1,
		4,1,5,1,5,1,5,1,5,3,5,1589,8,5,1,5,1,5,1,6,1,6,1,7,5,7,1596,8,7,10,7,12,
		7,1599,9,7,1,8,5,8,1602,8,8,10,8,12,8,1605,9,8,1,9,1,9,1,9,3,9,1610,8,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,1625,8,9,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,1637,8,10,1,11,1,11,
		1,11,1,11,3,11,1643,8,11,1,11,1,11,1,12,1,12,1,12,1,12,3,12,1651,8,12,
		1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,1662,8,14,1,14,1,14,
		3,14,1666,8,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,1674,8,15,1,15,1,15,
		1,16,1,16,1,16,1,16,3,16,1682,8,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,3,19,1700,8,19,1,19,3,19,
		1703,8,19,1,19,1,19,1,19,3,19,1708,8,19,1,19,1,19,1,20,1,20,1,21,5,21,
		1715,8,21,10,21,12,21,1718,9,21,1,22,1,22,1,22,1,22,1,22,1,22,3,22,1726,
		8,22,1,23,1,23,3,23,1730,8,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,3,24,1742,8,24,1,25,1,25,1,25,1,25,3,25,1748,8,25,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,1764,
		8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,1777,
		8,26,1,27,1,27,1,27,5,27,1782,8,27,10,27,12,27,1785,9,27,1,28,1,28,1,28,
		5,28,1790,8,28,10,28,12,28,1793,9,28,1,29,1,29,3,29,1797,8,29,1,30,1,30,
		1,30,1,30,1,30,3,30,1804,8,30,1,31,1,31,1,31,1,31,3,31,1810,8,31,1,32,
		1,32,1,32,1,32,1,32,3,32,1817,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,3,32,1828,8,32,1,33,1,33,3,33,1832,8,33,1,34,1,34,3,34,1836,
		8,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1849,
		8,36,1,37,1,37,3,37,1853,8,37,1,38,1,38,1,38,3,38,1858,8,38,1,39,1,39,
		1,39,3,39,1863,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
		3,40,1875,8,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,3,42,1884,8,42,1,43,
		1,43,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,46,3,46,1897,8,46,1,46,
		1,46,1,46,3,46,1902,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
		3,46,1913,8,46,1,46,1,46,1,46,1,46,3,46,1919,8,46,1,46,1,46,1,46,1,46,
		3,46,1925,8,46,1,46,1,46,1,46,3,46,1930,8,46,1,46,1,46,1,46,1,46,1,46,
		1,46,1,46,1,46,1,46,3,46,1941,8,46,1,46,1,46,1,46,1,46,3,46,1947,8,46,
		1,46,1,46,1,46,1,46,3,46,1953,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
		3,46,1962,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1972,8,46,
		1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,
		1987,8,46,1,46,1,46,1,46,1,46,3,46,1993,8,46,1,46,1,46,1,46,1,46,1,46,
		3,46,2000,8,46,1,46,1,46,1,46,3,46,2005,8,46,1,47,1,47,1,47,5,47,2010,
		8,47,10,47,12,47,2013,9,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,
		2023,8,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2047,8,50,1,50,
		1,50,1,50,1,50,1,50,3,50,2054,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		3,50,2063,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2072,8,50,1,50,
		1,50,1,50,1,50,1,50,1,50,3,50,2080,8,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,3,50,2090,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2099,
		8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2108,8,50,1,50,1,50,1,50,
		1,50,1,50,1,50,3,50,2116,8,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2124,
		8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2133,8,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,3,50,2142,8,50,1,50,1,50,3,50,2146,8,50,1,50,1,50,
		1,50,1,50,1,50,3,50,2153,8,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2161,
		8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2171,8,50,1,50,1,50,
		1,50,1,50,3,50,2177,8,50,1,50,1,50,3,50,2181,8,50,1,50,1,50,3,50,2185,
		8,50,1,50,1,50,3,50,2189,8,50,1,50,1,50,3,50,2193,8,50,1,50,1,50,1,50,
		3,50,2198,8,50,1,50,3,50,2201,8,50,1,50,1,50,3,50,2205,8,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,3,50,2226,8,50,1,50,1,50,1,50,1,50,3,50,2232,8,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2327,8,50,1,51,1,51,1,51,
		1,51,1,51,3,51,2334,8,51,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,
		1,55,1,55,1,55,1,55,1,55,3,55,2350,8,55,1,56,1,56,1,56,1,56,1,57,1,57,
		1,57,1,58,1,58,1,58,5,58,2362,8,58,10,58,12,58,2365,9,58,1,59,1,59,1,59,
		1,59,1,59,1,59,1,59,3,59,2374,8,59,3,59,2376,8,59,1,60,4,60,2379,8,60,
		11,60,12,60,2380,1,61,1,61,3,61,2385,8,61,1,61,3,61,2388,8,61,1,61,1,61,
		1,61,1,61,3,61,2394,8,61,3,61,2396,8,61,1,62,1,62,1,62,1,62,1,62,1,62,
		1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
		1,62,1,62,1,62,1,62,1,62,1,62,3,62,2424,8,62,1,63,1,63,1,63,1,64,1,64,
		1,64,5,64,2432,8,64,10,64,12,64,2435,9,64,1,65,1,65,1,65,1,65,1,65,1,66,
		1,66,1,66,5,66,2445,8,66,10,66,12,66,2448,9,66,1,67,1,67,1,67,1,67,3,67,
		2454,8,67,1,67,1,67,1,67,1,67,3,67,2460,8,67,1,67,1,67,3,67,2464,8,67,
		1,67,1,67,1,67,1,67,3,67,2470,8,67,1,67,1,67,1,67,3,67,2475,8,67,1,67,
		3,67,2478,8,67,3,67,2480,8,67,1,68,1,68,1,68,3,68,2485,8,68,1,69,1,69,
		3,69,2489,8,69,1,69,1,69,3,69,2493,8,69,1,69,1,69,3,69,2497,8,69,1,69,
		1,69,3,69,2501,8,69,1,69,3,69,2504,8,69,1,69,1,69,3,69,2508,8,69,1,69,
		1,69,1,69,1,69,1,69,1,69,3,69,2516,8,69,1,69,1,69,3,69,2520,8,69,1,69,
		1,69,3,69,2524,8,69,1,70,1,70,1,71,1,71,1,72,1,72,1,72,3,72,2533,8,72,
		1,73,1,73,1,73,1,73,1,73,3,73,2540,8,73,1,74,5,74,2543,8,74,10,74,12,74,
		2546,9,74,1,75,1,75,1,75,1,75,3,75,2552,8,75,1,75,1,75,1,75,3,75,2557,
		8,75,1,75,1,75,1,75,1,75,1,75,3,75,2564,8,75,1,75,1,75,1,75,3,75,2569,
		8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
		1,75,1,75,1,75,3,75,2587,8,75,1,76,1,76,1,77,3,77,2592,8,77,1,77,1,77,
		1,77,1,78,1,78,1,79,1,79,1,79,5,79,2602,8,79,10,79,12,79,2605,9,79,1,80,
		1,80,3,80,2609,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2618,8,81,
		1,82,1,82,1,82,5,82,2623,8,82,10,82,12,82,2626,9,82,1,83,1,83,1,84,1,84,
		3,84,2632,8,84,1,84,1,84,1,84,1,84,3,84,2638,8,84,1,84,1,84,1,84,3,84,
		2643,8,84,1,84,1,84,3,84,2647,8,84,1,84,3,84,2650,8,84,1,84,3,84,2653,
		8,84,1,84,3,84,2656,8,84,1,84,3,84,2659,8,84,1,84,3,84,2662,8,84,1,84,
		1,84,1,84,3,84,2667,8,84,1,84,3,84,2670,8,84,1,84,3,84,2673,8,84,1,84,
		3,84,2676,8,84,1,84,3,84,2679,8,84,1,84,3,84,2682,8,84,1,84,1,84,1,84,
		1,84,3,84,2688,8,84,1,84,1,84,3,84,2692,8,84,1,84,3,84,2695,8,84,1,84,
		3,84,2698,8,84,1,84,3,84,2701,8,84,1,84,3,84,2704,8,84,3,84,2706,8,84,
		1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,2715,8,85,1,86,1,86,1,87,1,87,
		1,87,1,87,1,88,1,88,1,88,5,88,2726,8,88,10,88,12,88,2729,9,88,1,89,1,89,
		1,89,5,89,2734,8,89,10,89,12,89,2737,9,89,1,90,1,90,1,90,3,90,2742,8,90,
		1,91,1,91,3,91,2746,8,91,1,92,1,92,1,92,3,92,2751,8,92,1,92,1,92,1,93,
		1,93,1,93,3,93,2758,8,93,1,93,1,93,1,94,5,94,2763,8,94,10,94,12,94,2766,
		9,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2776,8,95,1,96,1,96,
		1,96,1,96,1,96,3,96,2783,8,96,1,96,3,96,2786,8,96,1,96,1,96,1,96,3,96,
		2791,8,96,1,96,3,96,2794,8,96,1,96,1,96,1,96,1,96,1,96,3,96,2801,8,96,
		1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,2810,8,96,1,96,1,96,1,96,1,96,
		1,96,3,96,2817,8,96,1,96,1,96,1,96,3,96,2822,8,96,1,96,3,96,2825,8,96,
		1,96,3,96,2828,8,96,3,96,2830,8,96,1,97,1,97,1,97,3,97,2835,8,97,1,98,
		1,98,1,98,1,98,1,98,3,98,2842,8,98,1,99,1,99,1,99,1,99,1,100,1,100,5,100,
		2850,8,100,10,100,12,100,2853,9,100,1,101,1,101,1,102,1,102,1,102,1,102,
		1,102,3,102,2862,8,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
		1,103,1,103,1,103,3,103,2875,8,103,1,103,3,103,2878,8,103,1,103,3,103,
		2881,8,103,1,103,1,103,1,103,1,103,1,103,3,103,2888,8,103,1,103,1,103,
		1,103,1,103,1,103,1,103,3,103,2896,8,103,1,103,3,103,2899,8,103,1,103,
		3,103,2902,8,103,1,103,1,103,1,103,1,103,1,103,3,103,2909,8,103,1,103,
		1,103,3,103,2913,8,103,1,103,1,103,1,103,1,103,3,103,2919,8,103,1,103,
		3,103,2922,8,103,1,103,3,103,2925,8,103,1,103,3,103,2928,8,103,1,103,1,
		103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,2940,8,103,1,
		103,3,103,2943,8,103,1,103,3,103,2946,8,103,1,103,1,103,3,103,2950,8,103,
		1,104,1,104,1,104,1,105,1,105,1,105,1,105,1,106,1,106,1,106,5,106,2962,
		8,106,10,106,12,106,2965,9,106,1,107,1,107,1,108,1,108,1,108,1,108,1,108,
		1,109,1,109,1,109,1,110,1,110,1,110,5,110,2980,8,110,10,110,12,110,2983,
		9,110,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,2993,8,111,
		1,112,1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
		1,113,3,113,3008,8,113,1,114,1,114,1,114,1,114,1,115,1,115,1,115,1,115,
		1,116,1,116,1,116,1,116,1,116,1,116,3,116,3024,8,116,1,117,1,117,1,117,
		1,117,1,117,1,118,1,118,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,120,
		1,120,1,120,5,120,3043,8,120,10,120,12,120,3046,9,120,1,121,1,121,3,121,
		3050,8,121,1,121,3,121,3053,8,121,1,121,1,121,3,121,3057,8,121,1,121,3,
		121,3060,8,121,1,121,1,121,1,121,1,121,3,121,3066,8,121,1,121,3,121,3069,
		8,121,3,121,3071,8,121,1,122,1,122,1,122,1,123,1,123,1,123,1,123,3,123,
		3080,8,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,3089,8,124,
		1,125,1,125,1,125,1,126,1,126,1,126,1,126,1,126,1,127,1,127,1,127,1,127,
		1,128,1,128,1,128,1,128,1,128,3,128,3108,8,128,1,128,1,128,3,128,3112,
		8,128,1,128,1,128,1,128,1,128,1,128,1,129,1,129,1,129,1,129,3,129,3123,
		8,129,1,129,1,129,1,129,1,129,1,129,1,130,1,130,3,130,3132,8,130,1,130,
		1,130,1,130,1,130,3,130,3138,8,130,1,130,1,130,1,130,1,130,3,130,3144,
		8,130,1,131,1,131,3,131,3148,8,131,1,131,3,131,3151,8,131,1,131,3,131,
		3154,8,131,1,131,3,131,3157,8,131,1,131,3,131,3160,8,131,1,132,1,132,1,
		132,1,132,3,132,3166,8,132,1,133,1,133,3,133,3170,8,133,1,133,1,133,1,
		133,1,133,1,133,3,133,3177,8,133,1,133,1,133,1,133,1,133,3,133,3183,8,
		133,1,134,1,134,3,134,3187,8,134,1,134,3,134,3190,8,134,1,134,3,134,3193,
		8,134,1,134,3,134,3196,8,134,1,135,1,135,1,136,1,136,1,136,1,136,3,136,
		3204,8,136,1,136,1,136,3,136,3208,8,136,1,137,1,137,3,137,3212,8,137,1,
		137,1,137,1,137,1,137,3,137,3218,8,137,1,137,1,137,3,137,3222,8,137,1,
		138,1,138,1,138,1,138,3,138,3228,8,138,1,138,1,138,1,138,1,139,1,139,1,
		140,1,140,1,140,1,140,1,141,4,141,3240,8,141,11,141,12,141,3241,1,142,
		1,142,1,142,1,142,1,142,1,142,1,142,3,142,3251,8,142,1,142,1,142,1,142,
		1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,
		3,142,3268,8,142,1,142,1,142,1,142,3,142,3273,8,142,1,142,3,142,3276,8,
		142,3,142,3278,8,142,1,143,1,143,1,144,1,144,1,144,1,144,1,144,1,144,3,
		144,3288,8,144,1,145,1,145,1,145,5,145,3293,8,145,10,145,12,145,3296,9,
		145,1,146,1,146,3,146,3300,8,146,1,146,3,146,3303,8,146,1,146,3,146,3306,
		8,146,1,146,1,146,1,146,1,146,1,146,3,146,3313,8,146,1,146,3,146,3316,
		8,146,3,146,3318,8,146,1,147,1,147,1,148,1,148,3,148,3324,8,148,1,149,
		1,149,1,149,1,150,1,150,1,150,1,150,3,150,3333,8,150,1,151,1,151,1,152,
		1,152,1,153,1,153,1,153,1,153,3,153,3343,8,153,1,153,1,153,1,153,3,153,
		3348,8,153,1,154,1,154,1,154,1,155,1,155,1,155,1,155,3,155,3357,8,155,
		1,155,1,155,1,156,1,156,1,156,1,156,1,156,3,156,3366,8,156,1,156,1,156,
		3,156,3370,8,156,1,156,1,156,1,157,5,157,3375,8,157,10,157,12,157,3378,
		9,157,1,158,1,158,1,158,1,158,1,158,1,158,1,158,3,158,3387,8,158,1,159,
		1,159,1,159,1,159,1,159,1,159,1,160,5,160,3396,8,160,10,160,12,160,3399,
		9,160,1,161,1,161,1,161,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
		1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
		1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
		1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
		1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
		1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
		1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
		1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
		1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
		3,162,3508,8,162,1,163,1,163,1,163,1,163,1,163,1,163,3,163,3516,8,163,
		1,163,3,163,3519,8,163,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		3,164,3529,8,164,1,165,4,165,3532,8,165,11,165,12,165,3533,1,166,1,166,
		1,167,1,167,1,167,1,167,1,167,1,167,3,167,3544,8,167,1,167,1,167,1,167,
		1,167,1,167,1,167,1,167,1,167,1,167,3,167,3555,8,167,1,168,1,168,1,168,
		1,168,1,168,1,169,1,169,1,169,5,169,3565,8,169,10,169,12,169,3568,9,169,
		1,170,1,170,1,170,1,170,1,170,1,171,1,171,1,171,5,171,3578,8,171,10,171,
		12,171,3581,9,171,1,172,1,172,1,172,1,172,1,172,1,172,1,172,3,172,3590,
		8,172,1,173,1,173,1,173,1,174,1,174,1,175,1,175,1,176,1,176,1,176,1,176,
		3,176,3603,8,176,1,176,3,176,3606,8,176,1,176,1,176,1,176,1,176,1,176,
		3,176,3613,8,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,3622,
		8,176,1,176,3,176,3625,8,176,1,176,1,176,1,176,1,176,1,176,3,176,3632,
		8,176,3,176,3634,8,176,1,177,1,177,1,177,1,178,1,178,1,178,3,178,3642,
		8,178,1,179,1,179,1,180,1,180,1,180,1,180,1,180,1,180,3,180,3652,8,180,
		3,180,3654,8,180,1,181,1,181,1,181,1,181,1,181,1,181,3,181,3662,8,181,
		1,181,1,181,3,181,3666,8,181,1,181,1,181,1,181,3,181,3671,8,181,1,181,
		1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,3,181,3682,8,181,1,181,
		1,181,3,181,3686,8,181,1,181,1,181,1,181,3,181,3691,8,181,1,181,1,181,
		1,181,1,181,1,181,1,181,1,181,1,181,3,181,3701,8,181,1,181,1,181,1,181,
		1,181,3,181,3707,8,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
		1,181,1,181,1,181,3,181,3720,8,181,1,181,1,181,1,181,1,181,3,181,3726,
		8,181,3,181,3728,8,181,1,182,1,182,1,182,1,182,1,182,3,182,3735,8,182,
		1,182,1,182,1,182,1,182,1,182,1,182,3,182,3743,8,182,1,183,1,183,1,183,
		3,183,3748,8,183,1,184,1,184,1,184,1,184,1,184,1,185,1,185,1,185,1,185,
		1,185,1,185,1,185,1,185,3,185,3763,8,185,1,185,1,185,1,185,1,185,1,185,
		1,185,1,185,1,185,1,185,1,185,1,185,3,185,3776,8,185,3,185,3778,8,185,
		1,186,1,186,3,186,3782,8,186,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
		1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,
		3802,8,187,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,189,
		1,189,1,189,1,189,1,189,1,189,3,189,3819,8,189,1,189,3,189,3822,8,189,
		1,189,3,189,3825,8,189,1,189,3,189,3828,8,189,1,189,3,189,3831,8,189,1,
		190,1,190,1,190,1,190,1,190,1,190,3,190,3839,8,190,1,190,3,190,3842,8,
		190,1,190,3,190,3845,8,190,1,191,1,191,1,191,1,191,1,191,1,192,1,192,1,
		192,1,192,1,192,1,192,1,193,1,193,1,193,1,194,1,194,1,194,1,195,1,195,
		1,195,1,196,1,196,1,196,1,197,1,197,1,198,1,198,1,198,1,198,1,198,1,198,
		1,198,1,198,1,198,1,199,1,199,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
		1,200,3,200,3891,8,200,1,200,3,200,3894,8,200,1,200,3,200,3897,8,200,1,
		200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
		1,200,1,200,1,200,1,200,3,200,3915,8,200,1,200,1,200,1,200,1,200,1,200,
		3,200,3922,8,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,3,200,3931,
		8,200,1,201,1,201,1,201,1,201,3,201,3937,8,201,1,202,1,202,1,202,5,202,
		3942,8,202,10,202,12,202,3945,9,202,1,203,1,203,1,203,1,203,1,203,1,203,
		1,203,3,203,3954,8,203,1,204,1,204,1,204,1,205,4,205,3960,8,205,11,205,
		12,205,3961,1,206,1,206,1,206,3,206,3967,8,206,1,206,1,206,1,207,1,207,
		1,208,1,208,1,209,1,209,1,210,1,210,3,210,3979,8,210,1,210,1,210,1,211,
		1,211,1,212,1,212,1,213,1,213,1,213,1,213,1,213,1,214,1,214,1,215,1,215,
		3,215,3996,8,215,1,215,1,215,5,215,4000,8,215,10,215,12,215,4003,9,215,
		1,216,1,216,1,216,1,216,3,216,4009,8,216,1,217,1,217,1,217,1,218,5,218,
		4015,8,218,10,218,12,218,4018,9,218,1,219,1,219,1,219,1,219,1,219,1,219,
		1,219,1,219,1,219,1,219,1,219,3,219,4031,8,219,1,220,1,220,1,220,1,220,
		1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
		1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,3,220,4059,
		8,220,1,221,1,221,1,221,5,221,4064,8,221,10,221,12,221,4067,9,221,1,222,
		1,222,1,222,1,222,1,222,1,222,1,223,1,223,1,223,5,223,4078,8,223,10,223,
		12,223,4081,9,223,1,224,1,224,1,224,1,224,1,224,1,224,1,225,1,225,1,225,
		1,225,1,225,1,225,3,225,4095,8,225,1,226,1,226,1,226,1,226,1,226,1,226,
		1,226,1,226,1,226,1,227,1,227,3,227,4108,8,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,3,227,4117,8,227,1,227,1,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,3,227,4142,8,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,3,227,4153,8,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
		1,227,3,227,4220,8,227,1,228,1,228,1,228,1,228,1,229,1,229,1,229,5,229,
		4229,8,229,10,229,12,229,4232,9,229,1,230,1,230,1,230,3,230,4237,8,230,
		1,231,1,231,1,231,1,231,1,231,1,231,3,231,4245,8,231,1,232,1,232,1,232,
		1,232,1,233,1,233,1,233,5,233,4254,8,233,10,233,12,233,4257,9,233,1,234,
		1,234,1,234,1,234,1,235,1,235,1,236,1,236,1,236,5,236,4268,8,236,10,236,
		12,236,4271,9,236,1,237,1,237,1,237,1,237,1,237,1,237,3,237,4279,8,237,
		1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,3,237,4289,8,237,1,237,
		1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,3,237,4301,8,237,
		1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
		1,237,3,237,4316,8,237,1,238,1,238,1,238,1,238,1,239,1,239,1,239,1,239,
		1,239,3,239,4327,8,239,1,239,1,239,1,239,1,239,1,239,1,239,3,239,4335,
		8,239,1,239,1,239,1,239,1,240,1,240,1,240,5,240,4343,8,240,10,240,12,240,
		4346,9,240,1,241,1,241,1,241,1,241,3,241,4352,8,241,1,241,3,241,4355,8,
		241,1,241,1,241,1,241,1,241,3,241,4361,8,241,1,241,3,241,4364,8,241,1,
		241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,
		1,241,3,241,4379,8,241,1,242,1,242,1,243,1,243,1,243,1,244,1,244,1,244,
		1,244,1,244,1,244,3,244,4392,8,244,1,245,1,245,1,246,1,246,1,246,1,246,
		1,246,1,246,1,246,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,3,247,4421,8,247,
		1,248,1,248,1,248,5,248,4426,8,248,10,248,12,248,4429,9,248,1,249,1,249,
		1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,3,249,4443,
		8,249,1,250,1,250,1,250,1,250,1,250,1,250,1,250,3,250,4452,8,250,1,250,
		1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,3,250,4463,8,250,3,250,
		4465,8,250,1,251,1,251,1,251,1,251,1,251,1,251,1,251,3,251,4474,8,251,
		1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,3,251,4485,8,251,
		3,251,4487,8,251,1,252,1,252,1,252,1,252,1,252,3,252,4494,8,252,1,253,
		1,253,1,253,1,253,1,253,1,253,1,253,1,254,1,254,1,254,1,254,1,254,1,254,
		3,254,4509,8,254,1,254,1,254,1,254,1,254,3,254,4515,8,254,1,254,1,254,
		1,254,1,254,1,254,1,254,3,254,4523,8,254,1,254,1,254,1,254,1,254,3,254,
		4529,8,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,4537,8,254,1,254,
		1,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,4547,8,254,1,254,1,254,
		1,254,1,254,3,254,4553,8,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,
		4561,8,254,1,254,1,254,1,254,1,254,3,254,4567,8,254,1,254,1,254,1,254,
		1,254,1,254,1,254,3,254,4575,8,254,1,254,1,254,1,254,1,254,1,254,3,254,
		4582,8,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,4591,8,254,
		3,254,4593,8,254,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,
		1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,
		1,255,1,255,3,255,4618,8,255,1,256,1,256,1,256,1,256,1,256,3,256,4625,
		8,256,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,3,257,4636,
		8,257,1,257,1,257,1,257,1,257,3,257,4642,8,257,1,258,1,258,1,259,1,259,
		1,259,5,259,4649,8,259,10,259,12,259,4652,9,259,1,260,1,260,3,260,4656,
		8,260,1,261,1,261,4,261,4660,8,261,11,261,12,261,4661,1,262,1,262,1,262,
		5,262,4667,8,262,10,262,12,262,4670,9,262,1,263,1,263,3,263,4674,8,263,
		1,263,1,263,3,263,4678,8,263,1,263,3,263,4681,8,263,1,264,1,264,1,264,
		1,264,3,264,4687,8,264,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
		1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
		1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
		1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
		1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
		1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
		1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
		1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
		1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
		1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
		1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
		1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
		1,265,1,265,1,265,1,265,1,265,1,265,1,265,3,265,4836,8,265,1,266,1,266,
		3,266,4840,8,266,1,267,1,267,1,267,3,267,4845,8,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,3,267,4856,8,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,3,267,4867,8,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,3,267,4878,8,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,3,267,4889,8,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,3,267,4900,8,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,3,267,4911,8,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,3,267,4922,8,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,3,267,4934,8,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,3,267,4945,8,267,1,267,1,267,
		1,267,1,267,1,267,1,267,3,267,4953,8,267,1,268,1,268,1,268,1,269,1,269,
		3,269,4960,8,269,1,270,1,270,1,270,1,270,3,270,4966,8,270,1,271,1,271,
		1,271,1,271,1,271,1,271,3,271,4974,8,271,1,271,1,271,1,271,3,271,4979,
		8,271,1,271,1,271,1,271,3,271,4984,8,271,1,271,1,271,1,271,3,271,4989,
		8,271,1,271,1,271,1,271,1,271,3,271,4995,8,271,1,271,1,271,1,271,1,271,
		1,271,3,271,5002,8,271,1,271,1,271,1,271,1,271,3,271,5008,8,271,1,271,
		1,271,1,271,1,271,3,271,5014,8,271,1,271,1,271,1,271,3,271,5019,8,271,
		1,271,1,271,1,271,1,271,3,271,5025,8,271,1,271,1,271,1,271,1,271,1,271,
		3,271,5032,8,271,1,271,1,271,1,271,3,271,5037,8,271,1,271,1,271,1,271,
		1,271,3,271,5043,8,271,1,271,1,271,1,271,1,271,1,271,3,271,5050,8,271,
		1,271,3,271,5053,8,271,1,272,1,272,1,273,1,273,1,274,1,274,1,274,1,274,
		1,274,1,274,1,274,3,274,5066,8,274,1,275,1,275,1,275,1,275,1,275,1,275,
		1,275,3,275,5075,8,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,
		1,275,1,275,3,275,5087,8,275,3,275,5089,8,275,1,276,1,276,1,276,1,276,
		1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,3,276,
		5106,8,276,1,277,1,277,1,277,5,277,5111,8,277,10,277,12,277,5114,9,277,
		1,278,1,278,3,278,5118,8,278,1,278,1,278,3,278,5122,8,278,1,278,1,278,
		3,278,5126,8,278,1,278,1,278,3,278,5130,8,278,3,278,5132,8,278,1,279,1,
		279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
		1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
		1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
		1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
		1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,3,279,5192,8,279,
		1,280,1,280,1,280,5,280,5197,8,280,10,280,12,280,5200,9,280,1,281,1,281,
		1,281,3,281,5205,8,281,1,282,1,282,1,282,1,282,1,283,1,283,1,283,1,283,
		1,283,3,283,5216,8,283,1,283,3,283,5219,8,283,1,284,1,284,1,284,1,284,
		1,284,3,284,5226,8,284,1,284,3,284,5229,8,284,1,284,1,284,1,284,1,284,
		1,284,1,284,1,284,1,284,3,284,5239,8,284,1,284,3,284,5242,8,284,3,284,
		5244,8,284,1,285,1,285,1,285,1,285,1,286,1,286,1,286,1,286,1,287,1,287,
		1,287,1,287,1,287,1,287,1,288,5,288,5261,8,288,10,288,12,288,5264,9,288,
		1,289,1,289,1,289,1,289,1,289,1,289,1,289,1,289,1,289,3,289,5275,8,289,
		1,290,1,290,1,290,1,290,1,290,1,290,1,290,3,290,5284,8,290,1,290,1,290,
		1,290,1,290,1,290,1,290,1,290,3,290,5293,8,290,1,290,1,290,1,290,1,290,
		1,290,1,290,1,290,1,290,1,290,1,290,3,290,5305,8,290,3,290,5307,8,290,
		1,291,1,291,1,292,1,292,3,292,5313,8,292,1,292,1,292,3,292,5317,8,292,
		1,292,3,292,5320,8,292,1,292,1,292,1,292,3,292,5325,8,292,1,292,1,292,
		1,292,1,292,3,292,5331,8,292,1,292,3,292,5334,8,292,1,292,3,292,5337,8,
		292,1,292,3,292,5340,8,292,1,292,1,292,3,292,5344,8,292,1,292,1,292,3,
		292,5348,8,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,3,292,5357,8,
		292,1,292,1,292,1,292,1,292,3,292,5363,8,292,1,292,3,292,5366,8,292,1,
		292,3,292,5369,8,292,1,292,3,292,5372,8,292,3,292,5374,8,292,1,293,1,293,
		1,294,1,294,1,295,1,295,1,296,1,296,1,297,1,297,1,297,1,298,1,298,1,298,
		5,298,5390,8,298,10,298,12,298,5393,9,298,1,299,3,299,5396,8,299,1,299,
		3,299,5399,8,299,1,299,3,299,5402,8,299,1,299,3,299,5405,8,299,1,299,3,
		299,5408,8,299,1,299,1,299,1,299,3,299,5413,8,299,1,299,3,299,5416,8,299,
		3,299,5418,8,299,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,
		1,300,1,300,3,300,5431,8,300,1,301,1,301,1,301,1,301,1,301,1,302,1,302,
		1,302,5,302,5441,8,302,10,302,12,302,5444,9,302,1,303,1,303,1,303,1,304,
		1,304,1,305,1,305,1,306,1,306,1,306,1,306,3,306,5457,8,306,1,307,1,307,
		3,307,5461,8,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,
		1,307,3,307,5473,8,307,3,307,5475,8,307,1,307,1,307,1,308,1,308,1,308,
		1,309,1,309,3,309,5484,8,309,1,309,1,309,1,310,1,310,1,310,5,310,5491,
		8,310,10,310,12,310,5494,9,310,1,311,1,311,1,311,5,311,5499,8,311,10,311,
		12,311,5502,9,311,1,312,1,312,1,312,1,312,1,312,1,312,3,312,5510,8,312,
		3,312,5512,8,312,1,313,1,313,3,313,5516,8,313,1,313,1,313,1,314,1,314,
		1,314,5,314,5523,8,314,10,314,12,314,5526,9,314,1,315,1,315,3,315,5530,
		8,315,1,315,1,315,1,315,1,315,3,315,5536,8,315,1,315,1,315,1,315,3,315,
		5541,8,315,1,316,1,316,3,316,5545,8,316,1,316,1,316,1,316,3,316,5550,8,
		316,1,317,1,317,1,318,1,318,1,319,1,319,3,319,5558,8,319,1,319,1,319,1,
		319,1,319,1,319,3,319,5565,8,319,1,320,1,320,1,320,3,320,5570,8,320,1,
		321,1,321,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,
		1,322,3,322,5585,8,322,1,322,1,322,1,323,1,323,1,323,5,323,5592,8,323,
		10,323,12,323,5595,9,323,1,324,1,324,1,324,1,325,1,325,1,325,5,325,5603,
		8,325,10,325,12,325,5606,9,325,1,326,4,326,5609,8,326,11,326,12,326,5610,
		1,326,1,326,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,
		1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,
		1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,
		1,327,3,327,5650,8,327,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,
		3,328,5660,8,328,1,329,1,329,1,329,1,329,1,329,3,329,5667,8,329,1,330,
		1,330,1,330,1,330,1,330,1,330,1,330,5,330,5676,8,330,10,330,12,330,5679,
		9,330,1,331,1,331,1,331,1,332,1,332,1,332,1,333,1,333,1,333,5,333,5690,
		8,333,10,333,12,333,5693,9,333,1,334,1,334,1,334,1,334,1,334,3,334,5700,
		8,334,1,335,4,335,5703,8,335,11,335,12,335,5704,1,336,1,336,1,337,1,337,
		1,337,1,337,3,337,5713,8,337,1,337,1,337,1,337,1,337,1,337,1,337,3,337,
		5721,8,337,1,337,1,337,1,337,1,337,3,337,5727,8,337,1,337,1,337,1,337,
		1,337,1,337,1,337,3,337,5735,8,337,1,337,1,337,1,337,1,337,3,337,5741,
		8,337,1,337,1,337,1,337,1,337,1,337,1,337,3,337,5749,8,337,3,337,5751,
		8,337,1,338,1,338,1,338,1,338,3,338,5757,8,338,1,338,1,338,1,338,1,338,
		1,338,1,338,3,338,5765,8,338,3,338,5767,8,338,1,339,1,339,1,339,1,339,
		3,339,5773,8,339,1,339,1,339,1,339,1,339,1,339,1,339,3,339,5781,8,339,
		3,339,5783,8,339,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,
		1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,
		1,340,3,340,5807,8,340,1,341,1,341,1,341,5,341,5812,8,341,10,341,12,341,
		5815,9,341,1,341,1,341,1,342,1,342,1,342,5,342,5822,8,342,10,342,12,342,
		5825,9,342,1,343,1,343,1,343,1,344,1,344,1,344,1,345,4,345,5834,8,345,
		11,345,12,345,5835,1,346,1,346,1,346,3,346,5841,8,346,1,347,1,347,1,347,
		1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,3,347,5854,8,347,1,347,
		1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,3,347,5866,8,347,
		1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,3,347,5878,
		8,347,3,347,5880,8,347,1,348,1,348,1,348,1,348,3,348,5886,8,348,1,349,
		1,349,1,349,3,349,5891,8,349,1,349,1,349,1,349,1,349,1,349,1,349,3,349,
		5899,8,349,1,350,1,350,1,350,1,351,1,351,3,351,5906,8,351,1,351,1,351,
		1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,352,1,352,1,352,1,352,1,352,
		1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,
		1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,
		1,352,1,352,1,352,1,352,1,352,3,352,5951,8,352,1,353,1,353,1,353,3,353,
		5956,8,353,1,353,1,353,1,353,1,353,1,353,3,353,5963,8,353,1,354,1,354,
		3,354,5967,8,354,1,354,1,354,3,354,5971,8,354,1,354,1,354,1,354,1,354,
		3,354,5977,8,354,1,354,1,354,3,354,5981,8,354,1,354,1,354,1,354,3,354,
		5986,8,354,1,354,1,354,3,354,5990,8,354,1,354,3,354,5993,8,354,3,354,5995,
		8,354,1,355,1,355,1,356,1,356,1,357,1,357,1,357,1,357,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,6017,8,358,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,3,359,6088,8,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,3,359,6283,8,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,3,359,6296,8,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,3,359,6307,8,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,3,359,6320,8,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,3,359,6332,8,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,3,359,6346,8,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,3,359,6378,8,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,3,359,6392,8,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,3,359,6504,8,359,3,359,6506,8,359,1,360,1,360,1,361,1,361,
		1,361,1,362,1,362,1,362,1,362,3,362,6517,8,362,1,362,1,362,1,362,1,362,
		1,362,1,362,1,362,1,362,1,362,3,362,6528,8,362,1,362,1,362,1,362,1,362,
		1,362,1,362,1,362,1,362,1,362,3,362,6539,8,362,1,362,1,362,1,362,1,362,
		1,362,1,362,1,362,1,362,1,362,1,362,1,362,3,362,6552,8,362,1,362,1,362,
		1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,3,362,6564,8,362,1,362,
		1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,3,362,6575,8,362,1,362,
		1,362,1,362,1,362,1,362,3,362,6582,8,362,1,363,1,363,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,3,364,6803,
		8,364,1,365,1,365,1,365,1,365,1,365,1,365,1,365,1,365,1,366,1,366,1,366,
		5,366,6816,8,366,10,366,12,366,6819,9,366,1,367,1,367,1,367,1,367,1,367,
		1,367,1,367,1,367,3,367,6829,8,367,1,368,1,368,1,368,1,368,1,368,3,368,
		6836,8,368,1,369,1,369,1,369,1,369,1,369,1,369,1,369,1,369,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,3,370,6890,8,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
		1,370,1,370,1,370,1,370,3,370,7031,8,370,1,371,1,371,1,371,1,371,3,371,
		7037,8,371,1,371,3,371,7040,8,371,1,372,1,372,1,373,1,373,1,373,1,373,
		1,373,1,373,3,373,7050,8,373,1,374,1,374,1,374,1,374,1,374,1,374,1,374,
		1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,
		1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,3,374,7079,8,374,1,375,
		1,375,1,375,1,375,1,375,1,375,1,375,1,375,3,375,7089,8,375,1,376,1,376,
		1,376,5,376,7094,8,376,10,376,12,376,7097,9,376,1,377,1,377,1,378,1,378,
		1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,
		1,378,1,378,1,378,1,378,3,378,7119,8,378,1,378,1,378,1,378,1,378,1,378,
		1,378,1,378,3,378,7128,8,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,
		1,378,1,378,1,378,3,378,7140,8,378,1,379,1,379,1,379,1,379,3,379,7146,
		8,379,1,379,1,379,1,379,1,379,1,379,1,379,3,379,7154,8,379,3,379,7156,
		8,379,1,380,1,380,3,380,7160,8,380,1,380,1,380,1,380,1,380,1,380,1,380,
		1,380,1,380,3,380,7170,8,380,1,380,1,380,3,380,7174,8,380,1,380,1,380,
		1,381,1,381,1,381,1,381,1,381,1,381,3,381,7184,8,381,1,382,3,382,7187,
		8,382,1,382,1,382,3,382,7191,8,382,5,382,7193,8,382,10,382,12,382,7196,
		9,382,1,383,1,383,1,383,1,383,1,383,3,383,7203,8,383,1,384,1,384,1,385,
		1,385,1,386,1,386,1,387,1,387,1,387,3,387,7214,8,387,1,388,1,388,1,388,
		1,389,1,389,1,389,1,390,1,390,1,390,1,390,3,390,7226,8,390,1,391,1,391,
		3,391,7230,8,391,1,391,3,391,7233,8,391,1,391,1,391,3,391,7237,8,391,1,
		391,3,391,7240,8,391,1,391,1,391,1,391,3,391,7245,8,391,1,391,1,391,3,
		391,7249,8,391,1,391,3,391,7252,8,391,1,391,1,391,3,391,7256,8,391,1,391,
		3,391,7259,8,391,1,391,1,391,3,391,7263,8,391,1,391,3,391,7266,8,391,1,
		391,1,391,1,391,1,391,1,391,1,391,1,391,1,391,1,391,3,391,7277,8,391,1,
		391,1,391,1,391,1,391,1,391,3,391,7284,8,391,1,391,1,391,1,391,1,391,1,
		391,1,391,1,391,1,391,1,391,1,391,1,391,3,391,7297,8,391,1,392,1,392,1,
		393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,3,393,7311,8,
		393,1,394,1,394,3,394,7315,8,394,1,394,5,394,7318,8,394,10,394,12,394,
		7321,9,394,1,395,1,395,1,396,1,396,3,396,7327,8,396,1,396,1,396,1,397,
		1,397,1,397,3,397,7334,8,397,1,397,3,397,7337,8,397,1,397,1,397,1,397,
		3,397,7342,8,397,1,397,3,397,7345,8,397,1,397,1,397,1,397,1,397,1,397,
		1,397,1,397,3,397,7354,8,397,3,397,7356,8,397,1,397,1,397,1,397,3,397,
		7361,8,397,1,398,1,398,3,398,7365,8,398,1,398,1,398,1,398,1,399,1,399,
		1,399,1,400,1,400,1,400,1,400,3,400,7377,8,400,1,400,3,400,7380,8,400,
		1,401,1,401,1,402,4,402,7385,8,402,11,402,12,402,7386,1,403,1,403,3,403,
		7391,8,403,1,403,1,403,1,403,3,403,7396,8,403,1,404,1,404,1,404,1,404,
		1,404,1,404,1,404,1,404,3,404,7406,8,404,1,405,1,405,1,406,1,406,1,406,
		1,406,1,406,3,406,7415,8,406,1,406,3,406,7418,8,406,1,406,1,406,1,406,
		3,406,7423,8,406,1,407,1,407,1,407,1,407,1,407,1,408,1,408,1,408,1,408,
		3,408,7434,8,408,1,408,1,408,3,408,7438,8,408,1,408,1,408,1,408,1,408,
		3,408,7444,8,408,1,409,1,409,1,409,5,409,7449,8,409,10,409,12,409,7452,
		9,409,1,410,1,410,1,411,1,411,1,411,1,411,1,411,1,411,1,412,1,412,1,412,
		1,412,1,412,1,413,1,413,1,413,1,413,3,413,7471,8,413,1,413,1,413,1,413,
		1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,
		1,414,1,414,1,414,1,414,3,414,7492,8,414,1,414,1,414,3,414,7496,8,414,
		1,414,1,414,1,414,3,414,7501,8,414,1,415,1,415,1,416,1,416,1,416,1,416,
		1,416,1,416,1,416,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
		1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
		1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
		1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
		1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
		1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
		1,417,1,417,1,417,3,417,7584,8,417,1,418,1,418,1,419,1,419,3,419,7590,
		8,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,420,1,420,
		3,420,7603,8,420,1,420,1,420,3,420,7607,8,420,1,420,1,420,3,420,7611,8,
		420,1,420,1,420,3,420,7615,8,420,1,420,1,420,1,420,1,420,3,420,7621,8,
		420,1,421,1,421,1,421,1,422,1,422,3,422,7628,8,422,1,422,3,422,7631,8,
		422,1,422,3,422,7634,8,422,1,422,3,422,7637,8,422,1,422,3,422,7640,8,422,
		1,422,1,422,1,422,1,422,1,422,3,422,7647,8,422,3,422,7649,8,422,1,423,
		1,423,3,423,7653,8,423,1,423,3,423,7656,8,423,1,423,1,423,1,423,1,423,
		1,423,3,423,7663,8,423,3,423,7665,8,423,1,424,1,424,1,424,5,424,7670,8,
		424,10,424,12,424,7673,9,424,1,425,1,425,1,425,5,425,7678,8,425,10,425,
		12,425,7681,9,425,1,426,1,426,1,427,1,427,3,427,7687,8,427,1,428,1,428,
		1,428,3,428,7692,8,428,1,429,1,429,3,429,7696,8,429,1,430,1,430,3,430,
		7700,8,430,1,431,1,431,3,431,7704,8,431,1,432,1,432,3,432,7708,8,432,1,
		433,1,433,1,434,1,434,1,435,1,435,1,436,1,436,1,437,1,437,1,437,1,437,
		1,438,1,438,3,438,7724,8,438,1,439,1,439,1,439,5,439,7729,8,439,10,439,
		12,439,7732,9,439,1,440,1,440,1,441,1,441,1,441,1,441,1,441,3,441,7741,
		8,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,
		3,441,7754,8,441,1,442,1,442,1,442,1,442,1,442,1,442,1,442,1,442,1,442,
		3,442,7765,8,442,1,443,1,443,1,443,5,443,7770,8,443,10,443,12,443,7773,
		9,443,1,444,1,444,3,444,7777,8,444,1,445,1,445,3,445,7781,8,445,1,446,
		1,446,3,446,7785,8,446,1,447,1,447,1,447,3,447,7790,8,447,1,447,1,447,
		1,447,1,448,1,448,1,448,1,448,1,449,1,449,1,449,1,449,3,449,7803,8,449,
		1,450,1,450,1,450,3,450,7808,8,450,1,450,1,450,3,450,7812,8,450,1,450,
		1,450,1,450,1,450,1,450,1,450,3,450,7820,8,450,1,450,3,450,7823,8,450,
		1,450,1,450,3,450,7827,8,450,1,450,1,450,1,450,1,450,1,450,1,450,1,450,
		1,450,1,450,3,450,7838,8,450,1,450,3,450,7841,8,450,3,450,7843,8,450,1,
		451,1,451,1,451,1,451,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
		1,452,1,452,3,452,7859,8,452,1,453,3,453,7862,8,453,1,453,1,453,1,453,
		1,453,1,453,3,453,7869,8,453,1,453,3,453,7872,8,453,1,454,1,454,1,454,
		3,454,7877,8,454,1,455,1,455,1,455,1,455,1,455,1,455,1,455,1,455,1,455,
		1,455,1,455,1,455,1,455,3,455,7892,8,455,1,455,1,455,1,455,1,455,3,455,
		7898,8,455,1,456,1,456,1,457,1,457,1,457,5,457,7905,8,457,10,457,12,457,
		7908,9,457,1,458,1,458,1,458,1,459,1,459,1,459,3,459,7916,8,459,1,459,
		1,459,1,459,1,459,1,459,3,459,7923,8,459,1,459,3,459,7926,8,459,1,460,
		1,460,1,460,1,460,3,460,7932,8,460,1,460,1,460,1,460,3,460,7937,8,460,
		1,461,1,461,1,461,1,462,1,462,3,462,7944,8,462,1,462,1,462,3,462,7948,
		8,462,1,462,1,462,1,462,3,462,7953,8,462,1,462,3,462,7956,8,462,1,462,
		1,462,1,462,1,462,3,462,7962,8,462,1,462,1,462,3,462,7966,8,462,3,462,
		7968,8,462,1,462,3,462,7971,8,462,1,463,1,463,1,463,1,463,1,463,3,463,
		7978,8,463,1,463,3,463,7981,8,463,1,463,1,463,1,463,1,463,1,463,3,463,
		7988,8,463,1,463,1,463,1,464,1,464,1,464,1,464,3,464,7996,8,464,1,464,
		3,464,7999,8,464,1,464,1,464,1,464,1,464,1,465,1,465,1,465,3,465,8008,
		8,465,1,465,1,465,1,466,3,466,8013,8,466,1,466,1,466,1,466,1,466,3,466,
		8019,8,466,1,466,3,466,8022,8,466,1,466,3,466,8025,8,466,1,467,1,467,1,
		467,1,468,1,468,3,468,8032,8,468,1,468,1,468,3,468,8036,8,468,1,468,3,
		468,8039,8,468,1,469,1,469,1,469,1,469,1,470,1,470,1,470,1,470,1,470,1,
		470,1,470,1,470,1,470,3,470,8054,8,470,1,470,3,470,8057,8,470,1,471,1,
		471,1,472,1,472,1,472,3,472,8064,8,472,1,473,3,473,8067,8,473,1,473,1,
		473,1,473,1,473,1,473,3,473,8074,8,473,1,473,3,473,8077,8,473,1,473,3,
		473,8080,8,473,1,474,1,474,1,474,5,474,8085,8,474,10,474,12,474,8088,9,
		474,1,475,1,475,1,475,1,475,1,475,1,475,1,475,1,475,1,475,1,475,3,475,
		8100,8,475,1,476,1,476,1,476,1,477,1,477,1,477,5,477,8108,8,477,10,477,
		12,477,8111,9,477,1,478,1,478,1,478,1,478,1,478,3,478,8118,8,478,1,478,
		1,478,1,478,1,479,1,479,1,480,1,480,1,480,1,480,1,480,5,480,8130,8,480,
		10,480,12,480,8133,9,480,1,481,1,481,1,481,1,481,3,481,8139,8,481,1,482,
		1,482,3,482,8143,8,482,1,483,1,483,1,483,1,483,1,483,1,483,1,483,1,483,
		3,483,8153,8,483,1,484,1,484,3,484,8157,8,484,1,484,1,484,3,484,8161,8,
		484,1,484,1,484,3,484,8165,8,484,3,484,8167,8,484,1,484,1,484,1,484,3,
		484,8172,8,484,1,484,1,484,3,484,8176,8,484,1,484,1,484,3,484,8180,8,484,
		3,484,8182,8,484,3,484,8184,8,484,1,485,1,485,1,485,3,485,8189,8,485,1,
		485,5,485,8192,8,485,10,485,12,485,8195,9,485,1,486,1,486,1,486,3,486,
		8200,8,486,1,486,5,486,8203,8,486,10,486,12,486,8206,9,486,1,487,1,487,
		3,487,8210,8,487,1,487,3,487,8213,8,487,1,487,3,487,8216,8,487,1,487,3,
		487,8219,8,487,1,487,3,487,8222,8,487,1,487,3,487,8225,8,487,1,487,3,487,
		8228,8,487,1,487,3,487,8231,8,487,1,487,1,487,1,487,3,487,8236,8,487,1,
		487,3,487,8239,8,487,1,487,3,487,8242,8,487,1,487,3,487,8245,8,487,1,487,
		3,487,8248,8,487,1,487,3,487,8251,8,487,3,487,8253,8,487,1,487,1,487,1,
		487,1,487,3,487,8259,8,487,1,488,1,488,3,488,8263,8,488,1,488,1,488,1,
		489,1,489,1,489,5,489,8270,8,489,10,489,12,489,8273,9,489,1,490,1,490,
		3,490,8277,8,490,1,490,1,490,3,490,8281,8,490,1,490,1,490,1,490,1,490,
		1,491,1,491,1,491,3,491,8290,8,491,1,492,1,492,1,493,1,493,1,493,1,494,
		1,494,1,495,3,495,8300,8,495,1,495,1,495,3,495,8304,8,495,1,495,1,495,
		1,495,3,495,8309,8,495,1,495,1,495,1,495,1,495,3,495,8315,8,495,1,496,
		1,496,1,497,1,497,1,498,1,498,1,498,1,498,1,498,1,498,3,498,8327,8,498,
		1,499,1,499,1,500,1,500,1,501,1,501,1,501,1,501,1,502,1,502,1,502,5,502,
		8340,8,502,10,502,12,502,8343,9,502,1,503,1,503,1,503,1,503,3,503,8349,
		8,503,3,503,8351,8,503,1,503,3,503,8354,8,503,1,504,1,504,3,504,8358,8,
		504,1,504,1,504,3,504,8362,8,504,3,504,8364,8,504,1,505,1,505,1,506,1,
		506,1,506,1,506,3,506,8372,8,506,1,506,1,506,1,506,1,506,1,506,1,506,1,
		506,3,506,8381,8,506,1,506,1,506,1,506,1,506,3,506,8387,8,506,3,506,8389,
		8,506,3,506,8391,8,506,1,507,1,507,1,507,1,507,1,507,3,507,8398,8,507,
		1,508,1,508,3,508,8402,8,508,1,509,1,509,1,510,1,510,1,510,1,510,1,510,
		3,510,8411,8,510,1,511,1,511,3,511,8415,8,511,1,512,1,512,1,513,1,513,
		1,514,1,514,1,514,1,514,1,515,1,515,1,515,5,515,8428,8,515,10,515,12,515,
		8431,9,515,1,516,1,516,1,516,1,516,1,516,3,516,8438,8,516,1,517,1,517,
		1,517,1,518,1,518,1,518,1,518,1,518,1,519,1,519,1,519,1,519,1,519,1,520,
		1,520,1,520,1,520,1,520,1,520,1,521,1,521,1,521,1,522,1,522,1,522,1,522,
		3,522,8466,8,522,1,523,1,523,1,524,4,524,8471,8,524,11,524,12,524,8472,
		1,525,1,525,3,525,8477,8,525,1,525,3,525,8480,8,525,1,526,1,526,1,526,
		3,526,8485,8,526,1,526,1,526,3,526,8489,8,526,1,526,3,526,8492,8,526,1,
		527,1,527,1,527,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
		5,528,8506,8,528,10,528,12,528,8509,9,528,1,529,1,529,1,529,1,530,1,530,
		1,530,5,530,8517,8,530,10,530,12,530,8520,9,530,1,531,1,531,3,531,8524,
		8,531,1,531,3,531,8527,8,531,1,531,1,531,3,531,8531,8,531,1,531,1,531,
		3,531,8535,8,531,1,531,1,531,3,531,8539,8,531,1,531,1,531,1,531,3,531,
		8544,8,531,1,531,1,531,3,531,8548,8,531,1,531,1,531,3,531,8552,8,531,3,
		531,8554,8,531,1,531,1,531,1,531,1,531,1,531,1,531,1,531,3,531,8563,8,
		531,1,531,1,531,1,531,3,531,8568,8,531,1,531,1,531,1,531,1,531,3,531,8574,
		8,531,1,531,1,531,3,531,8578,8,531,3,531,8580,8,531,1,531,1,531,1,531,
		1,531,1,531,3,531,8587,8,531,1,531,1,531,1,531,3,531,8592,8,531,1,531,
		1,531,1,531,1,531,5,531,8598,8,531,10,531,12,531,8601,9,531,1,532,3,532,
		8604,8,532,1,532,1,532,1,532,1,532,1,532,3,532,8611,8,532,1,533,1,533,
		1,533,3,533,8616,8,533,1,533,3,533,8619,8,533,1,533,1,533,1,533,1,533,
		3,533,8625,8,533,1,534,1,534,3,534,8629,8,534,1,535,1,535,1,535,1,535,
		1,535,1,535,1,535,3,535,8638,8,535,1,536,1,536,3,536,8642,8,536,1,536,
		1,536,1,536,1,536,1,536,1,536,3,536,8650,8,536,3,536,8652,8,536,1,537,
		1,537,1,537,5,537,8657,8,537,10,537,12,537,8660,9,537,1,538,1,538,3,538,
		8664,8,538,1,538,3,538,8667,8,538,1,539,1,539,1,539,1,539,1,539,1,539,
		3,539,8675,8,539,1,540,1,540,1,540,1,540,1,540,1,541,1,541,3,541,8684,
		8,541,1,541,1,541,1,541,1,541,1,541,1,541,3,541,8692,8,541,3,541,8694,
		8,541,1,542,1,542,3,542,8698,8,542,1,543,1,543,1,543,5,543,8703,8,543,
		10,543,12,543,8706,9,543,1,544,1,544,1,544,1,544,1,544,1,545,1,545,1,545,
		1,546,1,546,1,546,1,547,1,547,1,547,1,547,1,547,3,547,8724,8,547,1,548,
		1,548,1,549,1,549,1,549,5,549,8731,8,549,10,549,12,549,8734,9,549,1,550,
		1,550,1,550,3,550,8739,8,550,1,551,1,551,1,551,1,551,1,551,1,551,1,551,
		1,551,1,551,1,551,1,551,1,551,1,551,1,551,1,551,1,551,1,551,3,551,8758,
		8,551,1,551,1,551,1,552,1,552,1,552,5,552,8765,8,552,10,552,12,552,8768,
		9,552,1,553,1,553,1,553,3,553,8773,8,553,1,553,1,553,3,553,8777,8,553,
		1,554,4,554,8780,8,554,11,554,12,554,8781,1,555,1,555,1,555,1,555,1,555,
		1,555,1,555,1,555,3,555,8792,8,555,1,556,1,556,1,556,5,556,8797,8,556,
		10,556,12,556,8800,9,556,1,557,1,557,1,557,1,557,1,557,1,557,3,557,8808,
		8,557,1,558,3,558,8811,8,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,
		3,558,8820,8,558,3,558,8822,8,558,1,559,1,559,3,559,8826,8,559,1,559,5,
		559,8829,8,559,10,559,12,559,8832,9,559,1,560,1,560,1,560,1,560,1,560,
		1,560,1,560,3,560,8841,8,560,1,560,1,560,1,560,1,560,3,560,8847,8,560,
		1,560,3,560,8850,8,560,1,561,1,561,1,561,1,561,1,561,3,561,8857,8,561,
		1,562,1,562,3,562,8861,8,562,1,562,3,562,8864,8,562,1,563,1,563,1,563,
		1,563,1,564,1,564,1,564,1,564,1,564,1,564,1,564,3,564,8877,8,564,1,564,
		1,564,1,564,1,564,3,564,8883,8,564,1,564,1,564,3,564,8887,8,564,1,564,
		1,564,3,564,8891,8,564,1,564,3,564,8894,8,564,1,565,1,565,1,565,1,565,
		1,566,1,566,3,566,8902,8,566,1,567,1,567,3,567,8906,8,567,1,568,1,568,
		3,568,8910,8,568,1,568,1,568,1,568,1,568,1,569,1,569,3,569,8918,8,569,
		1,570,1,570,1,570,1,570,1,570,3,570,8925,8,570,1,571,1,571,1,571,1,571,
		1,571,3,571,8932,8,571,1,572,1,572,3,572,8936,8,572,1,572,1,572,1,572,
		1,572,3,572,8942,8,572,3,572,8944,8,572,1,573,1,573,1,574,1,574,1,574,
		1,574,1,574,3,574,8953,8,574,1,574,3,574,8956,8,574,1,575,1,575,1,576,
		1,576,1,576,1,576,1,576,1,576,3,576,8966,8,576,1,577,1,577,1,577,1,577,
		1,577,1,577,1,577,1,577,1,577,1,577,1,577,1,577,1,577,1,577,3,577,8982,
		8,577,1,577,1,577,1,577,1,577,3,577,8988,8,577,1,577,1,577,1,577,3,577,
		8993,8,577,1,578,1,578,1,578,1,578,1,578,3,578,9000,8,578,1,579,1,579,
		1,580,1,580,1,580,1,581,1,581,1,582,1,582,1,582,1,582,3,582,9013,8,582,
		1,583,1,583,1,583,5,583,9018,8,583,10,583,12,583,9021,9,583,1,584,1,584,
		1,584,5,584,9026,8,584,10,584,12,584,9029,9,584,1,585,1,585,1,585,5,585,
		9034,8,585,10,585,12,585,9037,9,585,1,586,1,586,3,586,9041,8,586,1,586,
		1,586,3,586,9045,8,586,1,586,1,586,1,586,1,586,3,586,9051,8,586,1,587,
		1,587,3,587,9055,8,587,1,587,1,587,3,587,9059,8,587,1,588,3,588,9062,8,
		588,1,588,1,588,1,589,1,589,3,589,9068,8,589,1,590,1,590,1,590,3,590,9073,
		8,590,1,590,1,590,1,590,1,590,1,590,1,590,1,590,1,590,1,590,1,590,1,590,
		1,590,1,590,1,590,3,590,9089,8,590,1,590,3,590,9092,8,590,3,590,9094,8,
		590,1,591,1,591,1,591,1,591,1,591,1,591,1,591,1,591,1,591,1,591,3,591,
		9106,8,591,3,591,9108,8,591,1,592,1,592,3,592,9112,8,592,1,592,1,592,1,
		592,1,592,3,592,9118,8,592,1,592,1,592,3,592,9122,8,592,3,592,9124,8,592,
		1,593,1,593,1,593,1,593,5,593,9130,8,593,10,593,12,593,9133,9,593,1,594,
		3,594,9136,8,594,1,594,1,594,1,595,1,595,1,595,5,595,9143,8,595,10,595,
		12,595,9146,9,595,1,596,1,596,1,596,5,596,9151,8,596,10,596,12,596,9154,
		9,596,1,597,1,597,1,597,3,597,9159,8,597,1,598,3,598,9162,8,598,1,598,
		1,598,1,599,1,599,1,599,1,599,1,599,3,599,9171,8,599,1,600,1,600,1,600,
		3,600,9176,8,600,1,601,1,601,1,601,5,601,9181,8,601,10,601,12,601,9184,
		9,601,1,602,1,602,1,602,1,602,1,602,1,602,1,602,3,602,9193,8,602,1,602,
		1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,
		1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,3,602,
		9219,8,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,3,602,
		9230,8,602,5,602,9232,8,602,10,602,12,602,9235,9,602,1,603,1,603,1,603,
		1,603,1,603,3,603,9242,8,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,
		1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,
		1,603,3,603,9264,8,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,3,603,
		9273,8,603,1,604,1,604,1,605,1,605,1,605,1,605,1,605,1,605,3,605,9283,
		8,605,1,605,3,605,9286,8,605,1,605,1,605,1,605,3,605,9291,8,605,1,605,
		1,605,1,605,3,605,9296,8,605,1,605,1,605,3,605,9300,8,605,1,605,1,605,
		1,606,1,606,3,606,9306,8,606,1,606,3,606,9309,8,606,1,606,3,606,9312,8,
		606,1,606,3,606,9315,8,606,1,607,1,607,3,607,9319,8,607,1,608,1,608,1,
		608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,9333,8,
		608,1,608,1,608,1,608,1,608,1,608,3,608,9340,8,608,1,608,1,608,1,608,1,
		608,1,608,3,608,9347,8,608,1,608,1,608,1,608,1,608,1,608,3,608,9354,8,
		608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,3,608,9373,8,608,1,608,1,608,1,608,
		1,608,1,608,1,608,3,608,9381,8,608,1,608,1,608,1,608,1,608,1,608,1,608,
		3,608,9389,8,608,3,608,9391,8,608,1,608,1,608,1,608,1,608,3,608,9397,8,
		608,1,608,1,608,1,608,1,608,1,608,3,608,9404,8,608,3,608,9406,8,608,1,
		608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,
		9419,8,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,3,608,9458,8,608,3,608,9460,8,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,3,608,9480,8,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,3,608,9490,8,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,3,608,9501,8,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,9518,8,608,1,608,
		3,608,9521,8,608,1,608,3,608,9524,8,608,1,608,3,608,9527,8,608,3,608,9529,
		8,608,1,608,1,608,1,608,1,608,1,608,3,608,9536,8,608,1,608,3,608,9539,
		8,608,1,608,1,608,3,608,9543,8,608,1,608,3,608,9546,8,608,1,608,3,608,
		9549,8,608,3,608,9551,8,608,1,608,1,608,1,608,1,608,1,608,3,608,9558,8,
		608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		3,608,9571,8,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,3,608,9584,8,608,1,608,3,608,9587,8,608,1,608,1,608,3,608,
		9591,8,608,1,608,3,608,9594,8,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,3,608,9604,8,608,1,608,3,608,9607,8,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,3,608,9617,8,608,1,608,3,608,9620,8,608,
		1,608,3,608,9623,8,608,1,608,1,608,3,608,9627,8,608,1,609,1,609,1,609,
		1,609,1,609,3,609,9634,8,609,1,610,1,610,1,610,1,610,1,610,1,610,1,610,
		1,610,1,610,1,610,3,610,9646,8,610,1,611,1,611,1,611,1,611,1,611,1,612,
		1,612,1,612,5,612,9656,8,612,10,612,12,612,9659,9,612,1,613,1,613,1,613,
		3,613,9664,8,613,1,614,1,614,1,615,1,615,1,615,1,615,3,615,9672,8,615,
		1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,
		1,616,1,616,1,616,3,616,9689,8,616,1,617,1,617,1,617,1,618,1,618,1,618,
		1,618,1,618,1,618,1,619,1,619,1,619,1,619,1,619,1,619,1,620,1,620,1,620,
		1,621,1,621,1,621,5,621,9712,8,621,10,621,12,621,9715,9,621,1,622,1,622,
		1,622,1,622,1,623,1,623,1,623,3,623,9724,8,623,1,624,1,624,3,624,9728,
		8,624,1,624,3,624,9731,8,624,1,624,3,624,9734,8,624,1,624,3,624,9737,8,
		624,1,624,1,624,1,625,1,625,1,626,1,626,1,626,1,626,1,627,1,627,1,627,
		3,627,9750,8,627,1,627,1,627,1,627,3,627,9755,8,627,1,627,1,627,1,627,
		3,627,9760,8,627,3,627,9762,8,627,1,628,1,628,1,628,1,628,1,628,1,628,
		3,628,9770,8,628,1,629,1,629,1,629,1,629,1,629,1,629,1,629,3,629,9779,
		8,629,1,630,1,630,1,630,1,630,1,630,1,630,1,630,3,630,9788,8,630,1,631,
		1,631,1,631,3,631,9793,8,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,
		3,631,9802,8,631,1,632,1,632,1,632,3,632,9807,8,632,1,632,1,632,1,633,
		1,633,1,633,1,633,1,633,1,633,1,634,1,634,1,635,1,635,3,635,9821,8,635,
		1,636,1,636,1,637,1,637,1,637,1,637,1,637,1,637,3,637,9831,8,637,1,638,
		1,638,1,638,1,638,1,638,1,638,3,638,9839,8,638,1,639,1,639,1,639,1,639,
		1,639,1,639,1,639,1,639,1,639,1,639,1,639,1,639,3,639,9853,8,639,1,640,
		1,640,1,640,5,640,9858,8,640,10,640,12,640,9861,9,640,1,641,1,641,1,641,
		5,641,9866,8,641,10,641,12,641,9869,9,641,1,642,1,642,1,642,1,642,1,642,
		3,642,9876,8,642,1,643,1,643,1,643,5,643,9881,8,643,10,643,12,643,9884,
		9,643,1,644,1,644,1,644,3,644,9889,8,644,1,644,1,644,1,645,1,645,1,645,
		5,645,9896,8,645,10,645,12,645,9899,9,645,1,646,1,646,1,646,1,646,1,647,
		1,647,1,647,1,647,1,647,1,647,1,647,1,647,3,647,9913,8,647,1,648,1,648,
		1,649,1,649,1,649,1,649,1,649,1,649,1,649,3,649,9924,8,649,1,650,1,650,
		1,650,1,650,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,
		1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,
		1,651,1,651,1,651,1,651,3,651,9956,8,651,1,652,1,652,1,652,1,652,1,652,
		1,652,1,652,3,652,9965,8,652,1,653,1,653,1,653,1,653,1,653,3,653,9972,
		8,653,1,654,1,654,3,654,9976,8,654,1,654,1,654,3,654,9980,8,654,1,654,
		1,654,1,655,4,655,9985,8,655,11,655,12,655,9986,1,656,1,656,1,656,1,656,
		1,656,1,657,1,657,1,657,1,658,1,658,1,659,1,659,3,659,10001,8,659,1,660,
		1,660,1,660,3,660,10006,8,660,1,660,1,660,1,660,3,660,10011,8,660,1,660,
		1,660,3,660,10015,8,660,3,660,10017,8,660,1,660,3,660,10020,8,660,1,661,
		1,661,1,662,4,662,10025,8,662,11,662,12,662,10026,1,663,5,663,10030,8,
		663,10,663,12,663,10033,9,663,1,664,1,664,1,664,1,665,1,665,1,665,1,665,
		1,665,1,665,5,665,10044,8,665,10,665,12,665,10047,9,665,1,666,1,666,1,
		666,1,666,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,
		1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,
		1,667,1,667,1,667,3,667,10078,8,667,1,668,1,668,1,668,3,668,10083,8,668,
		1,669,1,669,1,669,1,669,1,669,1,669,1,669,1,669,1,669,1,669,3,669,10095,
		8,669,1,670,1,670,1,670,1,670,1,670,1,670,1,670,1,670,1,670,1,670,1,670,
		1,670,1,670,1,670,1,670,3,670,10112,8,670,1,671,1,671,1,671,1,671,1,672,
		1,672,3,672,10120,8,672,1,673,1,673,1,673,1,673,1,673,1,673,3,673,10128,
		8,673,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,
		1,674,1,674,1,674,3,674,10144,8,674,1,675,1,675,1,675,3,675,10149,8,675,
		1,676,1,676,1,676,1,676,1,676,1,676,1,676,1,676,1,676,3,676,10160,8,676,
		1,677,1,677,1,677,1,677,1,677,1,677,1,677,1,677,1,677,1,677,3,677,10172,
		8,677,1,678,1,678,1,678,1,678,1,678,1,678,5,678,10180,8,678,10,678,12,
		678,10183,9,678,1,679,1,679,1,679,1,679,1,679,1,679,1,679,1,679,3,679,
		10193,8,679,1,680,1,680,1,680,1,680,1,680,1,680,3,680,10201,8,680,1,681,
		1,681,1,681,1,681,1,681,1,681,3,681,10209,8,681,1,682,1,682,1,682,1,682,
		1,682,1,682,5,682,10217,8,682,10,682,12,682,10220,9,682,1,683,1,683,1,
		683,1,683,3,683,10226,8,683,1,683,3,683,10229,8,683,1,683,1,683,1,683,
		1,683,1,683,1,683,1,683,3,683,10238,8,683,1,683,3,683,10241,8,683,1,683,
		1,683,1,683,3,683,10246,8,683,1,684,1,684,1,684,1,684,1,685,1,685,1,686,
		1,686,1,686,5,686,10257,8,686,10,686,12,686,10260,9,686,1,687,1,687,1,
		687,1,687,1,687,3,687,10267,8,687,1,687,3,687,10270,8,687,1,688,1,688,
		1,688,5,688,10275,8,688,10,688,12,688,10278,9,688,1,689,1,689,3,689,10282,
		8,689,1,690,1,690,1,690,5,690,10287,8,690,10,690,12,690,10290,9,690,1,
		691,1,691,1,692,1,692,1,693,1,693,1,694,1,694,1,694,1,694,3,694,10302,
		8,694,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,3,695,
		10314,8,695,1,695,1,695,1,695,3,695,10319,8,695,1,695,1,695,1,695,1,695,
		1,695,1,695,3,695,10327,8,695,1,695,1,695,1,695,1,695,1,695,3,695,10334,
		8,695,1,695,1,695,1,695,3,695,10339,8,695,1,696,1,696,1,697,1,697,1,698,
		1,698,1,699,1,699,1,700,1,700,3,700,10351,8,700,1,701,1,701,1,701,1,701,
		5,701,10357,8,701,10,701,12,701,10360,9,701,1,701,1,701,3,701,10364,8,
		701,1,702,1,702,1,702,1,703,1,703,1,703,1,703,1,703,3,703,10374,8,703,
		1,704,1,704,1,705,1,705,1,705,3,705,10381,8,705,1,706,1,706,1,706,5,706,
		10386,8,706,10,706,12,706,10389,9,706,1,707,1,707,1,707,3,707,10394,8,
		707,1,708,1,708,1,708,3,708,10399,8,708,1,709,1,709,1,709,1,709,3,709,
		10405,8,709,1,710,1,710,1,710,1,710,1,710,1,710,3,710,10413,8,710,1,711,
		1,711,3,711,10417,8,711,1,712,1,712,1,713,1,713,1,713,1,713,1,713,1,713,
		1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
		1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
		1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
		1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
		1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,3,713,10484,8,713,
		1,714,1,714,1,715,1,715,1,716,1,716,1,717,1,717,1,718,1,718,3,718,10496,
		8,718,1,718,1,718,1,718,3,718,10501,8,718,1,718,0,4,1204,1330,1356,1364,
		719,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
		96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
		132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
		168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
		204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
		240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,
		276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
		312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,
		348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,
		384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,
		420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,
		456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,
		492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,
		528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,
		564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,
		600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,
		636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,
		672,674,676,678,680,682,684,686,688,690,692,694,696,698,700,702,704,706,
		708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,740,742,
		744,746,748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,
		780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,812,814,
		816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,848,850,
		852,854,856,858,860,862,864,866,868,870,872,874,876,878,880,882,884,886,
		888,890,892,894,896,898,900,902,904,906,908,910,912,914,916,918,920,922,
		924,926,928,930,932,934,936,938,940,942,944,946,948,950,952,954,956,958,
		960,962,964,966,968,970,972,974,976,978,980,982,984,986,988,990,992,994,
		996,998,1000,1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,
		1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,
		1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,
		1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,1106,1108,
		1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,
		1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,1164,
		1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,1190,1192,
		1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,1216,1218,1220,
		1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,1242,1244,1246,1248,
		1250,1252,1254,1256,1258,1260,1262,1264,1266,1268,1270,1272,1274,1276,
		1278,1280,1282,1284,1286,1288,1290,1292,1294,1296,1298,1300,1302,1304,
		1306,1308,1310,1312,1314,1316,1318,1320,1322,1324,1326,1328,1330,1332,
		1334,1336,1338,1340,1342,1344,1346,1348,1350,1352,1354,1356,1358,1360,
		1362,1364,1366,1368,1370,1372,1374,1376,1378,1380,1382,1384,1386,1388,
		1390,1392,1394,1396,1398,1400,1402,1404,1406,1408,1410,1412,1414,1416,
		1418,1420,1422,1424,1426,1428,1430,1432,1434,1436,0,66,2,0,233,233,395,
		395,2,0,104,104,349,349,2,0,137,137,349,349,3,0,104,104,137,137,349,349,
		2,0,171,171,229,229,2,0,283,283,363,363,2,0,10,10,132,132,2,0,200,200,
		394,394,2,0,218,218,259,259,5,0,68,68,319,319,360,360,383,383,385,385,
		2,0,188,188,346,346,2,0,102,102,132,132,2,0,383,383,385,385,2,0,238,238,
		262,262,9,0,68,68,198,198,203,203,217,217,257,257,265,265,373,373,376,
		376,476,476,3,0,151,151,315,315,367,367,2,0,91,91,116,116,3,0,211,211,
		290,290,293,293,5,0,68,68,126,126,220,220,270,270,400,400,2,0,130,130,
		264,264,1,0,486,487,2,0,130,130,445,445,2,0,372,372,445,445,2,0,249,249,
		327,327,3,0,352,352,388,388,483,483,2,0,102,102,106,106,5,0,250,250,360,
		360,381,381,392,392,493,494,2,0,75,75,93,93,2,0,10,10,91,91,3,0,249,249,
		327,327,480,480,2,0,213,213,380,380,4,0,126,126,220,220,270,270,400,400,
		2,0,175,175,271,271,2,0,387,387,411,411,2,0,189,189,283,283,2,0,344,344,
		364,364,1,0,69,70,2,0,137,137,380,380,2,0,239,239,365,365,2,0,97,97,135,
		135,2,0,251,251,283,283,2,0,68,68,94,94,2,0,351,351,445,445,2,0,245,245,
		299,299,4,0,151,151,153,153,157,157,164,164,2,0,422,423,437,437,1,0,422,
		423,1,0,449,450,1,0,18,19,2,0,155,155,160,160,5,0,10,10,16,17,21,21,23,
		23,25,25,1,0,12,13,3,0,9,9,14,14,27,27,3,0,77,77,111,111,133,133,2,0,204,
		204,226,226,2,0,335,335,488,488,2,0,246,246,320,320,3,0,68,68,72,72,128,
		128,6,0,9,10,12,17,21,21,23,23,25,25,27,27,2,0,20,20,22,22,1,0,521,524,
		1,0,576,579,13,0,43,66,162,162,167,332,334,417,471,490,493,507,509,509,
		511,511,513,513,516,526,529,529,542,542,553,553,3,0,144,161,163,166,510,
		510,3,0,42,42,68,143,492,492,35,0,30,66,68,72,75,83,85,96,98,98,101,101,
		106,107,110,111,113,116,119,120,122,124,126,131,133,134,136,140,144,154,
		156,159,161,161,164,213,215,255,257,291,293,294,296,332,334,356,358,404,
		406,409,411,414,416,421,424,442,444,455,463,514,516,516,519,527,529,529,
		542,542,553,553,11703,0,1438,1,0,0,0,2,1441,1,0,0,0,4,1444,1,0,0,0,6,1579,
		1,0,0,0,8,1581,1,0,0,0,10,1584,1,0,0,0,12,1592,1,0,0,0,14,1597,1,0,0,0,
		16,1603,1,0,0,0,18,1624,1,0,0,0,20,1636,1,0,0,0,22,1638,1,0,0,0,24,1646,
		1,0,0,0,26,1654,1,0,0,0,28,1658,1,0,0,0,30,1669,1,0,0,0,32,1677,1,0,0,
		0,34,1685,1,0,0,0,36,1692,1,0,0,0,38,1694,1,0,0,0,40,1711,1,0,0,0,42,1716,
		1,0,0,0,44,1725,1,0,0,0,46,1727,1,0,0,0,48,1741,1,0,0,0,50,1743,1,0,0,
		0,52,1776,1,0,0,0,54,1778,1,0,0,0,56,1786,1,0,0,0,58,1796,1,0,0,0,60,1803,
		1,0,0,0,62,1809,1,0,0,0,64,1827,1,0,0,0,66,1831,1,0,0,0,68,1835,1,0,0,
		0,70,1837,1,0,0,0,72,1848,1,0,0,0,74,1852,1,0,0,0,76,1857,1,0,0,0,78,1862,
		1,0,0,0,80,1864,1,0,0,0,82,1876,1,0,0,0,84,1883,1,0,0,0,86,1885,1,0,0,
		0,88,1887,1,0,0,0,90,1889,1,0,0,0,92,2004,1,0,0,0,94,2006,1,0,0,0,96,2022,
		1,0,0,0,98,2024,1,0,0,0,100,2326,1,0,0,0,102,2333,1,0,0,0,104,2335,1,0,
		0,0,106,2337,1,0,0,0,108,2340,1,0,0,0,110,2349,1,0,0,0,112,2351,1,0,0,
		0,114,2355,1,0,0,0,116,2358,1,0,0,0,118,2366,1,0,0,0,120,2378,1,0,0,0,
		122,2395,1,0,0,0,124,2423,1,0,0,0,126,2425,1,0,0,0,128,2428,1,0,0,0,130,
		2436,1,0,0,0,132,2441,1,0,0,0,134,2479,1,0,0,0,136,2481,1,0,0,0,138,2523,
		1,0,0,0,140,2525,1,0,0,0,142,2527,1,0,0,0,144,2532,1,0,0,0,146,2539,1,
		0,0,0,148,2544,1,0,0,0,150,2586,1,0,0,0,152,2588,1,0,0,0,154,2591,1,0,
		0,0,156,2596,1,0,0,0,158,2598,1,0,0,0,160,2606,1,0,0,0,162,2617,1,0,0,
		0,164,2619,1,0,0,0,166,2627,1,0,0,0,168,2629,1,0,0,0,170,2714,1,0,0,0,
		172,2716,1,0,0,0,174,2718,1,0,0,0,176,2722,1,0,0,0,178,2730,1,0,0,0,180,
		2741,1,0,0,0,182,2745,1,0,0,0,184,2747,1,0,0,0,186,2754,1,0,0,0,188,2764,
		1,0,0,0,190,2775,1,0,0,0,192,2829,1,0,0,0,194,2834,1,0,0,0,196,2841,1,
		0,0,0,198,2843,1,0,0,0,200,2851,1,0,0,0,202,2854,1,0,0,0,204,2861,1,0,
		0,0,206,2949,1,0,0,0,208,2951,1,0,0,0,210,2954,1,0,0,0,212,2958,1,0,0,
		0,214,2966,1,0,0,0,216,2968,1,0,0,0,218,2973,1,0,0,0,220,2976,1,0,0,0,
		222,2984,1,0,0,0,224,2994,1,0,0,0,226,3007,1,0,0,0,228,3009,1,0,0,0,230,
		3013,1,0,0,0,232,3023,1,0,0,0,234,3025,1,0,0,0,236,3030,1,0,0,0,238,3032,
		1,0,0,0,240,3039,1,0,0,0,242,3070,1,0,0,0,244,3072,1,0,0,0,246,3079,1,
		0,0,0,248,3081,1,0,0,0,250,3090,1,0,0,0,252,3093,1,0,0,0,254,3098,1,0,
		0,0,256,3102,1,0,0,0,258,3118,1,0,0,0,260,3129,1,0,0,0,262,3145,1,0,0,
		0,264,3161,1,0,0,0,266,3167,1,0,0,0,268,3184,1,0,0,0,270,3197,1,0,0,0,
		272,3199,1,0,0,0,274,3209,1,0,0,0,276,3223,1,0,0,0,278,3232,1,0,0,0,280,
		3234,1,0,0,0,282,3239,1,0,0,0,284,3277,1,0,0,0,286,3279,1,0,0,0,288,3287,
		1,0,0,0,290,3289,1,0,0,0,292,3297,1,0,0,0,294,3319,1,0,0,0,296,3321,1,
		0,0,0,298,3325,1,0,0,0,300,3332,1,0,0,0,302,3334,1,0,0,0,304,3336,1,0,
		0,0,306,3338,1,0,0,0,308,3349,1,0,0,0,310,3352,1,0,0,0,312,3360,1,0,0,
		0,314,3376,1,0,0,0,316,3386,1,0,0,0,318,3388,1,0,0,0,320,3397,1,0,0,0,
		322,3400,1,0,0,0,324,3507,1,0,0,0,326,3509,1,0,0,0,328,3528,1,0,0,0,330,
		3531,1,0,0,0,332,3535,1,0,0,0,334,3554,1,0,0,0,336,3556,1,0,0,0,338,3561,
		1,0,0,0,340,3569,1,0,0,0,342,3574,1,0,0,0,344,3589,1,0,0,0,346,3591,1,
		0,0,0,348,3594,1,0,0,0,350,3596,1,0,0,0,352,3633,1,0,0,0,354,3635,1,0,
		0,0,356,3638,1,0,0,0,358,3643,1,0,0,0,360,3645,1,0,0,0,362,3727,1,0,0,
		0,364,3729,1,0,0,0,366,3747,1,0,0,0,368,3749,1,0,0,0,370,3777,1,0,0,0,
		372,3781,1,0,0,0,374,3801,1,0,0,0,376,3803,1,0,0,0,378,3812,1,0,0,0,380,
		3832,1,0,0,0,382,3846,1,0,0,0,384,3851,1,0,0,0,386,3857,1,0,0,0,388,3860,
		1,0,0,0,390,3863,1,0,0,0,392,3866,1,0,0,0,394,3869,1,0,0,0,396,3871,1,
		0,0,0,398,3880,1,0,0,0,400,3930,1,0,0,0,402,3936,1,0,0,0,404,3938,1,0,
		0,0,406,3953,1,0,0,0,408,3955,1,0,0,0,410,3959,1,0,0,0,412,3963,1,0,0,
		0,414,3970,1,0,0,0,416,3972,1,0,0,0,418,3974,1,0,0,0,420,3976,1,0,0,0,
		422,3982,1,0,0,0,424,3984,1,0,0,0,426,3986,1,0,0,0,428,3991,1,0,0,0,430,
		3995,1,0,0,0,432,4008,1,0,0,0,434,4010,1,0,0,0,436,4016,1,0,0,0,438,4030,
		1,0,0,0,440,4058,1,0,0,0,442,4060,1,0,0,0,444,4068,1,0,0,0,446,4074,1,
		0,0,0,448,4082,1,0,0,0,450,4094,1,0,0,0,452,4096,1,0,0,0,454,4219,1,0,
		0,0,456,4221,1,0,0,0,458,4225,1,0,0,0,460,4233,1,0,0,0,462,4244,1,0,0,
		0,464,4246,1,0,0,0,466,4250,1,0,0,0,468,4258,1,0,0,0,470,4262,1,0,0,0,
		472,4264,1,0,0,0,474,4315,1,0,0,0,476,4317,1,0,0,0,478,4321,1,0,0,0,480,
		4339,1,0,0,0,482,4378,1,0,0,0,484,4380,1,0,0,0,486,4382,1,0,0,0,488,4391,
		1,0,0,0,490,4393,1,0,0,0,492,4395,1,0,0,0,494,4420,1,0,0,0,496,4422,1,
		0,0,0,498,4442,1,0,0,0,500,4464,1,0,0,0,502,4486,1,0,0,0,504,4488,1,0,
		0,0,506,4495,1,0,0,0,508,4592,1,0,0,0,510,4617,1,0,0,0,512,4624,1,0,0,
		0,514,4641,1,0,0,0,516,4643,1,0,0,0,518,4645,1,0,0,0,520,4653,1,0,0,0,
		522,4659,1,0,0,0,524,4663,1,0,0,0,526,4671,1,0,0,0,528,4686,1,0,0,0,530,
		4835,1,0,0,0,532,4839,1,0,0,0,534,4952,1,0,0,0,536,4954,1,0,0,0,538,4959,
		1,0,0,0,540,4965,1,0,0,0,542,5052,1,0,0,0,544,5054,1,0,0,0,546,5056,1,
		0,0,0,548,5058,1,0,0,0,550,5088,1,0,0,0,552,5105,1,0,0,0,554,5107,1,0,
		0,0,556,5131,1,0,0,0,558,5191,1,0,0,0,560,5193,1,0,0,0,562,5204,1,0,0,
		0,564,5206,1,0,0,0,566,5210,1,0,0,0,568,5243,1,0,0,0,570,5245,1,0,0,0,
		572,5249,1,0,0,0,574,5253,1,0,0,0,576,5262,1,0,0,0,578,5274,1,0,0,0,580,
		5306,1,0,0,0,582,5308,1,0,0,0,584,5373,1,0,0,0,586,5375,1,0,0,0,588,5377,
		1,0,0,0,590,5379,1,0,0,0,592,5381,1,0,0,0,594,5383,1,0,0,0,596,5386,1,
		0,0,0,598,5417,1,0,0,0,600,5430,1,0,0,0,602,5432,1,0,0,0,604,5437,1,0,
		0,0,606,5445,1,0,0,0,608,5448,1,0,0,0,610,5450,1,0,0,0,612,5456,1,0,0,
		0,614,5458,1,0,0,0,616,5478,1,0,0,0,618,5481,1,0,0,0,620,5487,1,0,0,0,
		622,5495,1,0,0,0,624,5511,1,0,0,0,626,5513,1,0,0,0,628,5519,1,0,0,0,630,
		5540,1,0,0,0,632,5549,1,0,0,0,634,5551,1,0,0,0,636,5553,1,0,0,0,638,5564,
		1,0,0,0,640,5566,1,0,0,0,642,5571,1,0,0,0,644,5573,1,0,0,0,646,5588,1,
		0,0,0,648,5596,1,0,0,0,650,5599,1,0,0,0,652,5608,1,0,0,0,654,5649,1,0,
		0,0,656,5659,1,0,0,0,658,5666,1,0,0,0,660,5668,1,0,0,0,662,5680,1,0,0,
		0,664,5683,1,0,0,0,666,5686,1,0,0,0,668,5694,1,0,0,0,670,5702,1,0,0,0,
		672,5706,1,0,0,0,674,5750,1,0,0,0,676,5766,1,0,0,0,678,5782,1,0,0,0,680,
		5806,1,0,0,0,682,5813,1,0,0,0,684,5818,1,0,0,0,686,5826,1,0,0,0,688,5829,
		1,0,0,0,690,5833,1,0,0,0,692,5840,1,0,0,0,694,5879,1,0,0,0,696,5885,1,
		0,0,0,698,5887,1,0,0,0,700,5900,1,0,0,0,702,5903,1,0,0,0,704,5950,1,0,
		0,0,706,5952,1,0,0,0,708,5994,1,0,0,0,710,5996,1,0,0,0,712,5998,1,0,0,
		0,714,6000,1,0,0,0,716,6016,1,0,0,0,718,6505,1,0,0,0,720,6507,1,0,0,0,
		722,6509,1,0,0,0,724,6581,1,0,0,0,726,6583,1,0,0,0,728,6802,1,0,0,0,730,
		6804,1,0,0,0,732,6812,1,0,0,0,734,6828,1,0,0,0,736,6835,1,0,0,0,738,6837,
		1,0,0,0,740,7030,1,0,0,0,742,7032,1,0,0,0,744,7041,1,0,0,0,746,7049,1,
		0,0,0,748,7078,1,0,0,0,750,7080,1,0,0,0,752,7090,1,0,0,0,754,7098,1,0,
		0,0,756,7139,1,0,0,0,758,7155,1,0,0,0,760,7157,1,0,0,0,762,7183,1,0,0,
		0,764,7186,1,0,0,0,766,7202,1,0,0,0,768,7204,1,0,0,0,770,7206,1,0,0,0,
		772,7208,1,0,0,0,774,7210,1,0,0,0,776,7215,1,0,0,0,778,7218,1,0,0,0,780,
		7225,1,0,0,0,782,7296,1,0,0,0,784,7298,1,0,0,0,786,7310,1,0,0,0,788,7312,
		1,0,0,0,790,7322,1,0,0,0,792,7324,1,0,0,0,794,7330,1,0,0,0,796,7362,1,
		0,0,0,798,7369,1,0,0,0,800,7372,1,0,0,0,802,7381,1,0,0,0,804,7384,1,0,
		0,0,806,7388,1,0,0,0,808,7405,1,0,0,0,810,7407,1,0,0,0,812,7409,1,0,0,
		0,814,7424,1,0,0,0,816,7429,1,0,0,0,818,7445,1,0,0,0,820,7453,1,0,0,0,
		822,7455,1,0,0,0,824,7461,1,0,0,0,826,7466,1,0,0,0,828,7475,1,0,0,0,830,
		7502,1,0,0,0,832,7504,1,0,0,0,834,7583,1,0,0,0,836,7585,1,0,0,0,838,7587,
		1,0,0,0,840,7620,1,0,0,0,842,7622,1,0,0,0,844,7648,1,0,0,0,846,7664,1,
		0,0,0,848,7666,1,0,0,0,850,7674,1,0,0,0,852,7682,1,0,0,0,854,7684,1,0,
		0,0,856,7691,1,0,0,0,858,7695,1,0,0,0,860,7697,1,0,0,0,862,7703,1,0,0,
		0,864,7707,1,0,0,0,866,7709,1,0,0,0,868,7711,1,0,0,0,870,7713,1,0,0,0,
		872,7715,1,0,0,0,874,7717,1,0,0,0,876,7721,1,0,0,0,878,7725,1,0,0,0,880,
		7733,1,0,0,0,882,7753,1,0,0,0,884,7764,1,0,0,0,886,7766,1,0,0,0,888,7774,
		1,0,0,0,890,7780,1,0,0,0,892,7784,1,0,0,0,894,7786,1,0,0,0,896,7794,1,
		0,0,0,898,7802,1,0,0,0,900,7842,1,0,0,0,902,7844,1,0,0,0,904,7858,1,0,
		0,0,906,7861,1,0,0,0,908,7873,1,0,0,0,910,7897,1,0,0,0,912,7899,1,0,0,
		0,914,7901,1,0,0,0,916,7909,1,0,0,0,918,7912,1,0,0,0,920,7936,1,0,0,0,
		922,7938,1,0,0,0,924,7941,1,0,0,0,926,7972,1,0,0,0,928,7991,1,0,0,0,930,
		8004,1,0,0,0,932,8012,1,0,0,0,934,8026,1,0,0,0,936,8029,1,0,0,0,938,8040,
		1,0,0,0,940,8056,1,0,0,0,942,8058,1,0,0,0,944,8063,1,0,0,0,946,8066,1,
		0,0,0,948,8081,1,0,0,0,950,8099,1,0,0,0,952,8101,1,0,0,0,954,8104,1,0,
		0,0,956,8112,1,0,0,0,958,8122,1,0,0,0,960,8131,1,0,0,0,962,8138,1,0,0,
		0,964,8142,1,0,0,0,966,8152,1,0,0,0,968,8183,1,0,0,0,970,8185,1,0,0,0,
		972,8196,1,0,0,0,974,8258,1,0,0,0,976,8260,1,0,0,0,978,8266,1,0,0,0,980,
		8274,1,0,0,0,982,8289,1,0,0,0,984,8291,1,0,0,0,986,8293,1,0,0,0,988,8296,
		1,0,0,0,990,8314,1,0,0,0,992,8316,1,0,0,0,994,8318,1,0,0,0,996,8320,1,
		0,0,0,998,8328,1,0,0,0,1000,8330,1,0,0,0,1002,8332,1,0,0,0,1004,8336,1,
		0,0,0,1006,8344,1,0,0,0,1008,8363,1,0,0,0,1010,8365,1,0,0,0,1012,8390,
		1,0,0,0,1014,8392,1,0,0,0,1016,8401,1,0,0,0,1018,8403,1,0,0,0,1020,8410,
		1,0,0,0,1022,8414,1,0,0,0,1024,8416,1,0,0,0,1026,8418,1,0,0,0,1028,8420,
		1,0,0,0,1030,8424,1,0,0,0,1032,8437,1,0,0,0,1034,8439,1,0,0,0,1036,8442,
		1,0,0,0,1038,8447,1,0,0,0,1040,8452,1,0,0,0,1042,8458,1,0,0,0,1044,8465,
		1,0,0,0,1046,8467,1,0,0,0,1048,8470,1,0,0,0,1050,8474,1,0,0,0,1052,8481,
		1,0,0,0,1054,8493,1,0,0,0,1056,8496,1,0,0,0,1058,8510,1,0,0,0,1060,8513,
		1,0,0,0,1062,8579,1,0,0,0,1064,8603,1,0,0,0,1066,8624,1,0,0,0,1068,8626,
		1,0,0,0,1070,8637,1,0,0,0,1072,8651,1,0,0,0,1074,8653,1,0,0,0,1076,8661,
		1,0,0,0,1078,8668,1,0,0,0,1080,8676,1,0,0,0,1082,8693,1,0,0,0,1084,8695,
		1,0,0,0,1086,8699,1,0,0,0,1088,8707,1,0,0,0,1090,8712,1,0,0,0,1092,8715,
		1,0,0,0,1094,8718,1,0,0,0,1096,8725,1,0,0,0,1098,8727,1,0,0,0,1100,8735,
		1,0,0,0,1102,8740,1,0,0,0,1104,8761,1,0,0,0,1106,8769,1,0,0,0,1108,8779,
		1,0,0,0,1110,8791,1,0,0,0,1112,8793,1,0,0,0,1114,8807,1,0,0,0,1116,8810,
		1,0,0,0,1118,8830,1,0,0,0,1120,8849,1,0,0,0,1122,8856,1,0,0,0,1124,8858,
		1,0,0,0,1126,8865,1,0,0,0,1128,8893,1,0,0,0,1130,8895,1,0,0,0,1132,8901,
		1,0,0,0,1134,8905,1,0,0,0,1136,8907,1,0,0,0,1138,8915,1,0,0,0,1140,8919,
		1,0,0,0,1142,8926,1,0,0,0,1144,8943,1,0,0,0,1146,8945,1,0,0,0,1148,8947,
		1,0,0,0,1150,8957,1,0,0,0,1152,8965,1,0,0,0,1154,8992,1,0,0,0,1156,8994,
		1,0,0,0,1158,9001,1,0,0,0,1160,9003,1,0,0,0,1162,9006,1,0,0,0,1164,9008,
		1,0,0,0,1166,9014,1,0,0,0,1168,9022,1,0,0,0,1170,9030,1,0,0,0,1172,9038,
		1,0,0,0,1174,9052,1,0,0,0,1176,9061,1,0,0,0,1178,9065,1,0,0,0,1180,9069,
		1,0,0,0,1182,9095,1,0,0,0,1184,9109,1,0,0,0,1186,9125,1,0,0,0,1188,9135,
		1,0,0,0,1190,9139,1,0,0,0,1192,9147,1,0,0,0,1194,9155,1,0,0,0,1196,9161,
		1,0,0,0,1198,9165,1,0,0,0,1200,9172,1,0,0,0,1202,9177,1,0,0,0,1204,9192,
		1,0,0,0,1206,9272,1,0,0,0,1208,9274,1,0,0,0,1210,9276,1,0,0,0,1212,9314,
		1,0,0,0,1214,9318,1,0,0,0,1216,9626,1,0,0,0,1218,9633,1,0,0,0,1220,9645,
		1,0,0,0,1222,9647,1,0,0,0,1224,9652,1,0,0,0,1226,9660,1,0,0,0,1228,9665,
		1,0,0,0,1230,9671,1,0,0,0,1232,9688,1,0,0,0,1234,9690,1,0,0,0,1236,9693,
		1,0,0,0,1238,9699,1,0,0,0,1240,9705,1,0,0,0,1242,9708,1,0,0,0,1244,9716,
		1,0,0,0,1246,9720,1,0,0,0,1248,9725,1,0,0,0,1250,9740,1,0,0,0,1252,9742,
		1,0,0,0,1254,9761,1,0,0,0,1256,9769,1,0,0,0,1258,9778,1,0,0,0,1260,9780,
		1,0,0,0,1262,9801,1,0,0,0,1264,9803,1,0,0,0,1266,9810,1,0,0,0,1268,9816,
		1,0,0,0,1270,9820,1,0,0,0,1272,9822,1,0,0,0,1274,9830,1,0,0,0,1276,9838,
		1,0,0,0,1278,9852,1,0,0,0,1280,9854,1,0,0,0,1282,9862,1,0,0,0,1284,9875,
		1,0,0,0,1286,9877,1,0,0,0,1288,9885,1,0,0,0,1290,9892,1,0,0,0,1292,9900,
		1,0,0,0,1294,9912,1,0,0,0,1296,9914,1,0,0,0,1298,9916,1,0,0,0,1300,9925,
		1,0,0,0,1302,9955,1,0,0,0,1304,9964,1,0,0,0,1306,9971,1,0,0,0,1308,9973,
		1,0,0,0,1310,9984,1,0,0,0,1312,9988,1,0,0,0,1314,9993,1,0,0,0,1316,9996,
		1,0,0,0,1318,9998,1,0,0,0,1320,10019,1,0,0,0,1322,10021,1,0,0,0,1324,10024,
		1,0,0,0,1326,10031,1,0,0,0,1328,10034,1,0,0,0,1330,10037,1,0,0,0,1332,
		10048,1,0,0,0,1334,10077,1,0,0,0,1336,10082,1,0,0,0,1338,10094,1,0,0,0,
		1340,10111,1,0,0,0,1342,10113,1,0,0,0,1344,10117,1,0,0,0,1346,10127,1,
		0,0,0,1348,10143,1,0,0,0,1350,10145,1,0,0,0,1352,10159,1,0,0,0,1354,10171,
		1,0,0,0,1356,10173,1,0,0,0,1358,10192,1,0,0,0,1360,10200,1,0,0,0,1362,
		10208,1,0,0,0,1364,10210,1,0,0,0,1366,10245,1,0,0,0,1368,10247,1,0,0,0,
		1370,10251,1,0,0,0,1372,10253,1,0,0,0,1374,10269,1,0,0,0,1376,10271,1,
		0,0,0,1378,10279,1,0,0,0,1380,10283,1,0,0,0,1382,10291,1,0,0,0,1384,10293,
		1,0,0,0,1386,10295,1,0,0,0,1388,10301,1,0,0,0,1390,10338,1,0,0,0,1392,
		10340,1,0,0,0,1394,10342,1,0,0,0,1396,10344,1,0,0,0,1398,10346,1,0,0,0,
		1400,10348,1,0,0,0,1402,10363,1,0,0,0,1404,10365,1,0,0,0,1406,10373,1,
		0,0,0,1408,10375,1,0,0,0,1410,10380,1,0,0,0,1412,10382,1,0,0,0,1414,10393,
		1,0,0,0,1416,10398,1,0,0,0,1418,10404,1,0,0,0,1420,10412,1,0,0,0,1422,
		10416,1,0,0,0,1424,10418,1,0,0,0,1426,10483,1,0,0,0,1428,10485,1,0,0,0,
		1430,10487,1,0,0,0,1432,10489,1,0,0,0,1434,10491,1,0,0,0,1436,10500,1,
		0,0,0,1438,1439,3,2,1,0,1439,1440,5,0,0,1,1440,1,1,0,0,0,1441,1442,3,4,
		2,0,1442,3,1,0,0,0,1443,1445,3,6,3,0,1444,1443,1,0,0,0,1444,1445,1,0,0,
		0,1445,1452,1,0,0,0,1446,1448,5,7,0,0,1447,1449,3,6,3,0,1448,1447,1,0,
		0,0,1448,1449,1,0,0,0,1449,1451,1,0,0,0,1450,1446,1,0,0,0,1451,1454,1,
		0,0,0,1452,1450,1,0,0,0,1452,1453,1,0,0,0,1453,5,1,0,0,0,1454,1452,1,0,
		0,0,1455,1580,3,448,224,0,1456,1580,3,822,411,0,1457,1580,3,812,406,0,
		1458,1580,3,814,407,0,1459,1580,3,574,287,0,1460,1580,3,828,414,0,1461,
		1580,3,474,237,0,1462,1580,3,318,159,0,1463,1580,3,324,162,0,1464,1580,
		3,334,167,0,1465,1580,3,360,180,0,1466,1580,3,668,334,0,1467,1580,3,34,
		17,0,1468,1580,3,724,362,0,1469,1580,3,728,364,0,1470,1580,3,740,370,0,
		1471,1580,3,730,365,0,1472,1580,3,738,369,0,1473,1580,3,380,190,0,1474,
		1580,3,276,138,0,1475,1580,3,824,412,0,1476,1580,3,92,46,0,1477,1580,3,
		716,358,0,1478,1580,3,130,65,0,1479,1580,3,748,374,0,1480,1580,3,28,14,
		0,1481,1580,3,24,12,0,1482,1580,3,756,378,0,1483,1580,3,258,129,0,1484,
		1580,3,834,417,0,1485,1580,3,832,416,0,1486,1580,3,376,188,0,1487,1580,
		3,846,423,0,1488,1580,3,8,4,0,1489,1580,3,88,44,0,1490,1580,3,136,68,0,
		1491,1580,3,840,420,0,1492,1580,3,530,265,0,1493,1580,3,82,41,0,1494,1580,
		3,138,69,0,1495,1580,3,396,198,0,1496,1580,3,260,130,0,1497,1580,3,452,
		226,0,1498,1580,3,694,347,0,1499,1580,3,838,419,0,1500,1580,3,826,413,
		0,1501,1580,3,312,156,0,1502,1580,3,326,163,0,1503,1580,3,352,176,0,1504,
		1580,3,362,181,0,1505,1580,3,614,307,0,1506,1580,3,32,16,0,1507,1580,3,
		266,133,0,1508,1580,3,478,239,0,1509,1580,3,492,246,0,1510,1580,3,742,
		371,0,1511,1580,3,494,247,0,1512,1580,3,378,189,0,1513,1580,3,292,146,
		0,1514,1580,3,38,19,0,1515,1580,3,274,137,0,1516,1580,3,168,84,0,1517,
		1580,3,750,375,0,1518,1580,3,256,128,0,1519,1580,3,306,153,0,1520,1580,
		3,702,351,0,1521,1580,3,400,200,0,1522,1580,3,440,220,0,1523,1580,3,10,
		5,0,1524,1580,3,22,11,0,1525,1580,3,370,185,0,1526,1580,3,800,400,0,1527,
		1580,3,904,452,0,1528,1580,3,956,478,0,1529,1580,3,454,227,0,1530,1580,
		3,932,466,0,1531,1580,3,90,45,0,1532,1580,3,688,344,0,1533,1580,3,698,
		349,0,1534,1580,3,500,250,0,1535,1580,3,502,251,0,1536,1580,3,504,252,
		0,1537,1580,3,508,254,0,1538,1580,3,758,379,0,1539,1580,3,310,155,0,1540,
		1580,3,706,353,0,1541,1580,3,30,15,0,1542,1580,3,374,187,0,1543,1580,3,
		816,408,0,1544,1580,3,900,450,0,1545,1580,3,882,441,0,1546,1580,3,540,
		270,0,1547,1580,3,548,274,0,1548,1580,3,566,283,0,1549,1580,3,364,182,
		0,1550,1580,3,584,292,0,1551,1580,3,906,453,0,1552,1580,3,924,462,0,1553,
		1580,3,778,389,0,1554,1580,3,272,136,0,1555,1580,3,798,399,0,1556,1580,
		3,936,468,0,1557,1580,3,774,387,0,1558,1580,3,894,447,0,1559,1580,3,506,
		253,0,1560,1580,3,708,354,0,1561,1580,3,676,338,0,1562,1580,3,674,337,
		0,1563,1580,3,678,339,0,1564,1580,3,718,359,0,1565,1580,3,550,275,0,1566,
		1580,3,568,284,0,1567,1580,3,760,380,0,1568,1580,3,534,267,0,1569,1580,
		3,964,482,0,1570,1580,3,782,391,0,1571,1580,3,526,263,0,1572,1580,3,780,
		390,0,1573,1580,3,946,473,0,1574,1580,3,844,422,0,1575,1580,3,70,35,0,
		1576,1580,3,46,23,0,1577,1580,3,80,40,0,1578,1580,3,794,397,0,1579,1455,
		1,0,0,0,1579,1456,1,0,0,0,1579,1457,1,0,0,0,1579,1458,1,0,0,0,1579,1459,
		1,0,0,0,1579,1460,1,0,0,0,1579,1461,1,0,0,0,1579,1462,1,0,0,0,1579,1463,
		1,0,0,0,1579,1464,1,0,0,0,1579,1465,1,0,0,0,1579,1466,1,0,0,0,1579,1467,
		1,0,0,0,1579,1468,1,0,0,0,1579,1469,1,0,0,0,1579,1470,1,0,0,0,1579,1471,
		1,0,0,0,1579,1472,1,0,0,0,1579,1473,1,0,0,0,1579,1474,1,0,0,0,1579,1475,
		1,0,0,0,1579,1476,1,0,0,0,1579,1477,1,0,0,0,1579,1478,1,0,0,0,1579,1479,
		1,0,0,0,1579,1480,1,0,0,0,1579,1481,1,0,0,0,1579,1482,1,0,0,0,1579,1483,
		1,0,0,0,1579,1484,1,0,0,0,1579,1485,1,0,0,0,1579,1486,1,0,0,0,1579,1487,
		1,0,0,0,1579,1488,1,0,0,0,1579,1489,1,0,0,0,1579,1490,1,0,0,0,1579,1491,
		1,0,0,0,1579,1492,1,0,0,0,1579,1493,1,0,0,0,1579,1494,1,0,0,0,1579,1495,
		1,0,0,0,1579,1496,1,0,0,0,1579,1497,1,0,0,0,1579,1498,1,0,0,0,1579,1499,
		1,0,0,0,1579,1500,1,0,0,0,1579,1501,1,0,0,0,1579,1502,1,0,0,0,1579,1503,
		1,0,0,0,1579,1504,1,0,0,0,1579,1505,1,0,0,0,1579,1506,1,0,0,0,1579,1507,
		1,0,0,0,1579,1508,1,0,0,0,1579,1509,1,0,0,0,1579,1510,1,0,0,0,1579,1511,
		1,0,0,0,1579,1512,1,0,0,0,1579,1513,1,0,0,0,1579,1514,1,0,0,0,1579,1515,
		1,0,0,0,1579,1516,1,0,0,0,1579,1517,1,0,0,0,1579,1518,1,0,0,0,1579,1519,
		1,0,0,0,1579,1520,1,0,0,0,1579,1521,1,0,0,0,1579,1522,1,0,0,0,1579,1523,
		1,0,0,0,1579,1524,1,0,0,0,1579,1525,1,0,0,0,1579,1526,1,0,0,0,1579,1527,
		1,0,0,0,1579,1528,1,0,0,0,1579,1529,1,0,0,0,1579,1530,1,0,0,0,1579,1531,
		1,0,0,0,1579,1532,1,0,0,0,1579,1533,1,0,0,0,1579,1534,1,0,0,0,1579,1535,
		1,0,0,0,1579,1536,1,0,0,0,1579,1537,1,0,0,0,1579,1538,1,0,0,0,1579,1539,
		1,0,0,0,1579,1540,1,0,0,0,1579,1541,1,0,0,0,1579,1542,1,0,0,0,1579,1543,
		1,0,0,0,1579,1544,1,0,0,0,1579,1545,1,0,0,0,1579,1546,1,0,0,0,1579,1547,
		1,0,0,0,1579,1548,1,0,0,0,1579,1549,1,0,0,0,1579,1550,1,0,0,0,1579,1551,
		1,0,0,0,1579,1552,1,0,0,0,1579,1553,1,0,0,0,1579,1554,1,0,0,0,1579,1555,
		1,0,0,0,1579,1556,1,0,0,0,1579,1557,1,0,0,0,1579,1558,1,0,0,0,1579,1559,
		1,0,0,0,1579,1560,1,0,0,0,1579,1561,1,0,0,0,1579,1562,1,0,0,0,1579,1563,
		1,0,0,0,1579,1564,1,0,0,0,1579,1565,1,0,0,0,1579,1566,1,0,0,0,1579,1567,
		1,0,0,0,1579,1568,1,0,0,0,1579,1569,1,0,0,0,1579,1570,1,0,0,0,1579,1571,
		1,0,0,0,1579,1572,1,0,0,0,1579,1573,1,0,0,0,1579,1574,1,0,0,0,1579,1575,
		1,0,0,0,1579,1576,1,0,0,0,1579,1577,1,0,0,0,1579,1578,1,0,0,0,1580,7,1,
		0,0,0,1581,1582,5,471,0,0,1582,1583,3,1210,605,0,1583,9,1,0,0,0,1584,1585,
		5,84,0,0,1585,1586,5,349,0,0,1586,1588,3,1408,704,0,1587,1589,3,12,6,0,
		1588,1587,1,0,0,0,1588,1589,1,0,0,0,1589,1590,1,0,0,0,1590,1591,3,14,7,
		0,1591,11,1,0,0,0,1592,1593,5,143,0,0,1593,13,1,0,0,0,1594,1596,3,20,10,
		0,1595,1594,1,0,0,0,1596,1599,1,0,0,0,1597,1595,1,0,0,0,1597,1598,1,0,
		0,0,1598,15,1,0,0,0,1599,1597,1,0,0,0,1600,1602,3,18,9,0,1601,1600,1,0,
		0,0,1602,1605,1,0,0,0,1603,1601,1,0,0,0,1603,1604,1,0,0,0,1604,17,1,0,
		0,0,1605,1603,1,0,0,0,1606,1609,5,318,0,0,1607,1610,3,1400,700,0,1608,
		1610,5,116,0,0,1609,1607,1,0,0,0,1609,1608,1,0,0,0,1610,1625,1,0,0,0,1611,
		1612,7,0,0,0,1612,1613,5,318,0,0,1613,1625,3,1400,700,0,1614,1625,5,266,
		0,0,1615,1616,5,202,0,0,1616,1617,5,112,0,0,1617,1625,3,1406,703,0,1618,
		1619,5,402,0,0,1619,1620,5,399,0,0,1620,1625,3,1400,700,0,1621,1622,5,
		137,0,0,1622,1625,3,1412,706,0,1623,1625,3,1436,718,0,1624,1606,1,0,0,
		0,1624,1611,1,0,0,0,1624,1614,1,0,0,0,1624,1615,1,0,0,0,1624,1618,1,0,
		0,0,1624,1621,1,0,0,0,1624,1623,1,0,0,0,1625,19,1,0,0,0,1626,1637,3,18,
		9,0,1627,1628,5,379,0,0,1628,1637,3,1398,699,0,1629,1630,5,172,0,0,1630,
		1637,3,1412,706,0,1631,1632,5,349,0,0,1632,1637,3,1412,706,0,1633,1634,
		5,106,0,0,1634,1635,7,1,0,0,1635,1637,3,1412,706,0,1636,1626,1,0,0,0,1636,
		1627,1,0,0,0,1636,1629,1,0,0,0,1636,1631,1,0,0,0,1636,1633,1,0,0,0,1637,
		21,1,0,0,0,1638,1639,5,84,0,0,1639,1640,5,137,0,0,1640,1642,3,1408,704,
		0,1641,1643,3,12,6,0,1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1644,1,0,
		0,0,1644,1645,3,14,7,0,1645,23,1,0,0,0,1646,1647,5,176,0,0,1647,1648,7,
		2,0,0,1648,1650,3,1410,705,0,1649,1651,3,12,6,0,1650,1649,1,0,0,0,1650,
		1651,1,0,0,0,1651,1652,1,0,0,0,1652,1653,3,16,8,0,1653,25,1,0,0,0,1654,
		1655,5,106,0,0,1655,1656,5,213,0,0,1656,1657,3,1382,691,0,1657,27,1,0,
		0,0,1658,1659,5,176,0,0,1659,1661,7,2,0,0,1660,1662,5,68,0,0,1661,1660,
		1,0,0,0,1661,1662,1,0,0,0,1662,1663,1,0,0,0,1663,1665,3,1410,705,0,1664,
		1666,3,26,13,0,1665,1664,1,0,0,0,1665,1666,1,0,0,0,1666,1667,1,0,0,0,1667,
		1668,3,76,38,0,1668,29,1,0,0,0,1669,1670,5,229,0,0,1670,1673,7,3,0,0,1671,
		1672,5,258,0,0,1672,1674,5,427,0,0,1673,1671,1,0,0,0,1673,1674,1,0,0,0,
		1674,1675,1,0,0,0,1675,1676,3,1412,706,0,1676,31,1,0,0,0,1677,1678,5,84,
		0,0,1678,1679,5,104,0,0,1679,1681,3,1408,704,0,1680,1682,3,12,6,0,1681,
		1680,1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,1684,3,14,7,0,1684,
		33,1,0,0,0,1685,1686,5,176,0,0,1686,1687,5,104,0,0,1687,1688,3,1410,705,
		0,1688,1689,3,36,18,0,1689,1690,5,137,0,0,1690,1691,3,1412,706,0,1691,
		35,1,0,0,0,1692,1693,7,4,0,0,1693,37,1,0,0,0,1694,1695,5,84,0,0,1695,1699,
		5,354,0,0,1696,1697,5,258,0,0,1697,1698,5,115,0,0,1698,1700,5,427,0,0,
		1699,1696,1,0,0,0,1699,1700,1,0,0,0,1700,1707,1,0,0,0,1701,1703,3,40,20,
		0,1702,1701,1,0,0,0,1702,1703,1,0,0,0,1703,1704,1,0,0,0,1704,1705,5,144,
		0,0,1705,1708,3,1410,705,0,1706,1708,3,1414,707,0,1707,1702,1,0,0,0,1707,
		1706,1,0,0,0,1708,1709,1,0,0,0,1709,1710,3,42,21,0,1710,39,1,0,0,0,1711,
		1712,3,1414,707,0,1712,41,1,0,0,0,1713,1715,3,44,22,0,1714,1713,1,0,0,
		0,1715,1718,1,0,0,0,1716,1714,1,0,0,0,1716,1717,1,0,0,0,1717,43,1,0,0,
		0,1718,1716,1,0,0,0,1719,1726,3,168,84,0,1720,1726,3,584,292,0,1721,1726,
		3,274,137,0,1722,1726,3,400,200,0,1723,1726,3,548,274,0,1724,1726,3,794,
		397,0,1725,1719,1,0,0,0,1725,1720,1,0,0,0,1725,1721,1,0,0,0,1725,1722,
		1,0,0,0,1725,1723,1,0,0,0,1725,1724,1,0,0,0,1726,45,1,0,0,0,1727,1729,
		5,364,0,0,1728,1730,7,5,0,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1731,
		1,0,0,0,1731,1732,3,48,24,0,1732,47,1,0,0,0,1733,1734,5,387,0,0,1734,1742,
		3,788,394,0,1735,1736,5,363,0,0,1736,1737,5,192,0,0,1737,1738,5,74,0,0,
		1738,1739,5,387,0,0,1739,1742,3,788,394,0,1740,1742,3,52,26,0,1741,1733,
		1,0,0,0,1741,1735,1,0,0,0,1741,1740,1,0,0,0,1742,49,1,0,0,0,1743,1744,
		3,54,27,0,1744,1747,7,6,0,0,1745,1748,3,56,28,0,1746,1748,5,91,0,0,1747,
		1745,1,0,0,0,1747,1746,1,0,0,0,1748,51,1,0,0,0,1749,1777,3,50,25,0,1750,
		1751,3,54,27,0,1751,1752,5,102,0,0,1752,1753,5,472,0,0,1753,1777,1,0,0,
		0,1754,1755,5,449,0,0,1755,1756,5,417,0,0,1756,1777,3,64,32,0,1757,1758,
		5,190,0,0,1758,1777,3,1400,700,0,1759,1760,5,354,0,0,1760,1777,3,1400,
		700,0,1761,1763,5,298,0,0,1762,1764,3,66,33,0,1763,1762,1,0,0,0,1763,1764,
		1,0,0,0,1764,1777,1,0,0,0,1765,1766,5,349,0,0,1766,1777,3,68,34,0,1767,
		1768,5,363,0,0,1768,1769,5,144,0,0,1769,1777,3,68,34,0,1770,1771,5,414,
		0,0,1771,1772,5,310,0,0,1772,1777,3,1228,614,0,1773,1774,5,387,0,0,1774,
		1775,5,368,0,0,1775,1777,3,1400,700,0,1776,1749,1,0,0,0,1776,1750,1,0,
		0,0,1776,1754,1,0,0,0,1776,1757,1,0,0,0,1776,1759,1,0,0,0,1776,1761,1,
		0,0,0,1776,1765,1,0,0,0,1776,1767,1,0,0,0,1776,1770,1,0,0,0,1776,1773,
		1,0,0,0,1777,53,1,0,0,0,1778,1783,3,1414,707,0,1779,1780,5,11,0,0,1780,
		1782,3,1414,707,0,1781,1779,1,0,0,0,1782,1785,1,0,0,0,1783,1781,1,0,0,
		0,1783,1784,1,0,0,0,1784,55,1,0,0,0,1785,1783,1,0,0,0,1786,1791,3,58,29,
		0,1787,1788,5,6,0,0,1788,1790,3,58,29,0,1789,1787,1,0,0,0,1790,1793,1,
		0,0,0,1791,1789,1,0,0,0,1791,1792,1,0,0,0,1792,57,1,0,0,0,1793,1791,1,
		0,0,0,1794,1797,3,62,31,0,1795,1797,3,288,144,0,1796,1794,1,0,0,0,1796,
		1795,1,0,0,0,1797,59,1,0,0,0,1798,1799,5,331,0,0,1799,1804,7,7,0,0,1800,
		1801,5,341,0,0,1801,1804,5,331,0,0,1802,1804,5,361,0,0,1803,1798,1,0,0,
		0,1803,1800,1,0,0,0,1803,1802,1,0,0,0,1804,61,1,0,0,0,1805,1810,5,134,
		0,0,1806,1810,5,98,0,0,1807,1810,5,118,0,0,1808,1810,3,68,34,0,1809,1805,
		1,0,0,0,1809,1806,1,0,0,0,1809,1807,1,0,0,0,1809,1808,1,0,0,0,1810,63,
		1,0,0,0,1811,1828,3,1400,700,0,1812,1828,3,1436,718,0,1813,1814,3,1150,
		575,0,1814,1816,3,1400,700,0,1815,1817,3,1154,577,0,1816,1815,1,0,0,0,
		1816,1817,1,0,0,0,1817,1828,1,0,0,0,1818,1819,3,1150,575,0,1819,1820,5,
		2,0,0,1820,1821,3,1398,699,0,1821,1822,5,3,0,0,1822,1823,3,1400,700,0,
		1823,1828,1,0,0,0,1824,1828,3,288,144,0,1825,1828,5,91,0,0,1826,1828,5,
		283,0,0,1827,1811,1,0,0,0,1827,1812,1,0,0,0,1827,1813,1,0,0,0,1827,1818,
		1,0,0,0,1827,1824,1,0,0,0,1827,1825,1,0,0,0,1827,1826,1,0,0,0,1828,65,
		1,0,0,0,1829,1832,3,1400,700,0,1830,1832,5,91,0,0,1831,1829,1,0,0,0,1831,
		1830,1,0,0,0,1832,67,1,0,0,0,1833,1836,3,1418,709,0,1834,1836,3,1400,700,
		0,1835,1833,1,0,0,0,1835,1834,1,0,0,0,1836,69,1,0,0,0,1837,1838,5,344,
		0,0,1838,1839,3,72,36,0,1839,71,1,0,0,0,1840,1849,3,74,37,0,1841,1842,
		5,449,0,0,1842,1849,5,417,0,0,1843,1844,5,387,0,0,1844,1845,5,273,0,0,
		1845,1849,5,280,0,0,1846,1847,5,363,0,0,1847,1849,5,144,0,0,1848,1840,
		1,0,0,0,1848,1841,1,0,0,0,1848,1843,1,0,0,0,1848,1846,1,0,0,0,1849,73,
		1,0,0,0,1850,1853,3,54,27,0,1851,1853,5,68,0,0,1852,1850,1,0,0,0,1852,
		1851,1,0,0,0,1853,75,1,0,0,0,1854,1855,5,364,0,0,1855,1858,3,48,24,0,1856,
		1858,3,70,35,0,1857,1854,1,0,0,0,1857,1856,1,0,0,0,1858,77,1,0,0,0,1859,
		1860,5,364,0,0,1860,1863,3,52,26,0,1861,1863,3,70,35,0,1862,1859,1,0,0,
		0,1862,1861,1,0,0,0,1863,79,1,0,0,0,1864,1874,5,366,0,0,1865,1875,3,54,
		27,0,1866,1867,5,449,0,0,1867,1875,5,417,0,0,1868,1869,5,387,0,0,1869,
		1870,5,273,0,0,1870,1875,5,280,0,0,1871,1872,5,363,0,0,1872,1875,5,144,
		0,0,1873,1875,5,68,0,0,1874,1865,1,0,0,0,1874,1866,1,0,0,0,1874,1868,1,
		0,0,0,1874,1871,1,0,0,0,1874,1873,1,0,0,0,1875,81,1,0,0,0,1876,1877,5,
		364,0,0,1877,1878,5,203,0,0,1878,1879,3,84,42,0,1879,1880,3,86,43,0,1880,
		83,1,0,0,0,1881,1884,5,68,0,0,1882,1884,3,1376,688,0,1883,1881,1,0,0,0,
		1883,1882,1,0,0,0,1884,85,1,0,0,0,1885,1886,7,8,0,0,1886,87,1,0,0,0,1887,
		1888,5,193,0,0,1888,89,1,0,0,0,1889,1890,5,225,0,0,1890,1891,7,9,0,0,1891,
		91,1,0,0,0,1892,1893,5,176,0,0,1893,1896,5,130,0,0,1894,1895,5,258,0,0,
		1895,1897,5,427,0,0,1896,1894,1,0,0,0,1896,1897,1,0,0,0,1897,1898,1,0,
		0,0,1898,1901,3,1072,536,0,1899,1902,3,94,47,0,1900,1902,3,96,48,0,1901,
		1899,1,0,0,0,1901,1900,1,0,0,0,1902,2005,1,0,0,0,1903,1904,5,176,0,0,1904,
		1905,5,130,0,0,1905,1906,5,68,0,0,1906,1907,5,106,0,0,1907,1908,5,382,
		0,0,1908,1912,3,1382,691,0,1909,1910,5,312,0,0,1910,1911,5,185,0,0,1911,
		1913,3,1412,706,0,1912,1909,1,0,0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,
		0,1914,1915,5,364,0,0,1915,1916,5,382,0,0,1916,1918,3,1382,691,0,1917,
		1919,3,942,471,0,1918,1917,1,0,0,0,1918,1919,1,0,0,0,1919,2005,1,0,0,0,
		1920,1921,5,176,0,0,1921,1924,5,264,0,0,1922,1923,5,258,0,0,1923,1925,
		5,427,0,0,1924,1922,1,0,0,0,1924,1925,1,0,0,0,1925,1926,1,0,0,0,1926,1929,
		3,1378,689,0,1927,1930,3,94,47,0,1928,1930,3,98,49,0,1929,1927,1,0,0,0,
		1929,1928,1,0,0,0,1930,2005,1,0,0,0,1931,1932,5,176,0,0,1932,1933,5,264,
		0,0,1933,1934,5,68,0,0,1934,1935,5,106,0,0,1935,1936,5,382,0,0,1936,1940,
		3,1382,691,0,1937,1938,5,312,0,0,1938,1939,5,185,0,0,1939,1941,3,1412,
		706,0,1940,1937,1,0,0,0,1940,1941,1,0,0,0,1941,1942,1,0,0,0,1942,1943,
		5,364,0,0,1943,1944,5,382,0,0,1944,1946,3,1382,691,0,1945,1947,3,942,471,
		0,1946,1945,1,0,0,0,1946,1947,1,0,0,0,1947,2005,1,0,0,0,1948,1949,5,176,
		0,0,1949,1952,5,359,0,0,1950,1951,5,258,0,0,1951,1953,5,427,0,0,1952,1950,
		1,0,0,0,1952,1953,1,0,0,0,1953,1954,1,0,0,0,1954,1955,3,1378,689,0,1955,
		1956,3,94,47,0,1956,2005,1,0,0,0,1957,1958,5,176,0,0,1958,1961,5,407,0,
		0,1959,1960,5,258,0,0,1960,1962,5,427,0,0,1961,1959,1,0,0,0,1961,1962,
		1,0,0,0,1962,1963,1,0,0,0,1963,1964,3,1378,689,0,1964,1965,3,94,47,0,1965,
		2005,1,0,0,0,1966,1967,5,176,0,0,1967,1968,5,289,0,0,1968,1971,5,407,0,
		0,1969,1970,5,258,0,0,1970,1972,5,427,0,0,1971,1969,1,0,0,0,1971,1972,
		1,0,0,0,1972,1973,1,0,0,0,1973,1974,3,1378,689,0,1974,1975,3,94,47,0,1975,
		2005,1,0,0,0,1976,1977,5,176,0,0,1977,1978,5,289,0,0,1978,1979,5,407,0,
		0,1979,1980,5,68,0,0,1980,1981,5,106,0,0,1981,1982,5,382,0,0,1982,1986,
		3,1382,691,0,1983,1984,5,312,0,0,1984,1985,5,185,0,0,1985,1987,3,1412,
		706,0,1986,1983,1,0,0,0,1986,1987,1,0,0,0,1987,1988,1,0,0,0,1988,1989,
		5,364,0,0,1989,1990,5,382,0,0,1990,1992,3,1382,691,0,1991,1993,3,942,471,
		0,1992,1991,1,0,0,0,1992,1993,1,0,0,0,1993,2005,1,0,0,0,1994,1995,5,176,
		0,0,1995,1996,5,101,0,0,1996,1999,5,130,0,0,1997,1998,5,258,0,0,1998,2000,
		5,427,0,0,1999,1997,1,0,0,0,1999,2000,1,0,0,0,2000,2001,1,0,0,0,2001,2002,
		3,1072,536,0,2002,2003,3,94,47,0,2003,2005,1,0,0,0,2004,1892,1,0,0,0,2004,
		1903,1,0,0,0,2004,1920,1,0,0,0,2004,1931,1,0,0,0,2004,1948,1,0,0,0,2004,
		1957,1,0,0,0,2004,1966,1,0,0,0,2004,1976,1,0,0,0,2004,1994,1,0,0,0,2005,
		93,1,0,0,0,2006,2011,3,100,50,0,2007,2008,5,6,0,0,2008,2010,3,100,50,0,
		2009,2007,1,0,0,0,2010,2013,1,0,0,0,2011,2009,1,0,0,0,2011,2012,1,0,0,
		0,2012,95,1,0,0,0,2013,2011,1,0,0,0,2014,2015,5,473,0,0,2015,2016,5,316,
		0,0,2016,2017,3,1378,689,0,2017,2018,3,124,62,0,2018,2023,1,0,0,0,2019,
		2020,5,474,0,0,2020,2021,5,316,0,0,2021,2023,3,1378,689,0,2022,2014,1,
		0,0,0,2022,2019,1,0,0,0,2023,97,1,0,0,0,2024,2025,5,473,0,0,2025,2026,
		5,316,0,0,2026,2027,3,1378,689,0,2027,99,1,0,0,0,2028,2029,5,171,0,0,2029,
		2327,3,184,92,0,2030,2031,5,171,0,0,2031,2032,5,258,0,0,2032,2033,5,115,
		0,0,2033,2034,5,427,0,0,2034,2327,3,184,92,0,2035,2036,5,171,0,0,2036,
		2037,5,82,0,0,2037,2327,3,184,92,0,2038,2039,5,171,0,0,2039,2040,5,82,
		0,0,2040,2041,5,258,0,0,2041,2042,5,115,0,0,2042,2043,5,427,0,0,2043,2327,
		3,184,92,0,2044,2046,5,176,0,0,2045,2047,3,720,360,0,2046,2045,1,0,0,0,
		2046,2047,1,0,0,0,2047,2048,1,0,0,0,2048,2049,3,1414,707,0,2049,2050,3,
		102,51,0,2050,2327,1,0,0,0,2051,2053,5,176,0,0,2052,2054,3,720,360,0,2053,
		2052,1,0,0,0,2053,2054,1,0,0,0,2054,2055,1,0,0,0,2055,2056,3,1414,707,
		0,2056,2057,5,229,0,0,2057,2058,5,115,0,0,2058,2059,5,116,0,0,2059,2327,
		1,0,0,0,2060,2062,5,176,0,0,2061,2063,3,720,360,0,2062,2061,1,0,0,0,2062,
		2063,1,0,0,0,2063,2064,1,0,0,0,2064,2065,3,1414,707,0,2065,2066,5,364,
		0,0,2066,2067,5,115,0,0,2067,2068,5,116,0,0,2068,2327,1,0,0,0,2069,2071,
		5,176,0,0,2070,2072,3,720,360,0,2071,2070,1,0,0,0,2071,2072,1,0,0,0,2072,
		2073,1,0,0,0,2073,2074,3,1414,707,0,2074,2075,5,229,0,0,2075,2076,5,475,
		0,0,2076,2327,1,0,0,0,2077,2079,5,176,0,0,2078,2080,3,720,360,0,2079,2078,
		1,0,0,0,2079,2080,1,0,0,0,2080,2081,1,0,0,0,2081,2082,3,1414,707,0,2082,
		2083,5,229,0,0,2083,2084,5,475,0,0,2084,2085,5,258,0,0,2085,2086,5,427,
		0,0,2086,2327,1,0,0,0,2087,2089,5,176,0,0,2088,2090,3,720,360,0,2089,2088,
		1,0,0,0,2089,2090,1,0,0,0,2090,2091,1,0,0,0,2091,2092,3,1414,707,0,2092,
		2093,5,364,0,0,2093,2094,5,373,0,0,2094,2095,3,1406,703,0,2095,2327,1,
		0,0,0,2096,2098,5,176,0,0,2097,2099,3,720,360,0,2098,2097,1,0,0,0,2098,
		2099,1,0,0,0,2099,2100,1,0,0,0,2100,2101,3,1398,699,0,2101,2102,5,364,
		0,0,2102,2103,5,373,0,0,2103,2104,3,1406,703,0,2104,2327,1,0,0,0,2105,
		2107,5,176,0,0,2106,2108,3,720,360,0,2107,2106,1,0,0,0,2107,2108,1,0,0,
		0,2108,2109,1,0,0,0,2109,2110,3,1414,707,0,2110,2111,5,364,0,0,2111,2112,
		3,112,56,0,2112,2327,1,0,0,0,2113,2115,5,176,0,0,2114,2116,3,720,360,0,
		2115,2114,1,0,0,0,2115,2116,1,0,0,0,2116,2117,1,0,0,0,2117,2118,3,1414,
		707,0,2118,2119,5,344,0,0,2119,2120,3,112,56,0,2120,2327,1,0,0,0,2121,
		2123,5,176,0,0,2122,2124,3,720,360,0,2123,2122,1,0,0,0,2123,2124,1,0,0,
		0,2124,2125,1,0,0,0,2125,2126,3,1414,707,0,2126,2127,5,364,0,0,2127,2128,
		5,376,0,0,2128,2129,3,1414,707,0,2129,2327,1,0,0,0,2130,2132,5,176,0,0,
		2131,2133,3,720,360,0,2132,2131,1,0,0,0,2132,2133,1,0,0,0,2133,2134,1,
		0,0,0,2134,2135,3,1414,707,0,2135,2136,5,171,0,0,2136,2137,5,476,0,0,2137,
		2138,3,194,97,0,2138,2139,5,74,0,0,2139,2141,5,257,0,0,2140,2142,3,280,
		140,0,2141,2140,1,0,0,0,2141,2142,1,0,0,0,2142,2327,1,0,0,0,2143,2145,
		5,176,0,0,2144,2146,3,720,360,0,2145,2144,1,0,0,0,2145,2146,1,0,0,0,2146,
		2147,1,0,0,0,2147,2148,3,1414,707,0,2148,2149,3,120,60,0,2149,2327,1,0,
		0,0,2150,2152,5,176,0,0,2151,2153,3,720,360,0,2152,2151,1,0,0,0,2152,2153,
		1,0,0,0,2153,2154,1,0,0,0,2154,2155,3,1414,707,0,2155,2156,5,229,0,0,2156,
		2157,5,257,0,0,2157,2327,1,0,0,0,2158,2160,5,176,0,0,2159,2161,3,720,360,
		0,2160,2159,1,0,0,0,2160,2161,1,0,0,0,2161,2162,1,0,0,0,2162,2163,3,1414,
		707,0,2163,2164,5,229,0,0,2164,2165,5,257,0,0,2165,2166,5,258,0,0,2166,
		2167,5,427,0,0,2167,2327,1,0,0,0,2168,2170,5,229,0,0,2169,2171,3,720,360,
		0,2170,2169,1,0,0,0,2170,2171,1,0,0,0,2171,2172,1,0,0,0,2172,2173,5,258,
		0,0,2173,2174,5,427,0,0,2174,2176,3,1414,707,0,2175,2177,3,104,52,0,2176,
		2175,1,0,0,0,2176,2177,1,0,0,0,2177,2327,1,0,0,0,2178,2180,5,229,0,0,2179,
		2181,3,720,360,0,2180,2179,1,0,0,0,2180,2181,1,0,0,0,2181,2182,1,0,0,0,
		2182,2184,3,1414,707,0,2183,2185,3,104,52,0,2184,2183,1,0,0,0,2184,2185,
		1,0,0,0,2185,2327,1,0,0,0,2186,2188,5,176,0,0,2187,2189,3,720,360,0,2188,
		2187,1,0,0,0,2188,2189,1,0,0,0,2189,2190,1,0,0,0,2190,2192,3,1414,707,
		0,2191,2193,3,722,361,0,2192,2191,1,0,0,0,2192,2193,1,0,0,0,2193,2194,
		1,0,0,0,2194,2195,5,391,0,0,2195,2197,3,1116,558,0,2196,2198,3,106,53,
		0,2197,2196,1,0,0,0,2197,2198,1,0,0,0,2198,2200,1,0,0,0,2199,2201,3,108,
		54,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,2327,1,0,0,0,2202,2204,5,
		176,0,0,2203,2205,3,720,360,0,2204,2203,1,0,0,0,2204,2205,1,0,0,0,2205,
		2206,1,0,0,0,2206,2207,3,1414,707,0,2207,2208,3,340,170,0,2208,2327,1,
		0,0,0,2209,2210,5,171,0,0,2210,2327,3,204,102,0,2211,2212,5,176,0,0,2212,
		2213,5,83,0,0,2213,2214,3,1382,691,0,2214,2215,3,436,218,0,2215,2327,1,
		0,0,0,2216,2217,5,403,0,0,2217,2218,5,83,0,0,2218,2327,3,1382,691,0,2219,
		2220,5,229,0,0,2220,2221,5,83,0,0,2221,2222,5,258,0,0,2222,2223,5,427,
		0,0,2223,2225,3,1382,691,0,2224,2226,3,104,52,0,2225,2224,1,0,0,0,2225,
		2226,1,0,0,0,2226,2327,1,0,0,0,2227,2228,5,229,0,0,2228,2229,5,83,0,0,
		2229,2231,3,1382,691,0,2230,2232,3,104,52,0,2231,2230,1,0,0,0,2231,2232,
		1,0,0,0,2232,2327,1,0,0,0,2233,2234,5,364,0,0,2234,2235,5,410,0,0,2235,
		2327,5,308,0,0,2236,2237,5,196,0,0,2237,2238,5,118,0,0,2238,2327,3,1382,
		691,0,2239,2240,5,364,0,0,2240,2241,5,410,0,0,2241,2327,5,196,0,0,2242,
		2243,5,364,0,0,2243,2327,5,477,0,0,2244,2245,5,364,0,0,2245,2327,5,398,
		0,0,2246,2247,5,231,0,0,2247,2248,5,388,0,0,2248,2327,3,1382,691,0,2249,
		2250,5,231,0,0,2250,2251,5,177,0,0,2251,2252,5,388,0,0,2252,2327,3,1382,
		691,0,2253,2254,5,231,0,0,2254,2255,5,343,0,0,2255,2256,5,388,0,0,2256,
		2327,3,1382,691,0,2257,2258,5,231,0,0,2258,2259,5,388,0,0,2259,2327,5,
		68,0,0,2260,2261,5,231,0,0,2261,2262,5,388,0,0,2262,2327,5,137,0,0,2263,
		2264,5,224,0,0,2264,2265,5,388,0,0,2265,2327,3,1382,691,0,2266,2267,5,
		224,0,0,2267,2268,5,388,0,0,2268,2327,5,68,0,0,2269,2270,5,224,0,0,2270,
		2271,5,388,0,0,2271,2327,5,137,0,0,2272,2273,5,231,0,0,2273,2274,5,352,
		0,0,2274,2327,3,1382,691,0,2275,2276,5,231,0,0,2276,2277,5,177,0,0,2277,
		2278,5,352,0,0,2278,2327,3,1382,691,0,2279,2280,5,231,0,0,2280,2281,5,
		343,0,0,2281,2282,5,352,0,0,2282,2327,3,1382,691,0,2283,2284,5,224,0,0,
		2284,2285,5,352,0,0,2285,2327,3,1382,691,0,2286,2287,5,266,0,0,2287,2327,
		3,1378,689,0,2288,2289,5,300,0,0,2289,2290,5,266,0,0,2290,2327,3,1378,
		689,0,2291,2292,5,306,0,0,2292,2327,3,520,260,0,2293,2294,5,115,0,0,2294,
		2327,5,306,0,0,2295,2296,5,313,0,0,2296,2297,5,132,0,0,2297,2327,3,1410,
		705,0,2298,2299,5,364,0,0,2299,2300,5,382,0,0,2300,2327,3,1382,691,0,2301,
		2302,5,364,0,0,2302,2327,3,112,56,0,2303,2304,5,344,0,0,2304,2327,3,112,
		56,0,2305,2306,5,343,0,0,2306,2307,5,257,0,0,2307,2327,3,110,55,0,2308,
		2309,5,231,0,0,2309,2310,5,445,0,0,2310,2311,5,280,0,0,2311,2327,5,358,
		0,0,2312,2313,5,224,0,0,2313,2314,5,445,0,0,2314,2315,5,280,0,0,2315,2327,
		5,358,0,0,2316,2317,5,247,0,0,2317,2318,5,445,0,0,2318,2319,5,280,0,0,
		2319,2327,5,358,0,0,2320,2321,5,300,0,0,2321,2322,5,247,0,0,2322,2323,
		5,445,0,0,2323,2324,5,280,0,0,2324,2327,5,358,0,0,2325,2327,3,340,170,
		0,2326,2028,1,0,0,0,2326,2030,1,0,0,0,2326,2035,1,0,0,0,2326,2038,1,0,
		0,0,2326,2044,1,0,0,0,2326,2051,1,0,0,0,2326,2060,1,0,0,0,2326,2069,1,
		0,0,0,2326,2077,1,0,0,0,2326,2087,1,0,0,0,2326,2096,1,0,0,0,2326,2105,
		1,0,0,0,2326,2113,1,0,0,0,2326,2121,1,0,0,0,2326,2130,1,0,0,0,2326,2143,
		1,0,0,0,2326,2150,1,0,0,0,2326,2158,1,0,0,0,2326,2168,1,0,0,0,2326,2178,
		1,0,0,0,2326,2186,1,0,0,0,2326,2202,1,0,0,0,2326,2209,1,0,0,0,2326,2211,
		1,0,0,0,2326,2216,1,0,0,0,2326,2219,1,0,0,0,2326,2227,1,0,0,0,2326,2233,
		1,0,0,0,2326,2236,1,0,0,0,2326,2239,1,0,0,0,2326,2242,1,0,0,0,2326,2244,
		1,0,0,0,2326,2246,1,0,0,0,2326,2249,1,0,0,0,2326,2253,1,0,0,0,2326,2257,
		1,0,0,0,2326,2260,1,0,0,0,2326,2263,1,0,0,0,2326,2266,1,0,0,0,2326,2269,
		1,0,0,0,2326,2272,1,0,0,0,2326,2275,1,0,0,0,2326,2279,1,0,0,0,2326,2283,
		1,0,0,0,2326,2286,1,0,0,0,2326,2288,1,0,0,0,2326,2291,1,0,0,0,2326,2293,
		1,0,0,0,2326,2295,1,0,0,0,2326,2298,1,0,0,0,2326,2301,1,0,0,0,2326,2303,
		1,0,0,0,2326,2305,1,0,0,0,2326,2308,1,0,0,0,2326,2312,1,0,0,0,2326,2316,
		1,0,0,0,2326,2320,1,0,0,0,2326,2325,1,0,0,0,2327,101,1,0,0,0,2328,2329,
		5,364,0,0,2329,2330,5,91,0,0,2330,2334,3,1162,581,0,2331,2332,5,229,0,
		0,2332,2334,5,91,0,0,2333,2328,1,0,0,0,2333,2331,1,0,0,0,2334,103,1,0,
		0,0,2335,2336,7,10,0,0,2336,105,1,0,0,0,2337,2338,5,81,0,0,2338,2339,3,
		520,260,0,2339,107,1,0,0,0,2340,2341,5,138,0,0,2341,2342,3,1162,581,0,
		2342,109,1,0,0,0,2343,2350,5,301,0,0,2344,2350,5,151,0,0,2345,2350,5,91,
		0,0,2346,2347,5,138,0,0,2347,2348,5,264,0,0,2348,2350,3,1382,691,0,2349,
		2343,1,0,0,0,2349,2344,1,0,0,0,2349,2345,1,0,0,0,2349,2346,1,0,0,0,2350,
		111,1,0,0,0,2351,2352,5,2,0,0,2352,2353,3,116,58,0,2353,2354,5,3,0,0,2354,
		113,1,0,0,0,2355,2356,5,143,0,0,2356,2357,3,112,56,0,2357,115,1,0,0,0,
		2358,2363,3,118,59,0,2359,2360,5,6,0,0,2360,2362,3,118,59,0,2361,2359,
		1,0,0,0,2362,2365,1,0,0,0,2363,2361,1,0,0,0,2363,2364,1,0,0,0,2364,117,
		1,0,0,0,2365,2363,1,0,0,0,2366,2375,3,1420,710,0,2367,2368,5,10,0,0,2368,
		2376,3,462,231,0,2369,2370,5,11,0,0,2370,2373,3,1420,710,0,2371,2372,5,
		10,0,0,2372,2374,3,462,231,0,2373,2371,1,0,0,0,2373,2374,1,0,0,0,2374,
		2376,1,0,0,0,2375,2367,1,0,0,0,2375,2369,1,0,0,0,2375,2376,1,0,0,0,2376,
		119,1,0,0,0,2377,2379,3,122,61,0,2378,2377,1,0,0,0,2379,2380,1,0,0,0,2380,
		2378,1,0,0,0,2380,2381,1,0,0,0,2381,121,1,0,0,0,2382,2387,5,345,0,0,2383,
		2385,3,12,6,0,2384,2383,1,0,0,0,2384,2385,1,0,0,0,2385,2386,1,0,0,0,2386,
		2388,3,288,144,0,2387,2384,1,0,0,0,2387,2388,1,0,0,0,2388,2396,1,0,0,0,
		2389,2393,5,364,0,0,2390,2394,3,284,142,0,2391,2392,5,476,0,0,2392,2394,
		3,194,97,0,2393,2390,1,0,0,0,2393,2391,1,0,0,0,2394,2396,1,0,0,0,2395,
		2382,1,0,0,0,2395,2389,1,0,0,0,2396,123,1,0,0,0,2397,2398,5,100,0,0,2398,
		2399,5,453,0,0,2399,2400,5,143,0,0,2400,2401,5,2,0,0,2401,2402,3,128,64,
		0,2402,2403,5,3,0,0,2403,2424,1,0,0,0,2404,2405,5,100,0,0,2405,2406,5,
		453,0,0,2406,2407,5,106,0,0,2407,2408,5,2,0,0,2408,2409,3,1280,640,0,2409,
		2410,5,3,0,0,2410,2424,1,0,0,0,2411,2412,5,100,0,0,2412,2413,5,453,0,0,
		2413,2414,5,102,0,0,2414,2415,5,2,0,0,2415,2416,3,1280,640,0,2416,2417,
		5,3,0,0,2417,2418,5,132,0,0,2418,2419,5,2,0,0,2419,2420,3,1280,640,0,2420,
		2421,5,3,0,0,2421,2424,1,0,0,0,2422,2424,5,91,0,0,2423,2397,1,0,0,0,2423,
		2404,1,0,0,0,2423,2411,1,0,0,0,2423,2422,1,0,0,0,2424,125,1,0,0,0,2425,
		2426,3,1418,709,0,2426,2427,3,1398,699,0,2427,127,1,0,0,0,2428,2433,3,
		126,63,0,2429,2430,5,6,0,0,2430,2432,3,126,63,0,2431,2429,1,0,0,0,2432,
		2435,1,0,0,0,2433,2431,1,0,0,0,2433,2434,1,0,0,0,2434,129,1,0,0,0,2435,
		2433,1,0,0,0,2436,2437,5,176,0,0,2437,2438,5,391,0,0,2438,2439,3,520,260,
		0,2439,2440,3,132,66,0,2440,131,1,0,0,0,2441,2446,3,134,67,0,2442,2443,
		5,6,0,0,2443,2445,3,134,67,0,2444,2442,1,0,0,0,2445,2448,1,0,0,0,2446,
		2444,1,0,0,0,2446,2447,1,0,0,0,2447,133,1,0,0,0,2448,2446,1,0,0,0,2449,
		2450,5,171,0,0,2450,2451,5,181,0,0,2451,2453,3,1100,550,0,2452,2454,3,
		104,52,0,2453,2452,1,0,0,0,2453,2454,1,0,0,0,2454,2480,1,0,0,0,2455,2456,
		5,229,0,0,2456,2459,5,181,0,0,2457,2458,5,258,0,0,2458,2460,5,427,0,0,
		2459,2457,1,0,0,0,2459,2460,1,0,0,0,2460,2461,1,0,0,0,2461,2463,3,1414,
		707,0,2462,2464,3,104,52,0,2463,2462,1,0,0,0,2463,2464,1,0,0,0,2464,2480,
		1,0,0,0,2465,2466,5,176,0,0,2466,2467,5,181,0,0,2467,2469,3,1414,707,0,
		2468,2470,3,722,361,0,2469,2468,1,0,0,0,2469,2470,1,0,0,0,2470,2471,1,
		0,0,0,2471,2472,5,391,0,0,2472,2474,3,1116,558,0,2473,2475,3,106,53,0,
		2474,2473,1,0,0,0,2474,2475,1,0,0,0,2475,2477,1,0,0,0,2476,2478,3,104,
		52,0,2477,2476,1,0,0,0,2477,2478,1,0,0,0,2478,2480,1,0,0,0,2479,2449,1,
		0,0,0,2479,2455,1,0,0,0,2479,2465,1,0,0,0,2480,135,1,0,0,0,2481,2484,5,
		195,0,0,2482,2485,3,958,479,0,2483,2485,5,68,0,0,2484,2482,1,0,0,0,2484,
		2483,1,0,0,0,2485,137,1,0,0,0,2486,2488,5,207,0,0,2487,2489,3,152,76,0,
		2488,2487,1,0,0,0,2488,2489,1,0,0,0,2489,2490,1,0,0,0,2490,2492,3,1378,
		689,0,2491,2493,3,210,105,0,2492,2491,1,0,0,0,2492,2493,1,0,0,0,2493,2494,
		1,0,0,0,2494,2496,3,140,70,0,2495,2497,3,142,71,0,2496,2495,1,0,0,0,2496,
		2497,1,0,0,0,2497,2498,1,0,0,0,2498,2500,3,144,72,0,2499,2501,3,154,77,
		0,2500,2499,1,0,0,0,2500,2501,1,0,0,0,2501,2503,1,0,0,0,2502,2504,3,12,
		6,0,2503,2502,1,0,0,0,2503,2504,1,0,0,0,2504,2505,1,0,0,0,2505,2507,3,
		146,73,0,2506,2508,3,1092,546,0,2507,2506,1,0,0,0,2507,2508,1,0,0,0,2508,
		2524,1,0,0,0,2509,2510,5,207,0,0,2510,2511,5,2,0,0,2511,2512,3,898,449,
		0,2512,2513,5,3,0,0,2513,2515,5,132,0,0,2514,2516,3,142,71,0,2515,2514,
		1,0,0,0,2515,2516,1,0,0,0,2516,2517,1,0,0,0,2517,2519,3,144,72,0,2518,
		2520,3,12,6,0,2519,2518,1,0,0,0,2519,2520,1,0,0,0,2520,2521,1,0,0,0,2521,
		2522,3,146,73,0,2522,2524,1,0,0,0,2523,2486,1,0,0,0,2523,2509,1,0,0,0,
		2524,139,1,0,0,0,2525,2526,7,11,0,0,2526,141,1,0,0,0,2527,2528,5,328,0,
		0,2528,143,1,0,0,0,2529,2533,3,1400,700,0,2530,2533,5,374,0,0,2531,2533,
		5,375,0,0,2532,2529,1,0,0,0,2532,2530,1,0,0,0,2532,2531,1,0,0,0,2533,145,
		1,0,0,0,2534,2540,3,148,74,0,2535,2536,5,2,0,0,2536,2537,3,158,79,0,2537,
		2538,5,3,0,0,2538,2540,1,0,0,0,2539,2534,1,0,0,0,2539,2535,1,0,0,0,2540,
		147,1,0,0,0,2541,2543,3,150,75,0,2542,2541,1,0,0,0,2543,2546,1,0,0,0,2544,
		2542,1,0,0,0,2544,2545,1,0,0,0,2545,149,1,0,0,0,2546,2544,1,0,0,0,2547,
		2587,5,145,0,0,2548,2587,5,150,0,0,2549,2551,5,221,0,0,2550,2552,3,830,
		415,0,2551,2550,1,0,0,0,2551,2552,1,0,0,0,2552,2553,1,0,0,0,2553,2587,
		3,1400,700,0,2554,2556,5,116,0,0,2555,2557,3,830,415,0,2556,2555,1,0,0,
		0,2556,2557,1,0,0,0,2557,2558,1,0,0,0,2558,2587,3,1400,700,0,2559,2587,
		5,209,0,0,2560,2587,5,254,0,0,2561,2563,5,329,0,0,2562,2564,3,830,415,
		0,2563,2562,1,0,0,0,2563,2564,1,0,0,0,2564,2565,1,0,0,0,2565,2587,3,1400,
		700,0,2566,2568,5,235,0,0,2567,2569,3,830,415,0,2568,2567,1,0,0,0,2568,
		2569,1,0,0,0,2569,2570,1,0,0,0,2570,2587,3,1400,700,0,2571,2572,5,247,
		0,0,2572,2573,5,329,0,0,2573,2587,3,212,106,0,2574,2575,5,247,0,0,2575,
		2576,5,329,0,0,2576,2587,5,9,0,0,2577,2578,5,247,0,0,2578,2579,5,115,0,
		0,2579,2580,5,116,0,0,2580,2587,3,212,106,0,2581,2582,5,247,0,0,2582,2583,
		5,116,0,0,2583,2587,3,212,106,0,2584,2585,5,232,0,0,2585,2587,3,1400,700,
		0,2586,2547,1,0,0,0,2586,2548,1,0,0,0,2586,2549,1,0,0,0,2586,2554,1,0,
		0,0,2586,2559,1,0,0,0,2586,2560,1,0,0,0,2586,2561,1,0,0,0,2586,2566,1,
		0,0,0,2586,2571,1,0,0,0,2586,2574,1,0,0,0,2586,2577,1,0,0,0,2586,2581,
		1,0,0,0,2586,2584,1,0,0,0,2587,151,1,0,0,0,2588,2589,5,145,0,0,2589,153,
		1,0,0,0,2590,2592,3,156,78,0,2591,2590,1,0,0,0,2591,2592,1,0,0,0,2592,
		2593,1,0,0,0,2593,2594,5,222,0,0,2594,2595,3,1400,700,0,2595,155,1,0,0,
		0,2596,2597,5,138,0,0,2597,157,1,0,0,0,2598,2603,3,160,80,0,2599,2600,
		5,6,0,0,2600,2602,3,160,80,0,2601,2599,1,0,0,0,2602,2605,1,0,0,0,2603,
		2601,1,0,0,0,2603,2604,1,0,0,0,2604,159,1,0,0,0,2605,2603,1,0,0,0,2606,
		2608,3,1420,710,0,2607,2609,3,162,81,0,2608,2607,1,0,0,0,2608,2609,1,0,
		0,0,2609,161,1,0,0,0,2610,2618,3,62,31,0,2611,2618,3,288,144,0,2612,2618,
		5,9,0,0,2613,2614,5,2,0,0,2614,2615,3,164,82,0,2615,2616,5,3,0,0,2616,
		2618,1,0,0,0,2617,2610,1,0,0,0,2617,2611,1,0,0,0,2617,2612,1,0,0,0,2617,
		2613,1,0,0,0,2618,163,1,0,0,0,2619,2624,3,166,83,0,2620,2621,5,6,0,0,2621,
		2623,3,166,83,0,2622,2620,1,0,0,0,2623,2626,1,0,0,0,2624,2622,1,0,0,0,
		2624,2625,1,0,0,0,2625,165,1,0,0,0,2626,2624,1,0,0,0,2627,2628,3,62,31,
		0,2628,167,1,0,0,0,2629,2631,5,84,0,0,2630,2632,3,170,85,0,2631,2630,1,
		0,0,0,2631,2632,1,0,0,0,2632,2633,1,0,0,0,2633,2637,5,130,0,0,2634,2635,
		5,258,0,0,2635,2636,5,115,0,0,2636,2638,5,427,0,0,2637,2634,1,0,0,0,2637,
		2638,1,0,0,0,2638,2639,1,0,0,0,2639,2705,3,1378,689,0,2640,2642,5,2,0,
		0,2641,2643,3,172,86,0,2642,2641,1,0,0,0,2642,2643,1,0,0,0,2643,2644,1,
		0,0,0,2644,2646,5,3,0,0,2645,2647,3,234,117,0,2646,2645,1,0,0,0,2646,2647,
		1,0,0,0,2647,2649,1,0,0,0,2648,2650,3,236,118,0,2649,2648,1,0,0,0,2649,
		2650,1,0,0,0,2650,2652,1,0,0,0,2651,2653,3,244,122,0,2652,2651,1,0,0,0,
		2652,2653,1,0,0,0,2653,2655,1,0,0,0,2654,2656,3,246,123,0,2655,2654,1,
		0,0,0,2655,2656,1,0,0,0,2656,2658,1,0,0,0,2657,2659,3,248,124,0,2658,2657,
		1,0,0,0,2658,2659,1,0,0,0,2659,2661,1,0,0,0,2660,2662,3,250,125,0,2661,
		2660,1,0,0,0,2661,2662,1,0,0,0,2662,2706,1,0,0,0,2663,2664,5,306,0,0,2664,
		2666,3,520,260,0,2665,2667,3,174,87,0,2666,2665,1,0,0,0,2666,2667,1,0,
		0,0,2667,2669,1,0,0,0,2668,2670,3,236,118,0,2669,2668,1,0,0,0,2669,2670,
		1,0,0,0,2670,2672,1,0,0,0,2671,2673,3,244,122,0,2672,2671,1,0,0,0,2672,
		2673,1,0,0,0,2673,2675,1,0,0,0,2674,2676,3,246,123,0,2675,2674,1,0,0,0,
		2675,2676,1,0,0,0,2676,2678,1,0,0,0,2677,2679,3,248,124,0,2678,2677,1,
		0,0,0,2678,2679,1,0,0,0,2679,2681,1,0,0,0,2680,2682,3,250,125,0,2681,2680,
		1,0,0,0,2681,2682,1,0,0,0,2682,2706,1,0,0,0,2683,2684,5,316,0,0,2684,2685,
		5,306,0,0,2685,2687,3,1378,689,0,2686,2688,3,174,87,0,2687,2686,1,0,0,
		0,2687,2688,1,0,0,0,2688,2689,1,0,0,0,2689,2691,3,124,62,0,2690,2692,3,
		236,118,0,2691,2690,1,0,0,0,2691,2692,1,0,0,0,2692,2694,1,0,0,0,2693,2695,
		3,244,122,0,2694,2693,1,0,0,0,2694,2695,1,0,0,0,2695,2697,1,0,0,0,2696,
		2698,3,246,123,0,2697,2696,1,0,0,0,2697,2698,1,0,0,0,2698,2700,1,0,0,0,
		2699,2701,3,248,124,0,2700,2699,1,0,0,0,2700,2701,1,0,0,0,2701,2703,1,
		0,0,0,2702,2704,3,250,125,0,2703,2702,1,0,0,0,2703,2704,1,0,0,0,2704,2706,
		1,0,0,0,2705,2640,1,0,0,0,2705,2663,1,0,0,0,2705,2683,1,0,0,0,2706,169,
		1,0,0,0,2707,2715,5,385,0,0,2708,2715,5,383,0,0,2709,2710,5,283,0,0,2710,
		2715,7,12,0,0,2711,2712,5,251,0,0,2712,2715,7,12,0,0,2713,2715,5,398,0,
		0,2714,2707,1,0,0,0,2714,2708,1,0,0,0,2714,2709,1,0,0,0,2714,2711,1,0,
		0,0,2714,2713,1,0,0,0,2715,171,1,0,0,0,2716,2717,3,176,88,0,2717,173,1,
		0,0,0,2718,2719,5,2,0,0,2719,2720,3,178,89,0,2720,2721,5,3,0,0,2721,175,
		1,0,0,0,2722,2727,3,180,90,0,2723,2724,5,6,0,0,2724,2726,3,180,90,0,2725,
		2723,1,0,0,0,2726,2729,1,0,0,0,2727,2725,1,0,0,0,2727,2728,1,0,0,0,2728,
		177,1,0,0,0,2729,2727,1,0,0,0,2730,2735,3,182,91,0,2731,2732,5,6,0,0,2732,
		2734,3,182,91,0,2733,2731,1,0,0,0,2734,2737,1,0,0,0,2735,2733,1,0,0,0,
		2735,2736,1,0,0,0,2736,179,1,0,0,0,2737,2735,1,0,0,0,2738,2742,3,204,102,
		0,2739,2742,3,198,99,0,2740,2742,3,184,92,0,2741,2738,1,0,0,0,2741,2739,
		1,0,0,0,2741,2740,1,0,0,0,2742,181,1,0,0,0,2743,2746,3,186,93,0,2744,2746,
		3,204,102,0,2745,2743,1,0,0,0,2745,2744,1,0,0,0,2746,183,1,0,0,0,2747,
		2748,3,1414,707,0,2748,2750,3,1116,558,0,2749,2751,3,336,168,0,2750,2749,
		1,0,0,0,2750,2751,1,0,0,0,2751,2752,1,0,0,0,2752,2753,3,188,94,0,2753,
		185,1,0,0,0,2754,2757,3,1414,707,0,2755,2756,5,143,0,0,2756,2758,5,311,
		0,0,2757,2755,1,0,0,0,2757,2758,1,0,0,0,2758,2759,1,0,0,0,2759,2760,3,
		188,94,0,2760,187,1,0,0,0,2761,2763,3,190,95,0,2762,2761,1,0,0,0,2763,
		2766,1,0,0,0,2764,2762,1,0,0,0,2764,2765,1,0,0,0,2765,189,1,0,0,0,2766,
		2764,1,0,0,0,2767,2768,5,83,0,0,2768,2769,3,1382,691,0,2769,2770,3,192,
		96,0,2770,2776,1,0,0,0,2771,2776,3,192,96,0,2772,2776,3,196,98,0,2773,
		2774,5,81,0,0,2774,2776,3,520,260,0,2775,2767,1,0,0,0,2775,2771,1,0,0,
		0,2775,2772,1,0,0,0,2775,2773,1,0,0,0,2776,191,1,0,0,0,2777,2778,5,115,
		0,0,2778,2830,5,116,0,0,2779,2830,5,116,0,0,2780,2782,5,136,0,0,2781,2783,
		3,662,331,0,2782,2781,1,0,0,0,2782,2783,1,0,0,0,2783,2785,1,0,0,0,2784,
		2786,3,252,126,0,2785,2784,1,0,0,0,2785,2786,1,0,0,0,2786,2830,1,0,0,0,
		2787,2788,5,123,0,0,2788,2790,5,274,0,0,2789,2791,3,662,331,0,2790,2789,
		1,0,0,0,2790,2791,1,0,0,0,2791,2793,1,0,0,0,2792,2794,3,252,126,0,2793,
		2792,1,0,0,0,2793,2794,1,0,0,0,2794,2830,1,0,0,0,2795,2796,5,80,0,0,2796,
		2797,5,2,0,0,2797,2798,3,1162,581,0,2798,2800,5,3,0,0,2799,2801,3,208,
		104,0,2800,2799,1,0,0,0,2800,2801,1,0,0,0,2801,2830,1,0,0,0,2802,2803,
		5,91,0,0,2803,2830,3,1204,602,0,2804,2805,5,476,0,0,2805,2806,3,194,97,
		0,2806,2816,5,74,0,0,2807,2809,5,257,0,0,2808,2810,3,280,140,0,2809,2808,
		1,0,0,0,2809,2810,1,0,0,0,2810,2817,1,0,0,0,2811,2812,5,2,0,0,2812,2813,
		3,1162,581,0,2813,2814,5,3,0,0,2814,2815,5,478,0,0,2815,2817,1,0,0,0,2816,
		2807,1,0,0,0,2816,2811,1,0,0,0,2817,2830,1,0,0,0,2818,2819,5,124,0,0,2819,
		2821,3,1378,689,0,2820,2822,3,210,105,0,2821,2820,1,0,0,0,2821,2822,1,
		0,0,0,2822,2824,1,0,0,0,2823,2825,3,218,109,0,2824,2823,1,0,0,0,2824,2825,
		1,0,0,0,2825,2827,1,0,0,0,2826,2828,3,226,113,0,2827,2826,1,0,0,0,2827,
		2828,1,0,0,0,2828,2830,1,0,0,0,2829,2777,1,0,0,0,2829,2779,1,0,0,0,2829,
		2780,1,0,0,0,2829,2787,1,0,0,0,2829,2795,1,0,0,0,2829,2802,1,0,0,0,2829,
		2804,1,0,0,0,2829,2818,1,0,0,0,2830,193,1,0,0,0,2831,2835,5,177,0,0,2832,
		2833,5,185,0,0,2833,2835,5,91,0,0,2834,2831,1,0,0,0,2834,2832,1,0,0,0,
		2835,195,1,0,0,0,2836,2842,5,92,0,0,2837,2838,5,115,0,0,2838,2842,5,92,
		0,0,2839,2840,5,107,0,0,2840,2842,7,8,0,0,2841,2836,1,0,0,0,2841,2837,
		1,0,0,0,2841,2839,1,0,0,0,2842,197,1,0,0,0,2843,2844,5,158,0,0,2844,2845,
		3,1378,689,0,2845,2846,3,200,100,0,2846,199,1,0,0,0,2847,2848,7,13,0,0,
		2848,2850,3,202,101,0,2849,2847,1,0,0,0,2850,2853,1,0,0,0,2851,2849,1,
		0,0,0,2851,2852,1,0,0,0,2852,201,1,0,0,0,2853,2851,1,0,0,0,2854,2855,7,
		14,0,0,2855,203,1,0,0,0,2856,2857,5,83,0,0,2857,2858,3,1382,691,0,2858,
		2859,3,206,103,0,2859,2862,1,0,0,0,2860,2862,3,206,103,0,2861,2856,1,0,
		0,0,2861,2860,1,0,0,0,2862,205,1,0,0,0,2863,2864,5,80,0,0,2864,2865,5,
		2,0,0,2865,2866,3,1162,581,0,2866,2867,5,3,0,0,2867,2868,3,436,218,0,2868,
		2950,1,0,0,0,2869,2887,5,136,0,0,2870,2871,5,2,0,0,2871,2872,3,212,106,
		0,2872,2874,5,3,0,0,2873,2875,3,216,108,0,2874,2873,1,0,0,0,2874,2875,
		1,0,0,0,2875,2877,1,0,0,0,2876,2878,3,662,331,0,2877,2876,1,0,0,0,2877,
		2878,1,0,0,0,2878,2880,1,0,0,0,2879,2881,3,252,126,0,2880,2879,1,0,0,0,
		2880,2881,1,0,0,0,2881,2882,1,0,0,0,2882,2883,3,436,218,0,2883,2888,1,
		0,0,0,2884,2885,3,254,127,0,2885,2886,3,436,218,0,2886,2888,1,0,0,0,2887,
		2870,1,0,0,0,2887,2884,1,0,0,0,2888,2950,1,0,0,0,2889,2890,5,123,0,0,2890,
		2908,5,274,0,0,2891,2892,5,2,0,0,2892,2893,3,212,106,0,2893,2895,5,3,0,
		0,2894,2896,3,216,108,0,2895,2894,1,0,0,0,2895,2896,1,0,0,0,2896,2898,
		1,0,0,0,2897,2899,3,662,331,0,2898,2897,1,0,0,0,2898,2899,1,0,0,0,2899,
		2901,1,0,0,0,2900,2902,3,252,126,0,2901,2900,1,0,0,0,2901,2902,1,0,0,0,
		2902,2903,1,0,0,0,2903,2904,3,436,218,0,2904,2909,1,0,0,0,2905,2906,3,
		254,127,0,2906,2907,3,436,218,0,2907,2909,1,0,0,0,2908,2891,1,0,0,0,2908,
		2905,1,0,0,0,2909,2950,1,0,0,0,2910,2912,5,237,0,0,2911,2913,3,594,297,
		0,2912,2911,1,0,0,0,2912,2913,1,0,0,0,2913,2914,1,0,0,0,2914,2915,5,2,
		0,0,2915,2916,3,220,110,0,2916,2918,5,3,0,0,2917,2919,3,216,108,0,2918,
		2917,1,0,0,0,2918,2919,1,0,0,0,2919,2921,1,0,0,0,2920,2922,3,662,331,0,
		2921,2920,1,0,0,0,2921,2922,1,0,0,0,2922,2924,1,0,0,0,2923,2925,3,252,
		126,0,2924,2923,1,0,0,0,2924,2925,1,0,0,0,2925,2927,1,0,0,0,2926,2928,
		3,224,112,0,2927,2926,1,0,0,0,2927,2928,1,0,0,0,2928,2929,1,0,0,0,2929,
		2930,3,436,218,0,2930,2950,1,0,0,0,2931,2932,5,101,0,0,2932,2933,5,274,
		0,0,2933,2934,5,2,0,0,2934,2935,3,212,106,0,2935,2936,5,3,0,0,2936,2937,
		5,124,0,0,2937,2939,3,1378,689,0,2938,2940,3,210,105,0,2939,2938,1,0,0,
		0,2939,2940,1,0,0,0,2940,2942,1,0,0,0,2941,2943,3,218,109,0,2942,2941,
		1,0,0,0,2942,2943,1,0,0,0,2943,2945,1,0,0,0,2944,2946,3,226,113,0,2945,
		2944,1,0,0,0,2945,2946,1,0,0,0,2946,2947,1,0,0,0,2947,2948,3,436,218,0,
		2948,2950,1,0,0,0,2949,2863,1,0,0,0,2949,2869,1,0,0,0,2949,2889,1,0,0,
		0,2949,2910,1,0,0,0,2949,2931,1,0,0,0,2950,207,1,0,0,0,2951,2952,5,300,
		0,0,2952,2953,5,266,0,0,2953,209,1,0,0,0,2954,2955,5,2,0,0,2955,2956,3,
		212,106,0,2956,2957,5,3,0,0,2957,211,1,0,0,0,2958,2963,3,214,107,0,2959,
		2960,5,6,0,0,2960,2962,3,214,107,0,2961,2959,1,0,0,0,2962,2965,1,0,0,0,
		2963,2961,1,0,0,0,2963,2964,1,0,0,0,2964,213,1,0,0,0,2965,2963,1,0,0,0,
		2966,2967,3,1414,707,0,2967,215,1,0,0,0,2968,2969,5,479,0,0,2969,2970,
		5,2,0,0,2970,2971,3,212,106,0,2971,2972,5,3,0,0,2972,217,1,0,0,0,2973,
		2974,5,287,0,0,2974,2975,7,15,0,0,2975,219,1,0,0,0,2976,2981,3,222,111,
		0,2977,2978,5,6,0,0,2978,2980,3,222,111,0,2979,2977,1,0,0,0,2980,2983,
		1,0,0,0,2981,2979,1,0,0,0,2981,2982,1,0,0,0,2982,221,1,0,0,0,2983,2981,
		1,0,0,0,2984,2985,3,600,300,0,2985,2992,5,143,0,0,2986,2993,3,682,341,
		0,2987,2988,5,309,0,0,2988,2989,5,2,0,0,2989,2990,3,682,341,0,2990,2991,
		5,3,0,0,2991,2993,1,0,0,0,2992,2986,1,0,0,0,2992,2987,1,0,0,0,2993,223,
		1,0,0,0,2994,2995,5,141,0,0,2995,2996,5,2,0,0,2996,2997,3,1162,581,0,2997,
		2998,5,3,0,0,2998,225,1,0,0,0,2999,3008,3,228,114,0,3000,3008,3,230,115,
		0,3001,3002,3,228,114,0,3002,3003,3,230,115,0,3003,3008,1,0,0,0,3004,3005,
		3,230,115,0,3005,3006,3,228,114,0,3006,3008,1,0,0,0,3007,2999,1,0,0,0,
		3007,3000,1,0,0,0,3007,3001,1,0,0,0,3007,3004,1,0,0,0,3008,227,1,0,0,0,
		3009,3010,5,118,0,0,3010,3011,5,400,0,0,3011,3012,3,232,116,0,3012,229,
		1,0,0,0,3013,3014,5,118,0,0,3014,3015,5,220,0,0,3015,3016,3,232,116,0,
		3016,231,1,0,0,0,3017,3018,5,300,0,0,3018,3024,5,170,0,0,3019,3024,5,346,
		0,0,3020,3024,5,188,0,0,3021,3022,5,364,0,0,3022,3024,7,16,0,0,3023,3017,
		1,0,0,0,3023,3019,1,0,0,0,3023,3020,1,0,0,0,3023,3021,1,0,0,0,3024,233,
		1,0,0,0,3025,3026,5,267,0,0,3026,3027,5,2,0,0,3027,3028,3,1376,688,0,3028,
		3029,5,3,0,0,3029,235,1,0,0,0,3030,3031,3,238,119,0,3031,237,1,0,0,0,3032,
		3033,5,316,0,0,3033,3034,5,185,0,0,3034,3035,3,1414,707,0,3035,3036,5,
		2,0,0,3036,3037,3,240,120,0,3037,3038,5,3,0,0,3038,239,1,0,0,0,3039,3044,
		3,242,121,0,3040,3041,5,6,0,0,3041,3043,3,242,121,0,3042,3040,1,0,0,0,
		3043,3046,1,0,0,0,3044,3042,1,0,0,0,3044,3045,1,0,0,0,3045,241,1,0,0,0,
		3046,3044,1,0,0,0,3047,3049,3,1414,707,0,3048,3050,3,606,303,0,3049,3048,
		1,0,0,0,3049,3050,1,0,0,0,3050,3052,1,0,0,0,3051,3053,3,608,304,0,3052,
		3051,1,0,0,0,3052,3053,1,0,0,0,3053,3071,1,0,0,0,3054,3056,3,1214,607,
		0,3055,3057,3,606,303,0,3056,3055,1,0,0,0,3056,3057,1,0,0,0,3057,3059,
		1,0,0,0,3058,3060,3,608,304,0,3059,3058,1,0,0,0,3059,3060,1,0,0,0,3060,
		3071,1,0,0,0,3061,3062,5,2,0,0,3062,3063,3,1162,581,0,3063,3065,5,3,0,
		0,3064,3066,3,606,303,0,3065,3064,1,0,0,0,3065,3066,1,0,0,0,3066,3068,
		1,0,0,0,3067,3069,3,608,304,0,3068,3067,1,0,0,0,3068,3069,1,0,0,0,3069,
		3071,1,0,0,0,3070,3047,1,0,0,0,3070,3054,1,0,0,0,3070,3061,1,0,0,0,3071,
		243,1,0,0,0,3072,3073,5,138,0,0,3073,3074,3,1382,691,0,3074,245,1,0,0,
		0,3075,3076,5,143,0,0,3076,3080,3,112,56,0,3077,3078,5,410,0,0,3078,3080,
		5,308,0,0,3079,3075,1,0,0,0,3079,3077,1,0,0,0,3080,247,1,0,0,0,3081,3082,
		5,118,0,0,3082,3088,5,199,0,0,3083,3089,5,229,0,0,3084,3085,5,220,0,0,
		3085,3089,5,351,0,0,3086,3087,5,323,0,0,3087,3089,5,351,0,0,3088,3083,
		1,0,0,0,3088,3084,1,0,0,0,3088,3086,1,0,0,0,3089,249,1,0,0,0,3090,3091,
		5,382,0,0,3091,3092,3,1382,691,0,3092,251,1,0,0,0,3093,3094,5,138,0,0,
		3094,3095,5,264,0,0,3095,3096,5,382,0,0,3096,3097,3,1382,691,0,3097,253,
		1,0,0,0,3098,3099,5,138,0,0,3099,3100,5,264,0,0,3100,3101,3,1382,691,0,
		3101,255,1,0,0,0,3102,3103,5,84,0,0,3103,3107,5,373,0,0,3104,3105,5,258,
		0,0,3105,3106,5,115,0,0,3106,3108,5,427,0,0,3107,3104,1,0,0,0,3107,3108,
		1,0,0,0,3108,3109,1,0,0,0,3109,3111,3,520,260,0,3110,3112,3,874,437,0,
		3111,3110,1,0,0,0,3111,3112,1,0,0,0,3112,3113,1,0,0,0,3113,3114,5,118,
		0,0,3114,3115,3,1280,640,0,3115,3116,5,102,0,0,3116,3117,3,1060,530,0,
		3117,257,1,0,0,0,3118,3119,5,176,0,0,3119,3122,5,373,0,0,3120,3121,5,258,
		0,0,3121,3123,5,427,0,0,3122,3120,1,0,0,0,3122,3123,1,0,0,0,3123,3124,
		1,0,0,0,3124,3125,3,520,260,0,3125,3126,5,364,0,0,3126,3127,5,373,0,0,
		3127,3128,3,1406,703,0,3128,259,1,0,0,0,3129,3131,5,84,0,0,3130,3132,3,
		170,85,0,3131,3130,1,0,0,0,3131,3132,1,0,0,0,3132,3133,1,0,0,0,3133,3137,
		5,130,0,0,3134,3135,5,258,0,0,3135,3136,5,115,0,0,3136,3138,5,427,0,0,
		3137,3134,1,0,0,0,3137,3138,1,0,0,0,3138,3139,1,0,0,0,3139,3140,3,262,
		131,0,3140,3141,5,74,0,0,3141,3143,3,964,482,0,3142,3144,3,264,132,0,3143,
		3142,1,0,0,0,3143,3144,1,0,0,0,3144,261,1,0,0,0,3145,3147,3,1378,689,0,
		3146,3148,3,210,105,0,3147,3146,1,0,0,0,3147,3148,1,0,0,0,3148,3150,1,
		0,0,0,3149,3151,3,244,122,0,3150,3149,1,0,0,0,3150,3151,1,0,0,0,3151,3153,
		1,0,0,0,3152,3154,3,246,123,0,3153,3152,1,0,0,0,3153,3154,1,0,0,0,3154,
		3156,1,0,0,0,3155,3157,3,248,124,0,3156,3155,1,0,0,0,3156,3157,1,0,0,0,
		3157,3159,1,0,0,0,3158,3160,3,250,125,0,3159,3158,1,0,0,0,3159,3160,1,
		0,0,0,3160,263,1,0,0,0,3161,3165,5,143,0,0,3162,3166,5,212,0,0,3163,3164,
		5,300,0,0,3164,3166,5,212,0,0,3165,3162,1,0,0,0,3165,3163,1,0,0,0,3166,
		265,1,0,0,0,3167,3169,5,84,0,0,3168,3170,3,270,135,0,3169,3168,1,0,0,0,
		3169,3170,1,0,0,0,3170,3171,1,0,0,0,3171,3172,5,289,0,0,3172,3176,5,407,
		0,0,3173,3174,5,258,0,0,3174,3175,5,115,0,0,3175,3177,5,427,0,0,3176,3173,
		1,0,0,0,3176,3177,1,0,0,0,3177,3178,1,0,0,0,3178,3179,3,268,134,0,3179,
		3180,5,74,0,0,3180,3182,3,964,482,0,3181,3183,3,264,132,0,3182,3181,1,
		0,0,0,3182,3183,1,0,0,0,3183,267,1,0,0,0,3184,3186,3,1378,689,0,3185,3187,
		3,210,105,0,3186,3185,1,0,0,0,3186,3187,1,0,0,0,3187,3189,1,0,0,0,3188,
		3190,3,244,122,0,3189,3188,1,0,0,0,3189,3190,1,0,0,0,3190,3192,1,0,0,0,
		3191,3193,3,114,57,0,3192,3191,1,0,0,0,3192,3193,1,0,0,0,3193,3195,1,0,
		0,0,3194,3196,3,250,125,0,3195,3194,1,0,0,0,3195,3196,1,0,0,0,3196,269,
		1,0,0,0,3197,3198,5,398,0,0,3198,271,1,0,0,0,3199,3200,5,336,0,0,3200,
		3201,5,289,0,0,3201,3203,5,407,0,0,3202,3204,3,590,295,0,3203,3202,1,0,
		0,0,3203,3204,1,0,0,0,3204,3205,1,0,0,0,3205,3207,3,1378,689,0,3206,3208,
		3,264,132,0,3207,3206,1,0,0,0,3207,3208,1,0,0,0,3208,273,1,0,0,0,3209,
		3211,5,84,0,0,3210,3212,3,170,85,0,3211,3210,1,0,0,0,3211,3212,1,0,0,0,
		3212,3213,1,0,0,0,3213,3217,5,359,0,0,3214,3215,5,258,0,0,3215,3216,5,
		115,0,0,3216,3218,5,427,0,0,3217,3214,1,0,0,0,3217,3218,1,0,0,0,3218,3219,
		1,0,0,0,3219,3221,3,1378,689,0,3220,3222,3,278,139,0,3221,3220,1,0,0,0,
		3221,3222,1,0,0,0,3222,275,1,0,0,0,3223,3224,5,176,0,0,3224,3227,5,359,
		0,0,3225,3226,5,258,0,0,3226,3228,5,427,0,0,3227,3225,1,0,0,0,3227,3228,
		1,0,0,0,3228,3229,1,0,0,0,3229,3230,3,1378,689,0,3230,3231,3,282,141,0,
		3231,277,1,0,0,0,3232,3233,3,282,141,0,3233,279,1,0,0,0,3234,3235,5,2,
		0,0,3235,3236,3,282,141,0,3236,3237,5,3,0,0,3237,281,1,0,0,0,3238,3240,
		3,284,142,0,3239,3238,1,0,0,0,3240,3241,1,0,0,0,3241,3239,1,0,0,0,3241,
		3242,1,0,0,0,3242,283,1,0,0,0,3243,3244,5,74,0,0,3244,3278,3,1120,560,
		0,3245,3246,5,186,0,0,3246,3278,3,288,144,0,3247,3278,5,211,0,0,3248,3250,
		5,263,0,0,3249,3251,3,286,143,0,3250,3249,1,0,0,0,3250,3251,1,0,0,0,3251,
		3252,1,0,0,0,3252,3278,3,288,144,0,3253,3254,5,290,0,0,3254,3278,3,288,
		144,0,3255,3256,5,293,0,0,3256,3278,3,288,144,0,3257,3258,5,300,0,0,3258,
		3278,7,17,0,0,3259,3260,5,312,0,0,3260,3261,5,185,0,0,3261,3278,3,520,
		260,0,3262,3263,5,359,0,0,3263,3264,5,297,0,0,3264,3278,3,520,260,0,3265,
		3267,5,371,0,0,3266,3268,3,12,6,0,3267,3266,1,0,0,0,3267,3268,1,0,0,0,
		3268,3269,1,0,0,0,3269,3278,3,288,144,0,3270,3272,5,345,0,0,3271,3273,
		3,12,6,0,3272,3271,1,0,0,0,3272,3273,1,0,0,0,3273,3275,1,0,0,0,3274,3276,
		3,288,144,0,3275,3274,1,0,0,0,3275,3276,1,0,0,0,3276,3278,1,0,0,0,3277,
		3243,1,0,0,0,3277,3245,1,0,0,0,3277,3247,1,0,0,0,3277,3248,1,0,0,0,3277,
		3253,1,0,0,0,3277,3255,1,0,0,0,3277,3257,1,0,0,0,3277,3259,1,0,0,0,3277,
		3262,1,0,0,0,3277,3265,1,0,0,0,3277,3270,1,0,0,0,3278,285,1,0,0,0,3279,
		3280,5,185,0,0,3280,287,1,0,0,0,3281,3288,3,1396,698,0,3282,3283,5,12,
		0,0,3283,3288,3,1396,698,0,3284,3285,5,13,0,0,3285,3288,3,1396,698,0,3286,
		3288,3,1406,703,0,3287,3281,1,0,0,0,3287,3282,1,0,0,0,3287,3284,1,0,0,
		0,3287,3286,1,0,0,0,3288,289,1,0,0,0,3289,3294,3,288,144,0,3290,3291,5,
		6,0,0,3291,3293,3,288,144,0,3292,3290,1,0,0,0,3293,3296,1,0,0,0,3294,3292,
		1,0,0,0,3294,3295,1,0,0,0,3295,291,1,0,0,0,3296,3294,1,0,0,0,3297,3299,
		5,84,0,0,3298,3300,3,616,308,0,3299,3298,1,0,0,0,3299,3300,1,0,0,0,3300,
		3302,1,0,0,0,3301,3303,3,294,147,0,3302,3301,1,0,0,0,3302,3303,1,0,0,0,
		3303,3305,1,0,0,0,3304,3306,3,304,152,0,3305,3304,1,0,0,0,3305,3306,1,
		0,0,0,3306,3307,1,0,0,0,3307,3308,5,276,0,0,3308,3317,3,1382,691,0,3309,
		3310,5,253,0,0,3310,3312,3,296,148,0,3311,3313,3,298,149,0,3312,3311,1,
		0,0,0,3312,3313,1,0,0,0,3313,3315,1,0,0,0,3314,3316,3,302,151,0,3315,3314,
		1,0,0,0,3315,3316,1,0,0,0,3316,3318,1,0,0,0,3317,3309,1,0,0,0,3317,3318,
		1,0,0,0,3318,293,1,0,0,0,3319,3320,5,390,0,0,3320,295,1,0,0,0,3321,3323,
		3,1382,691,0,3322,3324,3,522,261,0,3323,3322,1,0,0,0,3323,3324,1,0,0,0,
		3324,297,1,0,0,0,3325,3326,5,268,0,0,3326,3327,3,296,148,0,3327,299,1,
		0,0,0,3328,3329,5,404,0,0,3329,3333,3,296,148,0,3330,3331,5,300,0,0,3331,
		3333,5,404,0,0,3332,3328,1,0,0,0,3332,3330,1,0,0,0,3333,301,1,0,0,0,3334,
		3335,3,300,150,0,3335,303,1,0,0,0,3336,3337,5,326,0,0,3337,305,1,0,0,0,
		3338,3339,5,84,0,0,3339,3340,5,382,0,0,3340,3342,3,1382,691,0,3341,3343,
		3,308,154,0,3342,3341,1,0,0,0,3342,3343,1,0,0,0,3343,3344,1,0,0,0,3344,
		3345,5,284,0,0,3345,3347,3,1400,700,0,3346,3348,3,114,57,0,3347,3346,1,
		0,0,0,3347,3348,1,0,0,0,3348,307,1,0,0,0,3349,3350,5,313,0,0,3350,3351,
		3,1410,705,0,3351,309,1,0,0,0,3352,3353,5,229,0,0,3353,3356,5,382,0,0,
		3354,3355,5,258,0,0,3355,3357,5,427,0,0,3356,3354,1,0,0,0,3356,3357,1,
		0,0,0,3357,3358,1,0,0,0,3358,3359,3,1382,691,0,3359,311,1,0,0,0,3360,3361,
		5,84,0,0,3361,3365,5,242,0,0,3362,3363,5,258,0,0,3363,3364,5,115,0,0,3364,
		3366,5,427,0,0,3365,3362,1,0,0,0,3365,3366,1,0,0,0,3366,3367,1,0,0,0,3367,
		3369,3,1382,691,0,3368,3370,3,12,6,0,3369,3368,1,0,0,0,3369,3370,1,0,0,
		0,3370,3371,1,0,0,0,3371,3372,3,314,157,0,3372,313,1,0,0,0,3373,3375,3,
		316,158,0,3374,3373,1,0,0,0,3375,3378,1,0,0,0,3376,3374,1,0,0,0,3376,3377,
		1,0,0,0,3377,315,1,0,0,0,3378,3376,1,0,0,0,3379,3380,5,354,0,0,3380,3387,
		3,1382,691,0,3381,3382,5,406,0,0,3382,3387,3,68,34,0,3383,3384,5,102,0,
		0,3384,3387,3,68,34,0,3385,3387,5,188,0,0,3386,3379,1,0,0,0,3386,3381,
		1,0,0,0,3386,3383,1,0,0,0,3386,3385,1,0,0,0,3387,317,1,0,0,0,3388,3389,
		5,176,0,0,3389,3390,5,242,0,0,3390,3391,3,1382,691,0,3391,3392,5,400,0,
		0,3392,3393,3,320,160,0,3393,319,1,0,0,0,3394,3396,3,322,161,0,3395,3394,
		1,0,0,0,3396,3399,1,0,0,0,3397,3395,1,0,0,0,3397,3398,1,0,0,0,3398,321,
		1,0,0,0,3399,3397,1,0,0,0,3400,3401,5,132,0,0,3401,3402,3,68,34,0,3402,
		323,1,0,0,0,3403,3404,5,176,0,0,3404,3405,5,242,0,0,3405,3406,3,1382,691,
		0,3406,3407,3,36,18,0,3407,3408,3,512,256,0,3408,3409,3,1382,691,0,3409,
		3508,1,0,0,0,3410,3411,5,176,0,0,3411,3412,5,242,0,0,3412,3413,3,1382,
		691,0,3413,3414,3,36,18,0,3414,3415,3,510,255,0,3415,3416,3,520,260,0,
		3416,3508,1,0,0,0,3417,3418,5,176,0,0,3418,3419,5,242,0,0,3419,3420,3,
		1382,691,0,3420,3421,3,36,18,0,3421,3422,5,174,0,0,3422,3423,3,648,324,
		0,3423,3508,1,0,0,0,3424,3425,5,176,0,0,3425,3426,5,242,0,0,3426,3427,
		3,1382,691,0,3427,3428,3,36,18,0,3428,3429,5,79,0,0,3429,3430,5,2,0,0,
		3430,3431,3,1116,558,0,3431,3432,5,74,0,0,3432,3433,3,1116,558,0,3433,
		3434,5,3,0,0,3434,3508,1,0,0,0,3435,3436,5,176,0,0,3436,3437,5,242,0,0,
		3437,3438,3,1382,691,0,3438,3439,3,36,18,0,3439,3440,5,227,0,0,3440,3441,
		3,1116,558,0,3441,3508,1,0,0,0,3442,3443,5,176,0,0,3443,3444,5,242,0,0,
		3444,3445,3,1382,691,0,3445,3446,3,36,18,0,3446,3447,5,249,0,0,3447,3448,
		3,624,312,0,3448,3508,1,0,0,0,3449,3450,5,176,0,0,3450,3451,5,242,0,0,
		3451,3452,3,1382,691,0,3452,3453,3,36,18,0,3453,3454,5,309,0,0,3454,3455,
		3,686,343,0,3455,3508,1,0,0,0,3456,3457,5,176,0,0,3457,3458,5,242,0,0,
		3458,3459,3,1382,691,0,3459,3460,3,36,18,0,3460,3461,5,309,0,0,3461,3462,
		5,194,0,0,3462,3463,3,520,260,0,3463,3464,5,138,0,0,3464,3465,3,1382,691,
		0,3465,3508,1,0,0,0,3466,3467,5,176,0,0,3467,3468,5,242,0,0,3468,3469,
		3,1382,691,0,3469,3470,3,36,18,0,3470,3471,5,309,0,0,3471,3472,5,244,0,
		0,3472,3473,3,520,260,0,3473,3474,5,138,0,0,3474,3475,3,1382,691,0,3475,
		3508,1,0,0,0,3476,3477,5,176,0,0,3477,3478,5,242,0,0,3478,3479,3,1382,
		691,0,3479,3480,3,36,18,0,3480,3481,5,327,0,0,3481,3482,3,624,312,0,3482,
		3508,1,0,0,0,3483,3484,5,176,0,0,3484,3485,5,242,0,0,3485,3486,3,1382,
		691,0,3486,3487,3,36,18,0,3487,3488,5,480,0,0,3488,3489,3,624,312,0,3489,
		3508,1,0,0,0,3490,3491,5,176,0,0,3491,3492,5,242,0,0,3492,3493,3,1382,
		691,0,3493,3494,3,36,18,0,3494,3495,5,481,0,0,3495,3496,5,100,0,0,3496,
		3497,3,1116,558,0,3497,3498,5,276,0,0,3498,3499,3,1382,691,0,3499,3508,
		1,0,0,0,3500,3501,5,176,0,0,3501,3502,5,242,0,0,3502,3503,3,1382,691,0,
		3503,3504,3,36,18,0,3504,3505,5,391,0,0,3505,3506,3,1116,558,0,3506,3508,
		1,0,0,0,3507,3403,1,0,0,0,3507,3410,1,0,0,0,3507,3417,1,0,0,0,3507,3424,
		1,0,0,0,3507,3435,1,0,0,0,3507,3442,1,0,0,0,3507,3449,1,0,0,0,3507,3456,
		1,0,0,0,3507,3466,1,0,0,0,3507,3476,1,0,0,0,3507,3483,1,0,0,0,3507,3490,
		1,0,0,0,3507,3500,1,0,0,0,3508,325,1,0,0,0,3509,3510,5,84,0,0,3510,3511,
		5,101,0,0,3511,3512,5,212,0,0,3512,3513,5,412,0,0,3513,3515,3,1382,691,
		0,3514,3516,3,332,166,0,3515,3514,1,0,0,0,3515,3516,1,0,0,0,3516,3518,
		1,0,0,0,3517,3519,3,336,168,0,3518,3517,1,0,0,0,3518,3519,1,0,0,0,3519,
		327,1,0,0,0,3520,3521,5,253,0,0,3521,3529,3,296,148,0,3522,3523,5,300,
		0,0,3523,3529,5,253,0,0,3524,3525,5,404,0,0,3525,3529,3,296,148,0,3526,
		3527,5,300,0,0,3527,3529,5,404,0,0,3528,3520,1,0,0,0,3528,3522,1,0,0,0,
		3528,3524,1,0,0,0,3528,3526,1,0,0,0,3529,329,1,0,0,0,3530,3532,3,328,164,
		0,3531,3530,1,0,0,0,3532,3533,1,0,0,0,3533,3531,1,0,0,0,3533,3534,1,0,
		0,0,3534,331,1,0,0,0,3535,3536,3,330,165,0,3536,333,1,0,0,0,3537,3538,
		5,176,0,0,3538,3539,5,101,0,0,3539,3540,5,212,0,0,3540,3541,5,412,0,0,
		3541,3543,3,1382,691,0,3542,3544,3,332,166,0,3543,3542,1,0,0,0,3543,3544,
		1,0,0,0,3544,3545,1,0,0,0,3545,3546,3,340,170,0,3546,3555,1,0,0,0,3547,
		3548,5,176,0,0,3548,3549,5,101,0,0,3549,3550,5,212,0,0,3550,3551,5,412,
		0,0,3551,3552,3,1382,691,0,3552,3553,3,330,165,0,3553,3555,1,0,0,0,3554,
		3537,1,0,0,0,3554,3547,1,0,0,0,3555,335,1,0,0,0,3556,3557,5,311,0,0,3557,
		3558,5,2,0,0,3558,3559,3,338,169,0,3559,3560,5,3,0,0,3560,337,1,0,0,0,
		3561,3566,3,346,173,0,3562,3563,5,6,0,0,3563,3565,3,346,173,0,3564,3562,
		1,0,0,0,3565,3568,1,0,0,0,3566,3564,1,0,0,0,3566,3567,1,0,0,0,3567,339,
		1,0,0,0,3568,3566,1,0,0,0,3569,3570,5,311,0,0,3570,3571,5,2,0,0,3571,3572,
		3,342,171,0,3572,3573,5,3,0,0,3573,341,1,0,0,0,3574,3579,3,344,172,0,3575,
		3576,5,6,0,0,3576,3578,3,344,172,0,3577,3575,1,0,0,0,3578,3581,1,0,0,0,
		3579,3577,1,0,0,0,3579,3580,1,0,0,0,3580,343,1,0,0,0,3581,3579,1,0,0,0,
		3582,3590,3,346,173,0,3583,3584,5,364,0,0,3584,3590,3,346,173,0,3585,3586,
		5,171,0,0,3586,3590,3,346,173,0,3587,3588,5,229,0,0,3588,3590,3,348,174,
		0,3589,3582,1,0,0,0,3589,3583,1,0,0,0,3589,3585,1,0,0,0,3589,3587,1,0,
		0,0,3590,345,1,0,0,0,3591,3592,3,348,174,0,3592,3593,3,350,175,0,3593,
		347,1,0,0,0,3594,3595,3,1420,710,0,3595,349,1,0,0,0,3596,3597,3,1400,700,
		0,3597,351,1,0,0,0,3598,3599,5,84,0,0,3599,3600,5,362,0,0,3600,3602,3,
		1382,691,0,3601,3603,3,354,177,0,3602,3601,1,0,0,0,3602,3603,1,0,0,0,3603,
		3605,1,0,0,0,3604,3606,3,358,179,0,3605,3604,1,0,0,0,3605,3606,1,0,0,0,
		3606,3607,1,0,0,0,3607,3608,5,101,0,0,3608,3609,5,212,0,0,3609,3610,5,
		412,0,0,3610,3612,3,1382,691,0,3611,3613,3,336,168,0,3612,3611,1,0,0,0,
		3612,3613,1,0,0,0,3613,3634,1,0,0,0,3614,3615,5,84,0,0,3615,3616,5,362,
		0,0,3616,3617,5,258,0,0,3617,3618,5,115,0,0,3618,3619,5,427,0,0,3619,3621,
		3,1382,691,0,3620,3622,3,354,177,0,3621,3620,1,0,0,0,3621,3622,1,0,0,0,
		3622,3624,1,0,0,0,3623,3625,3,358,179,0,3624,3623,1,0,0,0,3624,3625,1,
		0,0,0,3625,3626,1,0,0,0,3626,3627,5,101,0,0,3627,3628,5,212,0,0,3628,3629,
		5,412,0,0,3629,3631,3,1382,691,0,3630,3632,3,336,168,0,3631,3630,1,0,0,
		0,3631,3632,1,0,0,0,3632,3634,1,0,0,0,3633,3598,1,0,0,0,3633,3614,1,0,
		0,0,3634,353,1,0,0,0,3635,3636,5,391,0,0,3636,3637,3,1400,700,0,3637,355,
		1,0,0,0,3638,3641,5,406,0,0,3639,3642,3,1400,700,0,3640,3642,5,116,0,0,
		3641,3639,1,0,0,0,3641,3640,1,0,0,0,3642,357,1,0,0,0,3643,3644,3,356,178,
		0,3644,359,1,0,0,0,3645,3646,5,176,0,0,3646,3647,5,362,0,0,3647,3653,3,
		1382,691,0,3648,3654,3,340,170,0,3649,3651,3,356,178,0,3650,3652,3,340,
		170,0,3651,3650,1,0,0,0,3651,3652,1,0,0,0,3652,3654,1,0,0,0,3653,3648,
		1,0,0,0,3653,3649,1,0,0,0,3654,361,1,0,0,0,3655,3656,5,84,0,0,3656,3657,
		5,101,0,0,3657,3658,5,130,0,0,3658,3659,3,1378,689,0,3659,3661,5,2,0,0,
		3660,3662,3,172,86,0,3661,3660,1,0,0,0,3661,3662,1,0,0,0,3662,3663,1,0,
		0,0,3663,3665,5,3,0,0,3664,3666,3,234,117,0,3665,3664,1,0,0,0,3665,3666,
		1,0,0,0,3666,3667,1,0,0,0,3667,3668,5,362,0,0,3668,3670,3,1382,691,0,3669,
		3671,3,336,168,0,3670,3669,1,0,0,0,3670,3671,1,0,0,0,3671,3728,1,0,0,0,
		3672,3673,5,84,0,0,3673,3674,5,101,0,0,3674,3675,5,130,0,0,3675,3676,5,
		258,0,0,3676,3677,5,115,0,0,3677,3678,5,427,0,0,3678,3679,3,1378,689,0,
		3679,3681,5,2,0,0,3680,3682,3,172,86,0,3681,3680,1,0,0,0,3681,3682,1,0,
		0,0,3682,3683,1,0,0,0,3683,3685,5,3,0,0,3684,3686,3,234,117,0,3685,3684,
		1,0,0,0,3685,3686,1,0,0,0,3686,3687,1,0,0,0,3687,3688,5,362,0,0,3688,3690,
		3,1382,691,0,3689,3691,3,336,168,0,3690,3689,1,0,0,0,3690,3691,1,0,0,0,
		3691,3728,1,0,0,0,3692,3693,5,84,0,0,3693,3694,5,101,0,0,3694,3695,5,130,
		0,0,3695,3696,3,1378,689,0,3696,3697,5,316,0,0,3697,3698,5,306,0,0,3698,
		3700,3,1378,689,0,3699,3701,3,174,87,0,3700,3699,1,0,0,0,3700,3701,1,0,
		0,0,3701,3702,1,0,0,0,3702,3703,3,124,62,0,3703,3704,5,362,0,0,3704,3706,
		3,1382,691,0,3705,3707,3,336,168,0,3706,3705,1,0,0,0,3706,3707,1,0,0,0,
		3707,3728,1,0,0,0,3708,3709,5,84,0,0,3709,3710,5,101,0,0,3710,3711,5,130,
		0,0,3711,3712,5,258,0,0,3712,3713,5,115,0,0,3713,3714,5,427,0,0,3714,3715,
		3,1378,689,0,3715,3716,5,316,0,0,3716,3717,5,306,0,0,3717,3719,3,1378,
		689,0,3718,3720,3,174,87,0,3719,3718,1,0,0,0,3719,3720,1,0,0,0,3720,3721,
		1,0,0,0,3721,3722,3,124,62,0,3722,3723,5,362,0,0,3723,3725,3,1382,691,
		0,3724,3726,3,336,168,0,3725,3724,1,0,0,0,3725,3726,1,0,0,0,3726,3728,
		1,0,0,0,3727,3655,1,0,0,0,3727,3672,1,0,0,0,3727,3692,1,0,0,0,3727,3708,
		1,0,0,0,3728,363,1,0,0,0,3729,3730,5,482,0,0,3730,3731,5,101,0,0,3731,
		3732,5,354,0,0,3732,3734,3,1382,691,0,3733,3735,3,368,184,0,3734,3733,
		1,0,0,0,3734,3735,1,0,0,0,3735,3736,1,0,0,0,3736,3737,5,102,0,0,3737,3738,
		5,362,0,0,3738,3739,3,1382,691,0,3739,3740,5,109,0,0,3740,3742,3,1382,
		691,0,3741,3743,3,336,168,0,3742,3741,1,0,0,0,3742,3743,1,0,0,0,3743,365,
		1,0,0,0,3744,3745,5,112,0,0,3745,3748,5,132,0,0,3746,3748,5,97,0,0,3747,
		3744,1,0,0,0,3747,3746,1,0,0,0,3748,367,1,0,0,0,3749,3750,3,366,183,0,
		3750,3751,5,2,0,0,3751,3752,3,1074,537,0,3752,3753,5,3,0,0,3753,369,1,
		0,0,0,3754,3755,5,84,0,0,3755,3756,5,137,0,0,3756,3757,5,286,0,0,3757,
		3758,5,100,0,0,3758,3759,3,372,186,0,3759,3760,5,362,0,0,3760,3762,3,1382,
		691,0,3761,3763,3,336,168,0,3762,3761,1,0,0,0,3762,3763,1,0,0,0,3763,3778,
		1,0,0,0,3764,3765,5,84,0,0,3765,3766,5,137,0,0,3766,3767,5,286,0,0,3767,
		3768,5,258,0,0,3768,3769,5,115,0,0,3769,3770,5,427,0,0,3770,3771,5,100,
		0,0,3771,3772,3,372,186,0,3772,3773,5,362,0,0,3773,3775,3,1382,691,0,3774,
		3776,3,336,168,0,3775,3774,1,0,0,0,3775,3776,1,0,0,0,3776,3778,1,0,0,0,
		3777,3754,1,0,0,0,3777,3764,1,0,0,0,3778,371,1,0,0,0,3779,3782,3,1410,
		705,0,3780,3782,5,137,0,0,3781,3779,1,0,0,0,3781,3780,1,0,0,0,3782,373,
		1,0,0,0,3783,3784,5,229,0,0,3784,3785,5,137,0,0,3785,3786,5,286,0,0,3786,
		3787,5,100,0,0,3787,3788,3,372,186,0,3788,3789,5,362,0,0,3789,3790,3,1382,
		691,0,3790,3802,1,0,0,0,3791,3792,5,229,0,0,3792,3793,5,137,0,0,3793,3794,
		5,286,0,0,3794,3795,5,258,0,0,3795,3796,5,427,0,0,3796,3797,5,100,0,0,
		3797,3798,3,372,186,0,3798,3799,5,362,0,0,3799,3800,3,1382,691,0,3800,
		3802,1,0,0,0,3801,3783,1,0,0,0,3801,3791,1,0,0,0,3802,375,1,0,0,0,3803,
		3804,5,176,0,0,3804,3805,5,137,0,0,3805,3806,5,286,0,0,3806,3807,5,100,
		0,0,3807,3808,3,372,186,0,3808,3809,5,362,0,0,3809,3810,3,1382,691,0,3810,
		3811,3,340,170,0,3811,377,1,0,0,0,3812,3813,5,84,0,0,3813,3814,5,483,0,
		0,3814,3815,3,1382,691,0,3815,3816,5,118,0,0,3816,3818,3,1378,689,0,3817,
		3819,3,390,195,0,3818,3817,1,0,0,0,3818,3819,1,0,0,0,3819,3821,1,0,0,0,
		3820,3822,3,392,196,0,3821,3820,1,0,0,0,3821,3822,1,0,0,0,3822,3824,1,
		0,0,0,3823,3825,3,386,193,0,3824,3823,1,0,0,0,3824,3825,1,0,0,0,3825,3827,
		1,0,0,0,3826,3828,3,382,191,0,3827,3826,1,0,0,0,3827,3828,1,0,0,0,3828,
		3830,1,0,0,0,3829,3831,3,384,192,0,3830,3829,1,0,0,0,3830,3831,1,0,0,0,
		3831,379,1,0,0,0,3832,3833,5,176,0,0,3833,3834,5,483,0,0,3834,3835,3,1382,
		691,0,3835,3836,5,118,0,0,3836,3838,3,1378,689,0,3837,3839,3,388,194,0,
		3838,3837,1,0,0,0,3838,3839,1,0,0,0,3839,3841,1,0,0,0,3840,3842,3,382,
		191,0,3841,3840,1,0,0,0,3841,3842,1,0,0,0,3842,3844,1,0,0,0,3843,3845,
		3,384,192,0,3844,3843,1,0,0,0,3844,3845,1,0,0,0,3845,381,1,0,0,0,3846,
		3847,5,138,0,0,3847,3848,5,2,0,0,3848,3849,3,1162,581,0,3849,3850,5,3,
		0,0,3850,383,1,0,0,0,3851,3852,5,143,0,0,3852,3853,5,80,0,0,3853,3854,
		5,2,0,0,3854,3855,3,1162,581,0,3855,3856,5,3,0,0,3856,385,1,0,0,0,3857,
		3858,5,132,0,0,3858,3859,3,1412,706,0,3859,387,1,0,0,0,3860,3861,5,132,
		0,0,3861,3862,3,1412,706,0,3862,389,1,0,0,0,3863,3864,5,74,0,0,3864,3865,
		3,1436,718,0,3865,391,1,0,0,0,3866,3867,5,100,0,0,3867,3868,3,394,197,
		0,3868,393,1,0,0,0,3869,3870,7,18,0,0,3870,395,1,0,0,0,3871,3872,5,84,
		0,0,3872,3873,5,169,0,0,3873,3874,5,484,0,0,3874,3875,3,1382,691,0,3875,
		3876,5,391,0,0,3876,3877,3,398,199,0,3877,3878,5,253,0,0,3878,3879,3,296,
		148,0,3879,397,1,0,0,0,3880,3881,7,19,0,0,3881,399,1,0,0,0,3882,3883,5,
		84,0,0,3883,3884,5,388,0,0,3884,3885,3,1382,691,0,3885,3886,3,402,201,
		0,3886,3887,3,404,202,0,3887,3888,5,118,0,0,3888,3890,3,1378,689,0,3889,
		3891,3,408,204,0,3890,3889,1,0,0,0,3890,3891,1,0,0,0,3891,3893,1,0,0,0,
		3892,3894,3,420,210,0,3893,3892,1,0,0,0,3893,3894,1,0,0,0,3894,3896,1,
		0,0,0,3895,3897,3,426,213,0,3896,3895,1,0,0,0,3896,3897,1,0,0,0,3897,3898,
		1,0,0,0,3898,3899,5,240,0,0,3899,3900,3,428,214,0,3900,3901,3,1388,694,
		0,3901,3902,5,2,0,0,3902,3903,3,430,215,0,3903,3904,5,3,0,0,3904,3931,
		1,0,0,0,3905,3906,5,84,0,0,3906,3907,5,83,0,0,3907,3908,5,388,0,0,3908,
		3909,3,1382,691,0,3909,3910,5,173,0,0,3910,3911,3,404,202,0,3911,3912,
		5,118,0,0,3912,3914,3,1378,689,0,3913,3915,3,434,217,0,3914,3913,1,0,0,
		0,3914,3915,1,0,0,0,3915,3916,1,0,0,0,3916,3917,3,436,218,0,3917,3918,
		5,100,0,0,3918,3919,5,230,0,0,3919,3921,5,445,0,0,3920,3922,3,426,213,
		0,3921,3920,1,0,0,0,3921,3922,1,0,0,0,3922,3923,1,0,0,0,3923,3924,5,240,
		0,0,3924,3925,3,428,214,0,3925,3926,3,1388,694,0,3926,3927,5,2,0,0,3927,
		3928,3,430,215,0,3928,3929,5,3,0,0,3929,3931,1,0,0,0,3930,3882,1,0,0,0,
		3930,3905,1,0,0,0,3931,401,1,0,0,0,3932,3937,5,183,0,0,3933,3937,5,173,
		0,0,3934,3935,5,271,0,0,3935,3937,5,306,0,0,3936,3932,1,0,0,0,3936,3933,
		1,0,0,0,3936,3934,1,0,0,0,3937,403,1,0,0,0,3938,3943,3,406,203,0,3939,
		3940,5,120,0,0,3940,3942,3,406,203,0,3941,3939,1,0,0,0,3942,3945,1,0,0,
		0,3943,3941,1,0,0,0,3943,3944,1,0,0,0,3944,405,1,0,0,0,3945,3943,1,0,0,
		0,3946,3954,5,270,0,0,3947,3954,5,220,0,0,3948,3954,5,400,0,0,3949,3950,
		5,400,0,0,3950,3951,5,306,0,0,3951,3954,3,212,106,0,3952,3954,5,389,0,
		0,3953,3946,1,0,0,0,3953,3947,1,0,0,0,3953,3948,1,0,0,0,3953,3949,1,0,
		0,0,3953,3952,1,0,0,0,3954,407,1,0,0,0,3955,3956,5,485,0,0,3956,3957,3,
		410,205,0,3957,409,1,0,0,0,3958,3960,3,412,206,0,3959,3958,1,0,0,0,3960,
		3961,1,0,0,0,3961,3959,1,0,0,0,3961,3962,1,0,0,0,3962,411,1,0,0,0,3963,
		3964,3,414,207,0,3964,3966,3,416,208,0,3965,3967,3,830,415,0,3966,3965,
		1,0,0,0,3966,3967,1,0,0,0,3967,3968,1,0,0,0,3968,3969,3,418,209,0,3969,
		413,1,0,0,0,3970,3971,7,20,0,0,3971,415,1,0,0,0,3972,3973,7,21,0,0,3973,
		417,1,0,0,0,3974,3975,3,1414,707,0,3975,419,1,0,0,0,3976,3978,5,100,0,
		0,3977,3979,3,422,211,0,3978,3977,1,0,0,0,3978,3979,1,0,0,0,3979,3980,
		1,0,0,0,3980,3981,3,424,212,0,3981,421,1,0,0,0,3982,3983,5,230,0,0,3983,
		423,1,0,0,0,3984,3985,7,22,0,0,3985,425,1,0,0,0,3986,3987,5,140,0,0,3987,
		3988,5,2,0,0,3988,3989,3,1162,581,0,3989,3990,5,3,0,0,3990,427,1,0,0,0,
		3991,3992,7,23,0,0,3992,429,1,0,0,0,3993,3996,3,432,216,0,3994,3996,1,
		0,0,0,3995,3993,1,0,0,0,3995,3994,1,0,0,0,3996,4001,1,0,0,0,3997,3998,
		5,6,0,0,3998,4000,3,432,216,0,3999,3997,1,0,0,0,4000,4003,1,0,0,0,4001,
		3999,1,0,0,0,4001,4002,1,0,0,0,4002,431,1,0,0,0,4003,4001,1,0,0,0,4004,
		4009,3,1398,699,0,4005,4009,3,1396,698,0,4006,4009,3,1400,700,0,4007,4009,
		3,1420,710,0,4008,4004,1,0,0,0,4008,4005,1,0,0,0,4008,4006,1,0,0,0,4008,
		4007,1,0,0,0,4009,433,1,0,0,0,4010,4011,5,102,0,0,4011,4012,3,1378,689,
		0,4012,435,1,0,0,0,4013,4015,3,438,219,0,4014,4013,1,0,0,0,4015,4018,1,
		0,0,0,4016,4014,1,0,0,0,4016,4017,1,0,0,0,4017,437,1,0,0,0,4018,4016,1,
		0,0,0,4019,4020,5,115,0,0,4020,4031,5,92,0,0,4021,4031,5,92,0,0,4022,4023,
		5,107,0,0,4023,4031,5,259,0,0,4024,4025,5,107,0,0,4025,4031,5,218,0,0,
		4026,4027,5,115,0,0,4027,4031,5,402,0,0,4028,4029,5,300,0,0,4029,4031,
		5,266,0,0,4030,4019,1,0,0,0,4030,4021,1,0,0,0,4030,4022,1,0,0,0,4030,4024,
		1,0,0,0,4030,4026,1,0,0,0,4030,4028,1,0,0,0,4031,439,1,0,0,0,4032,4033,
		5,84,0,0,4033,4034,5,236,0,0,4034,4035,5,388,0,0,4035,4036,3,1382,691,
		0,4036,4037,5,118,0,0,4037,4038,3,1420,710,0,4038,4039,5,240,0,0,4039,
		4040,3,428,214,0,4040,4041,3,1388,694,0,4041,4042,5,2,0,0,4042,4043,5,
		3,0,0,4043,4059,1,0,0,0,4044,4045,5,84,0,0,4045,4046,5,236,0,0,4046,4047,
		5,388,0,0,4047,4048,3,1382,691,0,4048,4049,5,118,0,0,4049,4050,3,1420,
		710,0,4050,4051,5,140,0,0,4051,4052,3,442,221,0,4052,4053,5,240,0,0,4053,
		4054,3,428,214,0,4054,4055,3,1388,694,0,4055,4056,5,2,0,0,4056,4057,5,
		3,0,0,4057,4059,1,0,0,0,4058,4032,1,0,0,0,4058,4044,1,0,0,0,4059,441,1,
		0,0,0,4060,4065,3,444,222,0,4061,4062,5,71,0,0,4062,4064,3,444,222,0,4063,
		4061,1,0,0,0,4064,4067,1,0,0,0,4065,4063,1,0,0,0,4065,4066,1,0,0,0,4066,
		443,1,0,0,0,4067,4065,1,0,0,0,4068,4069,3,1414,707,0,4069,4070,5,106,0,
		0,4070,4071,5,2,0,0,4071,4072,3,446,223,0,4072,4073,5,3,0,0,4073,445,1,
		0,0,0,4074,4079,3,1400,700,0,4075,4076,5,6,0,0,4076,4078,3,1400,700,0,
		4077,4075,1,0,0,0,4078,4081,1,0,0,0,4079,4077,1,0,0,0,4079,4080,1,0,0,
		0,4080,447,1,0,0,0,4081,4079,1,0,0,0,4082,4083,5,176,0,0,4083,4084,5,236,
		0,0,4084,4085,5,388,0,0,4085,4086,3,1382,691,0,4086,4087,3,450,225,0,4087,
		449,1,0,0,0,4088,4095,5,231,0,0,4089,4090,5,231,0,0,4090,4095,5,343,0,
		0,4091,4092,5,231,0,0,4092,4095,5,177,0,0,4093,4095,5,224,0,0,4094,4088,
		1,0,0,0,4094,4089,1,0,0,0,4094,4091,1,0,0,0,4094,4093,1,0,0,0,4095,451,
		1,0,0,0,4096,4097,5,84,0,0,4097,4098,5,178,0,0,4098,4099,3,520,260,0,4099,
		4100,5,80,0,0,4100,4101,5,2,0,0,4101,4102,3,1162,581,0,4102,4103,5,3,0,
		0,4103,4104,3,436,218,0,4104,453,1,0,0,0,4105,4107,5,84,0,0,4106,4108,
		3,616,308,0,4107,4106,1,0,0,0,4107,4108,1,0,0,0,4108,4109,1,0,0,0,4109,
		4110,5,174,0,0,4110,4111,3,1388,694,0,4111,4112,3,644,322,0,4112,4113,
		3,456,228,0,4113,4220,1,0,0,0,4114,4116,5,84,0,0,4115,4117,3,616,308,0,
		4116,4115,1,0,0,0,4116,4117,1,0,0,0,4117,4118,1,0,0,0,4118,4119,5,174,
		0,0,4119,4120,3,1388,694,0,4120,4121,3,464,232,0,4121,4220,1,0,0,0,4122,
		4123,5,84,0,0,4123,4124,5,309,0,0,4124,4125,3,682,341,0,4125,4126,3,456,
		228,0,4126,4220,1,0,0,0,4127,4128,5,84,0,0,4128,4129,5,391,0,0,4129,4130,
		3,520,260,0,4130,4131,3,456,228,0,4131,4220,1,0,0,0,4132,4133,5,84,0,0,
		4133,4134,5,391,0,0,4134,4220,3,520,260,0,4135,4136,5,84,0,0,4136,4137,
		5,391,0,0,4137,4138,3,520,260,0,4138,4139,5,74,0,0,4139,4141,5,2,0,0,4140,
		4142,3,1096,548,0,4141,4140,1,0,0,0,4141,4142,1,0,0,0,4142,4143,1,0,0,
		0,4143,4144,5,3,0,0,4144,4220,1,0,0,0,4145,4146,5,84,0,0,4146,4147,5,391,
		0,0,4147,4148,3,520,260,0,4148,4149,5,74,0,0,4149,4150,5,234,0,0,4150,
		4152,5,2,0,0,4151,4153,3,470,235,0,4152,4151,1,0,0,0,4152,4153,1,0,0,0,
		4153,4154,1,0,0,0,4154,4155,5,3,0,0,4155,4220,1,0,0,0,4156,4157,5,84,0,
		0,4157,4158,5,391,0,0,4158,4159,3,520,260,0,4159,4160,5,74,0,0,4160,4161,
		5,330,0,0,4161,4162,3,456,228,0,4162,4220,1,0,0,0,4163,4164,5,84,0,0,4164,
		4165,5,386,0,0,4165,4166,5,356,0,0,4166,4167,5,314,0,0,4167,4168,3,520,
		260,0,4168,4169,3,456,228,0,4169,4220,1,0,0,0,4170,4171,5,84,0,0,4171,
		4172,5,386,0,0,4172,4173,5,356,0,0,4173,4174,5,223,0,0,4174,4175,3,520,
		260,0,4175,4176,3,456,228,0,4176,4220,1,0,0,0,4177,4178,5,84,0,0,4178,
		4179,5,386,0,0,4179,4180,5,356,0,0,4180,4181,5,384,0,0,4181,4182,3,520,
		260,0,4182,4183,3,456,228,0,4183,4220,1,0,0,0,4184,4185,5,84,0,0,4185,
		4186,5,386,0,0,4186,4187,5,356,0,0,4187,4188,5,201,0,0,4188,4189,3,520,
		260,0,4189,4190,3,456,228,0,4190,4220,1,0,0,0,4191,4192,5,84,0,0,4192,
		4193,5,146,0,0,4193,4194,3,520,260,0,4194,4195,3,456,228,0,4195,4220,1,
		0,0,0,4196,4197,5,84,0,0,4197,4198,5,146,0,0,4198,4199,5,258,0,0,4199,
		4200,5,115,0,0,4200,4201,5,427,0,0,4201,4202,3,520,260,0,4202,4203,3,456,
		228,0,4203,4220,1,0,0,0,4204,4205,5,84,0,0,4205,4206,5,146,0,0,4206,4207,
		3,520,260,0,4207,4208,5,102,0,0,4208,4209,3,520,260,0,4209,4220,1,0,0,
		0,4210,4211,5,84,0,0,4211,4212,5,146,0,0,4212,4213,5,258,0,0,4213,4214,
		5,115,0,0,4214,4215,5,427,0,0,4215,4216,3,520,260,0,4216,4217,5,102,0,
		0,4217,4218,3,520,260,0,4218,4220,1,0,0,0,4219,4105,1,0,0,0,4219,4114,
		1,0,0,0,4219,4122,1,0,0,0,4219,4127,1,0,0,0,4219,4132,1,0,0,0,4219,4135,
		1,0,0,0,4219,4145,1,0,0,0,4219,4156,1,0,0,0,4219,4163,1,0,0,0,4219,4170,
		1,0,0,0,4219,4177,1,0,0,0,4219,4184,1,0,0,0,4219,4191,1,0,0,0,4219,4196,
		1,0,0,0,4219,4204,1,0,0,0,4219,4210,1,0,0,0,4220,455,1,0,0,0,4221,4222,
		5,2,0,0,4222,4223,3,458,229,0,4223,4224,5,3,0,0,4224,457,1,0,0,0,4225,
		4230,3,460,230,0,4226,4227,5,6,0,0,4227,4229,3,460,230,0,4228,4226,1,0,
		0,0,4229,4232,1,0,0,0,4230,4228,1,0,0,0,4230,4231,1,0,0,0,4231,459,1,0,
		0,0,4232,4230,1,0,0,0,4233,4236,3,1420,710,0,4234,4235,5,10,0,0,4235,4237,
		3,462,231,0,4236,4234,1,0,0,0,4236,4237,1,0,0,0,4237,461,1,0,0,0,4238,
		4245,3,638,319,0,4239,4245,3,1430,715,0,4240,4245,3,1276,638,0,4241,4245,
		3,288,144,0,4242,4245,3,1400,700,0,4243,4245,5,438,0,0,4244,4238,1,0,0,
		0,4244,4239,1,0,0,0,4244,4240,1,0,0,0,4244,4241,1,0,0,0,4244,4242,1,0,
		0,0,4244,4243,1,0,0,0,4245,463,1,0,0,0,4246,4247,5,2,0,0,4247,4248,3,466,
		233,0,4248,4249,5,3,0,0,4249,465,1,0,0,0,4250,4255,3,468,234,0,4251,4252,
		5,6,0,0,4252,4254,3,468,234,0,4253,4251,1,0,0,0,4254,4257,1,0,0,0,4255,
		4253,1,0,0,0,4255,4256,1,0,0,0,4256,467,1,0,0,0,4257,4255,1,0,0,0,4258,
		4259,3,1436,718,0,4259,4260,5,10,0,0,4260,4261,3,462,231,0,4261,469,1,
		0,0,0,4262,4263,3,472,236,0,4263,471,1,0,0,0,4264,4269,3,1400,700,0,4265,
		4266,5,6,0,0,4266,4268,3,1400,700,0,4267,4265,1,0,0,0,4268,4271,1,0,0,
		0,4269,4267,1,0,0,0,4269,4270,1,0,0,0,4270,473,1,0,0,0,4271,4269,1,0,0,
		0,4272,4273,5,176,0,0,4273,4274,5,391,0,0,4274,4275,3,520,260,0,4275,4276,
		5,171,0,0,4276,4278,5,488,0,0,4277,4279,3,476,238,0,4278,4277,1,0,0,0,
		4278,4279,1,0,0,0,4279,4280,1,0,0,0,4280,4281,3,1400,700,0,4281,4316,1,
		0,0,0,4282,4283,5,176,0,0,4283,4284,5,391,0,0,4284,4285,3,520,260,0,4285,
		4286,5,171,0,0,4286,4288,5,488,0,0,4287,4289,3,476,238,0,4288,4287,1,0,
		0,0,4288,4289,1,0,0,0,4289,4290,1,0,0,0,4290,4291,3,1400,700,0,4291,4292,
		5,183,0,0,4292,4293,3,1400,700,0,4293,4316,1,0,0,0,4294,4295,5,176,0,0,
		4295,4296,5,391,0,0,4296,4297,3,520,260,0,4297,4298,5,171,0,0,4298,4300,
		5,488,0,0,4299,4301,3,476,238,0,4300,4299,1,0,0,0,4300,4301,1,0,0,0,4301,
		4302,1,0,0,0,4302,4303,3,1400,700,0,4303,4304,5,173,0,0,4304,4305,3,1400,
		700,0,4305,4316,1,0,0,0,4306,4307,5,176,0,0,4307,4308,5,391,0,0,4308,4309,
		3,520,260,0,4309,4310,5,340,0,0,4310,4311,5,488,0,0,4311,4312,3,1400,700,
		0,4312,4313,5,132,0,0,4313,4314,3,1400,700,0,4314,4316,1,0,0,0,4315,4272,
		1,0,0,0,4315,4282,1,0,0,0,4315,4294,1,0,0,0,4315,4306,1,0,0,0,4316,475,
		1,0,0,0,4317,4318,5,258,0,0,4318,4319,5,115,0,0,4319,4320,5,427,0,0,4320,
		477,1,0,0,0,4321,4322,5,84,0,0,4322,4323,5,309,0,0,4323,4324,5,194,0,0,
		4324,4326,3,520,260,0,4325,4327,3,484,242,0,4326,4325,1,0,0,0,4326,4327,
		1,0,0,0,4327,4328,1,0,0,0,4328,4329,5,100,0,0,4329,4330,5,391,0,0,4330,
		4331,3,1116,558,0,4331,4332,5,138,0,0,4332,4334,3,1382,691,0,4333,4335,
		3,486,243,0,4334,4333,1,0,0,0,4334,4335,1,0,0,0,4335,4336,1,0,0,0,4336,
		4337,5,74,0,0,4337,4338,3,480,240,0,4338,479,1,0,0,0,4339,4344,3,482,241,
		0,4340,4341,5,6,0,0,4341,4343,3,482,241,0,4342,4340,1,0,0,0,4343,4346,
		1,0,0,0,4344,4342,1,0,0,0,4344,4345,1,0,0,0,4345,481,1,0,0,0,4346,4344,
		1,0,0,0,4347,4348,5,309,0,0,4348,4349,3,1398,699,0,4349,4351,3,682,341,
		0,4350,4352,3,488,244,0,4351,4350,1,0,0,0,4351,4352,1,0,0,0,4352,4354,
		1,0,0,0,4353,4355,3,490,245,0,4354,4353,1,0,0,0,4354,4355,1,0,0,0,4355,
		4379,1,0,0,0,4356,4357,5,309,0,0,4357,4358,3,1398,699,0,4358,4360,3,686,
		343,0,4359,4361,3,488,244,0,4360,4359,1,0,0,0,4360,4361,1,0,0,0,4361,4363,
		1,0,0,0,4362,4364,3,490,245,0,4363,4362,1,0,0,0,4363,4364,1,0,0,0,4364,
		4379,1,0,0,0,4365,4366,5,249,0,0,4366,4367,3,1398,699,0,4367,4368,3,624,
		312,0,4368,4379,1,0,0,0,4369,4370,5,249,0,0,4370,4371,3,1398,699,0,4371,
		4372,5,2,0,0,4372,4373,3,1286,643,0,4373,4374,5,3,0,0,4374,4375,3,624,
		312,0,4375,4379,1,0,0,0,4376,4377,5,376,0,0,4377,4379,3,1116,558,0,4378,
		4347,1,0,0,0,4378,4356,1,0,0,0,4378,4365,1,0,0,0,4378,4369,1,0,0,0,4378,
		4376,1,0,0,0,4379,483,1,0,0,0,4380,4381,5,91,0,0,4381,485,1,0,0,0,4382,
		4383,5,244,0,0,4383,4384,3,520,260,0,4384,487,1,0,0,0,4385,4386,5,100,
		0,0,4386,4392,5,356,0,0,4387,4388,5,100,0,0,4388,4389,5,121,0,0,4389,4390,
		5,185,0,0,4390,4392,3,520,260,0,4391,4385,1,0,0,0,4391,4387,1,0,0,0,4392,
		489,1,0,0,0,4393,4394,5,333,0,0,4394,491,1,0,0,0,4395,4396,5,84,0,0,4396,
		4397,5,309,0,0,4397,4398,5,244,0,0,4398,4399,3,520,260,0,4399,4400,5,138,
		0,0,4400,4401,3,1382,691,0,4401,493,1,0,0,0,4402,4403,5,176,0,0,4403,4404,
		5,309,0,0,4404,4405,5,244,0,0,4405,4406,3,520,260,0,4406,4407,5,138,0,
		0,4407,4408,3,1382,691,0,4408,4409,5,171,0,0,4409,4410,3,480,240,0,4410,
		4421,1,0,0,0,4411,4412,5,176,0,0,4412,4413,5,309,0,0,4413,4414,5,244,0,
		0,4414,4415,3,520,260,0,4415,4416,5,138,0,0,4416,4417,3,1382,691,0,4417,
		4418,5,229,0,0,4418,4419,3,496,248,0,4419,4421,1,0,0,0,4420,4402,1,0,0,
		0,4420,4411,1,0,0,0,4421,495,1,0,0,0,4422,4427,3,498,249,0,4423,4424,5,
		6,0,0,4424,4426,3,498,249,0,4425,4423,1,0,0,0,4426,4429,1,0,0,0,4427,4425,
		1,0,0,0,4427,4428,1,0,0,0,4428,497,1,0,0,0,4429,4427,1,0,0,0,4430,4431,
		5,309,0,0,4431,4432,3,1398,699,0,4432,4433,5,2,0,0,4433,4434,3,1286,643,
		0,4434,4435,5,3,0,0,4435,4443,1,0,0,0,4436,4437,5,249,0,0,4437,4438,3,
		1398,699,0,4438,4439,5,2,0,0,4439,4440,3,1286,643,0,4440,4441,5,3,0,0,
		4441,4443,1,0,0,0,4442,4430,1,0,0,0,4442,4436,1,0,0,0,4443,499,1,0,0,0,
		4444,4445,5,229,0,0,4445,4446,5,309,0,0,4446,4447,5,194,0,0,4447,4448,
		3,520,260,0,4448,4449,5,138,0,0,4449,4451,3,1382,691,0,4450,4452,3,104,
		52,0,4451,4450,1,0,0,0,4451,4452,1,0,0,0,4452,4465,1,0,0,0,4453,4454,5,
		229,0,0,4454,4455,5,309,0,0,4455,4456,5,194,0,0,4456,4457,5,258,0,0,4457,
		4458,5,427,0,0,4458,4459,3,520,260,0,4459,4460,5,138,0,0,4460,4462,3,1382,
		691,0,4461,4463,3,104,52,0,4462,4461,1,0,0,0,4462,4463,1,0,0,0,4463,4465,
		1,0,0,0,4464,4444,1,0,0,0,4464,4453,1,0,0,0,4465,501,1,0,0,0,4466,4467,
		5,229,0,0,4467,4468,5,309,0,0,4468,4469,5,244,0,0,4469,4470,3,520,260,
		0,4470,4471,5,138,0,0,4471,4473,3,1382,691,0,4472,4474,3,104,52,0,4473,
		4472,1,0,0,0,4473,4474,1,0,0,0,4474,4487,1,0,0,0,4475,4476,5,229,0,0,4476,
		4477,5,309,0,0,4477,4478,5,244,0,0,4478,4479,5,258,0,0,4479,4480,5,427,
		0,0,4480,4481,3,520,260,0,4481,4482,5,138,0,0,4482,4484,3,1382,691,0,4483,
		4485,3,104,52,0,4484,4483,1,0,0,0,4484,4485,1,0,0,0,4485,4487,1,0,0,0,
		4486,4466,1,0,0,0,4486,4475,1,0,0,0,4487,503,1,0,0,0,4488,4489,5,229,0,
		0,4489,4490,5,312,0,0,4490,4491,5,185,0,0,4491,4493,3,1412,706,0,4492,
		4494,3,104,52,0,4493,4492,1,0,0,0,4493,4494,1,0,0,0,4494,505,1,0,0,0,4495,
		4496,5,332,0,0,4496,4497,5,312,0,0,4497,4498,5,185,0,0,4498,4499,3,1412,
		706,0,4499,4500,5,132,0,0,4500,4501,3,1410,705,0,4501,507,1,0,0,0,4502,
		4503,5,229,0,0,4503,4504,3,510,255,0,4504,4505,5,258,0,0,4505,4506,5,427,
		0,0,4506,4508,3,518,259,0,4507,4509,3,104,52,0,4508,4507,1,0,0,0,4508,
		4509,1,0,0,0,4509,4593,1,0,0,0,4510,4511,5,229,0,0,4511,4512,3,510,255,
		0,4512,4514,3,518,259,0,4513,4515,3,104,52,0,4514,4513,1,0,0,0,4514,4515,
		1,0,0,0,4515,4593,1,0,0,0,4516,4517,5,229,0,0,4517,4518,3,514,257,0,4518,
		4519,5,258,0,0,4519,4520,5,427,0,0,4520,4522,3,1380,690,0,4521,4523,3,
		104,52,0,4522,4521,1,0,0,0,4522,4523,1,0,0,0,4523,4593,1,0,0,0,4524,4525,
		5,229,0,0,4525,4526,3,514,257,0,4526,4528,3,1380,690,0,4527,4529,3,104,
		52,0,4528,4527,1,0,0,0,4528,4529,1,0,0,0,4529,4593,1,0,0,0,4530,4531,5,
		229,0,0,4531,4532,3,516,258,0,4532,4533,3,1382,691,0,4533,4534,5,118,0,
		0,4534,4536,3,520,260,0,4535,4537,3,104,52,0,4536,4535,1,0,0,0,4536,4537,
		1,0,0,0,4537,4593,1,0,0,0,4538,4539,5,229,0,0,4539,4540,3,516,258,0,4540,
		4541,5,258,0,0,4541,4542,5,427,0,0,4542,4543,3,1382,691,0,4543,4544,5,
		118,0,0,4544,4546,3,520,260,0,4545,4547,3,104,52,0,4546,4545,1,0,0,0,4546,
		4547,1,0,0,0,4547,4593,1,0,0,0,4548,4549,5,229,0,0,4549,4550,5,391,0,0,
		4550,4552,3,524,262,0,4551,4553,3,104,52,0,4552,4551,1,0,0,0,4552,4553,
		1,0,0,0,4553,4593,1,0,0,0,4554,4555,5,229,0,0,4555,4556,5,391,0,0,4556,
		4557,5,258,0,0,4557,4558,5,427,0,0,4558,4560,3,524,262,0,4559,4561,3,104,
		52,0,4560,4559,1,0,0,0,4560,4561,1,0,0,0,4561,4593,1,0,0,0,4562,4563,5,
		229,0,0,4563,4564,5,227,0,0,4564,4566,3,524,262,0,4565,4567,3,104,52,0,
		4566,4565,1,0,0,0,4566,4567,1,0,0,0,4567,4593,1,0,0,0,4568,4569,5,229,
		0,0,4569,4570,5,227,0,0,4570,4571,5,258,0,0,4571,4572,5,427,0,0,4572,4574,
		3,524,262,0,4573,4575,3,104,52,0,4574,4573,1,0,0,0,4574,4575,1,0,0,0,4575,
		4593,1,0,0,0,4576,4577,5,229,0,0,4577,4578,5,264,0,0,4578,4579,5,147,0,
		0,4579,4581,3,518,259,0,4580,4582,3,104,52,0,4581,4580,1,0,0,0,4581,4582,
		1,0,0,0,4582,4593,1,0,0,0,4583,4584,5,229,0,0,4584,4585,5,264,0,0,4585,
		4586,5,147,0,0,4586,4587,5,258,0,0,4587,4588,5,427,0,0,4588,4590,3,518,
		259,0,4589,4591,3,104,52,0,4590,4589,1,0,0,0,4590,4591,1,0,0,0,4591,4593,
		1,0,0,0,4592,4502,1,0,0,0,4592,4510,1,0,0,0,4592,4516,1,0,0,0,4592,4524,
		1,0,0,0,4592,4530,1,0,0,0,4592,4538,1,0,0,0,4592,4548,1,0,0,0,4592,4554,
		1,0,0,0,4592,4562,1,0,0,0,4592,4568,1,0,0,0,4592,4576,1,0,0,0,4592,4583,
		1,0,0,0,4593,509,1,0,0,0,4594,4618,5,130,0,0,4595,4618,5,359,0,0,4596,
		4618,5,407,0,0,4597,4598,5,289,0,0,4598,4618,5,407,0,0,4599,4618,5,264,
		0,0,4600,4601,5,101,0,0,4601,4618,5,130,0,0,4602,4618,5,146,0,0,4603,4618,
		5,206,0,0,4604,4618,5,373,0,0,4605,4606,5,386,0,0,4606,4607,5,356,0,0,
		4607,4618,5,314,0,0,4608,4609,5,386,0,0,4609,4610,5,356,0,0,4610,4618,
		5,223,0,0,4611,4612,5,386,0,0,4612,4613,5,356,0,0,4613,4618,5,384,0,0,
		4614,4615,5,386,0,0,4615,4616,5,356,0,0,4616,4618,5,201,0,0,4617,4594,
		1,0,0,0,4617,4595,1,0,0,0,4617,4596,1,0,0,0,4617,4597,1,0,0,0,4617,4599,
		1,0,0,0,4617,4600,1,0,0,0,4617,4602,1,0,0,0,4617,4603,1,0,0,0,4617,4604,
		1,0,0,0,4617,4605,1,0,0,0,4617,4608,1,0,0,0,4617,4611,1,0,0,0,4617,4614,
		1,0,0,0,4618,511,1,0,0,0,4619,4625,3,514,257,0,4620,4625,5,213,0,0,4621,
		4625,5,349,0,0,4622,4625,5,489,0,0,4623,4625,5,382,0,0,4624,4619,1,0,0,
		0,4624,4620,1,0,0,0,4624,4621,1,0,0,0,4624,4622,1,0,0,0,4624,4623,1,0,
		0,0,4625,513,1,0,0,0,4626,4627,5,169,0,0,4627,4642,5,484,0,0,4628,4629,
		5,236,0,0,4629,4642,5,388,0,0,4630,4642,5,242,0,0,4631,4632,5,101,0,0,
		4632,4633,5,212,0,0,4633,4642,5,412,0,0,4634,4636,3,304,152,0,4635,4634,
		1,0,0,0,4635,4636,1,0,0,0,4636,4637,1,0,0,0,4637,4642,5,276,0,0,4638,4642,
		5,490,0,0,4639,4642,5,354,0,0,4640,4642,5,362,0,0,4641,4626,1,0,0,0,4641,
		4628,1,0,0,0,4641,4630,1,0,0,0,4641,4631,1,0,0,0,4641,4635,1,0,0,0,4641,
		4638,1,0,0,0,4641,4639,1,0,0,0,4641,4640,1,0,0,0,4642,515,1,0,0,0,4643,
		4644,7,24,0,0,4644,517,1,0,0,0,4645,4650,3,520,260,0,4646,4647,5,6,0,0,
		4647,4649,3,520,260,0,4648,4646,1,0,0,0,4649,4652,1,0,0,0,4650,4648,1,
		0,0,0,4650,4651,1,0,0,0,4651,519,1,0,0,0,4652,4650,1,0,0,0,4653,4655,3,
		1414,707,0,4654,4656,3,522,261,0,4655,4654,1,0,0,0,4655,4656,1,0,0,0,4656,
		521,1,0,0,0,4657,4658,5,11,0,0,4658,4660,3,1384,692,0,4659,4657,1,0,0,
		0,4660,4661,1,0,0,0,4661,4659,1,0,0,0,4661,4662,1,0,0,0,4662,523,1,0,0,
		0,4663,4668,3,1116,558,0,4664,4665,5,6,0,0,4665,4667,3,1116,558,0,4666,
		4664,1,0,0,0,4667,4670,1,0,0,0,4668,4666,1,0,0,0,4668,4669,1,0,0,0,4669,
		525,1,0,0,0,4670,4668,1,0,0,0,4671,4673,5,389,0,0,4672,4674,3,992,496,
		0,4673,4672,1,0,0,0,4673,4674,1,0,0,0,4674,4675,1,0,0,0,4675,4677,3,1074,
		537,0,4676,4678,3,528,264,0,4677,4676,1,0,0,0,4677,4678,1,0,0,0,4678,4680,
		1,0,0,0,4679,4681,3,104,52,0,4680,4679,1,0,0,0,4680,4681,1,0,0,0,4681,
		527,1,0,0,0,4682,4683,5,205,0,0,4683,4687,5,257,0,0,4684,4685,5,345,0,
		0,4685,4687,5,257,0,0,4686,4682,1,0,0,0,4686,4684,1,0,0,0,4687,529,1,0,
		0,0,4688,4689,5,197,0,0,4689,4690,5,118,0,0,4690,4691,3,510,255,0,4691,
		4692,3,520,260,0,4692,4693,5,154,0,0,4693,4694,3,532,266,0,4694,4836,1,
		0,0,0,4695,4696,5,197,0,0,4696,4697,5,118,0,0,4697,4698,5,82,0,0,4698,
		4699,3,520,260,0,4699,4700,5,154,0,0,4700,4701,3,532,266,0,4701,4836,1,
		0,0,0,4702,4703,5,197,0,0,4703,4704,5,118,0,0,4704,4705,3,512,256,0,4705,
		4706,3,1382,691,0,4706,4707,5,154,0,0,4707,4708,3,532,266,0,4708,4836,
		1,0,0,0,4709,4710,5,197,0,0,4710,4711,5,118,0,0,4711,4712,5,391,0,0,4712,
		4713,3,1116,558,0,4713,4714,5,154,0,0,4714,4715,3,532,266,0,4715,4836,
		1,0,0,0,4716,4717,5,197,0,0,4717,4718,5,118,0,0,4718,4719,5,227,0,0,4719,
		4720,3,1116,558,0,4720,4721,5,154,0,0,4721,4722,3,532,266,0,4722,4836,
		1,0,0,0,4723,4724,5,197,0,0,4724,4725,5,118,0,0,4725,4726,5,174,0,0,4726,
		4727,3,648,324,0,4727,4728,5,154,0,0,4728,4729,3,532,266,0,4729,4836,1,
		0,0,0,4730,4731,5,197,0,0,4731,4732,5,118,0,0,4732,4733,5,249,0,0,4733,
		4734,3,624,312,0,4734,4735,5,154,0,0,4735,4736,3,532,266,0,4736,4836,1,
		0,0,0,4737,4738,5,197,0,0,4738,4739,5,118,0,0,4739,4740,5,309,0,0,4740,
		4741,3,686,343,0,4741,4742,5,154,0,0,4742,4743,3,532,266,0,4743,4836,1,
		0,0,0,4744,4745,5,197,0,0,4745,4746,5,118,0,0,4746,4747,5,83,0,0,4747,
		4748,3,1382,691,0,4748,4749,5,118,0,0,4749,4750,3,520,260,0,4750,4751,
		5,154,0,0,4751,4752,3,532,266,0,4752,4836,1,0,0,0,4753,4754,5,197,0,0,
		4754,4755,5,118,0,0,4755,4756,5,83,0,0,4756,4757,3,1382,691,0,4757,4758,
		5,118,0,0,4758,4759,5,227,0,0,4759,4760,3,520,260,0,4760,4761,5,154,0,
		0,4761,4762,3,532,266,0,4762,4836,1,0,0,0,4763,4764,5,197,0,0,4764,4765,
		5,118,0,0,4765,4766,3,516,258,0,4766,4767,3,1382,691,0,4767,4768,5,118,
		0,0,4768,4769,3,520,260,0,4769,4770,5,154,0,0,4770,4771,3,532,266,0,4771,
		4836,1,0,0,0,4772,4773,5,197,0,0,4773,4774,5,118,0,0,4774,4775,5,327,0,
		0,4775,4776,3,624,312,0,4776,4777,5,154,0,0,4777,4778,3,532,266,0,4778,
		4836,1,0,0,0,4779,4780,5,197,0,0,4780,4781,5,118,0,0,4781,4782,5,480,0,
		0,4782,4783,3,624,312,0,4783,4784,5,154,0,0,4784,4785,3,532,266,0,4785,
		4836,1,0,0,0,4786,4787,5,197,0,0,4787,4788,5,118,0,0,4788,4789,5,481,0,
		0,4789,4790,5,100,0,0,4790,4791,3,1116,558,0,4791,4792,5,276,0,0,4792,
		4793,3,1382,691,0,4793,4794,5,154,0,0,4794,4795,3,532,266,0,4795,4836,
		1,0,0,0,4796,4797,5,197,0,0,4797,4798,5,118,0,0,4798,4799,5,309,0,0,4799,
		4800,5,194,0,0,4800,4801,3,520,260,0,4801,4802,5,138,0,0,4802,4803,3,1382,
		691,0,4803,4804,5,154,0,0,4804,4805,3,532,266,0,4805,4836,1,0,0,0,4806,
		4807,5,197,0,0,4807,4808,5,118,0,0,4808,4809,5,309,0,0,4809,4810,5,244,
		0,0,4810,4811,3,520,260,0,4811,4812,5,138,0,0,4812,4813,3,1382,691,0,4813,
		4814,5,154,0,0,4814,4815,3,532,266,0,4815,4836,1,0,0,0,4816,4817,5,197,
		0,0,4817,4818,5,118,0,0,4818,4819,5,277,0,0,4819,4820,5,305,0,0,4820,4821,
		3,288,144,0,4821,4822,5,154,0,0,4822,4823,3,532,266,0,4823,4836,1,0,0,
		0,4824,4825,5,197,0,0,4825,4826,5,118,0,0,4826,4827,5,79,0,0,4827,4828,
		5,2,0,0,4828,4829,3,1116,558,0,4829,4830,5,74,0,0,4830,4831,3,1116,558,
		0,4831,4832,5,3,0,0,4832,4833,5,154,0,0,4833,4834,3,532,266,0,4834,4836,
		1,0,0,0,4835,4688,1,0,0,0,4835,4695,1,0,0,0,4835,4702,1,0,0,0,4835,4709,
		1,0,0,0,4835,4716,1,0,0,0,4835,4723,1,0,0,0,4835,4730,1,0,0,0,4835,4737,
		1,0,0,0,4835,4744,1,0,0,0,4835,4753,1,0,0,0,4835,4763,1,0,0,0,4835,4772,
		1,0,0,0,4835,4779,1,0,0,0,4835,4786,1,0,0,0,4835,4796,1,0,0,0,4835,4806,
		1,0,0,0,4835,4816,1,0,0,0,4835,4824,1,0,0,0,4836,531,1,0,0,0,4837,4840,
		3,1400,700,0,4838,4840,5,116,0,0,4839,4837,1,0,0,0,4839,4838,1,0,0,0,4840,
		533,1,0,0,0,4841,4842,5,358,0,0,4842,4844,5,275,0,0,4843,4845,3,536,268,
		0,4844,4843,1,0,0,0,4844,4845,1,0,0,0,4845,4846,1,0,0,0,4846,4847,5,118,
		0,0,4847,4848,3,510,255,0,4848,4849,3,520,260,0,4849,4850,5,154,0,0,4850,
		4851,3,538,269,0,4851,4953,1,0,0,0,4852,4853,5,358,0,0,4853,4855,5,275,
		0,0,4854,4856,3,536,268,0,4855,4854,1,0,0,0,4855,4856,1,0,0,0,4856,4857,
		1,0,0,0,4857,4858,5,118,0,0,4858,4859,5,82,0,0,4859,4860,3,520,260,0,4860,
		4861,5,154,0,0,4861,4862,3,538,269,0,4862,4953,1,0,0,0,4863,4864,5,358,
		0,0,4864,4866,5,275,0,0,4865,4867,3,536,268,0,4866,4865,1,0,0,0,4866,4867,
		1,0,0,0,4867,4868,1,0,0,0,4868,4869,5,118,0,0,4869,4870,3,512,256,0,4870,
		4871,3,1382,691,0,4871,4872,5,154,0,0,4872,4873,3,538,269,0,4873,4953,
		1,0,0,0,4874,4875,5,358,0,0,4875,4877,5,275,0,0,4876,4878,3,536,268,0,
		4877,4876,1,0,0,0,4877,4878,1,0,0,0,4878,4879,1,0,0,0,4879,4880,5,118,
		0,0,4880,4881,5,391,0,0,4881,4882,3,1116,558,0,4882,4883,5,154,0,0,4883,
		4884,3,538,269,0,4884,4953,1,0,0,0,4885,4886,5,358,0,0,4886,4888,5,275,
		0,0,4887,4889,3,536,268,0,4888,4887,1,0,0,0,4888,4889,1,0,0,0,4889,4890,
		1,0,0,0,4890,4891,5,118,0,0,4891,4892,5,227,0,0,4892,4893,3,1116,558,0,
		4893,4894,5,154,0,0,4894,4895,3,538,269,0,4895,4953,1,0,0,0,4896,4897,
		5,358,0,0,4897,4899,5,275,0,0,4898,4900,3,536,268,0,4899,4898,1,0,0,0,
		4899,4900,1,0,0,0,4900,4901,1,0,0,0,4901,4902,5,118,0,0,4902,4903,5,174,
		0,0,4903,4904,3,648,324,0,4904,4905,5,154,0,0,4905,4906,3,538,269,0,4906,
		4953,1,0,0,0,4907,4908,5,358,0,0,4908,4910,5,275,0,0,4909,4911,3,536,268,
		0,4910,4909,1,0,0,0,4910,4911,1,0,0,0,4911,4912,1,0,0,0,4912,4913,5,118,
		0,0,4913,4914,5,249,0,0,4914,4915,3,624,312,0,4915,4916,5,154,0,0,4916,
		4917,3,538,269,0,4917,4953,1,0,0,0,4918,4919,5,358,0,0,4919,4921,5,275,
		0,0,4920,4922,3,536,268,0,4921,4920,1,0,0,0,4921,4922,1,0,0,0,4922,4923,
		1,0,0,0,4923,4924,5,118,0,0,4924,4925,5,277,0,0,4925,4926,5,305,0,0,4926,
		4927,3,288,144,0,4927,4928,5,154,0,0,4928,4929,3,538,269,0,4929,4953,1,
		0,0,0,4930,4931,5,358,0,0,4931,4933,5,275,0,0,4932,4934,3,536,268,0,4933,
		4932,1,0,0,0,4933,4934,1,0,0,0,4934,4935,1,0,0,0,4935,4936,5,118,0,0,4936,
		4937,5,327,0,0,4937,4938,3,624,312,0,4938,4939,5,154,0,0,4939,4940,3,538,
		269,0,4940,4953,1,0,0,0,4941,4942,5,358,0,0,4942,4944,5,275,0,0,4943,4945,
		3,536,268,0,4944,4943,1,0,0,0,4944,4945,1,0,0,0,4945,4946,1,0,0,0,4946,
		4947,5,118,0,0,4947,4948,5,480,0,0,4948,4949,3,624,312,0,4949,4950,5,154,
		0,0,4950,4951,3,538,269,0,4951,4953,1,0,0,0,4952,4841,1,0,0,0,4952,4852,
		1,0,0,0,4952,4863,1,0,0,0,4952,4874,1,0,0,0,4952,4885,1,0,0,0,4952,4896,
		1,0,0,0,4952,4907,1,0,0,0,4952,4918,1,0,0,0,4952,4930,1,0,0,0,4952,4941,
		1,0,0,0,4953,535,1,0,0,0,4954,4955,5,100,0,0,4955,4956,3,68,34,0,4956,
		537,1,0,0,0,4957,4960,3,1400,700,0,4958,4960,5,116,0,0,4959,4957,1,0,0,
		0,4959,4958,1,0,0,0,4960,539,1,0,0,0,4961,4962,5,99,0,0,4962,4966,3,542,
		271,0,4963,4964,5,296,0,0,4964,4966,3,542,271,0,4965,4961,1,0,0,0,4965,
		4963,1,0,0,0,4966,541,1,0,0,0,4967,5053,3,958,479,0,4968,4969,3,544,272,
		0,4969,4970,3,958,479,0,4970,5053,1,0,0,0,4971,4973,5,299,0,0,4972,4974,
		3,546,273,0,4973,4972,1,0,0,0,4973,4974,1,0,0,0,4974,4975,1,0,0,0,4975,
		5053,3,958,479,0,4976,4978,5,324,0,0,4977,4979,3,546,273,0,4978,4977,1,
		0,0,0,4978,4979,1,0,0,0,4979,4980,1,0,0,0,4980,5053,3,958,479,0,4981,4983,
		5,245,0,0,4982,4984,3,546,273,0,4983,4982,1,0,0,0,4983,4984,1,0,0,0,4984,
		4985,1,0,0,0,4985,5053,3,958,479,0,4986,4988,5,278,0,0,4987,4989,3,546,
		273,0,4988,4987,1,0,0,0,4988,4989,1,0,0,0,4989,4990,1,0,0,0,4990,5053,
		3,958,479,0,4991,4992,5,168,0,0,4992,4994,3,1406,703,0,4993,4995,3,546,
		273,0,4994,4993,1,0,0,0,4994,4995,1,0,0,0,4995,4996,1,0,0,0,4996,4997,
		3,958,479,0,4997,5053,1,0,0,0,4998,4999,5,338,0,0,4999,5001,3,1406,703,
		0,5000,5002,3,546,273,0,5001,5000,1,0,0,0,5001,5002,1,0,0,0,5002,5003,
		1,0,0,0,5003,5004,3,958,479,0,5004,5053,1,0,0,0,5005,5007,3,1406,703,0,
		5006,5008,3,546,273,0,5007,5006,1,0,0,0,5007,5008,1,0,0,0,5008,5009,1,
		0,0,0,5009,5010,3,958,479,0,5010,5053,1,0,0,0,5011,5013,5,68,0,0,5012,
		5014,3,546,273,0,5013,5012,1,0,0,0,5013,5014,1,0,0,0,5014,5015,1,0,0,0,
		5015,5053,3,958,479,0,5016,5018,5,248,0,0,5017,5019,3,546,273,0,5018,5017,
		1,0,0,0,5018,5019,1,0,0,0,5019,5020,1,0,0,0,5020,5053,3,958,479,0,5021,
		5022,5,248,0,0,5022,5024,3,1406,703,0,5023,5025,3,546,273,0,5024,5023,
		1,0,0,0,5024,5025,1,0,0,0,5025,5026,1,0,0,0,5026,5027,3,958,479,0,5027,
		5053,1,0,0,0,5028,5029,5,248,0,0,5029,5031,5,68,0,0,5030,5032,3,546,273,
		0,5031,5030,1,0,0,0,5031,5032,1,0,0,0,5032,5033,1,0,0,0,5033,5053,3,958,
		479,0,5034,5036,5,182,0,0,5035,5037,3,546,273,0,5036,5035,1,0,0,0,5036,
		5037,1,0,0,0,5037,5038,1,0,0,0,5038,5053,3,958,479,0,5039,5040,5,182,0,
		0,5040,5042,3,1406,703,0,5041,5043,3,546,273,0,5042,5041,1,0,0,0,5042,
		5043,1,0,0,0,5043,5044,1,0,0,0,5044,5045,3,958,479,0,5045,5053,1,0,0,0,
		5046,5047,5,182,0,0,5047,5049,5,68,0,0,5048,5050,3,546,273,0,5049,5048,
		1,0,0,0,5049,5050,1,0,0,0,5050,5051,1,0,0,0,5051,5053,3,958,479,0,5052,
		4967,1,0,0,0,5052,4968,1,0,0,0,5052,4971,1,0,0,0,5052,4976,1,0,0,0,5052,
		4981,1,0,0,0,5052,4986,1,0,0,0,5052,4991,1,0,0,0,5052,4998,1,0,0,0,5052,
		5005,1,0,0,0,5052,5011,1,0,0,0,5052,5016,1,0,0,0,5052,5021,1,0,0,0,5052,
		5028,1,0,0,0,5052,5034,1,0,0,0,5052,5039,1,0,0,0,5052,5046,1,0,0,0,5053,
		543,1,0,0,0,5054,5055,7,25,0,0,5055,545,1,0,0,0,5056,5057,3,544,272,0,
		5057,547,1,0,0,0,5058,5059,5,103,0,0,5059,5060,3,552,276,0,5060,5061,5,
		118,0,0,5061,5062,3,558,279,0,5062,5063,5,132,0,0,5063,5065,3,560,280,
		0,5064,5066,3,564,282,0,5065,5064,1,0,0,0,5065,5066,1,0,0,0,5066,549,1,
		0,0,0,5067,5068,5,348,0,0,5068,5069,3,552,276,0,5069,5070,5,118,0,0,5070,
		5071,3,558,279,0,5071,5072,5,102,0,0,5072,5074,3,560,280,0,5073,5075,3,
		104,52,0,5074,5073,1,0,0,0,5074,5075,1,0,0,0,5075,5089,1,0,0,0,5076,5077,
		5,348,0,0,5077,5078,5,103,0,0,5078,5079,5,310,0,0,5079,5080,5,100,0,0,
		5080,5081,3,552,276,0,5081,5082,5,118,0,0,5082,5083,3,558,279,0,5083,5084,
		5,102,0,0,5084,5086,3,560,280,0,5085,5087,3,104,52,0,5086,5085,1,0,0,0,
		5086,5087,1,0,0,0,5087,5089,1,0,0,0,5088,5067,1,0,0,0,5088,5076,1,0,0,
		0,5089,551,1,0,0,0,5090,5106,3,554,277,0,5091,5106,5,68,0,0,5092,5093,
		5,68,0,0,5093,5106,5,325,0,0,5094,5095,5,68,0,0,5095,5096,5,2,0,0,5096,
		5097,3,212,106,0,5097,5098,5,3,0,0,5098,5106,1,0,0,0,5099,5100,5,68,0,
		0,5100,5101,5,325,0,0,5101,5102,5,2,0,0,5102,5103,3,212,106,0,5103,5104,
		5,3,0,0,5104,5106,1,0,0,0,5105,5090,1,0,0,0,5105,5091,1,0,0,0,5105,5092,
		1,0,0,0,5105,5094,1,0,0,0,5105,5099,1,0,0,0,5106,553,1,0,0,0,5107,5112,
		3,556,278,0,5108,5109,5,6,0,0,5109,5111,3,556,278,0,5110,5108,1,0,0,0,
		5111,5114,1,0,0,0,5112,5110,1,0,0,0,5112,5113,1,0,0,0,5113,555,1,0,0,0,
		5114,5112,1,0,0,0,5115,5117,5,126,0,0,5116,5118,3,210,105,0,5117,5116,
		1,0,0,0,5117,5118,1,0,0,0,5118,5132,1,0,0,0,5119,5121,5,124,0,0,5120,5122,
		3,210,105,0,5121,5120,1,0,0,0,5121,5122,1,0,0,0,5122,5132,1,0,0,0,5123,
		5125,5,84,0,0,5124,5126,3,210,105,0,5125,5124,1,0,0,0,5125,5126,1,0,0,
		0,5126,5132,1,0,0,0,5127,5129,3,1414,707,0,5128,5130,3,210,105,0,5129,
		5128,1,0,0,0,5129,5130,1,0,0,0,5130,5132,1,0,0,0,5131,5115,1,0,0,0,5131,
		5119,1,0,0,0,5131,5123,1,0,0,0,5131,5127,1,0,0,0,5132,557,1,0,0,0,5133,
		5192,3,1376,688,0,5134,5135,5,130,0,0,5135,5192,3,1376,688,0,5136,5137,
		5,359,0,0,5137,5192,3,1376,688,0,5138,5139,5,101,0,0,5139,5140,5,212,0,
		0,5140,5141,5,412,0,0,5141,5192,3,1380,690,0,5142,5143,5,101,0,0,5143,
		5144,5,362,0,0,5144,5192,3,1380,690,0,5145,5146,5,249,0,0,5146,5192,3,
		622,311,0,5147,5148,5,327,0,0,5148,5192,3,622,311,0,5149,5150,5,480,0,
		0,5150,5192,3,622,311,0,5151,5152,5,213,0,0,5152,5192,3,1380,690,0,5153,
		5154,5,227,0,0,5154,5192,3,518,259,0,5155,5156,5,276,0,0,5156,5192,3,1380,
		690,0,5157,5158,5,277,0,0,5158,5159,5,305,0,0,5159,5192,3,290,145,0,5160,
		5161,5,354,0,0,5161,5192,3,1380,690,0,5162,5163,5,382,0,0,5163,5192,3,
		1380,690,0,5164,5165,5,391,0,0,5165,5192,3,518,259,0,5166,5167,5,68,0,
		0,5167,5168,5,381,0,0,5168,5169,5,106,0,0,5169,5170,5,354,0,0,5170,5192,
		3,1380,690,0,5171,5172,5,68,0,0,5172,5173,5,360,0,0,5173,5174,5,106,0,
		0,5174,5175,5,354,0,0,5175,5192,3,1380,690,0,5176,5177,5,68,0,0,5177,5178,
		5,250,0,0,5178,5179,5,106,0,0,5179,5180,5,354,0,0,5180,5192,3,1380,690,
		0,5181,5182,5,68,0,0,5182,5183,5,495,0,0,5183,5184,5,106,0,0,5184,5185,
		5,354,0,0,5185,5192,3,1380,690,0,5186,5187,5,68,0,0,5187,5188,5,493,0,
		0,5188,5189,5,106,0,0,5189,5190,5,354,0,0,5190,5192,3,1380,690,0,5191,
		5133,1,0,0,0,5191,5134,1,0,0,0,5191,5136,1,0,0,0,5191,5138,1,0,0,0,5191,
		5142,1,0,0,0,5191,5145,1,0,0,0,5191,5147,1,0,0,0,5191,5149,1,0,0,0,5191,
		5151,1,0,0,0,5191,5153,1,0,0,0,5191,5155,1,0,0,0,5191,5157,1,0,0,0,5191,
		5160,1,0,0,0,5191,5162,1,0,0,0,5191,5164,1,0,0,0,5191,5166,1,0,0,0,5191,
		5171,1,0,0,0,5191,5176,1,0,0,0,5191,5181,1,0,0,0,5191,5186,1,0,0,0,5192,
		559,1,0,0,0,5193,5198,3,562,281,0,5194,5195,5,6,0,0,5195,5197,3,562,281,
		0,5196,5194,1,0,0,0,5197,5200,1,0,0,0,5198,5196,1,0,0,0,5198,5199,1,0,
		0,0,5199,561,1,0,0,0,5200,5198,1,0,0,0,5201,5205,3,1410,705,0,5202,5203,
		5,104,0,0,5203,5205,3,1410,705,0,5204,5201,1,0,0,0,5204,5202,1,0,0,0,5205,
		563,1,0,0,0,5206,5207,5,143,0,0,5207,5208,5,103,0,0,5208,5209,5,310,0,
		0,5209,565,1,0,0,0,5210,5211,5,103,0,0,5211,5212,3,554,277,0,5212,5213,
		5,132,0,0,5213,5215,3,1412,706,0,5214,5216,3,570,285,0,5215,5214,1,0,0,
		0,5215,5216,1,0,0,0,5216,5218,1,0,0,0,5217,5219,3,572,286,0,5218,5217,
		1,0,0,0,5218,5219,1,0,0,0,5219,567,1,0,0,0,5220,5221,5,348,0,0,5221,5222,
		3,554,277,0,5222,5223,5,102,0,0,5223,5225,3,1412,706,0,5224,5226,3,572,
		286,0,5225,5224,1,0,0,0,5225,5226,1,0,0,0,5226,5228,1,0,0,0,5227,5229,
		3,104,52,0,5228,5227,1,0,0,0,5228,5229,1,0,0,0,5229,5244,1,0,0,0,5230,
		5231,5,348,0,0,5231,5232,5,172,0,0,5232,5233,5,310,0,0,5233,5234,5,100,
		0,0,5234,5235,3,554,277,0,5235,5236,5,102,0,0,5236,5238,3,1412,706,0,5237,
		5239,3,572,286,0,5238,5237,1,0,0,0,5238,5239,1,0,0,0,5239,5241,1,0,0,0,
		5240,5242,3,104,52,0,5241,5240,1,0,0,0,5241,5242,1,0,0,0,5242,5244,1,0,
		0,0,5243,5220,1,0,0,0,5243,5230,1,0,0,0,5244,569,1,0,0,0,5245,5246,5,143,
		0,0,5246,5247,5,172,0,0,5247,5248,5,310,0,0,5248,571,1,0,0,0,5249,5250,
		5,252,0,0,5250,5251,5,185,0,0,5251,5252,3,1410,705,0,5252,573,1,0,0,0,
		5253,5254,5,176,0,0,5254,5255,5,91,0,0,5255,5256,5,325,0,0,5256,5257,3,
		576,288,0,5257,5258,3,580,290,0,5258,575,1,0,0,0,5259,5261,3,578,289,0,
		5260,5259,1,0,0,0,5261,5264,1,0,0,0,5262,5260,1,0,0,0,5262,5263,1,0,0,
		0,5263,577,1,0,0,0,5264,5262,1,0,0,0,5265,5266,5,106,0,0,5266,5267,5,354,
		0,0,5267,5275,3,1380,690,0,5268,5269,5,100,0,0,5269,5270,5,349,0,0,5270,
		5275,3,1412,706,0,5271,5272,5,100,0,0,5272,5273,5,137,0,0,5273,5275,3,
		1412,706,0,5274,5265,1,0,0,0,5274,5268,1,0,0,0,5274,5271,1,0,0,0,5275,
		579,1,0,0,0,5276,5277,5,103,0,0,5277,5278,3,552,276,0,5278,5279,5,118,
		0,0,5279,5280,3,582,291,0,5280,5281,5,132,0,0,5281,5283,3,560,280,0,5282,
		5284,3,564,282,0,5283,5282,1,0,0,0,5283,5284,1,0,0,0,5284,5307,1,0,0,0,
		5285,5286,5,348,0,0,5286,5287,3,552,276,0,5287,5288,5,118,0,0,5288,5289,
		3,582,291,0,5289,5290,5,102,0,0,5290,5292,3,560,280,0,5291,5293,3,104,
		52,0,5292,5291,1,0,0,0,5292,5293,1,0,0,0,5293,5307,1,0,0,0,5294,5295,5,
		348,0,0,5295,5296,5,103,0,0,5296,5297,5,310,0,0,5297,5298,5,100,0,0,5298,
		5299,3,552,276,0,5299,5300,5,118,0,0,5300,5301,3,582,291,0,5301,5302,5,
		102,0,0,5302,5304,3,560,280,0,5303,5305,3,104,52,0,5304,5303,1,0,0,0,5304,
		5305,1,0,0,0,5305,5307,1,0,0,0,5306,5276,1,0,0,0,5306,5285,1,0,0,0,5306,
		5294,1,0,0,0,5307,581,1,0,0,0,5308,5309,7,26,0,0,5309,583,1,0,0,0,5310,
		5312,5,84,0,0,5311,5313,3,586,293,0,5312,5311,1,0,0,0,5312,5313,1,0,0,
		0,5313,5314,1,0,0,0,5314,5316,5,264,0,0,5315,5317,3,590,295,0,5316,5315,
		1,0,0,0,5316,5317,1,0,0,0,5317,5319,1,0,0,0,5318,5320,3,592,296,0,5319,
		5318,1,0,0,0,5319,5320,1,0,0,0,5320,5321,1,0,0,0,5321,5322,5,118,0,0,5322,
		5324,3,1072,536,0,5323,5325,3,594,297,0,5324,5323,1,0,0,0,5324,5325,1,
		0,0,0,5325,5326,1,0,0,0,5326,5327,5,2,0,0,5327,5328,3,596,298,0,5328,5330,
		5,3,0,0,5329,5331,3,602,301,0,5330,5329,1,0,0,0,5330,5331,1,0,0,0,5331,
		5333,1,0,0,0,5332,5334,3,114,57,0,5333,5332,1,0,0,0,5333,5334,1,0,0,0,
		5334,5336,1,0,0,0,5335,5337,3,250,125,0,5336,5335,1,0,0,0,5336,5337,1,
		0,0,0,5337,5339,1,0,0,0,5338,5340,3,1092,546,0,5339,5338,1,0,0,0,5339,
		5340,1,0,0,0,5340,5374,1,0,0,0,5341,5343,5,84,0,0,5342,5344,3,586,293,
		0,5343,5342,1,0,0,0,5343,5344,1,0,0,0,5344,5345,1,0,0,0,5345,5347,5,264,
		0,0,5346,5348,3,590,295,0,5347,5346,1,0,0,0,5347,5348,1,0,0,0,5348,5349,
		1,0,0,0,5349,5350,5,258,0,0,5350,5351,5,115,0,0,5351,5352,5,427,0,0,5352,
		5353,3,1382,691,0,5353,5354,5,118,0,0,5354,5356,3,1072,536,0,5355,5357,
		3,594,297,0,5356,5355,1,0,0,0,5356,5357,1,0,0,0,5357,5358,1,0,0,0,5358,
		5359,5,2,0,0,5359,5360,3,596,298,0,5360,5362,5,3,0,0,5361,5363,3,602,301,
		0,5362,5361,1,0,0,0,5362,5363,1,0,0,0,5363,5365,1,0,0,0,5364,5366,3,114,
		57,0,5365,5364,1,0,0,0,5365,5366,1,0,0,0,5366,5368,1,0,0,0,5367,5369,3,
		250,125,0,5368,5367,1,0,0,0,5368,5369,1,0,0,0,5369,5371,1,0,0,0,5370,5372,
		3,1092,546,0,5371,5370,1,0,0,0,5371,5372,1,0,0,0,5372,5374,1,0,0,0,5373,
		5310,1,0,0,0,5373,5341,1,0,0,0,5374,585,1,0,0,0,5375,5376,5,136,0,0,5376,
		587,1,0,0,0,5377,5378,3,1414,707,0,5378,589,1,0,0,0,5379,5380,5,147,0,
		0,5380,591,1,0,0,0,5381,5382,3,1382,691,0,5382,593,1,0,0,0,5383,5384,5,
		138,0,0,5384,5385,3,1382,691,0,5385,595,1,0,0,0,5386,5391,3,600,300,0,
		5387,5388,5,6,0,0,5388,5390,3,600,300,0,5389,5387,1,0,0,0,5390,5393,1,
		0,0,0,5391,5389,1,0,0,0,5391,5392,1,0,0,0,5392,597,1,0,0,0,5393,5391,1,
		0,0,0,5394,5396,3,606,303,0,5395,5394,1,0,0,0,5395,5396,1,0,0,0,5396,5398,
		1,0,0,0,5397,5399,3,608,304,0,5398,5397,1,0,0,0,5398,5399,1,0,0,0,5399,
		5401,1,0,0,0,5400,5402,3,610,305,0,5401,5400,1,0,0,0,5401,5402,1,0,0,0,
		5402,5404,1,0,0,0,5403,5405,3,612,306,0,5404,5403,1,0,0,0,5404,5405,1,
		0,0,0,5405,5418,1,0,0,0,5406,5408,3,606,303,0,5407,5406,1,0,0,0,5407,5408,
		1,0,0,0,5408,5409,1,0,0,0,5409,5410,3,520,260,0,5410,5412,3,112,56,0,5411,
		5413,3,610,305,0,5412,5411,1,0,0,0,5412,5413,1,0,0,0,5413,5415,1,0,0,0,
		5414,5416,3,612,306,0,5415,5414,1,0,0,0,5415,5416,1,0,0,0,5416,5418,1,
		0,0,0,5417,5395,1,0,0,0,5417,5407,1,0,0,0,5418,599,1,0,0,0,5419,5420,3,
		1414,707,0,5420,5421,3,598,299,0,5421,5431,1,0,0,0,5422,5423,3,1214,607,
		0,5423,5424,3,598,299,0,5424,5431,1,0,0,0,5425,5426,5,2,0,0,5426,5427,
		3,1162,581,0,5427,5428,5,3,0,0,5428,5429,3,598,299,0,5429,5431,1,0,0,0,
		5430,5419,1,0,0,0,5430,5422,1,0,0,0,5430,5425,1,0,0,0,5431,601,1,0,0,0,
		5432,5433,5,479,0,0,5433,5434,5,2,0,0,5434,5435,3,604,302,0,5435,5436,
		5,3,0,0,5436,603,1,0,0,0,5437,5442,3,600,300,0,5438,5439,5,6,0,0,5439,
		5441,3,600,300,0,5440,5438,1,0,0,0,5441,5444,1,0,0,0,5442,5440,1,0,0,0,
		5442,5443,1,0,0,0,5443,605,1,0,0,0,5444,5442,1,0,0,0,5445,5446,5,81,0,
		0,5446,5447,3,520,260,0,5447,607,1,0,0,0,5448,5449,3,520,260,0,5449,609,
		1,0,0,0,5450,5451,7,27,0,0,5451,611,1,0,0,0,5452,5453,5,304,0,0,5453,5457,
		5,245,0,0,5454,5455,5,304,0,0,5455,5457,5,278,0,0,5456,5452,1,0,0,0,5456,
		5454,1,0,0,0,5457,613,1,0,0,0,5458,5460,5,84,0,0,5459,5461,3,616,308,0,
		5460,5459,1,0,0,0,5460,5461,1,0,0,0,5461,5462,1,0,0,0,5462,5463,7,23,0,
		0,5463,5464,3,1388,694,0,5464,5474,3,626,313,0,5465,5472,5,347,0,0,5466,
		5473,3,636,318,0,5467,5468,5,130,0,0,5468,5469,5,2,0,0,5469,5470,3,666,
		333,0,5470,5471,5,3,0,0,5471,5473,1,0,0,0,5472,5466,1,0,0,0,5472,5467,
		1,0,0,0,5473,5475,1,0,0,0,5474,5465,1,0,0,0,5474,5475,1,0,0,0,5475,5476,
		1,0,0,0,5476,5477,3,652,326,0,5477,615,1,0,0,0,5478,5479,5,120,0,0,5479,
		5480,5,342,0,0,5480,617,1,0,0,0,5481,5483,5,2,0,0,5482,5484,3,620,310,
		0,5483,5482,1,0,0,0,5483,5484,1,0,0,0,5484,5485,1,0,0,0,5485,5486,5,3,
		0,0,5486,619,1,0,0,0,5487,5492,3,630,315,0,5488,5489,5,6,0,0,5489,5491,
		3,630,315,0,5490,5488,1,0,0,0,5491,5494,1,0,0,0,5492,5490,1,0,0,0,5492,
		5493,1,0,0,0,5493,621,1,0,0,0,5494,5492,1,0,0,0,5495,5500,3,624,312,0,
		5496,5497,5,6,0,0,5497,5499,3,624,312,0,5498,5496,1,0,0,0,5499,5502,1,
		0,0,0,5500,5498,1,0,0,0,5500,5501,1,0,0,0,5501,623,1,0,0,0,5502,5500,1,
		0,0,0,5503,5504,3,1388,694,0,5504,5505,3,618,309,0,5505,5512,1,0,0,0,5506,
		5512,3,1428,714,0,5507,5509,3,1414,707,0,5508,5510,3,1324,662,0,5509,5508,
		1,0,0,0,5509,5510,1,0,0,0,5510,5512,1,0,0,0,5511,5503,1,0,0,0,5511,5506,
		1,0,0,0,5511,5507,1,0,0,0,5512,625,1,0,0,0,5513,5515,5,2,0,0,5514,5516,
		3,628,314,0,5515,5514,1,0,0,0,5515,5516,1,0,0,0,5516,5517,1,0,0,0,5517,
		5518,5,3,0,0,5518,627,1,0,0,0,5519,5524,3,640,320,0,5520,5521,5,6,0,0,
		5521,5523,3,640,320,0,5522,5520,1,0,0,0,5523,5526,1,0,0,0,5524,5522,1,
		0,0,0,5524,5525,1,0,0,0,5525,629,1,0,0,0,5526,5524,1,0,0,0,5527,5529,3,
		632,316,0,5528,5530,3,634,317,0,5529,5528,1,0,0,0,5529,5530,1,0,0,0,5530,
		5531,1,0,0,0,5531,5532,3,638,319,0,5532,5541,1,0,0,0,5533,5535,3,634,317,
		0,5534,5536,3,632,316,0,5535,5534,1,0,0,0,5535,5536,1,0,0,0,5536,5537,
		1,0,0,0,5537,5538,3,638,319,0,5538,5541,1,0,0,0,5539,5541,3,638,319,0,
		5540,5527,1,0,0,0,5540,5533,1,0,0,0,5540,5539,1,0,0,0,5541,631,1,0,0,0,
		5542,5544,5,106,0,0,5543,5545,5,491,0,0,5544,5543,1,0,0,0,5544,5545,1,
		0,0,0,5545,5550,1,0,0,0,5546,5550,5,491,0,0,5547,5550,5,431,0,0,5548,5550,
		5,139,0,0,5549,5542,1,0,0,0,5549,5546,1,0,0,0,5549,5547,1,0,0,0,5549,5548,
		1,0,0,0,5550,633,1,0,0,0,5551,5552,3,1416,708,0,5552,635,1,0,0,0,5553,
		5554,3,638,319,0,5554,637,1,0,0,0,5555,5565,3,1116,558,0,5556,5558,5,446,
		0,0,5557,5556,1,0,0,0,5557,5558,1,0,0,0,5558,5559,1,0,0,0,5559,5560,3,
		1416,708,0,5560,5561,3,522,261,0,5561,5562,5,27,0,0,5562,5563,5,391,0,
		0,5563,5565,1,0,0,0,5564,5555,1,0,0,0,5564,5557,1,0,0,0,5565,639,1,0,0,
		0,5566,5569,3,630,315,0,5567,5568,7,28,0,0,5568,5570,3,1162,581,0,5569,
		5567,1,0,0,0,5569,5570,1,0,0,0,5570,641,1,0,0,0,5571,5572,3,630,315,0,
		5572,643,1,0,0,0,5573,5584,5,2,0,0,5574,5585,5,9,0,0,5575,5585,3,646,323,
		0,5576,5577,5,121,0,0,5577,5578,5,185,0,0,5578,5585,3,646,323,0,5579,5580,
		3,646,323,0,5580,5581,5,121,0,0,5581,5582,5,185,0,0,5582,5583,3,646,323,
		0,5583,5585,1,0,0,0,5584,5574,1,0,0,0,5584,5575,1,0,0,0,5584,5576,1,0,
		0,0,5584,5579,1,0,0,0,5585,5586,1,0,0,0,5586,5587,5,3,0,0,5587,645,1,0,
		0,0,5588,5593,3,642,321,0,5589,5590,5,6,0,0,5590,5592,3,642,321,0,5591,
		5589,1,0,0,0,5592,5595,1,0,0,0,5593,5591,1,0,0,0,5593,5594,1,0,0,0,5594,
		647,1,0,0,0,5595,5593,1,0,0,0,5596,5597,3,1388,694,0,5597,5598,3,644,322,
		0,5598,649,1,0,0,0,5599,5604,3,648,324,0,5600,5601,5,6,0,0,5601,5603,3,
		648,324,0,5602,5600,1,0,0,0,5603,5606,1,0,0,0,5604,5602,1,0,0,0,5604,5605,
		1,0,0,0,5605,651,1,0,0,0,5606,5604,1,0,0,0,5607,5609,3,656,328,0,5608,
		5607,1,0,0,0,5609,5610,1,0,0,0,5610,5608,1,0,0,0,5610,5611,1,0,0,0,5611,
		5612,1,0,0,0,5612,5613,6,326,-1,0,5613,653,1,0,0,0,5614,5615,5,187,0,0,
		5615,5616,5,118,0,0,5616,5617,5,116,0,0,5617,5650,5,496,0,0,5618,5619,
		5,347,0,0,5619,5620,5,116,0,0,5620,5621,5,118,0,0,5621,5622,5,116,0,0,
		5622,5650,5,496,0,0,5623,5650,5,377,0,0,5624,5650,5,260,0,0,5625,5650,
		5,369,0,0,5626,5650,5,408,0,0,5627,5628,5,243,0,0,5628,5629,5,358,0,0,
		5629,5650,5,219,0,0,5630,5631,5,243,0,0,5631,5632,5,358,0,0,5632,5650,
		5,272,0,0,5633,5634,5,358,0,0,5634,5650,5,219,0,0,5635,5636,5,358,0,0,
		5636,5650,5,272,0,0,5637,5650,5,279,0,0,5638,5639,5,115,0,0,5639,5650,
		5,279,0,0,5640,5641,5,208,0,0,5641,5650,3,288,144,0,5642,5643,5,351,0,
		0,5643,5650,3,288,144,0,5644,5645,5,497,0,0,5645,5650,3,520,260,0,5646,
		5650,3,78,39,0,5647,5648,5,498,0,0,5648,5650,3,1414,707,0,5649,5614,1,
		0,0,0,5649,5618,1,0,0,0,5649,5623,1,0,0,0,5649,5624,1,0,0,0,5649,5625,
		1,0,0,0,5649,5626,1,0,0,0,5649,5627,1,0,0,0,5649,5630,1,0,0,0,5649,5633,
		1,0,0,0,5649,5635,1,0,0,0,5649,5637,1,0,0,0,5649,5638,1,0,0,0,5649,5640,
		1,0,0,0,5649,5642,1,0,0,0,5649,5644,1,0,0,0,5649,5646,1,0,0,0,5649,5647,
		1,0,0,0,5650,655,1,0,0,0,5651,5652,5,74,0,0,5652,5660,3,658,329,0,5653,
		5654,5,276,0,0,5654,5660,3,68,34,0,5655,5656,5,481,0,0,5656,5660,3,660,
		330,0,5657,5660,5,142,0,0,5658,5660,3,654,327,0,5659,5651,1,0,0,0,5659,
		5653,1,0,0,0,5659,5655,1,0,0,0,5659,5657,1,0,0,0,5659,5658,1,0,0,0,5660,
		657,1,0,0,0,5661,5667,3,1400,700,0,5662,5663,3,1400,700,0,5663,5664,5,
		6,0,0,5664,5665,3,1400,700,0,5665,5667,1,0,0,0,5666,5661,1,0,0,0,5666,
		5662,1,0,0,0,5667,659,1,0,0,0,5668,5669,5,100,0,0,5669,5670,5,391,0,0,
		5670,5677,3,1116,558,0,5671,5672,5,6,0,0,5672,5673,5,100,0,0,5673,5674,
		5,391,0,0,5674,5676,3,1116,558,0,5675,5671,1,0,0,0,5676,5679,1,0,0,0,5677,
		5675,1,0,0,0,5677,5678,1,0,0,0,5678,661,1,0,0,0,5679,5677,1,0,0,0,5680,
		5681,5,143,0,0,5681,5682,3,456,228,0,5682,663,1,0,0,0,5683,5684,3,634,
		317,0,5684,5685,3,638,319,0,5685,665,1,0,0,0,5686,5691,3,664,332,0,5687,
		5688,5,6,0,0,5688,5690,3,664,332,0,5689,5687,1,0,0,0,5690,5693,1,0,0,0,
		5691,5689,1,0,0,0,5691,5692,1,0,0,0,5692,667,1,0,0,0,5693,5691,1,0,0,0,
		5694,5695,5,176,0,0,5695,5696,7,29,0,0,5696,5697,3,624,312,0,5697,5699,
		3,670,335,0,5698,5700,3,672,336,0,5699,5698,1,0,0,0,5699,5700,1,0,0,0,
		5700,669,1,0,0,0,5701,5703,3,654,327,0,5702,5701,1,0,0,0,5703,5704,1,0,
		0,0,5704,5702,1,0,0,0,5704,5705,1,0,0,0,5705,671,1,0,0,0,5706,5707,5,346,
		0,0,5707,673,1,0,0,0,5708,5709,5,229,0,0,5709,5710,5,249,0,0,5710,5712,
		3,622,311,0,5711,5713,3,104,52,0,5712,5711,1,0,0,0,5712,5713,1,0,0,0,5713,
		5751,1,0,0,0,5714,5715,5,229,0,0,5715,5716,5,249,0,0,5716,5717,5,258,0,
		0,5717,5718,5,427,0,0,5718,5720,3,622,311,0,5719,5721,3,104,52,0,5720,
		5719,1,0,0,0,5720,5721,1,0,0,0,5721,5751,1,0,0,0,5722,5723,5,229,0,0,5723,
		5724,5,327,0,0,5724,5726,3,622,311,0,5725,5727,3,104,52,0,5726,5725,1,
		0,0,0,5726,5727,1,0,0,0,5727,5751,1,0,0,0,5728,5729,5,229,0,0,5729,5730,
		5,327,0,0,5730,5731,5,258,0,0,5731,5732,5,427,0,0,5732,5734,3,622,311,
		0,5733,5735,3,104,52,0,5734,5733,1,0,0,0,5734,5735,1,0,0,0,5735,5751,1,
		0,0,0,5736,5737,5,229,0,0,5737,5738,5,480,0,0,5738,5740,3,622,311,0,5739,
		5741,3,104,52,0,5740,5739,1,0,0,0,5740,5741,1,0,0,0,5741,5751,1,0,0,0,
		5742,5743,5,229,0,0,5743,5744,5,480,0,0,5744,5745,5,258,0,0,5745,5746,
		5,427,0,0,5746,5748,3,622,311,0,5747,5749,3,104,52,0,5748,5747,1,0,0,0,
		5748,5749,1,0,0,0,5749,5751,1,0,0,0,5750,5708,1,0,0,0,5750,5714,1,0,0,
		0,5750,5722,1,0,0,0,5750,5728,1,0,0,0,5750,5736,1,0,0,0,5750,5742,1,0,
		0,0,5751,675,1,0,0,0,5752,5753,5,229,0,0,5753,5754,5,174,0,0,5754,5756,
		3,650,325,0,5755,5757,3,104,52,0,5756,5755,1,0,0,0,5756,5757,1,0,0,0,5757,
		5767,1,0,0,0,5758,5759,5,229,0,0,5759,5760,5,174,0,0,5760,5761,5,258,0,
		0,5761,5762,5,427,0,0,5762,5764,3,650,325,0,5763,5765,3,104,52,0,5764,
		5763,1,0,0,0,5764,5765,1,0,0,0,5765,5767,1,0,0,0,5766,5752,1,0,0,0,5766,
		5758,1,0,0,0,5767,677,1,0,0,0,5768,5769,5,229,0,0,5769,5770,5,309,0,0,
		5770,5772,3,684,342,0,5771,5773,3,104,52,0,5772,5771,1,0,0,0,5772,5773,
		1,0,0,0,5773,5783,1,0,0,0,5774,5775,5,229,0,0,5775,5776,5,309,0,0,5776,
		5777,5,258,0,0,5777,5778,5,427,0,0,5778,5780,3,684,342,0,5779,5781,3,104,
		52,0,5780,5779,1,0,0,0,5780,5781,1,0,0,0,5781,5783,1,0,0,0,5782,5768,1,
		0,0,0,5782,5774,1,0,0,0,5783,679,1,0,0,0,5784,5785,5,2,0,0,5785,5786,3,
		1116,558,0,5786,5787,5,3,0,0,5787,5807,1,0,0,0,5788,5789,5,2,0,0,5789,
		5790,3,1116,558,0,5790,5791,5,6,0,0,5791,5792,3,1116,558,0,5792,5793,5,
		3,0,0,5793,5807,1,0,0,0,5794,5795,5,2,0,0,5795,5796,5,438,0,0,5796,5797,
		5,6,0,0,5797,5798,3,1116,558,0,5798,5799,5,3,0,0,5799,5807,1,0,0,0,5800,
		5801,5,2,0,0,5801,5802,3,1116,558,0,5802,5803,5,6,0,0,5803,5804,5,438,
		0,0,5804,5805,5,3,0,0,5805,5807,1,0,0,0,5806,5784,1,0,0,0,5806,5788,1,
		0,0,0,5806,5794,1,0,0,0,5806,5800,1,0,0,0,5807,681,1,0,0,0,5808,5809,3,
		1414,707,0,5809,5810,5,11,0,0,5810,5812,1,0,0,0,5811,5808,1,0,0,0,5812,
		5815,1,0,0,0,5813,5811,1,0,0,0,5813,5814,1,0,0,0,5814,5816,1,0,0,0,5815,
		5813,1,0,0,0,5816,5817,3,1270,635,0,5817,683,1,0,0,0,5818,5823,3,686,343,
		0,5819,5820,5,6,0,0,5820,5822,3,686,343,0,5821,5819,1,0,0,0,5822,5825,
		1,0,0,0,5823,5821,1,0,0,0,5823,5824,1,0,0,0,5824,685,1,0,0,0,5825,5823,
		1,0,0,0,5826,5827,3,682,341,0,5827,5828,3,680,340,0,5828,687,1,0,0,0,5829,
		5830,5,95,0,0,5830,5831,3,690,345,0,5831,689,1,0,0,0,5832,5834,3,692,346,
		0,5833,5832,1,0,0,0,5834,5835,1,0,0,0,5835,5833,1,0,0,0,5835,5836,1,0,
		0,0,5836,691,1,0,0,0,5837,5841,3,1400,700,0,5838,5839,5,276,0,0,5839,5841,
		3,68,34,0,5840,5837,1,0,0,0,5840,5838,1,0,0,0,5841,693,1,0,0,0,5842,5843,
		5,84,0,0,5843,5844,5,79,0,0,5844,5845,5,2,0,0,5845,5846,3,1116,558,0,5846,
		5847,5,74,0,0,5847,5848,3,1116,558,0,5848,5849,5,3,0,0,5849,5850,5,143,
		0,0,5850,5851,5,249,0,0,5851,5853,3,624,312,0,5852,5854,3,696,348,0,5853,
		5852,1,0,0,0,5853,5854,1,0,0,0,5854,5880,1,0,0,0,5855,5856,5,84,0,0,5856,
		5857,5,79,0,0,5857,5858,5,2,0,0,5858,5859,3,1116,558,0,5859,5860,5,74,
		0,0,5860,5861,3,1116,558,0,5861,5862,5,3,0,0,5862,5863,5,410,0,0,5863,
		5865,5,249,0,0,5864,5866,3,696,348,0,5865,5864,1,0,0,0,5865,5866,1,0,0,
		0,5866,5880,1,0,0,0,5867,5868,5,84,0,0,5868,5869,5,79,0,0,5869,5870,5,
		2,0,0,5870,5871,3,1116,558,0,5871,5872,5,74,0,0,5872,5873,3,1116,558,0,
		5873,5874,5,3,0,0,5874,5875,5,143,0,0,5875,5877,5,431,0,0,5876,5878,3,
		696,348,0,5877,5876,1,0,0,0,5877,5878,1,0,0,0,5878,5880,1,0,0,0,5879,5842,
		1,0,0,0,5879,5855,1,0,0,0,5879,5867,1,0,0,0,5880,695,1,0,0,0,5881,5882,
		5,74,0,0,5882,5886,5,261,0,0,5883,5884,5,74,0,0,5884,5886,5,179,0,0,5885,
		5881,1,0,0,0,5885,5883,1,0,0,0,5886,697,1,0,0,0,5887,5888,5,229,0,0,5888,
		5890,5,79,0,0,5889,5891,3,700,350,0,5890,5889,1,0,0,0,5890,5891,1,0,0,
		0,5891,5892,1,0,0,0,5892,5893,5,2,0,0,5893,5894,3,1116,558,0,5894,5895,
		5,74,0,0,5895,5896,3,1116,558,0,5896,5898,5,3,0,0,5897,5899,3,104,52,0,
		5898,5897,1,0,0,0,5898,5899,1,0,0,0,5899,699,1,0,0,0,5900,5901,5,258,0,
		0,5901,5902,5,427,0,0,5902,701,1,0,0,0,5903,5905,5,84,0,0,5904,5906,3,
		616,308,0,5905,5904,1,0,0,0,5905,5906,1,0,0,0,5906,5907,1,0,0,0,5907,5908,
		5,481,0,0,5908,5909,5,100,0,0,5909,5910,3,1116,558,0,5910,5911,5,276,0,
		0,5911,5912,3,1382,691,0,5912,5913,5,2,0,0,5913,5914,3,704,352,0,5914,
		5915,5,3,0,0,5915,703,1,0,0,0,5916,5917,5,102,0,0,5917,5918,5,499,0,0,
		5918,5919,5,143,0,0,5919,5920,5,249,0,0,5920,5921,3,624,312,0,5921,5922,
		5,6,0,0,5922,5923,5,132,0,0,5923,5924,5,499,0,0,5924,5925,5,143,0,0,5925,
		5926,5,249,0,0,5926,5927,3,624,312,0,5927,5951,1,0,0,0,5928,5929,5,132,
		0,0,5929,5930,5,499,0,0,5930,5931,5,143,0,0,5931,5932,5,249,0,0,5932,5933,
		3,624,312,0,5933,5934,5,6,0,0,5934,5935,5,102,0,0,5935,5936,5,499,0,0,
		5936,5937,5,143,0,0,5937,5938,5,249,0,0,5938,5939,3,624,312,0,5939,5951,
		1,0,0,0,5940,5941,5,102,0,0,5941,5942,5,499,0,0,5942,5943,5,143,0,0,5943,
		5944,5,249,0,0,5944,5951,3,624,312,0,5945,5946,5,132,0,0,5946,5947,5,499,
		0,0,5947,5948,5,143,0,0,5948,5949,5,249,0,0,5949,5951,3,624,312,0,5950,
		5916,1,0,0,0,5950,5928,1,0,0,0,5950,5940,1,0,0,0,5950,5945,1,0,0,0,5951,
		705,1,0,0,0,5952,5953,5,229,0,0,5953,5955,5,481,0,0,5954,5956,3,700,350,
		0,5955,5954,1,0,0,0,5955,5956,1,0,0,0,5956,5957,1,0,0,0,5957,5958,5,100,
		0,0,5958,5959,3,1116,558,0,5959,5960,5,276,0,0,5960,5962,3,1382,691,0,
		5961,5963,3,104,52,0,5962,5961,1,0,0,0,5962,5963,1,0,0,0,5963,707,1,0,
		0,0,5964,5966,5,337,0,0,5965,5967,3,714,357,0,5966,5965,1,0,0,0,5966,5967,
		1,0,0,0,5967,5968,1,0,0,0,5968,5970,3,710,355,0,5969,5971,3,590,295,0,
		5970,5969,1,0,0,0,5970,5971,1,0,0,0,5971,5972,1,0,0,0,5972,5973,3,1378,
		689,0,5973,5995,1,0,0,0,5974,5976,5,337,0,0,5975,5977,3,714,357,0,5976,
		5975,1,0,0,0,5976,5977,1,0,0,0,5977,5978,1,0,0,0,5978,5980,5,354,0,0,5979,
		5981,3,590,295,0,5980,5979,1,0,0,0,5980,5981,1,0,0,0,5981,5982,1,0,0,0,
		5982,5995,3,1382,691,0,5983,5985,5,337,0,0,5984,5986,3,714,357,0,5985,
		5984,1,0,0,0,5985,5986,1,0,0,0,5986,5987,1,0,0,0,5987,5989,3,712,356,0,
		5988,5990,3,590,295,0,5989,5988,1,0,0,0,5989,5990,1,0,0,0,5990,5992,1,
		0,0,0,5991,5993,3,588,294,0,5992,5991,1,0,0,0,5992,5993,1,0,0,0,5993,5995,
		1,0,0,0,5994,5964,1,0,0,0,5994,5974,1,0,0,0,5994,5983,1,0,0,0,5995,709,
		1,0,0,0,5996,5997,7,19,0,0,5997,711,1,0,0,0,5998,5999,7,30,0,0,5999,713,
		1,0,0,0,6000,6001,5,2,0,0,6001,6002,3,848,424,0,6002,6003,5,3,0,0,6003,
		715,1,0,0,0,6004,6005,5,176,0,0,6005,6006,5,382,0,0,6006,6007,3,1382,691,
		0,6007,6008,5,364,0,0,6008,6009,3,112,56,0,6009,6017,1,0,0,0,6010,6011,
		5,176,0,0,6011,6012,5,382,0,0,6012,6013,3,1382,691,0,6013,6014,5,344,0,
		0,6014,6015,3,112,56,0,6015,6017,1,0,0,0,6016,6004,1,0,0,0,6016,6010,1,
		0,0,0,6017,717,1,0,0,0,6018,6019,5,176,0,0,6019,6020,5,174,0,0,6020,6021,
		3,648,324,0,6021,6022,5,340,0,0,6022,6023,5,132,0,0,6023,6024,3,1382,691,
		0,6024,6506,1,0,0,0,6025,6026,5,176,0,0,6026,6027,5,146,0,0,6027,6028,
		3,520,260,0,6028,6029,5,340,0,0,6029,6030,5,132,0,0,6030,6031,3,1382,691,
		0,6031,6506,1,0,0,0,6032,6033,5,176,0,0,6033,6034,5,206,0,0,6034,6035,
		3,520,260,0,6035,6036,5,340,0,0,6036,6037,5,132,0,0,6037,6038,3,1382,691,
		0,6038,6506,1,0,0,0,6039,6040,5,176,0,0,6040,6041,5,213,0,0,6041,6042,
		3,1382,691,0,6042,6043,5,340,0,0,6043,6044,5,132,0,0,6044,6045,3,1382,
		691,0,6045,6506,1,0,0,0,6046,6047,5,176,0,0,6047,6048,5,227,0,0,6048,6049,
		3,520,260,0,6049,6050,5,340,0,0,6050,6051,5,132,0,0,6051,6052,3,1382,691,
		0,6052,6506,1,0,0,0,6053,6054,5,176,0,0,6054,6055,5,227,0,0,6055,6056,
		3,520,260,0,6056,6057,5,340,0,0,6057,6058,5,83,0,0,6058,6059,3,1382,691,
		0,6059,6060,5,132,0,0,6060,6061,3,1382,691,0,6061,6506,1,0,0,0,6062,6063,
		5,176,0,0,6063,6064,5,101,0,0,6064,6065,5,212,0,0,6065,6066,5,412,0,0,
		6066,6067,3,1382,691,0,6067,6068,5,340,0,0,6068,6069,5,132,0,0,6069,6070,
		3,1382,691,0,6070,6506,1,0,0,0,6071,6072,5,176,0,0,6072,6073,5,249,0,0,
		6073,6074,3,624,312,0,6074,6075,5,340,0,0,6075,6076,5,132,0,0,6076,6077,
		3,1382,691,0,6077,6506,1,0,0,0,6078,6079,5,176,0,0,6079,6080,5,104,0,0,
		6080,6081,3,1408,704,0,6081,6082,5,340,0,0,6082,6083,5,132,0,0,6083,6084,
		3,1408,704,0,6084,6506,1,0,0,0,6085,6087,5,176,0,0,6086,6088,3,304,152,
		0,6087,6086,1,0,0,0,6087,6088,1,0,0,0,6088,6089,1,0,0,0,6089,6090,5,276,
		0,0,6090,6091,3,1382,691,0,6091,6092,5,340,0,0,6092,6093,5,132,0,0,6093,
		6094,3,1382,691,0,6094,6506,1,0,0,0,6095,6096,5,176,0,0,6096,6097,5,309,
		0,0,6097,6098,5,194,0,0,6098,6099,3,520,260,0,6099,6100,5,138,0,0,6100,
		6101,3,1382,691,0,6101,6102,5,340,0,0,6102,6103,5,132,0,0,6103,6104,3,
		1382,691,0,6104,6506,1,0,0,0,6105,6106,5,176,0,0,6106,6107,5,309,0,0,6107,
		6108,5,244,0,0,6108,6109,3,520,260,0,6109,6110,5,138,0,0,6110,6111,3,1382,
		691,0,6111,6112,5,340,0,0,6112,6113,5,132,0,0,6113,6114,3,1382,691,0,6114,
		6506,1,0,0,0,6115,6116,5,176,0,0,6116,6117,5,483,0,0,6117,6118,3,1382,
		691,0,6118,6119,5,118,0,0,6119,6120,3,1378,689,0,6120,6121,5,340,0,0,6121,
		6122,5,132,0,0,6122,6123,3,1382,691,0,6123,6506,1,0,0,0,6124,6125,5,176,
		0,0,6125,6126,5,483,0,0,6126,6127,5,258,0,0,6127,6128,5,427,0,0,6128,6129,
		3,1382,691,0,6129,6130,5,118,0,0,6130,6131,3,1378,689,0,6131,6132,5,340,
		0,0,6132,6133,5,132,0,0,6133,6134,3,1382,691,0,6134,6506,1,0,0,0,6135,
		6136,5,176,0,0,6136,6137,5,327,0,0,6137,6138,3,624,312,0,6138,6139,5,340,
		0,0,6139,6140,5,132,0,0,6140,6141,3,1382,691,0,6141,6506,1,0,0,0,6142,
		6143,5,176,0,0,6143,6144,5,490,0,0,6144,6145,3,1382,691,0,6145,6146,5,
		340,0,0,6146,6147,5,132,0,0,6147,6148,3,1382,691,0,6148,6506,1,0,0,0,6149,
		6150,5,176,0,0,6150,6151,5,480,0,0,6151,6152,3,624,312,0,6152,6153,5,340,
		0,0,6153,6154,5,132,0,0,6154,6155,3,1382,691,0,6155,6506,1,0,0,0,6156,
		6157,5,176,0,0,6157,6158,5,354,0,0,6158,6159,3,1382,691,0,6159,6160,5,
		340,0,0,6160,6161,5,132,0,0,6161,6162,3,1382,691,0,6162,6506,1,0,0,0,6163,
		6164,5,176,0,0,6164,6165,5,362,0,0,6165,6166,3,1382,691,0,6166,6167,5,
		340,0,0,6167,6168,5,132,0,0,6168,6169,3,1382,691,0,6169,6506,1,0,0,0,6170,
		6171,5,176,0,0,6171,6172,5,489,0,0,6172,6173,3,1382,691,0,6173,6174,5,
		340,0,0,6174,6175,5,132,0,0,6175,6176,3,1382,691,0,6176,6506,1,0,0,0,6177,
		6178,5,176,0,0,6178,6179,5,130,0,0,6179,6180,3,1072,536,0,6180,6181,5,
		340,0,0,6181,6182,5,132,0,0,6182,6183,3,1382,691,0,6183,6506,1,0,0,0,6184,
		6185,5,176,0,0,6185,6186,5,130,0,0,6186,6187,5,258,0,0,6187,6188,5,427,
		0,0,6188,6189,3,1072,536,0,6189,6190,5,340,0,0,6190,6191,5,132,0,0,6191,
		6192,3,1382,691,0,6192,6506,1,0,0,0,6193,6194,5,176,0,0,6194,6195,5,359,
		0,0,6195,6196,3,1378,689,0,6196,6197,5,340,0,0,6197,6198,5,132,0,0,6198,
		6199,3,1382,691,0,6199,6506,1,0,0,0,6200,6201,5,176,0,0,6201,6202,5,359,
		0,0,6202,6203,5,258,0,0,6203,6204,5,427,0,0,6204,6205,3,1378,689,0,6205,
		6206,5,340,0,0,6206,6207,5,132,0,0,6207,6208,3,1382,691,0,6208,6506,1,
		0,0,0,6209,6210,5,176,0,0,6210,6211,5,407,0,0,6211,6212,3,1378,689,0,6212,
		6213,5,340,0,0,6213,6214,5,132,0,0,6214,6215,3,1382,691,0,6215,6506,1,
		0,0,0,6216,6217,5,176,0,0,6217,6218,5,407,0,0,6218,6219,5,258,0,0,6219,
		6220,5,427,0,0,6220,6221,3,1378,689,0,6221,6222,5,340,0,0,6222,6223,5,
		132,0,0,6223,6224,3,1382,691,0,6224,6506,1,0,0,0,6225,6226,5,176,0,0,6226,
		6227,5,289,0,0,6227,6228,5,407,0,0,6228,6229,3,1378,689,0,6229,6230,5,
		340,0,0,6230,6231,5,132,0,0,6231,6232,3,1382,691,0,6232,6506,1,0,0,0,6233,
		6234,5,176,0,0,6234,6235,5,289,0,0,6235,6236,5,407,0,0,6236,6237,5,258,
		0,0,6237,6238,5,427,0,0,6238,6239,3,1378,689,0,6239,6240,5,340,0,0,6240,
		6241,5,132,0,0,6241,6242,3,1382,691,0,6242,6506,1,0,0,0,6243,6244,5,176,
		0,0,6244,6245,5,264,0,0,6245,6246,3,1378,689,0,6246,6247,5,340,0,0,6247,
		6248,5,132,0,0,6248,6249,3,1382,691,0,6249,6506,1,0,0,0,6250,6251,5,176,
		0,0,6251,6252,5,264,0,0,6252,6253,5,258,0,0,6253,6254,5,427,0,0,6254,6255,
		3,1378,689,0,6255,6256,5,340,0,0,6256,6257,5,132,0,0,6257,6258,3,1382,
		691,0,6258,6506,1,0,0,0,6259,6260,5,176,0,0,6260,6261,5,101,0,0,6261,6262,
		5,130,0,0,6262,6263,3,1072,536,0,6263,6264,5,340,0,0,6264,6265,5,132,0,
		0,6265,6266,3,1382,691,0,6266,6506,1,0,0,0,6267,6268,5,176,0,0,6268,6269,
		5,101,0,0,6269,6270,5,130,0,0,6270,6271,5,258,0,0,6271,6272,5,427,0,0,
		6272,6273,3,1072,536,0,6273,6274,5,340,0,0,6274,6275,5,132,0,0,6275,6276,
		3,1382,691,0,6276,6506,1,0,0,0,6277,6278,5,176,0,0,6278,6279,5,130,0,0,
		6279,6280,3,1072,536,0,6280,6282,5,340,0,0,6281,6283,3,720,360,0,6282,
		6281,1,0,0,0,6282,6283,1,0,0,0,6283,6284,1,0,0,0,6284,6285,3,1382,691,
		0,6285,6286,5,132,0,0,6286,6287,3,1382,691,0,6287,6506,1,0,0,0,6288,6289,
		5,176,0,0,6289,6290,5,130,0,0,6290,6291,5,258,0,0,6291,6292,5,427,0,0,
		6292,6293,3,1072,536,0,6293,6295,5,340,0,0,6294,6296,3,720,360,0,6295,
		6294,1,0,0,0,6295,6296,1,0,0,0,6296,6297,1,0,0,0,6297,6298,3,1382,691,
		0,6298,6299,5,132,0,0,6299,6300,3,1382,691,0,6300,6506,1,0,0,0,6301,6302,
		5,176,0,0,6302,6303,5,407,0,0,6303,6304,3,1378,689,0,6304,6306,5,340,0,
		0,6305,6307,3,720,360,0,6306,6305,1,0,0,0,6306,6307,1,0,0,0,6307,6308,
		1,0,0,0,6308,6309,3,1382,691,0,6309,6310,5,132,0,0,6310,6311,3,1382,691,
		0,6311,6506,1,0,0,0,6312,6313,5,176,0,0,6313,6314,5,407,0,0,6314,6315,
		5,258,0,0,6315,6316,5,427,0,0,6316,6317,3,1378,689,0,6317,6319,5,340,0,
		0,6318,6320,3,720,360,0,6319,6318,1,0,0,0,6319,6320,1,0,0,0,6320,6321,
		1,0,0,0,6321,6322,3,1382,691,0,6322,6323,5,132,0,0,6323,6324,3,1382,691,
		0,6324,6506,1,0,0,0,6325,6326,5,176,0,0,6326,6327,5,289,0,0,6327,6328,
		5,407,0,0,6328,6329,3,1378,689,0,6329,6331,5,340,0,0,6330,6332,3,720,360,
		0,6331,6330,1,0,0,0,6331,6332,1,0,0,0,6332,6333,1,0,0,0,6333,6334,3,1382,
		691,0,6334,6335,5,132,0,0,6335,6336,3,1382,691,0,6336,6506,1,0,0,0,6337,
		6338,5,176,0,0,6338,6339,5,289,0,0,6339,6340,5,407,0,0,6340,6341,5,258,
		0,0,6341,6342,5,427,0,0,6342,6343,3,1378,689,0,6343,6345,5,340,0,0,6344,
		6346,3,720,360,0,6345,6344,1,0,0,0,6345,6346,1,0,0,0,6346,6347,1,0,0,0,
		6347,6348,3,1382,691,0,6348,6349,5,132,0,0,6349,6350,3,1382,691,0,6350,
		6506,1,0,0,0,6351,6352,5,176,0,0,6352,6353,5,130,0,0,6353,6354,3,1072,
		536,0,6354,6355,5,340,0,0,6355,6356,5,83,0,0,6356,6357,3,1382,691,0,6357,
		6358,5,132,0,0,6358,6359,3,1382,691,0,6359,6506,1,0,0,0,6360,6361,5,176,
		0,0,6361,6362,5,130,0,0,6362,6363,5,258,0,0,6363,6364,5,427,0,0,6364,6365,
		3,1072,536,0,6365,6366,5,340,0,0,6366,6367,5,83,0,0,6367,6368,3,1382,691,
		0,6368,6369,5,132,0,0,6369,6370,3,1382,691,0,6370,6506,1,0,0,0,6371,6372,
		5,176,0,0,6372,6373,5,101,0,0,6373,6374,5,130,0,0,6374,6375,3,1072,536,
		0,6375,6377,5,340,0,0,6376,6378,3,720,360,0,6377,6376,1,0,0,0,6377,6378,
		1,0,0,0,6378,6379,1,0,0,0,6379,6380,3,1382,691,0,6380,6381,5,132,0,0,6381,
		6382,3,1382,691,0,6382,6506,1,0,0,0,6383,6384,5,176,0,0,6384,6385,5,101,
		0,0,6385,6386,5,130,0,0,6386,6387,5,258,0,0,6387,6388,5,427,0,0,6388,6389,
		3,1072,536,0,6389,6391,5,340,0,0,6390,6392,3,720,360,0,6391,6390,1,0,0,
		0,6391,6392,1,0,0,0,6392,6393,1,0,0,0,6393,6394,3,1382,691,0,6394,6395,
		5,132,0,0,6395,6396,3,1382,691,0,6396,6506,1,0,0,0,6397,6398,5,176,0,0,
		6398,6399,5,352,0,0,6399,6400,3,1382,691,0,6400,6401,5,118,0,0,6401,6402,
		3,1378,689,0,6402,6403,5,340,0,0,6403,6404,5,132,0,0,6404,6405,3,1382,
		691,0,6405,6506,1,0,0,0,6406,6407,5,176,0,0,6407,6408,5,388,0,0,6408,6409,
		3,1382,691,0,6409,6410,5,118,0,0,6410,6411,3,1378,689,0,6411,6412,5,340,
		0,0,6412,6413,5,132,0,0,6413,6414,3,1382,691,0,6414,6506,1,0,0,0,6415,
		6416,5,176,0,0,6416,6417,5,236,0,0,6417,6418,5,388,0,0,6418,6419,3,1382,
		691,0,6419,6420,5,340,0,0,6420,6421,5,132,0,0,6421,6422,3,1382,691,0,6422,
		6506,1,0,0,0,6423,6424,5,176,0,0,6424,6425,5,349,0,0,6425,6426,3,1408,
		704,0,6426,6427,5,340,0,0,6427,6428,5,132,0,0,6428,6429,3,1408,704,0,6429,
		6506,1,0,0,0,6430,6431,5,176,0,0,6431,6432,5,137,0,0,6432,6433,3,1408,
		704,0,6433,6434,5,340,0,0,6434,6435,5,132,0,0,6435,6436,3,1408,704,0,6436,
		6506,1,0,0,0,6437,6438,5,176,0,0,6438,6439,5,382,0,0,6439,6440,3,1382,
		691,0,6440,6441,5,340,0,0,6441,6442,5,132,0,0,6442,6443,3,1382,691,0,6443,
		6506,1,0,0,0,6444,6445,5,176,0,0,6445,6446,5,373,0,0,6446,6447,3,520,260,
		0,6447,6448,5,340,0,0,6448,6449,5,132,0,0,6449,6450,3,1382,691,0,6450,
		6506,1,0,0,0,6451,6452,5,176,0,0,6452,6453,5,386,0,0,6453,6454,5,356,0,
		0,6454,6455,5,314,0,0,6455,6456,3,520,260,0,6456,6457,5,340,0,0,6457,6458,
		5,132,0,0,6458,6459,3,1382,691,0,6459,6506,1,0,0,0,6460,6461,5,176,0,0,
		6461,6462,5,386,0,0,6462,6463,5,356,0,0,6463,6464,5,223,0,0,6464,6465,
		3,520,260,0,6465,6466,5,340,0,0,6466,6467,5,132,0,0,6467,6468,3,1382,691,
		0,6468,6506,1,0,0,0,6469,6470,5,176,0,0,6470,6471,5,386,0,0,6471,6472,
		5,356,0,0,6472,6473,5,384,0,0,6473,6474,3,520,260,0,6474,6475,5,340,0,
		0,6475,6476,5,132,0,0,6476,6477,3,1382,691,0,6477,6506,1,0,0,0,6478,6479,
		5,176,0,0,6479,6480,5,386,0,0,6480,6481,5,356,0,0,6481,6482,5,201,0,0,
		6482,6483,3,520,260,0,6483,6484,5,340,0,0,6484,6485,5,132,0,0,6485,6486,
		3,1382,691,0,6486,6506,1,0,0,0,6487,6488,5,176,0,0,6488,6489,5,391,0,0,
		6489,6490,3,520,260,0,6490,6491,5,340,0,0,6491,6492,5,132,0,0,6492,6493,
		3,1382,691,0,6493,6506,1,0,0,0,6494,6495,5,176,0,0,6495,6496,5,391,0,0,
		6496,6497,3,520,260,0,6497,6498,5,340,0,0,6498,6499,5,181,0,0,6499,6500,
		3,1382,691,0,6500,6501,5,132,0,0,6501,6503,3,1382,691,0,6502,6504,3,104,
		52,0,6503,6502,1,0,0,0,6503,6504,1,0,0,0,6504,6506,1,0,0,0,6505,6018,1,
		0,0,0,6505,6025,1,0,0,0,6505,6032,1,0,0,0,6505,6039,1,0,0,0,6505,6046,
		1,0,0,0,6505,6053,1,0,0,0,6505,6062,1,0,0,0,6505,6071,1,0,0,0,6505,6078,
		1,0,0,0,6505,6085,1,0,0,0,6505,6095,1,0,0,0,6505,6105,1,0,0,0,6505,6115,
		1,0,0,0,6505,6124,1,0,0,0,6505,6135,1,0,0,0,6505,6142,1,0,0,0,6505,6149,
		1,0,0,0,6505,6156,1,0,0,0,6505,6163,1,0,0,0,6505,6170,1,0,0,0,6505,6177,
		1,0,0,0,6505,6184,1,0,0,0,6505,6193,1,0,0,0,6505,6200,1,0,0,0,6505,6209,
		1,0,0,0,6505,6216,1,0,0,0,6505,6225,1,0,0,0,6505,6233,1,0,0,0,6505,6243,
		1,0,0,0,6505,6250,1,0,0,0,6505,6259,1,0,0,0,6505,6267,1,0,0,0,6505,6277,
		1,0,0,0,6505,6288,1,0,0,0,6505,6301,1,0,0,0,6505,6312,1,0,0,0,6505,6325,
		1,0,0,0,6505,6337,1,0,0,0,6505,6351,1,0,0,0,6505,6360,1,0,0,0,6505,6371,
		1,0,0,0,6505,6383,1,0,0,0,6505,6397,1,0,0,0,6505,6406,1,0,0,0,6505,6415,
		1,0,0,0,6505,6423,1,0,0,0,6505,6430,1,0,0,0,6505,6437,1,0,0,0,6505,6444,
		1,0,0,0,6505,6451,1,0,0,0,6505,6460,1,0,0,0,6505,6469,1,0,0,0,6505,6478,
		1,0,0,0,6505,6487,1,0,0,0,6505,6494,1,0,0,0,6506,719,1,0,0,0,6507,6508,
		5,82,0,0,6508,721,1,0,0,0,6509,6510,5,364,0,0,6510,6511,5,212,0,0,6511,
		723,1,0,0,0,6512,6513,5,176,0,0,6513,6514,5,249,0,0,6514,6516,3,624,312,
		0,6515,6517,3,726,363,0,6516,6515,1,0,0,0,6516,6517,1,0,0,0,6517,6518,
		1,0,0,0,6518,6519,5,500,0,0,6519,6520,5,118,0,0,6520,6521,5,242,0,0,6521,
		6522,3,1382,691,0,6522,6582,1,0,0,0,6523,6524,5,176,0,0,6524,6525,5,327,
		0,0,6525,6527,3,624,312,0,6526,6528,3,726,363,0,6527,6526,1,0,0,0,6527,
		6528,1,0,0,0,6528,6529,1,0,0,0,6529,6530,5,500,0,0,6530,6531,5,118,0,0,
		6531,6532,5,242,0,0,6532,6533,3,1382,691,0,6533,6582,1,0,0,0,6534,6535,
		5,176,0,0,6535,6536,5,480,0,0,6536,6538,3,624,312,0,6537,6539,3,726,363,
		0,6538,6537,1,0,0,0,6538,6539,1,0,0,0,6539,6540,1,0,0,0,6540,6541,5,500,
		0,0,6541,6542,5,118,0,0,6542,6543,5,242,0,0,6543,6544,3,1382,691,0,6544,
		6582,1,0,0,0,6545,6546,5,176,0,0,6546,6547,5,388,0,0,6547,6548,3,1382,
		691,0,6548,6549,5,118,0,0,6549,6551,3,1378,689,0,6550,6552,3,726,363,0,
		6551,6550,1,0,0,0,6551,6552,1,0,0,0,6552,6553,1,0,0,0,6553,6554,5,500,
		0,0,6554,6555,5,118,0,0,6555,6556,5,242,0,0,6556,6557,3,1382,691,0,6557,
		6582,1,0,0,0,6558,6559,5,176,0,0,6559,6560,5,289,0,0,6560,6561,5,407,0,
		0,6561,6563,3,1378,689,0,6562,6564,3,726,363,0,6563,6562,1,0,0,0,6563,
		6564,1,0,0,0,6564,6565,1,0,0,0,6565,6566,5,500,0,0,6566,6567,5,118,0,0,
		6567,6568,5,242,0,0,6568,6569,3,1382,691,0,6569,6582,1,0,0,0,6570,6571,
		5,176,0,0,6571,6572,5,264,0,0,6572,6574,3,1378,689,0,6573,6575,3,726,363,
		0,6574,6573,1,0,0,0,6574,6575,1,0,0,0,6575,6576,1,0,0,0,6576,6577,5,500,
		0,0,6577,6578,5,118,0,0,6578,6579,5,242,0,0,6579,6580,3,1382,691,0,6580,
		6582,1,0,0,0,6581,6512,1,0,0,0,6581,6523,1,0,0,0,6581,6534,1,0,0,0,6581,
		6545,1,0,0,0,6581,6558,1,0,0,0,6581,6570,1,0,0,0,6582,725,1,0,0,0,6583,
		6584,5,300,0,0,6584,727,1,0,0,0,6585,6586,5,176,0,0,6586,6587,5,174,0,
		0,6587,6588,3,648,324,0,6588,6589,5,364,0,0,6589,6590,5,354,0,0,6590,6591,
		3,1382,691,0,6591,6803,1,0,0,0,6592,6593,5,176,0,0,6593,6594,5,146,0,0,
		6594,6595,3,520,260,0,6595,6596,5,364,0,0,6596,6597,5,354,0,0,6597,6598,
		3,1382,691,0,6598,6803,1,0,0,0,6599,6600,5,176,0,0,6600,6601,5,206,0,0,
		6601,6602,3,520,260,0,6602,6603,5,364,0,0,6603,6604,5,354,0,0,6604,6605,
		3,1382,691,0,6605,6803,1,0,0,0,6606,6607,5,176,0,0,6607,6608,5,227,0,0,
		6608,6609,3,520,260,0,6609,6610,5,364,0,0,6610,6611,5,354,0,0,6611,6612,
		3,1382,691,0,6612,6803,1,0,0,0,6613,6614,5,176,0,0,6614,6615,5,242,0,0,
		6615,6616,3,1382,691,0,6616,6617,5,364,0,0,6617,6618,5,354,0,0,6618,6619,
		3,1382,691,0,6619,6803,1,0,0,0,6620,6621,5,176,0,0,6621,6622,5,249,0,0,
		6622,6623,3,624,312,0,6623,6624,5,364,0,0,6624,6625,5,354,0,0,6625,6626,
		3,1382,691,0,6626,6803,1,0,0,0,6627,6628,5,176,0,0,6628,6629,5,309,0,0,
		6629,6630,3,686,343,0,6630,6631,5,364,0,0,6631,6632,5,354,0,0,6632,6633,
		3,1382,691,0,6633,6803,1,0,0,0,6634,6635,5,176,0,0,6635,6636,5,309,0,0,
		6636,6637,5,194,0,0,6637,6638,3,520,260,0,6638,6639,5,138,0,0,6639,6640,
		3,1382,691,0,6640,6641,5,364,0,0,6641,6642,5,354,0,0,6642,6643,3,1382,
		691,0,6643,6803,1,0,0,0,6644,6645,5,176,0,0,6645,6646,5,309,0,0,6646,6647,
		5,244,0,0,6647,6648,3,520,260,0,6648,6649,5,138,0,0,6649,6650,3,1382,691,
		0,6650,6651,5,364,0,0,6651,6652,5,354,0,0,6652,6653,3,1382,691,0,6653,
		6803,1,0,0,0,6654,6655,5,176,0,0,6655,6656,5,327,0,0,6656,6657,3,624,312,
		0,6657,6658,5,364,0,0,6658,6659,5,354,0,0,6659,6660,3,1382,691,0,6660,
		6803,1,0,0,0,6661,6662,5,176,0,0,6662,6663,5,480,0,0,6663,6664,3,624,312,
		0,6664,6665,5,364,0,0,6665,6666,5,354,0,0,6666,6667,3,1382,691,0,6667,
		6803,1,0,0,0,6668,6669,5,176,0,0,6669,6670,5,130,0,0,6670,6671,3,1072,
		536,0,6671,6672,5,364,0,0,6672,6673,5,354,0,0,6673,6674,3,1382,691,0,6674,
		6803,1,0,0,0,6675,6676,5,176,0,0,6676,6677,5,130,0,0,6677,6678,5,258,0,
		0,6678,6679,5,427,0,0,6679,6680,3,1072,536,0,6680,6681,5,364,0,0,6681,
		6682,5,354,0,0,6682,6683,3,1382,691,0,6683,6803,1,0,0,0,6684,6685,5,176,
		0,0,6685,6686,5,373,0,0,6686,6687,3,520,260,0,6687,6688,5,364,0,0,6688,
		6689,5,354,0,0,6689,6690,3,1382,691,0,6690,6803,1,0,0,0,6691,6692,5,176,
		0,0,6692,6693,5,386,0,0,6693,6694,5,356,0,0,6694,6695,5,314,0,0,6695,6696,
		3,520,260,0,6696,6697,5,364,0,0,6697,6698,5,354,0,0,6698,6699,3,1382,691,
		0,6699,6803,1,0,0,0,6700,6701,5,176,0,0,6701,6702,5,386,0,0,6702,6703,
		5,356,0,0,6703,6704,5,223,0,0,6704,6705,3,520,260,0,6705,6706,5,364,0,
		0,6706,6707,5,354,0,0,6707,6708,3,1382,691,0,6708,6803,1,0,0,0,6709,6710,
		5,176,0,0,6710,6711,5,386,0,0,6711,6712,5,356,0,0,6712,6713,5,384,0,0,
		6713,6714,3,520,260,0,6714,6715,5,364,0,0,6715,6716,5,354,0,0,6716,6717,
		3,1382,691,0,6717,6803,1,0,0,0,6718,6719,5,176,0,0,6719,6720,5,386,0,0,
		6720,6721,5,356,0,0,6721,6722,5,201,0,0,6722,6723,3,520,260,0,6723,6724,
		5,364,0,0,6724,6725,5,354,0,0,6725,6726,3,1382,691,0,6726,6803,1,0,0,0,
		6727,6728,5,176,0,0,6728,6729,5,359,0,0,6729,6730,3,1378,689,0,6730,6731,
		5,364,0,0,6731,6732,5,354,0,0,6732,6733,3,1382,691,0,6733,6803,1,0,0,0,
		6734,6735,5,176,0,0,6735,6736,5,359,0,0,6736,6737,5,258,0,0,6737,6738,
		5,427,0,0,6738,6739,3,1378,689,0,6739,6740,5,364,0,0,6740,6741,5,354,0,
		0,6741,6742,3,1382,691,0,6742,6803,1,0,0,0,6743,6744,5,176,0,0,6744,6745,
		5,407,0,0,6745,6746,3,1378,689,0,6746,6747,5,364,0,0,6747,6748,5,354,0,
		0,6748,6749,3,1382,691,0,6749,6803,1,0,0,0,6750,6751,5,176,0,0,6751,6752,
		5,407,0,0,6752,6753,5,258,0,0,6753,6754,5,427,0,0,6754,6755,3,1378,689,
		0,6755,6756,5,364,0,0,6756,6757,5,354,0,0,6757,6758,3,1382,691,0,6758,
		6803,1,0,0,0,6759,6760,5,176,0,0,6760,6761,5,289,0,0,6761,6762,5,407,0,
		0,6762,6763,3,1378,689,0,6763,6764,5,364,0,0,6764,6765,5,354,0,0,6765,
		6766,3,1382,691,0,6766,6803,1,0,0,0,6767,6768,5,176,0,0,6768,6769,5,289,
		0,0,6769,6770,5,407,0,0,6770,6771,5,258,0,0,6771,6772,5,427,0,0,6772,6773,
		3,1378,689,0,6773,6774,5,364,0,0,6774,6775,5,354,0,0,6775,6776,3,1382,
		691,0,6776,6803,1,0,0,0,6777,6778,5,176,0,0,6778,6779,5,101,0,0,6779,6780,
		5,130,0,0,6780,6781,3,1072,536,0,6781,6782,5,364,0,0,6782,6783,5,354,0,
		0,6783,6784,3,1382,691,0,6784,6803,1,0,0,0,6785,6786,5,176,0,0,6786,6787,
		5,101,0,0,6787,6788,5,130,0,0,6788,6789,5,258,0,0,6789,6790,5,427,0,0,
		6790,6791,3,1072,536,0,6791,6792,5,364,0,0,6792,6793,5,354,0,0,6793,6794,
		3,1382,691,0,6794,6803,1,0,0,0,6795,6796,5,176,0,0,6796,6797,5,391,0,0,
		6797,6798,3,520,260,0,6798,6799,5,364,0,0,6799,6800,5,354,0,0,6800,6801,
		3,1382,691,0,6801,6803,1,0,0,0,6802,6585,1,0,0,0,6802,6592,1,0,0,0,6802,
		6599,1,0,0,0,6802,6606,1,0,0,0,6802,6613,1,0,0,0,6802,6620,1,0,0,0,6802,
		6627,1,0,0,0,6802,6634,1,0,0,0,6802,6644,1,0,0,0,6802,6654,1,0,0,0,6802,
		6661,1,0,0,0,6802,6668,1,0,0,0,6802,6675,1,0,0,0,6802,6684,1,0,0,0,6802,
		6691,1,0,0,0,6802,6700,1,0,0,0,6802,6709,1,0,0,0,6802,6718,1,0,0,0,6802,
		6727,1,0,0,0,6802,6734,1,0,0,0,6802,6743,1,0,0,0,6802,6750,1,0,0,0,6802,
		6759,1,0,0,0,6802,6767,1,0,0,0,6802,6777,1,0,0,0,6802,6785,1,0,0,0,6802,
		6795,1,0,0,0,6803,729,1,0,0,0,6804,6805,5,176,0,0,6805,6806,5,309,0,0,
		6806,6807,3,686,343,0,6807,6808,5,364,0,0,6808,6809,5,2,0,0,6809,6810,
		3,732,366,0,6810,6811,5,3,0,0,6811,731,1,0,0,0,6812,6817,3,734,367,0,6813,
		6814,5,6,0,0,6814,6816,3,734,367,0,6815,6813,1,0,0,0,6816,6819,1,0,0,0,
		6817,6815,1,0,0,0,6817,6818,1,0,0,0,6818,733,1,0,0,0,6819,6817,1,0,0,0,
		6820,6821,3,1420,710,0,6821,6822,5,10,0,0,6822,6823,5,438,0,0,6823,6829,
		1,0,0,0,6824,6825,3,1420,710,0,6825,6826,5,10,0,0,6826,6827,3,736,368,
		0,6827,6829,1,0,0,0,6828,6820,1,0,0,0,6828,6824,1,0,0,0,6829,735,1,0,0,
		0,6830,6836,3,638,319,0,6831,6836,3,1430,715,0,6832,6836,3,1276,638,0,
		6833,6836,3,288,144,0,6834,6836,3,1400,700,0,6835,6830,1,0,0,0,6835,6831,
		1,0,0,0,6835,6832,1,0,0,0,6835,6833,1,0,0,0,6835,6834,1,0,0,0,6836,737,
		1,0,0,0,6837,6838,5,176,0,0,6838,6839,5,391,0,0,6839,6840,3,520,260,0,
		6840,6841,5,364,0,0,6841,6842,5,2,0,0,6842,6843,3,732,366,0,6843,6844,
		5,3,0,0,6844,739,1,0,0,0,6845,6846,5,176,0,0,6846,6847,5,174,0,0,6847,
		6848,3,648,324,0,6848,6849,5,313,0,0,6849,6850,5,132,0,0,6850,6851,3,1410,
		705,0,6851,7031,1,0,0,0,6852,6853,5,176,0,0,6853,6854,5,146,0,0,6854,6855,
		3,520,260,0,6855,6856,5,313,0,0,6856,6857,5,132,0,0,6857,6858,3,1410,705,
		0,6858,7031,1,0,0,0,6859,6860,5,176,0,0,6860,6861,5,206,0,0,6861,6862,
		3,520,260,0,6862,6863,5,313,0,0,6863,6864,5,132,0,0,6864,6865,3,1410,705,
		0,6865,7031,1,0,0,0,6866,6867,5,176,0,0,6867,6868,5,213,0,0,6868,6869,
		3,1382,691,0,6869,6870,5,313,0,0,6870,6871,5,132,0,0,6871,6872,3,1410,
		705,0,6872,7031,1,0,0,0,6873,6874,5,176,0,0,6874,6875,5,227,0,0,6875,6876,
		3,520,260,0,6876,6877,5,313,0,0,6877,6878,5,132,0,0,6878,6879,3,1410,705,
		0,6879,7031,1,0,0,0,6880,6881,5,176,0,0,6881,6882,5,249,0,0,6882,6883,
		3,624,312,0,6883,6884,5,313,0,0,6884,6885,5,132,0,0,6885,6886,3,1410,705,
		0,6886,7031,1,0,0,0,6887,6889,5,176,0,0,6888,6890,3,304,152,0,6889,6888,
		1,0,0,0,6889,6890,1,0,0,0,6890,6891,1,0,0,0,6891,6892,5,276,0,0,6892,6893,
		3,1382,691,0,6893,6894,5,313,0,0,6894,6895,5,132,0,0,6895,6896,3,1410,
		705,0,6896,7031,1,0,0,0,6897,6898,5,176,0,0,6898,6899,5,277,0,0,6899,6900,
		5,305,0,0,6900,6901,3,288,144,0,6901,6902,5,313,0,0,6902,6903,5,132,0,
		0,6903,6904,3,1410,705,0,6904,7031,1,0,0,0,6905,6906,5,176,0,0,6906,6907,
		5,309,0,0,6907,6908,3,686,343,0,6908,6909,5,313,0,0,6909,6910,5,132,0,
		0,6910,6911,3,1410,705,0,6911,7031,1,0,0,0,6912,6913,5,176,0,0,6913,6914,
		5,309,0,0,6914,6915,5,194,0,0,6915,6916,3,520,260,0,6916,6917,5,138,0,
		0,6917,6918,3,1382,691,0,6918,6919,5,313,0,0,6919,6920,5,132,0,0,6920,
		6921,3,1410,705,0,6921,7031,1,0,0,0,6922,6923,5,176,0,0,6923,6924,5,309,
		0,0,6924,6925,5,244,0,0,6925,6926,3,520,260,0,6926,6927,5,138,0,0,6927,
		6928,3,1382,691,0,6928,6929,5,313,0,0,6929,6930,5,132,0,0,6930,6931,3,
		1410,705,0,6931,7031,1,0,0,0,6932,6933,5,176,0,0,6933,6934,5,327,0,0,6934,
		6935,3,624,312,0,6935,6936,5,313,0,0,6936,6937,5,132,0,0,6937,6938,3,1410,
		705,0,6938,7031,1,0,0,0,6939,6940,5,176,0,0,6940,6941,5,480,0,0,6941,6942,
		3,624,312,0,6942,6943,5,313,0,0,6943,6944,5,132,0,0,6944,6945,3,1410,705,
		0,6945,7031,1,0,0,0,6946,6947,5,176,0,0,6947,6948,5,354,0,0,6948,6949,
		3,1382,691,0,6949,6950,5,313,0,0,6950,6951,5,132,0,0,6951,6952,3,1410,
		705,0,6952,7031,1,0,0,0,6953,6954,5,176,0,0,6954,6955,5,391,0,0,6955,6956,
		3,520,260,0,6956,6957,5,313,0,0,6957,6958,5,132,0,0,6958,6959,3,1410,705,
		0,6959,7031,1,0,0,0,6960,6961,5,176,0,0,6961,6962,5,382,0,0,6962,6963,
		3,1382,691,0,6963,6964,5,313,0,0,6964,6965,5,132,0,0,6965,6966,3,1410,
		705,0,6966,7031,1,0,0,0,6967,6968,5,176,0,0,6968,6969,5,373,0,0,6969,6970,
		3,520,260,0,6970,6971,5,313,0,0,6971,6972,5,132,0,0,6972,6973,3,1410,705,
		0,6973,7031,1,0,0,0,6974,6975,5,176,0,0,6975,6976,5,386,0,0,6976,6977,
		5,356,0,0,6977,6978,5,223,0,0,6978,6979,3,520,260,0,6979,6980,5,313,0,
		0,6980,6981,5,132,0,0,6981,6982,3,1410,705,0,6982,7031,1,0,0,0,6983,6984,
		5,176,0,0,6984,6985,5,386,0,0,6985,6986,5,356,0,0,6986,6987,5,201,0,0,
		6987,6988,3,520,260,0,6988,6989,5,313,0,0,6989,6990,5,132,0,0,6990,6991,
		3,1410,705,0,6991,7031,1,0,0,0,6992,6993,5,176,0,0,6993,6994,5,101,0,0,
		6994,6995,5,212,0,0,6995,6996,5,412,0,0,6996,6997,3,1382,691,0,6997,6998,
		5,313,0,0,6998,6999,5,132,0,0,6999,7000,3,1410,705,0,7000,7031,1,0,0,0,
		7001,7002,5,176,0,0,7002,7003,5,362,0,0,7003,7004,3,1382,691,0,7004,7005,
		5,313,0,0,7005,7006,5,132,0,0,7006,7007,3,1410,705,0,7007,7031,1,0,0,0,
		7008,7009,5,176,0,0,7009,7010,5,236,0,0,7010,7011,5,388,0,0,7011,7012,
		3,1382,691,0,7012,7013,5,313,0,0,7013,7014,5,132,0,0,7014,7015,3,1410,
		705,0,7015,7031,1,0,0,0,7016,7017,5,176,0,0,7017,7018,5,490,0,0,7018,7019,
		3,1382,691,0,7019,7020,5,313,0,0,7020,7021,5,132,0,0,7021,7022,3,1410,
		705,0,7022,7031,1,0,0,0,7023,7024,5,176,0,0,7024,7025,5,489,0,0,7025,7026,
		3,1382,691,0,7026,7027,5,313,0,0,7027,7028,5,132,0,0,7028,7029,3,1410,
		705,0,7029,7031,1,0,0,0,7030,6845,1,0,0,0,7030,6852,1,0,0,0,7030,6859,
		1,0,0,0,7030,6866,1,0,0,0,7030,6873,1,0,0,0,7030,6880,1,0,0,0,7030,6887,
		1,0,0,0,7030,6897,1,0,0,0,7030,6905,1,0,0,0,7030,6912,1,0,0,0,7030,6922,
		1,0,0,0,7030,6932,1,0,0,0,7030,6939,1,0,0,0,7030,6946,1,0,0,0,7030,6953,
		1,0,0,0,7030,6960,1,0,0,0,7030,6967,1,0,0,0,7030,6974,1,0,0,0,7030,6983,
		1,0,0,0,7030,6992,1,0,0,0,7030,7001,1,0,0,0,7030,7008,1,0,0,0,7030,7016,
		1,0,0,0,7030,7023,1,0,0,0,7031,741,1,0,0,0,7032,7033,5,84,0,0,7033,7034,
		5,490,0,0,7034,7036,3,1382,691,0,7035,7037,3,744,372,0,7036,7035,1,0,0,
		0,7036,7037,1,0,0,0,7037,7039,1,0,0,0,7038,7040,3,662,331,0,7039,7038,
		1,0,0,0,7039,7040,1,0,0,0,7040,743,1,0,0,0,7041,7042,3,746,373,0,7042,
		745,1,0,0,0,7043,7044,5,100,0,0,7044,7045,5,130,0,0,7045,7050,3,1074,537,
		0,7046,7047,5,100,0,0,7047,7048,5,68,0,0,7048,7050,5,381,0,0,7049,7043,
		1,0,0,0,7049,7046,1,0,0,0,7050,747,1,0,0,0,7051,7052,5,176,0,0,7052,7053,
		5,490,0,0,7053,7054,3,1382,691,0,7054,7055,5,364,0,0,7055,7056,3,456,228,
		0,7056,7079,1,0,0,0,7057,7058,5,176,0,0,7058,7059,5,490,0,0,7059,7060,
		3,1382,691,0,7060,7061,5,171,0,0,7061,7062,5,130,0,0,7062,7063,3,1074,
		537,0,7063,7079,1,0,0,0,7064,7065,5,176,0,0,7065,7066,5,490,0,0,7066,7067,
		3,1382,691,0,7067,7068,5,364,0,0,7068,7069,5,130,0,0,7069,7070,3,1074,
		537,0,7070,7079,1,0,0,0,7071,7072,5,176,0,0,7072,7073,5,490,0,0,7073,7074,
		3,1382,691,0,7074,7075,5,229,0,0,7075,7076,5,130,0,0,7076,7077,3,1074,
		537,0,7077,7079,1,0,0,0,7078,7051,1,0,0,0,7078,7057,1,0,0,0,7078,7064,
		1,0,0,0,7078,7071,1,0,0,0,7079,749,1,0,0,0,7080,7081,5,84,0,0,7081,7082,
		5,489,0,0,7082,7083,3,1382,691,0,7083,7084,5,202,0,0,7084,7085,3,1400,
		700,0,7085,7086,5,490,0,0,7086,7088,3,752,376,0,7087,7089,3,662,331,0,
		7088,7087,1,0,0,0,7088,7089,1,0,0,0,7089,751,1,0,0,0,7090,7095,3,754,377,
		0,7091,7092,5,6,0,0,7092,7094,3,754,377,0,7093,7091,1,0,0,0,7094,7097,
		1,0,0,0,7095,7093,1,0,0,0,7095,7096,1,0,0,0,7096,753,1,0,0,0,7097,7095,
		1,0,0,0,7098,7099,3,1420,710,0,7099,755,1,0,0,0,7100,7101,5,176,0,0,7101,
		7102,5,489,0,0,7102,7103,3,1382,691,0,7103,7104,5,364,0,0,7104,7105,3,
		456,228,0,7105,7140,1,0,0,0,7106,7107,5,176,0,0,7107,7108,5,489,0,0,7108,
		7109,3,1382,691,0,7109,7110,5,202,0,0,7110,7111,3,1400,700,0,7111,7140,
		1,0,0,0,7112,7113,5,176,0,0,7113,7114,5,489,0,0,7114,7115,3,1382,691,0,
		7115,7116,5,336,0,0,7116,7118,5,490,0,0,7117,7119,3,662,331,0,7118,7117,
		1,0,0,0,7118,7119,1,0,0,0,7119,7140,1,0,0,0,7120,7121,5,176,0,0,7121,7122,
		5,489,0,0,7122,7123,3,1382,691,0,7123,7124,5,364,0,0,7124,7125,5,490,0,
		0,7125,7127,3,752,376,0,7126,7128,3,662,331,0,7127,7126,1,0,0,0,7127,7128,
		1,0,0,0,7128,7140,1,0,0,0,7129,7130,5,176,0,0,7130,7131,5,489,0,0,7131,
		7132,3,1382,691,0,7132,7133,5,231,0,0,7133,7140,1,0,0,0,7134,7135,5,176,
		0,0,7135,7136,5,489,0,0,7136,7137,3,1382,691,0,7137,7138,5,224,0,0,7138,
		7140,1,0,0,0,7139,7100,1,0,0,0,7139,7106,1,0,0,0,7139,7112,1,0,0,0,7139,
		7120,1,0,0,0,7139,7129,1,0,0,0,7139,7134,1,0,0,0,7140,757,1,0,0,0,7141,
		7142,5,229,0,0,7142,7143,5,489,0,0,7143,7145,3,1382,691,0,7144,7146,3,
		104,52,0,7145,7144,1,0,0,0,7145,7146,1,0,0,0,7146,7156,1,0,0,0,7147,7148,
		5,229,0,0,7148,7149,5,489,0,0,7149,7150,5,258,0,0,7150,7151,5,427,0,0,
		7151,7153,3,1382,691,0,7152,7154,3,104,52,0,7153,7152,1,0,0,0,7153,7154,
		1,0,0,0,7154,7156,1,0,0,0,7155,7141,1,0,0,0,7155,7147,1,0,0,0,7156,759,
		1,0,0,0,7157,7159,5,84,0,0,7158,7160,3,616,308,0,7159,7158,1,0,0,0,7159,
		7160,1,0,0,0,7160,7161,1,0,0,0,7161,7162,5,352,0,0,7162,7163,3,1382,691,
		0,7163,7164,5,74,0,0,7164,7165,5,118,0,0,7165,7166,3,770,385,0,7166,7167,
		5,132,0,0,7167,7169,3,1378,689,0,7168,7170,3,1092,546,0,7169,7168,1,0,
		0,0,7169,7170,1,0,0,0,7170,7171,1,0,0,0,7171,7173,5,95,0,0,7172,7174,3,
		772,386,0,7173,7172,1,0,0,0,7173,7174,1,0,0,0,7174,7175,1,0,0,0,7175,7176,
		3,762,381,0,7176,761,1,0,0,0,7177,7184,5,301,0,0,7178,7184,3,766,383,0,
		7179,7180,5,2,0,0,7180,7181,3,764,382,0,7181,7182,5,3,0,0,7182,7184,1,
		0,0,0,7183,7177,1,0,0,0,7183,7178,1,0,0,0,7183,7179,1,0,0,0,7184,763,1,
		0,0,0,7185,7187,3,768,384,0,7186,7185,1,0,0,0,7186,7187,1,0,0,0,7187,7194,
		1,0,0,0,7188,7190,5,7,0,0,7189,7191,3,768,384,0,7190,7189,1,0,0,0,7190,
		7191,1,0,0,0,7191,7193,1,0,0,0,7192,7188,1,0,0,0,7193,7196,1,0,0,0,7194,
		7192,1,0,0,0,7194,7195,1,0,0,0,7195,765,1,0,0,0,7196,7194,1,0,0,0,7197,
		7203,3,964,482,0,7198,7203,3,906,453,0,7199,7203,3,946,473,0,7200,7203,
		3,932,466,0,7201,7203,3,774,387,0,7202,7197,1,0,0,0,7202,7198,1,0,0,0,
		7202,7199,1,0,0,0,7202,7200,1,0,0,0,7202,7201,1,0,0,0,7203,767,1,0,0,0,
		7204,7205,3,766,383,0,7205,769,1,0,0,0,7206,7207,7,31,0,0,7207,771,1,0,
		0,0,7208,7209,7,32,0,0,7209,773,1,0,0,0,7210,7211,5,302,0,0,7211,7213,
		3,1414,707,0,7212,7214,3,776,388,0,7213,7212,1,0,0,0,7213,7214,1,0,0,0,
		7214,775,1,0,0,0,7215,7216,5,6,0,0,7216,7217,3,1400,700,0,7217,777,1,0,
		0,0,7218,7219,5,281,0,0,7219,7220,3,1414,707,0,7220,779,1,0,0,0,7221,7222,
		5,397,0,0,7222,7226,3,1414,707,0,7223,7224,5,397,0,0,7224,7226,5,9,0,0,
		7225,7221,1,0,0,0,7225,7223,1,0,0,0,7226,781,1,0,0,0,7227,7229,5,167,0,
		0,7228,7230,3,784,392,0,7229,7228,1,0,0,0,7229,7230,1,0,0,0,7230,7232,
		1,0,0,0,7231,7233,3,792,396,0,7232,7231,1,0,0,0,7232,7233,1,0,0,0,7233,
		7297,1,0,0,0,7234,7236,5,184,0,0,7235,7237,3,784,392,0,7236,7235,1,0,0,
		0,7236,7237,1,0,0,0,7237,7239,1,0,0,0,7238,7240,3,790,395,0,7239,7238,
		1,0,0,0,7239,7240,1,0,0,0,7240,7297,1,0,0,0,7241,7242,5,371,0,0,7242,7244,
		5,387,0,0,7243,7245,3,790,395,0,7244,7243,1,0,0,0,7244,7245,1,0,0,0,7245,
		7297,1,0,0,0,7246,7248,5,199,0,0,7247,7249,3,784,392,0,7248,7247,1,0,0,
		0,7248,7249,1,0,0,0,7249,7251,1,0,0,0,7250,7252,3,792,396,0,7251,7250,
		1,0,0,0,7251,7252,1,0,0,0,7252,7297,1,0,0,0,7253,7255,5,492,0,0,7254,7256,
		3,784,392,0,7255,7254,1,0,0,0,7255,7256,1,0,0,0,7256,7258,1,0,0,0,7257,
		7259,3,792,396,0,7258,7257,1,0,0,0,7258,7259,1,0,0,0,7259,7297,1,0,0,0,
		7260,7262,5,350,0,0,7261,7263,3,784,392,0,7262,7261,1,0,0,0,7262,7263,
		1,0,0,0,7263,7265,1,0,0,0,7264,7266,3,792,396,0,7265,7264,1,0,0,0,7265,
		7266,1,0,0,0,7266,7297,1,0,0,0,7267,7268,5,353,0,0,7268,7297,3,1414,707,
		0,7269,7270,5,339,0,0,7270,7271,5,353,0,0,7271,7297,3,1414,707,0,7272,
		7273,5,339,0,0,7273,7297,3,1414,707,0,7274,7276,5,350,0,0,7275,7277,3,
		784,392,0,7276,7275,1,0,0,0,7276,7277,1,0,0,0,7277,7278,1,0,0,0,7278,7279,
		5,132,0,0,7279,7280,5,353,0,0,7280,7297,3,1414,707,0,7281,7283,5,350,0,
		0,7282,7284,3,784,392,0,7283,7282,1,0,0,0,7283,7284,1,0,0,0,7284,7285,
		1,0,0,0,7285,7286,5,132,0,0,7286,7297,3,1414,707,0,7287,7288,5,321,0,0,
		7288,7289,5,387,0,0,7289,7297,3,1400,700,0,7290,7291,5,199,0,0,7291,7292,
		5,322,0,0,7292,7297,3,1400,700,0,7293,7294,5,350,0,0,7294,7295,5,322,0,
		0,7295,7297,3,1400,700,0,7296,7227,1,0,0,0,7296,7234,1,0,0,0,7296,7241,
		1,0,0,0,7296,7246,1,0,0,0,7296,7253,1,0,0,0,7296,7260,1,0,0,0,7296,7267,
		1,0,0,0,7296,7269,1,0,0,0,7296,7272,1,0,0,0,7296,7274,1,0,0,0,7296,7281,
		1,0,0,0,7296,7287,1,0,0,0,7296,7290,1,0,0,0,7296,7293,1,0,0,0,7297,783,
		1,0,0,0,7298,7299,7,33,0,0,7299,785,1,0,0,0,7300,7301,5,273,0,0,7301,7302,
		5,280,0,0,7302,7311,3,60,30,0,7303,7304,5,331,0,0,7304,7311,5,119,0,0,
		7305,7306,5,331,0,0,7306,7311,5,413,0,0,7307,7311,5,92,0,0,7308,7309,5,
		115,0,0,7309,7311,5,92,0,0,7310,7300,1,0,0,0,7310,7303,1,0,0,0,7310,7305,
		1,0,0,0,7310,7307,1,0,0,0,7310,7308,1,0,0,0,7311,787,1,0,0,0,7312,7319,
		3,786,393,0,7313,7315,5,6,0,0,7314,7313,1,0,0,0,7314,7315,1,0,0,0,7315,
		7316,1,0,0,0,7316,7318,3,786,393,0,7317,7314,1,0,0,0,7318,7321,1,0,0,0,
		7319,7317,1,0,0,0,7319,7320,1,0,0,0,7320,789,1,0,0,0,7321,7319,1,0,0,0,
		7322,7323,3,788,394,0,7323,791,1,0,0,0,7324,7326,5,71,0,0,7325,7327,5,
		300,0,0,7326,7325,1,0,0,0,7326,7327,1,0,0,0,7327,7328,1,0,0,0,7328,7329,
		5,191,0,0,7329,793,1,0,0,0,7330,7333,5,84,0,0,7331,7332,5,120,0,0,7332,
		7334,5,342,0,0,7333,7331,1,0,0,0,7333,7334,1,0,0,0,7334,7336,1,0,0,0,7335,
		7337,3,170,85,0,7336,7335,1,0,0,0,7336,7337,1,0,0,0,7337,7355,1,0,0,0,
		7338,7339,5,407,0,0,7339,7341,3,1378,689,0,7340,7342,3,210,105,0,7341,
		7340,1,0,0,0,7341,7342,1,0,0,0,7342,7344,1,0,0,0,7343,7345,3,114,57,0,
		7344,7343,1,0,0,0,7344,7345,1,0,0,0,7345,7356,1,0,0,0,7346,7347,5,334,
		0,0,7347,7348,5,407,0,0,7348,7349,3,1378,689,0,7349,7350,5,2,0,0,7350,
		7351,3,212,106,0,7351,7353,5,3,0,0,7352,7354,3,114,57,0,7353,7352,1,0,
		0,0,7353,7354,1,0,0,0,7354,7356,1,0,0,0,7355,7338,1,0,0,0,7355,7346,1,
		0,0,0,7356,7357,1,0,0,0,7357,7358,5,74,0,0,7358,7360,3,964,482,0,7359,
		7361,3,796,398,0,7360,7359,1,0,0,0,7360,7361,1,0,0,0,7361,795,1,0,0,0,
		7362,7364,5,143,0,0,7363,7365,7,34,0,0,7364,7363,1,0,0,0,7364,7365,1,0,
		0,0,7365,7366,1,0,0,0,7366,7367,5,80,0,0,7367,7368,5,310,0,0,7368,797,
		1,0,0,0,7369,7370,5,282,0,0,7370,7371,3,1386,693,0,7371,799,1,0,0,0,7372,
		7373,5,84,0,0,7373,7374,5,213,0,0,7374,7376,3,1382,691,0,7375,7377,3,12,
		6,0,7376,7375,1,0,0,0,7376,7377,1,0,0,0,7377,7379,1,0,0,0,7378,7380,3,
		802,401,0,7379,7378,1,0,0,0,7379,7380,1,0,0,0,7380,801,1,0,0,0,7381,7382,
		3,804,402,0,7382,803,1,0,0,0,7383,7385,3,806,403,0,7384,7383,1,0,0,0,7385,
		7386,1,0,0,0,7386,7384,1,0,0,0,7386,7387,1,0,0,0,7387,805,1,0,0,0,7388,
		7390,3,808,404,0,7389,7391,3,810,405,0,7390,7389,1,0,0,0,7390,7391,1,0,
		0,0,7391,7395,1,0,0,0,7392,7396,3,1406,703,0,7393,7396,3,62,31,0,7394,
		7396,5,91,0,0,7395,7392,1,0,0,0,7395,7393,1,0,0,0,7395,7394,1,0,0,0,7396,
		807,1,0,0,0,7397,7406,3,1436,718,0,7398,7399,5,202,0,0,7399,7406,5,112,
		0,0,7400,7406,5,232,0,0,7401,7406,5,284,0,0,7402,7406,5,313,0,0,7403,7406,
		5,382,0,0,7404,7406,5,384,0,0,7405,7397,1,0,0,0,7405,7398,1,0,0,0,7405,
		7400,1,0,0,0,7405,7401,1,0,0,0,7405,7402,1,0,0,0,7405,7403,1,0,0,0,7405,
		7404,1,0,0,0,7406,809,1,0,0,0,7407,7408,5,10,0,0,7408,811,1,0,0,0,7409,
		7410,5,176,0,0,7410,7411,5,213,0,0,7411,7422,3,1382,691,0,7412,7414,5,
		143,0,0,7413,7415,3,802,401,0,7414,7413,1,0,0,0,7414,7415,1,0,0,0,7415,
		7423,1,0,0,0,7416,7418,3,802,401,0,7417,7416,1,0,0,0,7417,7418,1,0,0,0,
		7418,7423,1,0,0,0,7419,7420,5,364,0,0,7420,7421,5,382,0,0,7421,7423,3,
		1382,691,0,7422,7412,1,0,0,0,7422,7417,1,0,0,0,7422,7419,1,0,0,0,7423,
		813,1,0,0,0,7424,7425,5,176,0,0,7425,7426,5,213,0,0,7426,7427,3,1382,691,
		0,7427,7428,3,76,38,0,7428,815,1,0,0,0,7429,7430,5,229,0,0,7430,7433,5,
		213,0,0,7431,7432,5,258,0,0,7432,7434,5,427,0,0,7433,7431,1,0,0,0,7433,
		7434,1,0,0,0,7434,7435,1,0,0,0,7435,7443,3,1382,691,0,7436,7438,3,12,6,
		0,7437,7436,1,0,0,0,7437,7438,1,0,0,0,7438,7439,1,0,0,0,7439,7440,5,2,
		0,0,7440,7441,3,818,409,0,7441,7442,5,3,0,0,7442,7444,1,0,0,0,7443,7437,
		1,0,0,0,7443,7444,1,0,0,0,7444,817,1,0,0,0,7445,7450,3,820,410,0,7446,
		7447,5,6,0,0,7447,7449,3,820,410,0,7448,7446,1,0,0,0,7449,7452,1,0,0,0,
		7450,7448,1,0,0,0,7450,7451,1,0,0,0,7451,819,1,0,0,0,7452,7450,1,0,0,0,
		7453,7454,5,247,0,0,7454,821,1,0,0,0,7455,7456,5,176,0,0,7456,7457,5,146,
		0,0,7457,7458,3,520,260,0,7458,7459,5,336,0,0,7459,7460,5,406,0,0,7460,
		823,1,0,0,0,7461,7462,5,176,0,0,7462,7463,5,380,0,0,7463,7464,7,35,0,0,
		7464,7465,3,50,25,0,7465,825,1,0,0,0,7466,7467,5,84,0,0,7467,7468,5,227,
		0,0,7468,7470,3,520,260,0,7469,7471,3,830,415,0,7470,7469,1,0,0,0,7470,
		7471,1,0,0,0,7471,7472,1,0,0,0,7472,7473,3,1116,558,0,7473,7474,3,188,
		94,0,7474,827,1,0,0,0,7475,7476,5,176,0,0,7476,7477,5,227,0,0,7477,7500,
		3,520,260,0,7478,7501,3,102,51,0,7479,7480,5,229,0,0,7480,7481,5,115,0,
		0,7481,7501,5,116,0,0,7482,7483,5,364,0,0,7483,7484,5,115,0,0,7484,7501,
		5,116,0,0,7485,7486,5,171,0,0,7486,7501,3,204,102,0,7487,7488,5,229,0,
		0,7488,7491,5,83,0,0,7489,7490,5,258,0,0,7490,7492,5,427,0,0,7491,7489,
		1,0,0,0,7491,7492,1,0,0,0,7492,7493,1,0,0,0,7493,7495,3,1382,691,0,7494,
		7496,3,104,52,0,7495,7494,1,0,0,0,7495,7496,1,0,0,0,7496,7501,1,0,0,0,
		7497,7498,5,403,0,0,7498,7499,5,83,0,0,7499,7501,3,1382,691,0,7500,7478,
		1,0,0,0,7500,7479,1,0,0,0,7500,7482,1,0,0,0,7500,7485,1,0,0,0,7500,7487,
		1,0,0,0,7500,7497,1,0,0,0,7501,829,1,0,0,0,7502,7503,5,74,0,0,7503,831,
		1,0,0,0,7504,7505,5,176,0,0,7505,7506,5,386,0,0,7506,7507,5,356,0,0,7507,
		7508,5,223,0,0,7508,7509,3,520,260,0,7509,7510,3,456,228,0,7510,833,1,
		0,0,0,7511,7512,5,176,0,0,7512,7513,5,386,0,0,7513,7514,5,356,0,0,7514,
		7515,5,201,0,0,7515,7516,3,520,260,0,7516,7517,5,171,0,0,7517,7518,5,286,
		0,0,7518,7519,5,100,0,0,7519,7520,3,1380,690,0,7520,7521,3,836,418,0,7521,
		7522,3,518,259,0,7522,7584,1,0,0,0,7523,7524,5,176,0,0,7524,7525,5,386,
		0,0,7525,7526,5,356,0,0,7526,7527,5,201,0,0,7527,7528,3,520,260,0,7528,
		7529,5,176,0,0,7529,7530,5,286,0,0,7530,7531,5,100,0,0,7531,7532,3,1380,
		690,0,7532,7533,3,836,418,0,7533,7534,3,518,259,0,7534,7584,1,0,0,0,7535,
		7536,5,176,0,0,7536,7537,5,386,0,0,7537,7538,5,356,0,0,7538,7539,5,201,
		0,0,7539,7540,3,520,260,0,7540,7541,5,176,0,0,7541,7542,5,286,0,0,7542,
		7543,5,342,0,0,7543,7544,3,520,260,0,7544,7545,3,836,418,0,7545,7546,3,
		520,260,0,7546,7584,1,0,0,0,7547,7548,5,176,0,0,7548,7549,5,386,0,0,7549,
		7550,5,356,0,0,7550,7551,5,201,0,0,7551,7552,3,520,260,0,7552,7553,5,176,
		0,0,7553,7554,5,286,0,0,7554,7555,5,100,0,0,7555,7556,3,1380,690,0,7556,
		7557,5,342,0,0,7557,7558,3,520,260,0,7558,7559,3,836,418,0,7559,7560,3,
		520,260,0,7560,7584,1,0,0,0,7561,7562,5,176,0,0,7562,7563,5,386,0,0,7563,
		7564,5,356,0,0,7564,7565,5,201,0,0,7565,7566,3,520,260,0,7566,7567,5,229,
		0,0,7567,7568,5,286,0,0,7568,7569,5,100,0,0,7569,7570,3,1380,690,0,7570,
		7584,1,0,0,0,7571,7572,5,176,0,0,7572,7573,5,386,0,0,7573,7574,5,356,0,
		0,7574,7575,5,201,0,0,7575,7576,3,520,260,0,7576,7577,5,229,0,0,7577,7578,
		5,286,0,0,7578,7579,5,258,0,0,7579,7580,5,427,0,0,7580,7581,5,100,0,0,
		7581,7582,3,1380,690,0,7582,7584,1,0,0,0,7583,7511,1,0,0,0,7583,7523,1,
		0,0,0,7583,7535,1,0,0,0,7583,7547,1,0,0,0,7583,7561,1,0,0,0,7583,7571,
		1,0,0,0,7584,835,1,0,0,0,7585,7586,5,143,0,0,7586,837,1,0,0,0,7587,7589,
		5,84,0,0,7588,7590,3,484,242,0,7589,7588,1,0,0,0,7589,7590,1,0,0,0,7590,
		7591,1,0,0,0,7591,7592,5,206,0,0,7592,7593,3,520,260,0,7593,7594,5,100,
		0,0,7594,7595,3,1400,700,0,7595,7596,5,132,0,0,7596,7597,3,1400,700,0,
		7597,7598,5,102,0,0,7598,7599,3,520,260,0,7599,839,1,0,0,0,7600,7602,5,
		196,0,0,7601,7603,3,868,434,0,7602,7601,1,0,0,0,7602,7603,1,0,0,0,7603,
		7604,1,0,0,0,7604,7606,3,1378,689,0,7605,7607,3,842,421,0,7606,7605,1,
		0,0,0,7606,7607,1,0,0,0,7607,7621,1,0,0,0,7608,7610,5,196,0,0,7609,7611,
		3,868,434,0,7610,7609,1,0,0,0,7610,7611,1,0,0,0,7611,7621,1,0,0,0,7612,
		7614,5,196,0,0,7613,7615,3,868,434,0,7614,7613,1,0,0,0,7614,7615,1,0,0,
		0,7615,7616,1,0,0,0,7616,7617,3,1382,691,0,7617,7618,5,118,0,0,7618,7619,
		3,1378,689,0,7619,7621,1,0,0,0,7620,7600,1,0,0,0,7620,7608,1,0,0,0,7620,
		7612,1,0,0,0,7621,841,1,0,0,0,7622,7623,5,138,0,0,7623,7624,3,1382,691,
		0,7624,843,1,0,0,0,7625,7627,5,401,0,0,7626,7628,3,870,435,0,7627,7626,
		1,0,0,0,7627,7628,1,0,0,0,7628,7630,1,0,0,0,7629,7631,3,872,436,0,7630,
		7629,1,0,0,0,7630,7631,1,0,0,0,7631,7633,1,0,0,0,7632,7634,3,868,434,0,
		7633,7632,1,0,0,0,7633,7634,1,0,0,0,7634,7636,1,0,0,0,7635,7637,3,866,
		433,0,7636,7635,1,0,0,0,7636,7637,1,0,0,0,7637,7639,1,0,0,0,7638,7640,
		3,880,440,0,7639,7638,1,0,0,0,7639,7640,1,0,0,0,7640,7649,1,0,0,0,7641,
		7642,5,401,0,0,7642,7643,5,2,0,0,7643,7644,3,850,425,0,7644,7646,5,3,0,
		0,7645,7647,3,880,440,0,7646,7645,1,0,0,0,7646,7647,1,0,0,0,7647,7649,
		1,0,0,0,7648,7625,1,0,0,0,7648,7641,1,0,0,0,7649,845,1,0,0,0,7650,7652,
		3,852,426,0,7651,7653,3,868,434,0,7652,7651,1,0,0,0,7652,7653,1,0,0,0,
		7653,7655,1,0,0,0,7654,7656,3,880,440,0,7655,7654,1,0,0,0,7655,7656,1,
		0,0,0,7656,7665,1,0,0,0,7657,7658,3,852,426,0,7658,7659,5,2,0,0,7659,7660,
		3,850,425,0,7660,7662,5,3,0,0,7661,7663,3,880,440,0,7662,7661,1,0,0,0,
		7662,7663,1,0,0,0,7663,7665,1,0,0,0,7664,7650,1,0,0,0,7664,7657,1,0,0,
		0,7665,847,1,0,0,0,7666,7671,3,854,427,0,7667,7668,5,6,0,0,7668,7670,3,
		854,427,0,7669,7667,1,0,0,0,7670,7673,1,0,0,0,7671,7669,1,0,0,0,7671,7672,
		1,0,0,0,7672,849,1,0,0,0,7673,7671,1,0,0,0,7674,7679,3,860,430,0,7675,
		7676,5,6,0,0,7676,7678,3,860,430,0,7677,7675,1,0,0,0,7678,7681,1,0,0,0,
		7679,7677,1,0,0,0,7679,7680,1,0,0,0,7680,851,1,0,0,0,7681,7679,1,0,0,0,
		7682,7683,7,36,0,0,7683,853,1,0,0,0,7684,7686,3,856,428,0,7685,7687,3,
		858,429,0,7686,7685,1,0,0,0,7686,7687,1,0,0,0,7687,855,1,0,0,0,7688,7692,
		3,1418,709,0,7689,7692,3,852,426,0,7690,7692,5,67,0,0,7691,7688,1,0,0,
		0,7691,7689,1,0,0,0,7691,7690,1,0,0,0,7692,857,1,0,0,0,7693,7696,3,62,
		31,0,7694,7696,3,288,144,0,7695,7693,1,0,0,0,7695,7694,1,0,0,0,7696,859,
		1,0,0,0,7697,7699,3,862,431,0,7698,7700,3,864,432,0,7699,7698,1,0,0,0,
		7699,7700,1,0,0,0,7700,861,1,0,0,0,7701,7704,3,1418,709,0,7702,7704,3,
		852,426,0,7703,7701,1,0,0,0,7703,7702,1,0,0,0,7704,863,1,0,0,0,7705,7708,
		3,62,31,0,7706,7708,3,288,144,0,7707,7705,1,0,0,0,7707,7706,1,0,0,0,7708,
		865,1,0,0,0,7709,7710,3,852,426,0,7710,867,1,0,0,0,7711,7712,5,166,0,0,
		7712,869,1,0,0,0,7713,7714,5,151,0,0,7714,871,1,0,0,0,7715,7716,5,150,
		0,0,7716,873,1,0,0,0,7717,7718,5,2,0,0,7718,7719,3,1380,690,0,7719,7720,
		5,3,0,0,7720,875,1,0,0,0,7721,7723,3,1378,689,0,7722,7724,3,874,437,0,
		7723,7722,1,0,0,0,7723,7724,1,0,0,0,7724,877,1,0,0,0,7725,7730,3,876,438,
		0,7726,7727,5,6,0,0,7727,7729,3,876,438,0,7728,7726,1,0,0,0,7729,7732,
		1,0,0,0,7730,7728,1,0,0,0,7730,7731,1,0,0,0,7731,879,1,0,0,0,7732,7730,
		1,0,0,0,7733,7734,3,878,439,0,7734,881,1,0,0,0,7735,7736,5,241,0,0,7736,
		7754,3,884,442,0,7737,7738,5,241,0,0,7738,7740,3,852,426,0,7739,7741,3,
		868,434,0,7740,7739,1,0,0,0,7740,7741,1,0,0,0,7741,7742,1,0,0,0,7742,7743,
		3,884,442,0,7743,7754,1,0,0,0,7744,7745,5,241,0,0,7745,7746,5,166,0,0,
		7746,7754,3,884,442,0,7747,7748,5,241,0,0,7748,7749,5,2,0,0,7749,7750,
		3,886,443,0,7750,7751,5,3,0,0,7751,7752,3,884,442,0,7752,7754,1,0,0,0,
		7753,7735,1,0,0,0,7753,7737,1,0,0,0,7753,7744,1,0,0,0,7753,7747,1,0,0,
		0,7754,883,1,0,0,0,7755,7765,3,964,482,0,7756,7765,3,906,453,0,7757,7765,
		3,946,473,0,7758,7765,3,932,466,0,7759,7765,3,956,478,0,7760,7765,3,260,
		130,0,7761,7765,3,266,133,0,7762,7765,3,272,136,0,7763,7765,3,900,450,
		0,7764,7755,1,0,0,0,7764,7756,1,0,0,0,7764,7757,1,0,0,0,7764,7758,1,0,
		0,0,7764,7759,1,0,0,0,7764,7760,1,0,0,0,7764,7761,1,0,0,0,7764,7762,1,
		0,0,0,7764,7763,1,0,0,0,7765,885,1,0,0,0,7766,7771,3,888,444,0,7767,7768,
		5,6,0,0,7768,7770,3,888,444,0,7769,7767,1,0,0,0,7770,7773,1,0,0,0,7771,
		7769,1,0,0,0,7771,7772,1,0,0,0,7772,887,1,0,0,0,7773,7771,1,0,0,0,7774,
		7776,3,890,445,0,7775,7777,3,892,446,0,7776,7775,1,0,0,0,7776,7777,1,0,
		0,0,7777,889,1,0,0,0,7778,7781,3,1418,709,0,7779,7781,3,852,426,0,7780,
		7778,1,0,0,0,7780,7779,1,0,0,0,7781,891,1,0,0,0,7782,7785,3,62,31,0,7783,
		7785,3,288,144,0,7784,7782,1,0,0,0,7784,7783,1,0,0,0,7785,893,1,0,0,0,
		7786,7787,5,321,0,0,7787,7789,3,1382,691,0,7788,7790,3,896,448,0,7789,
		7788,1,0,0,0,7789,7790,1,0,0,0,7790,7791,1,0,0,0,7791,7792,5,74,0,0,7792,
		7793,3,898,449,0,7793,895,1,0,0,0,7794,7795,5,2,0,0,7795,7796,3,1286,643,
		0,7796,7797,5,3,0,0,7797,897,1,0,0,0,7798,7803,3,964,482,0,7799,7803,3,
		906,453,0,7800,7803,3,946,473,0,7801,7803,3,932,466,0,7802,7798,1,0,0,
		0,7802,7799,1,0,0,0,7802,7800,1,0,0,0,7802,7801,1,0,0,0,7803,899,1,0,0,
		0,7804,7805,5,240,0,0,7805,7807,3,1382,691,0,7806,7808,3,902,451,0,7807,
		7806,1,0,0,0,7807,7808,1,0,0,0,7808,7843,1,0,0,0,7809,7811,5,84,0,0,7810,
		7812,3,170,85,0,7811,7810,1,0,0,0,7811,7812,1,0,0,0,7812,7813,1,0,0,0,
		7813,7814,5,130,0,0,7814,7815,3,262,131,0,7815,7816,5,74,0,0,7816,7817,
		5,240,0,0,7817,7819,3,1382,691,0,7818,7820,3,902,451,0,7819,7818,1,0,0,
		0,7819,7820,1,0,0,0,7820,7822,1,0,0,0,7821,7823,3,264,132,0,7822,7821,
		1,0,0,0,7822,7823,1,0,0,0,7823,7843,1,0,0,0,7824,7826,5,84,0,0,7825,7827,
		3,170,85,0,7826,7825,1,0,0,0,7826,7827,1,0,0,0,7827,7828,1,0,0,0,7828,
		7829,5,130,0,0,7829,7830,5,258,0,0,7830,7831,5,115,0,0,7831,7832,5,427,
		0,0,7832,7833,3,262,131,0,7833,7834,5,74,0,0,7834,7835,5,240,0,0,7835,
		7837,3,1382,691,0,7836,7838,3,902,451,0,7837,7836,1,0,0,0,7837,7838,1,
		0,0,0,7838,7840,1,0,0,0,7839,7841,3,264,132,0,7840,7839,1,0,0,0,7840,7841,
		1,0,0,0,7841,7843,1,0,0,0,7842,7804,1,0,0,0,7842,7809,1,0,0,0,7842,7824,
		1,0,0,0,7843,901,1,0,0,0,7844,7845,5,2,0,0,7845,7846,3,1280,640,0,7846,
		7847,5,3,0,0,7847,903,1,0,0,0,7848,7849,5,215,0,0,7849,7859,3,1382,691,
		0,7850,7851,5,215,0,0,7851,7852,5,321,0,0,7852,7859,3,1382,691,0,7853,
		7854,5,215,0,0,7854,7859,5,68,0,0,7855,7856,5,215,0,0,7856,7857,5,321,
		0,0,7857,7859,5,68,0,0,7858,7848,1,0,0,0,7858,7850,1,0,0,0,7858,7853,1,
		0,0,0,7858,7855,1,0,0,0,7859,905,1,0,0,0,7860,7862,3,984,492,0,7861,7860,
		1,0,0,0,7861,7862,1,0,0,0,7862,7863,1,0,0,0,7863,7864,5,270,0,0,7864,7865,
		5,109,0,0,7865,7866,3,908,454,0,7866,7868,3,910,455,0,7867,7869,3,918,
		459,0,7868,7867,1,0,0,0,7868,7869,1,0,0,0,7869,7871,1,0,0,0,7870,7872,
		3,922,461,0,7871,7870,1,0,0,0,7871,7872,1,0,0,0,7872,907,1,0,0,0,7873,
		7876,3,1378,689,0,7874,7875,5,74,0,0,7875,7877,3,1414,707,0,7876,7874,
		1,0,0,0,7876,7877,1,0,0,0,7877,909,1,0,0,0,7878,7898,3,964,482,0,7879,
		7880,5,501,0,0,7880,7881,3,912,456,0,7881,7882,5,488,0,0,7882,7883,3,964,
		482,0,7883,7898,1,0,0,0,7884,7885,5,2,0,0,7885,7886,3,914,457,0,7886,7891,
		5,3,0,0,7887,7888,5,501,0,0,7888,7889,3,912,456,0,7889,7890,5,488,0,0,
		7890,7892,1,0,0,0,7891,7887,1,0,0,0,7891,7892,1,0,0,0,7892,7893,1,0,0,
		0,7893,7894,3,964,482,0,7894,7898,1,0,0,0,7895,7896,5,91,0,0,7896,7898,
		5,453,0,0,7897,7878,1,0,0,0,7897,7879,1,0,0,0,7897,7884,1,0,0,0,7897,7895,
		1,0,0,0,7898,911,1,0,0,0,7899,7900,7,37,0,0,7900,913,1,0,0,0,7901,7906,
		3,916,458,0,7902,7903,5,6,0,0,7903,7905,3,916,458,0,7904,7902,1,0,0,0,
		7905,7908,1,0,0,0,7906,7904,1,0,0,0,7906,7907,1,0,0,0,7907,915,1,0,0,0,
		7908,7906,1,0,0,0,7909,7910,3,1414,707,0,7910,7911,3,1326,663,0,7911,917,
		1,0,0,0,7912,7913,5,118,0,0,7913,7915,5,502,0,0,7914,7916,3,920,460,0,
		7915,7914,1,0,0,0,7915,7916,1,0,0,0,7916,7917,1,0,0,0,7917,7925,5,95,0,
		0,7918,7919,5,400,0,0,7919,7920,5,364,0,0,7920,7922,3,948,474,0,7921,7923,
		3,1092,546,0,7922,7921,1,0,0,0,7922,7923,1,0,0,0,7923,7926,1,0,0,0,7924,
		7926,5,301,0,0,7925,7918,1,0,0,0,7925,7924,1,0,0,0,7926,919,1,0,0,0,7927,
		7928,5,2,0,0,7928,7929,3,596,298,0,7929,7931,5,3,0,0,7930,7932,3,1092,
		546,0,7931,7930,1,0,0,0,7931,7932,1,0,0,0,7932,7937,1,0,0,0,7933,7934,
		5,118,0,0,7934,7935,5,83,0,0,7935,7937,3,1382,691,0,7936,7927,1,0,0,0,
		7936,7933,1,0,0,0,7937,921,1,0,0,0,7938,7939,5,125,0,0,7939,7940,3,1372,
		686,0,7940,923,1,0,0,0,7941,7943,5,291,0,0,7942,7944,5,109,0,0,7943,7942,
		1,0,0,0,7943,7944,1,0,0,0,7944,7945,1,0,0,0,7945,7947,3,1378,689,0,7946,
		7948,3,1064,532,0,7947,7946,1,0,0,0,7947,7948,1,0,0,0,7948,7949,1,0,0,
		0,7949,7952,5,138,0,0,7950,7953,3,966,483,0,7951,7953,3,1378,689,0,7952,
		7950,1,0,0,0,7952,7951,1,0,0,0,7953,7955,1,0,0,0,7954,7956,3,1064,532,
		0,7955,7954,1,0,0,0,7955,7956,1,0,0,0,7956,7957,1,0,0,0,7957,7958,5,118,
		0,0,7958,7967,3,1162,581,0,7959,7961,3,926,463,0,7960,7962,3,928,464,0,
		7961,7960,1,0,0,0,7961,7962,1,0,0,0,7962,7968,1,0,0,0,7963,7965,3,928,
		464,0,7964,7966,3,926,463,0,7965,7964,1,0,0,0,7965,7966,1,0,0,0,7966,7968,
		1,0,0,0,7967,7959,1,0,0,0,7967,7963,1,0,0,0,7968,7970,1,0,0,0,7969,7971,
		3,930,465,0,7970,7969,1,0,0,0,7970,7971,1,0,0,0,7971,925,1,0,0,0,7972,
		7973,5,140,0,0,7973,7974,5,115,0,0,7974,7977,5,288,0,0,7975,7976,5,71,
		0,0,7976,7978,3,1162,581,0,7977,7975,1,0,0,0,7977,7978,1,0,0,0,7978,7980,
		1,0,0,0,7979,7981,5,131,0,0,7980,7979,1,0,0,0,7980,7981,1,0,0,0,7981,7982,
		1,0,0,0,7982,7987,5,270,0,0,7983,7984,5,2,0,0,7984,7985,3,914,457,0,7985,
		7986,5,3,0,0,7986,7988,1,0,0,0,7987,7983,1,0,0,0,7987,7988,1,0,0,0,7988,
		7989,1,0,0,0,7989,7990,3,1056,528,0,7990,927,1,0,0,0,7991,7992,5,140,0,
		0,7992,7995,5,288,0,0,7993,7994,5,71,0,0,7994,7996,3,1162,581,0,7995,7993,
		1,0,0,0,7995,7996,1,0,0,0,7996,7998,1,0,0,0,7997,7999,5,131,0,0,7998,7997,
		1,0,0,0,7998,7999,1,0,0,0,7999,8000,1,0,0,0,8000,8001,5,400,0,0,8001,8002,
		5,364,0,0,8002,8003,3,948,474,0,8003,929,1,0,0,0,8004,8005,5,140,0,0,8005,
		8007,5,288,0,0,8006,8008,5,131,0,0,8007,8006,1,0,0,0,8007,8008,1,0,0,0,
		8008,8009,1,0,0,0,8009,8010,5,220,0,0,8010,931,1,0,0,0,8011,8013,3,984,
		492,0,8012,8011,1,0,0,0,8012,8013,1,0,0,0,8013,8014,1,0,0,0,8014,8015,
		5,220,0,0,8015,8016,5,102,0,0,8016,8018,3,1076,538,0,8017,8019,3,934,467,
		0,8018,8017,1,0,0,0,8018,8019,1,0,0,0,8019,8021,1,0,0,0,8020,8022,3,1094,
		547,0,8021,8020,1,0,0,0,8021,8022,1,0,0,0,8022,8024,1,0,0,0,8023,8025,
		3,922,461,0,8024,8023,1,0,0,0,8024,8025,1,0,0,0,8025,933,1,0,0,0,8026,
		8027,5,138,0,0,8027,8028,3,1060,530,0,8028,935,1,0,0,0,8029,8031,5,285,
		0,0,8030,8032,3,992,496,0,8031,8030,1,0,0,0,8031,8032,1,0,0,0,8032,8033,
		1,0,0,0,8033,8035,3,1074,537,0,8034,8036,3,938,469,0,8035,8034,1,0,0,0,
		8035,8036,1,0,0,0,8036,8038,1,0,0,0,8037,8039,3,942,471,0,8038,8037,1,
		0,0,0,8038,8039,1,0,0,0,8039,937,1,0,0,0,8040,8041,5,106,0,0,8041,8042,
		3,940,470,0,8042,8043,5,294,0,0,8043,939,1,0,0,0,8044,8045,5,169,0,0,8045,
		8057,7,38,0,0,8046,8047,5,445,0,0,8047,8057,7,38,0,0,8048,8053,5,365,0,
		0,8049,8050,5,400,0,0,8050,8054,5,239,0,0,8051,8052,5,445,0,0,8052,8054,
		5,239,0,0,8053,8049,1,0,0,0,8053,8051,1,0,0,0,8053,8054,1,0,0,0,8054,8057,
		1,0,0,0,8055,8057,5,239,0,0,8056,8044,1,0,0,0,8056,8046,1,0,0,0,8056,8048,
		1,0,0,0,8056,8055,1,0,0,0,8057,941,1,0,0,0,8058,8059,5,303,0,0,8059,943,
		1,0,0,0,8060,8064,5,303,0,0,8061,8062,5,503,0,0,8062,8064,5,504,0,0,8063,
		8060,1,0,0,0,8063,8061,1,0,0,0,8064,945,1,0,0,0,8065,8067,3,984,492,0,
		8066,8065,1,0,0,0,8066,8067,1,0,0,0,8067,8068,1,0,0,0,8068,8069,5,400,
		0,0,8069,8070,3,1076,538,0,8070,8071,5,364,0,0,8071,8073,3,948,474,0,8072,
		8074,3,1058,529,0,8073,8072,1,0,0,0,8073,8074,1,0,0,0,8074,8076,1,0,0,
		0,8075,8077,3,1094,547,0,8076,8075,1,0,0,0,8076,8077,1,0,0,0,8077,8079,
		1,0,0,0,8078,8080,3,922,461,0,8079,8078,1,0,0,0,8079,8080,1,0,0,0,8080,
		947,1,0,0,0,8081,8086,3,950,475,0,8082,8083,5,6,0,0,8083,8085,3,950,475,
		0,8084,8082,1,0,0,0,8085,8088,1,0,0,0,8086,8084,1,0,0,0,8086,8087,1,0,
		0,0,8087,949,1,0,0,0,8088,8086,1,0,0,0,8089,8090,3,952,476,0,8090,8091,
		5,10,0,0,8091,8092,3,1162,581,0,8092,8100,1,0,0,0,8093,8094,5,2,0,0,8094,
		8095,3,954,477,0,8095,8096,5,3,0,0,8096,8097,5,10,0,0,8097,8098,3,1162,
		581,0,8098,8100,1,0,0,0,8099,8089,1,0,0,0,8099,8093,1,0,0,0,8100,951,1,
		0,0,0,8101,8102,3,1414,707,0,8102,8103,3,1326,663,0,8103,953,1,0,0,0,8104,
		8109,3,952,476,0,8105,8106,5,6,0,0,8106,8108,3,952,476,0,8107,8105,1,0,
		0,0,8108,8111,1,0,0,0,8109,8107,1,0,0,0,8109,8110,1,0,0,0,8110,955,1,0,
		0,0,8111,8109,1,0,0,0,8112,8113,5,216,0,0,8113,8114,3,958,479,0,8114,8115,
		3,960,480,0,8115,8117,5,210,0,0,8116,8118,3,962,481,0,8117,8116,1,0,0,
		0,8117,8118,1,0,0,0,8118,8119,1,0,0,0,8119,8120,5,100,0,0,8120,8121,3,
		964,482,0,8121,957,1,0,0,0,8122,8123,3,1382,691,0,8123,959,1,0,0,0,8124,
		8125,5,300,0,0,8125,8130,5,355,0,0,8126,8130,5,355,0,0,8127,8130,5,145,
		0,0,8128,8130,5,269,0,0,8129,8124,1,0,0,0,8129,8126,1,0,0,0,8129,8127,
		1,0,0,0,8129,8128,1,0,0,0,8130,8133,1,0,0,0,8131,8129,1,0,0,0,8131,8132,
		1,0,0,0,8132,961,1,0,0,0,8133,8131,1,0,0,0,8134,8135,5,143,0,0,8135,8139,
		5,255,0,0,8136,8137,5,410,0,0,8137,8139,5,255,0,0,8138,8134,1,0,0,0,8138,
		8136,1,0,0,0,8139,963,1,0,0,0,8140,8143,3,968,484,0,8141,8143,3,966,483,
		0,8142,8140,1,0,0,0,8142,8141,1,0,0,0,8143,965,1,0,0,0,8144,8145,5,2,0,
		0,8145,8146,3,968,484,0,8146,8147,5,3,0,0,8147,8153,1,0,0,0,8148,8149,
		5,2,0,0,8149,8150,3,966,483,0,8150,8151,5,3,0,0,8151,8153,1,0,0,0,8152,
		8144,1,0,0,0,8152,8148,1,0,0,0,8153,967,1,0,0,0,8154,8156,3,970,485,0,
		8155,8157,3,1000,500,0,8156,8155,1,0,0,0,8156,8157,1,0,0,0,8157,8166,1,
		0,0,0,8158,8160,3,1044,522,0,8159,8161,3,1010,505,0,8160,8159,1,0,0,0,
		8160,8161,1,0,0,0,8161,8167,1,0,0,0,8162,8164,3,1008,504,0,8163,8165,3,
		1046,523,0,8164,8163,1,0,0,0,8164,8165,1,0,0,0,8165,8167,1,0,0,0,8166,
		8158,1,0,0,0,8166,8162,1,0,0,0,8166,8167,1,0,0,0,8167,8184,1,0,0,0,8168,
		8169,3,976,488,0,8169,8171,3,970,485,0,8170,8172,3,1000,500,0,8171,8170,
		1,0,0,0,8171,8172,1,0,0,0,8172,8181,1,0,0,0,8173,8175,3,1044,522,0,8174,
		8176,3,1010,505,0,8175,8174,1,0,0,0,8175,8176,1,0,0,0,8176,8182,1,0,0,
		0,8177,8179,3,1008,504,0,8178,8180,3,1046,523,0,8179,8178,1,0,0,0,8179,
		8180,1,0,0,0,8180,8182,1,0,0,0,8181,8173,1,0,0,0,8181,8177,1,0,0,0,8181,
		8182,1,0,0,0,8182,8184,1,0,0,0,8183,8154,1,0,0,0,8183,8168,1,0,0,0,8184,
		969,1,0,0,0,8185,8193,3,972,486,0,8186,8188,7,39,0,0,8187,8189,3,994,497,
		0,8188,8187,1,0,0,0,8188,8189,1,0,0,0,8189,8190,1,0,0,0,8190,8192,3,972,
		486,0,8191,8186,1,0,0,0,8192,8195,1,0,0,0,8193,8191,1,0,0,0,8193,8194,
		1,0,0,0,8194,971,1,0,0,0,8195,8193,1,0,0,0,8196,8204,3,974,487,0,8197,
		8199,5,108,0,0,8198,8200,3,994,497,0,8199,8198,1,0,0,0,8199,8200,1,0,0,
		0,8200,8201,1,0,0,0,8201,8203,3,974,487,0,8202,8197,1,0,0,0,8203,8206,
		1,0,0,0,8204,8202,1,0,0,0,8204,8205,1,0,0,0,8205,973,1,0,0,0,8206,8204,
		1,0,0,0,8207,8252,5,126,0,0,8208,8210,3,998,499,0,8209,8208,1,0,0,0,8209,
		8210,1,0,0,0,8210,8212,1,0,0,0,8211,8213,3,1370,685,0,8212,8211,1,0,0,
		0,8212,8213,1,0,0,0,8213,8215,1,0,0,0,8214,8216,3,986,493,0,8215,8214,
		1,0,0,0,8215,8216,1,0,0,0,8216,8218,1,0,0,0,8217,8219,3,1058,529,0,8218,
		8217,1,0,0,0,8218,8219,1,0,0,0,8219,8221,1,0,0,0,8220,8222,3,1092,546,
		0,8221,8220,1,0,0,0,8221,8222,1,0,0,0,8222,8224,1,0,0,0,8223,8225,3,1028,
		514,0,8224,8223,1,0,0,0,8224,8225,1,0,0,0,8225,8227,1,0,0,0,8226,8228,
		3,1042,521,0,8227,8226,1,0,0,0,8227,8228,1,0,0,0,8228,8230,1,0,0,0,8229,
		8231,3,1240,620,0,8230,8229,1,0,0,0,8230,8231,1,0,0,0,8231,8253,1,0,0,
		0,8232,8233,3,996,498,0,8233,8235,3,1372,686,0,8234,8236,3,986,493,0,8235,
		8234,1,0,0,0,8235,8236,1,0,0,0,8236,8238,1,0,0,0,8237,8239,3,1058,529,
		0,8238,8237,1,0,0,0,8238,8239,1,0,0,0,8239,8241,1,0,0,0,8240,8242,3,1092,
		546,0,8241,8240,1,0,0,0,8241,8242,1,0,0,0,8242,8244,1,0,0,0,8243,8245,
		3,1028,514,0,8244,8243,1,0,0,0,8244,8245,1,0,0,0,8245,8247,1,0,0,0,8246,
		8248,3,1042,521,0,8247,8246,1,0,0,0,8247,8248,1,0,0,0,8248,8250,1,0,0,
		0,8249,8251,3,1240,620,0,8250,8249,1,0,0,0,8250,8251,1,0,0,0,8251,8253,
		1,0,0,0,8252,8209,1,0,0,0,8252,8232,1,0,0,0,8253,8259,1,0,0,0,8254,8259,
		3,1056,528,0,8255,8256,5,130,0,0,8256,8259,3,1072,536,0,8257,8259,3,966,
		483,0,8258,8207,1,0,0,0,8258,8254,1,0,0,0,8258,8255,1,0,0,0,8258,8257,
		1,0,0,0,8259,975,1,0,0,0,8260,8262,5,143,0,0,8261,8263,5,334,0,0,8262,
		8261,1,0,0,0,8262,8263,1,0,0,0,8263,8264,1,0,0,0,8264,8265,3,978,489,0,
		8265,977,1,0,0,0,8266,8271,3,980,490,0,8267,8268,5,6,0,0,8268,8270,3,980,
		490,0,8269,8267,1,0,0,0,8270,8273,1,0,0,0,8271,8269,1,0,0,0,8271,8272,
		1,0,0,0,8272,979,1,0,0,0,8273,8271,1,0,0,0,8274,8276,3,1382,691,0,8275,
		8277,3,874,437,0,8276,8275,1,0,0,0,8276,8277,1,0,0,0,8277,8278,1,0,0,0,
		8278,8280,5,74,0,0,8279,8281,3,982,491,0,8280,8279,1,0,0,0,8280,8281,1,
		0,0,0,8281,8282,1,0,0,0,8282,8283,5,2,0,0,8283,8284,3,898,449,0,8284,8285,
		5,3,0,0,8285,981,1,0,0,0,8286,8290,5,289,0,0,8287,8288,5,115,0,0,8288,
		8290,5,289,0,0,8289,8286,1,0,0,0,8289,8287,1,0,0,0,8290,983,1,0,0,0,8291,
		8292,3,976,488,0,8292,985,1,0,0,0,8293,8294,5,109,0,0,8294,8295,3,990,
		495,0,8295,987,1,0,0,0,8296,8297,5,377,0,0,8297,989,1,0,0,0,8298,8300,
		7,40,0,0,8299,8298,1,0,0,0,8299,8300,1,0,0,0,8300,8301,1,0,0,0,8301,8303,
		7,12,0,0,8302,8304,3,992,496,0,8303,8302,1,0,0,0,8303,8304,1,0,0,0,8304,
		8305,1,0,0,0,8305,8315,3,1378,689,0,8306,8308,5,398,0,0,8307,8309,3,992,
		496,0,8308,8307,1,0,0,0,8308,8309,1,0,0,0,8309,8310,1,0,0,0,8310,8315,
		3,1378,689,0,8311,8312,5,130,0,0,8312,8315,3,1378,689,0,8313,8315,3,1378,
		689,0,8314,8299,1,0,0,0,8314,8306,1,0,0,0,8314,8311,1,0,0,0,8314,8313,
		1,0,0,0,8315,991,1,0,0,0,8316,8317,5,130,0,0,8317,993,1,0,0,0,8318,8319,
		7,41,0,0,8319,995,1,0,0,0,8320,8326,5,94,0,0,8321,8322,5,118,0,0,8322,
		8323,5,2,0,0,8323,8324,3,1280,640,0,8324,8325,5,3,0,0,8325,8327,1,0,0,
		0,8326,8321,1,0,0,0,8326,8327,1,0,0,0,8327,997,1,0,0,0,8328,8329,5,68,
		0,0,8329,999,1,0,0,0,8330,8331,3,1002,501,0,8331,1001,1,0,0,0,8332,8333,
		5,121,0,0,8333,8334,5,185,0,0,8334,8335,3,1004,502,0,8335,1003,1,0,0,0,
		8336,8341,3,1006,503,0,8337,8338,5,6,0,0,8338,8340,3,1006,503,0,8339,8337,
		1,0,0,0,8340,8343,1,0,0,0,8341,8339,1,0,0,0,8341,8342,1,0,0,0,8342,1005,
		1,0,0,0,8343,8341,1,0,0,0,8344,8350,3,1162,581,0,8345,8346,5,138,0,0,8346,
		8351,3,1276,638,0,8347,8349,3,610,305,0,8348,8347,1,0,0,0,8348,8349,1,
		0,0,0,8349,8351,1,0,0,0,8350,8345,1,0,0,0,8350,8348,1,0,0,0,8351,8353,
		1,0,0,0,8352,8354,3,612,306,0,8353,8352,1,0,0,0,8353,8354,1,0,0,0,8354,
		1007,1,0,0,0,8355,8357,3,1012,506,0,8356,8358,3,1014,507,0,8357,8356,1,
		0,0,0,8357,8358,1,0,0,0,8358,8364,1,0,0,0,8359,8361,3,1014,507,0,8360,
		8362,3,1012,506,0,8361,8360,1,0,0,0,8361,8362,1,0,0,0,8362,8364,1,0,0,
		0,8363,8355,1,0,0,0,8363,8359,1,0,0,0,8364,1009,1,0,0,0,8365,8366,3,1008,
		504,0,8366,1011,1,0,0,0,8367,8368,5,112,0,0,8368,8371,3,1016,508,0,8369,
		8370,5,6,0,0,8370,8372,3,1018,509,0,8371,8369,1,0,0,0,8371,8372,1,0,0,
		0,8372,8391,1,0,0,0,8373,8374,5,99,0,0,8374,8388,3,1026,513,0,8375,8376,
		3,1020,510,0,8376,8380,3,1024,512,0,8377,8381,5,119,0,0,8378,8379,5,143,
		0,0,8379,8381,5,505,0,0,8380,8377,1,0,0,0,8380,8378,1,0,0,0,8381,8389,
		1,0,0,0,8382,8386,3,1024,512,0,8383,8387,5,119,0,0,8384,8385,5,143,0,0,
		8385,8387,5,505,0,0,8386,8383,1,0,0,0,8386,8384,1,0,0,0,8387,8389,1,0,
		0,0,8388,8375,1,0,0,0,8388,8382,1,0,0,0,8389,8391,1,0,0,0,8390,8367,1,
		0,0,0,8390,8373,1,0,0,0,8391,1013,1,0,0,0,8392,8397,5,117,0,0,8393,8398,
		3,1018,509,0,8394,8395,3,1020,510,0,8395,8396,3,1024,512,0,8396,8398,1,
		0,0,0,8397,8393,1,0,0,0,8397,8394,1,0,0,0,8398,1015,1,0,0,0,8399,8402,
		3,1162,581,0,8400,8402,5,68,0,0,8401,8399,1,0,0,0,8401,8400,1,0,0,0,8402,
		1017,1,0,0,0,8403,8404,3,1162,581,0,8404,1019,1,0,0,0,8405,8411,3,1206,
		603,0,8406,8407,5,12,0,0,8407,8411,3,1022,511,0,8408,8409,5,13,0,0,8409,
		8411,3,1022,511,0,8410,8405,1,0,0,0,8410,8406,1,0,0,0,8410,8408,1,0,0,
		0,8411,1021,1,0,0,0,8412,8415,3,1398,699,0,8413,8415,3,1396,698,0,8414,
		8412,1,0,0,0,8414,8413,1,0,0,0,8415,1023,1,0,0,0,8416,8417,7,42,0,0,8417,
		1025,1,0,0,0,8418,8419,7,43,0,0,8419,1027,1,0,0,0,8420,8421,5,104,0,0,
		8421,8422,5,185,0,0,8422,8423,3,1030,515,0,8423,1029,1,0,0,0,8424,8429,
		3,1032,516,0,8425,8426,5,6,0,0,8426,8428,3,1032,516,0,8427,8425,1,0,0,
		0,8428,8431,1,0,0,0,8429,8427,1,0,0,0,8429,8430,1,0,0,0,8430,1031,1,0,
		0,0,8431,8429,1,0,0,0,8432,8438,3,1034,517,0,8433,8438,3,1038,519,0,8434,
		8438,3,1036,518,0,8435,8438,3,1040,520,0,8436,8438,3,1162,581,0,8437,8432,
		1,0,0,0,8437,8433,1,0,0,0,8437,8434,1,0,0,0,8437,8435,1,0,0,0,8437,8436,
		1,0,0,0,8438,1033,1,0,0,0,8439,8440,5,2,0,0,8440,8441,5,3,0,0,8441,1035,
		1,0,0,0,8442,8443,5,506,0,0,8443,8444,5,2,0,0,8444,8445,3,1280,640,0,8445,
		8446,5,3,0,0,8446,1037,1,0,0,0,8447,8448,5,507,0,0,8448,8449,5,2,0,0,8449,
		8450,3,1280,640,0,8450,8451,5,3,0,0,8451,1039,1,0,0,0,8452,8453,5,508,
		0,0,8453,8454,5,509,0,0,8454,8455,5,2,0,0,8455,8456,3,1030,515,0,8456,
		8457,5,3,0,0,8457,1041,1,0,0,0,8458,8459,5,105,0,0,8459,8460,3,1162,581,
		0,8460,1043,1,0,0,0,8461,8466,3,1048,524,0,8462,8463,5,100,0,0,8463,8464,
		5,331,0,0,8464,8466,5,119,0,0,8465,8461,1,0,0,0,8465,8462,1,0,0,0,8466,
		1045,1,0,0,0,8467,8468,3,1044,522,0,8468,1047,1,0,0,0,8469,8471,3,1050,
		525,0,8470,8469,1,0,0,0,8471,8472,1,0,0,0,8472,8470,1,0,0,0,8472,8473,
		1,0,0,0,8473,1049,1,0,0,0,8474,8476,3,1052,526,0,8475,8477,3,1054,527,
		0,8476,8475,1,0,0,0,8476,8477,1,0,0,0,8477,8479,1,0,0,0,8478,8480,3,944,
		472,0,8479,8478,1,0,0,0,8479,8480,1,0,0,0,8480,1051,1,0,0,0,8481,8491,
		5,100,0,0,8482,8483,5,300,0,0,8483,8485,5,274,0,0,8484,8482,1,0,0,0,8484,
		8485,1,0,0,0,8485,8486,1,0,0,0,8486,8492,5,400,0,0,8487,8489,5,274,0,0,
		8488,8487,1,0,0,0,8488,8489,1,0,0,0,8489,8490,1,0,0,0,8490,8492,5,365,
		0,0,8491,8484,1,0,0,0,8491,8488,1,0,0,0,8492,1053,1,0,0,0,8493,8494,5,
		306,0,0,8494,8495,3,1376,688,0,8495,1055,1,0,0,0,8496,8497,5,453,0,0,8497,
		8498,5,2,0,0,8498,8499,3,1280,640,0,8499,8507,5,3,0,0,8500,8501,5,6,0,
		0,8501,8502,5,2,0,0,8502,8503,3,1280,640,0,8503,8504,5,3,0,0,8504,8506,
		1,0,0,0,8505,8500,1,0,0,0,8506,8509,1,0,0,0,8507,8505,1,0,0,0,8507,8508,
		1,0,0,0,8508,1057,1,0,0,0,8509,8507,1,0,0,0,8510,8511,5,102,0,0,8511,8512,
		3,1060,530,0,8512,1059,1,0,0,0,8513,8518,3,1062,531,0,8514,8515,5,6,0,
		0,8515,8517,3,1062,531,0,8516,8514,1,0,0,0,8517,8520,1,0,0,0,8518,8516,
		1,0,0,0,8518,8519,1,0,0,0,8519,1061,1,0,0,0,8520,8518,1,0,0,0,8521,8523,
		3,1072,536,0,8522,8524,3,1064,532,0,8523,8522,1,0,0,0,8523,8524,1,0,0,
		0,8524,8526,1,0,0,0,8525,8527,3,1078,539,0,8526,8525,1,0,0,0,8526,8527,
		1,0,0,0,8527,8580,1,0,0,0,8528,8530,3,1082,541,0,8529,8531,3,1066,533,
		0,8530,8529,1,0,0,0,8530,8531,1,0,0,0,8531,8580,1,0,0,0,8532,8534,3,1102,
		551,0,8533,8535,3,1064,532,0,8534,8533,1,0,0,0,8534,8535,1,0,0,0,8535,
		8580,1,0,0,0,8536,8538,3,966,483,0,8537,8539,3,1064,532,0,8538,8537,1,
		0,0,0,8538,8539,1,0,0,0,8539,8580,1,0,0,0,8540,8553,5,110,0,0,8541,8543,
		3,1102,551,0,8542,8544,3,1064,532,0,8543,8542,1,0,0,0,8543,8544,1,0,0,
		0,8544,8554,1,0,0,0,8545,8547,3,1082,541,0,8546,8548,3,1066,533,0,8547,
		8546,1,0,0,0,8547,8548,1,0,0,0,8548,8554,1,0,0,0,8549,8551,3,966,483,0,
		8550,8552,3,1064,532,0,8551,8550,1,0,0,0,8551,8552,1,0,0,0,8552,8554,1,
		0,0,0,8553,8541,1,0,0,0,8553,8545,1,0,0,0,8553,8549,1,0,0,0,8554,8580,
		1,0,0,0,8555,8556,5,2,0,0,8556,8573,3,1062,531,0,8557,8558,5,148,0,0,8558,
		8559,5,156,0,0,8559,8574,3,1062,531,0,8560,8562,5,159,0,0,8561,8563,3,
		1068,534,0,8562,8561,1,0,0,0,8562,8563,1,0,0,0,8563,8564,1,0,0,0,8564,
		8565,5,156,0,0,8565,8574,3,1062,531,0,8566,8568,3,1068,534,0,8567,8566,
		1,0,0,0,8567,8568,1,0,0,0,8568,8569,1,0,0,0,8569,8570,5,156,0,0,8570,8571,
		3,1062,531,0,8571,8572,3,1070,535,0,8572,8574,1,0,0,0,8573,8557,1,0,0,
		0,8573,8560,1,0,0,0,8573,8567,1,0,0,0,8573,8574,1,0,0,0,8574,8575,1,0,
		0,0,8575,8577,5,3,0,0,8576,8578,3,1064,532,0,8577,8576,1,0,0,0,8577,8578,
		1,0,0,0,8578,8580,1,0,0,0,8579,8521,1,0,0,0,8579,8528,1,0,0,0,8579,8532,
		1,0,0,0,8579,8536,1,0,0,0,8579,8540,1,0,0,0,8579,8555,1,0,0,0,8580,8599,
		1,0,0,0,8581,8582,5,148,0,0,8582,8583,5,156,0,0,8583,8598,3,1062,531,0,
		8584,8586,5,159,0,0,8585,8587,3,1068,534,0,8586,8585,1,0,0,0,8586,8587,
		1,0,0,0,8587,8588,1,0,0,0,8588,8589,5,156,0,0,8589,8598,3,1062,531,0,8590,
		8592,3,1068,534,0,8591,8590,1,0,0,0,8591,8592,1,0,0,0,8592,8593,1,0,0,
		0,8593,8594,5,156,0,0,8594,8595,3,1062,531,0,8595,8596,3,1070,535,0,8596,
		8598,1,0,0,0,8597,8581,1,0,0,0,8597,8584,1,0,0,0,8597,8591,1,0,0,0,8598,
		8601,1,0,0,0,8599,8597,1,0,0,0,8599,8600,1,0,0,0,8600,1063,1,0,0,0,8601,
		8599,1,0,0,0,8602,8604,5,74,0,0,8603,8602,1,0,0,0,8603,8604,1,0,0,0,8604,
		8605,1,0,0,0,8605,8610,3,1414,707,0,8606,8607,5,2,0,0,8607,8608,3,1380,
		690,0,8608,8609,5,3,0,0,8609,8611,1,0,0,0,8610,8606,1,0,0,0,8610,8611,
		1,0,0,0,8611,1065,1,0,0,0,8612,8625,3,1064,532,0,8613,8615,5,74,0,0,8614,
		8616,3,1414,707,0,8615,8614,1,0,0,0,8615,8616,1,0,0,0,8616,8619,1,0,0,
		0,8617,8619,3,1414,707,0,8618,8613,1,0,0,0,8618,8617,1,0,0,0,8619,8620,
		1,0,0,0,8620,8621,5,2,0,0,8621,8622,3,1098,549,0,8622,8623,5,3,0,0,8623,
		8625,1,0,0,0,8624,8612,1,0,0,0,8624,8618,1,0,0,0,8625,1067,1,0,0,0,8626,
		8628,7,44,0,0,8627,8629,5,161,0,0,8628,8627,1,0,0,0,8628,8629,1,0,0,0,
		8629,1069,1,0,0,0,8630,8631,5,138,0,0,8631,8632,5,2,0,0,8632,8633,3,1380,
		690,0,8633,8634,5,3,0,0,8634,8638,1,0,0,0,8635,8636,5,118,0,0,8636,8638,
		3,1162,581,0,8637,8630,1,0,0,0,8637,8635,1,0,0,0,8638,1071,1,0,0,0,8639,
		8641,3,1378,689,0,8640,8642,5,9,0,0,8641,8640,1,0,0,0,8641,8642,1,0,0,
		0,8642,8652,1,0,0,0,8643,8649,5,119,0,0,8644,8650,3,1378,689,0,8645,8646,
		5,2,0,0,8646,8647,3,1378,689,0,8647,8648,5,3,0,0,8648,8650,1,0,0,0,8649,
		8644,1,0,0,0,8649,8645,1,0,0,0,8650,8652,1,0,0,0,8651,8639,1,0,0,0,8651,
		8643,1,0,0,0,8652,1073,1,0,0,0,8653,8658,3,1072,536,0,8654,8655,5,6,0,
		0,8655,8657,3,1072,536,0,8656,8654,1,0,0,0,8657,8660,1,0,0,0,8658,8656,
		1,0,0,0,8658,8659,1,0,0,0,8659,1075,1,0,0,0,8660,8658,1,0,0,0,8661,8666,
		3,1072,536,0,8662,8664,5,74,0,0,8663,8662,1,0,0,0,8663,8664,1,0,0,0,8664,
		8665,1,0,0,0,8665,8667,3,1414,707,0,8666,8663,1,0,0,0,8666,8667,1,0,0,
		0,8667,1077,1,0,0,0,8668,8669,5,510,0,0,8669,8670,3,1388,694,0,8670,8671,
		5,2,0,0,8671,8672,3,1280,640,0,8672,8674,5,3,0,0,8673,8675,3,1080,540,
		0,8674,8673,1,0,0,0,8674,8675,1,0,0,0,8675,1079,1,0,0,0,8676,8677,5,341,
		0,0,8677,8678,5,2,0,0,8678,8679,3,1162,581,0,8679,8680,5,3,0,0,8680,1081,
		1,0,0,0,8681,8683,3,1214,607,0,8682,8684,3,1090,545,0,8683,8682,1,0,0,
		0,8683,8684,1,0,0,0,8684,8694,1,0,0,0,8685,8686,5,351,0,0,8686,8687,5,
		102,0,0,8687,8688,5,2,0,0,8688,8689,3,1086,543,0,8689,8691,5,3,0,0,8690,
		8692,3,1090,545,0,8691,8690,1,0,0,0,8691,8692,1,0,0,0,8692,8694,1,0,0,
		0,8693,8681,1,0,0,0,8693,8685,1,0,0,0,8694,1083,1,0,0,0,8695,8697,3,1214,
		607,0,8696,8698,3,1088,544,0,8697,8696,1,0,0,0,8697,8698,1,0,0,0,8698,
		1085,1,0,0,0,8699,8704,3,1084,542,0,8700,8701,5,6,0,0,8701,8703,3,1084,
		542,0,8702,8700,1,0,0,0,8703,8706,1,0,0,0,8704,8702,1,0,0,0,8704,8705,
		1,0,0,0,8705,1087,1,0,0,0,8706,8704,1,0,0,0,8707,8708,5,74,0,0,8708,8709,
		5,2,0,0,8709,8710,3,1098,549,0,8710,8711,5,3,0,0,8711,1089,1,0,0,0,8712,
		8713,5,143,0,0,8713,8714,5,511,0,0,8714,1091,1,0,0,0,8715,8716,5,141,0,
		0,8716,8717,3,1162,581,0,8717,1093,1,0,0,0,8718,8723,5,141,0,0,8719,8720,
		5,472,0,0,8720,8721,5,306,0,0,8721,8724,3,958,479,0,8722,8724,3,1162,581,
		0,8723,8719,1,0,0,0,8723,8722,1,0,0,0,8724,1095,1,0,0,0,8725,8726,3,1098,
		549,0,8726,1097,1,0,0,0,8727,8732,3,1100,550,0,8728,8729,5,6,0,0,8729,
		8731,3,1100,550,0,8730,8728,1,0,0,0,8731,8734,1,0,0,0,8732,8730,1,0,0,
		0,8732,8733,1,0,0,0,8733,1099,1,0,0,0,8734,8732,1,0,0,0,8735,8736,3,1414,
		707,0,8736,8738,3,1116,558,0,8737,8739,3,106,53,0,8738,8737,1,0,0,0,8738,
		8739,1,0,0,0,8739,1101,1,0,0,0,8740,8741,5,512,0,0,8741,8757,5,2,0,0,8742,
		8743,3,1206,603,0,8743,8744,3,1232,616,0,8744,8745,5,513,0,0,8745,8746,
		3,1104,552,0,8746,8758,1,0,0,0,8747,8748,5,514,0,0,8748,8749,5,2,0,0,8749,
		8750,3,1112,556,0,8750,8751,5,3,0,0,8751,8752,5,6,0,0,8752,8753,3,1206,
		603,0,8753,8754,3,1232,616,0,8754,8755,5,513,0,0,8755,8756,3,1104,552,
		0,8756,8758,1,0,0,0,8757,8742,1,0,0,0,8757,8747,1,0,0,0,8758,8759,1,0,
		0,0,8759,8760,5,3,0,0,8760,1103,1,0,0,0,8761,8766,3,1106,553,0,8762,8763,
		5,6,0,0,8763,8765,3,1106,553,0,8764,8762,1,0,0,0,8765,8768,1,0,0,0,8766,
		8764,1,0,0,0,8766,8767,1,0,0,0,8767,1105,1,0,0,0,8768,8766,1,0,0,0,8769,
		8776,3,1414,707,0,8770,8772,3,1116,558,0,8771,8773,3,1108,554,0,8772,8771,
		1,0,0,0,8772,8773,1,0,0,0,8773,8777,1,0,0,0,8774,8775,5,100,0,0,8775,8777,
		5,511,0,0,8776,8770,1,0,0,0,8776,8774,1,0,0,0,8777,1107,1,0,0,0,8778,8780,
		3,1110,555,0,8779,8778,1,0,0,0,8780,8781,1,0,0,0,8781,8779,1,0,0,0,8781,
		8782,1,0,0,0,8782,1109,1,0,0,0,8783,8784,5,91,0,0,8784,8792,3,1162,581,
		0,8785,8786,3,1436,718,0,8786,8787,3,1162,581,0,8787,8792,1,0,0,0,8788,
		8789,5,115,0,0,8789,8792,5,116,0,0,8790,8792,5,116,0,0,8791,8783,1,0,0,
		0,8791,8785,1,0,0,0,8791,8788,1,0,0,0,8791,8790,1,0,0,0,8792,1111,1,0,
		0,0,8793,8798,3,1114,557,0,8794,8795,5,6,0,0,8795,8797,3,1114,557,0,8796,
		8794,1,0,0,0,8797,8800,1,0,0,0,8798,8796,1,0,0,0,8798,8799,1,0,0,0,8799,
		1113,1,0,0,0,8800,8798,1,0,0,0,8801,8802,3,1204,602,0,8802,8803,5,74,0,
		0,8803,8804,3,1420,710,0,8804,8808,1,0,0,0,8805,8806,5,91,0,0,8806,8808,
		3,1204,602,0,8807,8801,1,0,0,0,8807,8805,1,0,0,0,8808,1115,1,0,0,0,8809,
		8811,5,446,0,0,8810,8809,1,0,0,0,8810,8811,1,0,0,0,8811,8812,1,0,0,0,8812,
		8821,3,1120,560,0,8813,8822,3,1118,559,0,8814,8819,5,73,0,0,8815,8816,
		5,4,0,0,8816,8817,3,1398,699,0,8817,8818,5,5,0,0,8818,8820,1,0,0,0,8819,
		8815,1,0,0,0,8819,8820,1,0,0,0,8820,8822,1,0,0,0,8821,8813,1,0,0,0,8821,
		8814,1,0,0,0,8822,1117,1,0,0,0,8823,8825,5,4,0,0,8824,8826,3,1398,699,
		0,8825,8824,1,0,0,0,8825,8826,1,0,0,0,8826,8827,1,0,0,0,8827,8829,5,5,
		0,0,8828,8823,1,0,0,0,8829,8832,1,0,0,0,8830,8828,1,0,0,0,8830,8831,1,
		0,0,0,8831,1119,1,0,0,0,8832,8830,1,0,0,0,8833,8850,3,1124,562,0,8834,
		8850,3,1128,564,0,8835,8850,3,1132,566,0,8836,8850,3,1140,570,0,8837,8850,
		3,1148,574,0,8838,8846,3,1150,575,0,8839,8841,3,1154,577,0,8840,8839,1,
		0,0,0,8840,8841,1,0,0,0,8841,8847,1,0,0,0,8842,8843,5,2,0,0,8843,8844,
		3,1398,699,0,8844,8845,5,3,0,0,8845,8847,1,0,0,0,8846,8840,1,0,0,0,8846,
		8842,1,0,0,0,8847,8850,1,0,0,0,8848,8850,3,1158,579,0,8849,8833,1,0,0,
		0,8849,8834,1,0,0,0,8849,8835,1,0,0,0,8849,8836,1,0,0,0,8849,8837,1,0,
		0,0,8849,8838,1,0,0,0,8849,8848,1,0,0,0,8850,1121,1,0,0,0,8851,8857,3,
		1128,564,0,8852,8857,3,1134,567,0,8853,8857,3,1142,571,0,8854,8857,3,1148,
		574,0,8855,8857,3,1158,579,0,8856,8851,1,0,0,0,8856,8852,1,0,0,0,8856,
		8853,1,0,0,0,8856,8854,1,0,0,0,8856,8855,1,0,0,0,8857,1123,1,0,0,0,8858,
		8860,3,1416,708,0,8859,8861,3,522,261,0,8860,8859,1,0,0,0,8860,8861,1,
		0,0,0,8861,8863,1,0,0,0,8862,8864,3,1126,563,0,8863,8862,1,0,0,0,8863,
		8864,1,0,0,0,8864,1125,1,0,0,0,8865,8866,5,2,0,0,8866,8867,3,1280,640,
		0,8867,8868,5,3,0,0,8868,1127,1,0,0,0,8869,8894,5,432,0,0,8870,8894,5,
		433,0,0,8871,8894,5,447,0,0,8872,8894,5,419,0,0,8873,8894,5,444,0,0,8874,
		8876,5,429,0,0,8875,8877,3,1130,565,0,8876,8875,1,0,0,0,8876,8877,1,0,
		0,0,8877,8894,1,0,0,0,8878,8879,5,228,0,0,8879,8894,5,443,0,0,8880,8882,
		5,426,0,0,8881,8883,3,1126,563,0,8882,8881,1,0,0,0,8882,8883,1,0,0,0,8883,
		8894,1,0,0,0,8884,8886,5,425,0,0,8885,8887,3,1126,563,0,8886,8885,1,0,
		0,0,8886,8887,1,0,0,0,8887,8894,1,0,0,0,8888,8890,5,440,0,0,8889,8891,
		3,1126,563,0,8890,8889,1,0,0,0,8890,8891,1,0,0,0,8891,8894,1,0,0,0,8892,
		8894,5,421,0,0,8893,8869,1,0,0,0,8893,8870,1,0,0,0,8893,8871,1,0,0,0,8893,
		8872,1,0,0,0,8893,8873,1,0,0,0,8893,8874,1,0,0,0,8893,8878,1,0,0,0,8893,
		8880,1,0,0,0,8893,8884,1,0,0,0,8893,8888,1,0,0,0,8893,8892,1,0,0,0,8894,
		1129,1,0,0,0,8895,8896,5,2,0,0,8896,8897,3,1398,699,0,8897,8898,5,3,0,
		0,8898,1131,1,0,0,0,8899,8902,3,1136,568,0,8900,8902,3,1138,569,0,8901,
		8899,1,0,0,0,8901,8900,1,0,0,0,8902,1133,1,0,0,0,8903,8906,3,1136,568,
		0,8904,8906,3,1138,569,0,8905,8903,1,0,0,0,8905,8904,1,0,0,0,8906,1135,
		1,0,0,0,8907,8909,5,420,0,0,8908,8910,3,1146,573,0,8909,8908,1,0,0,0,8909,
		8910,1,0,0,0,8910,8911,1,0,0,0,8911,8912,5,2,0,0,8912,8913,3,1280,640,
		0,8913,8914,5,3,0,0,8914,1137,1,0,0,0,8915,8917,5,420,0,0,8916,8918,3,
		1146,573,0,8917,8916,1,0,0,0,8917,8918,1,0,0,0,8918,1139,1,0,0,0,8919,
		8924,3,1144,572,0,8920,8921,5,2,0,0,8921,8922,3,1398,699,0,8922,8923,5,
		3,0,0,8923,8925,1,0,0,0,8924,8920,1,0,0,0,8924,8925,1,0,0,0,8925,1141,
		1,0,0,0,8926,8931,3,1144,572,0,8927,8928,5,2,0,0,8928,8929,3,1398,699,
		0,8929,8930,5,3,0,0,8930,8932,1,0,0,0,8931,8927,1,0,0,0,8931,8932,1,0,
		0,0,8932,1143,1,0,0,0,8933,8935,7,45,0,0,8934,8936,3,1146,573,0,8935,8934,
		1,0,0,0,8935,8936,1,0,0,0,8936,8944,1,0,0,0,8937,8944,5,454,0,0,8938,8939,
		5,436,0,0,8939,8941,7,46,0,0,8940,8942,3,1146,573,0,8941,8940,1,0,0,0,
		8941,8942,1,0,0,0,8942,8944,1,0,0,0,8943,8933,1,0,0,0,8943,8937,1,0,0,
		0,8943,8938,1,0,0,0,8944,1145,1,0,0,0,8945,8946,5,405,0,0,8946,1147,1,
		0,0,0,8947,8952,7,47,0,0,8948,8949,5,2,0,0,8949,8950,3,1398,699,0,8950,
		8951,5,3,0,0,8951,8953,1,0,0,0,8952,8948,1,0,0,0,8952,8953,1,0,0,0,8953,
		8955,1,0,0,0,8954,8956,3,1152,576,0,8955,8954,1,0,0,0,8955,8956,1,0,0,
		0,8956,1149,1,0,0,0,8957,8958,5,434,0,0,8958,1151,1,0,0,0,8959,8960,5,
		143,0,0,8960,8961,5,449,0,0,8961,8966,5,417,0,0,8962,8963,5,410,0,0,8963,
		8964,5,449,0,0,8964,8966,5,417,0,0,8965,8959,1,0,0,0,8965,8962,1,0,0,0,
		8966,1153,1,0,0,0,8967,8993,5,415,0,0,8968,8993,5,295,0,0,8969,8993,5,
		214,0,0,8970,8993,5,256,0,0,8971,8993,5,292,0,0,8972,8993,3,1156,578,0,
		8973,8974,5,415,0,0,8974,8975,5,132,0,0,8975,8993,5,295,0,0,8976,8977,
		5,214,0,0,8977,8981,5,132,0,0,8978,8982,5,256,0,0,8979,8982,5,292,0,0,
		8980,8982,3,1156,578,0,8981,8978,1,0,0,0,8981,8979,1,0,0,0,8981,8980,1,
		0,0,0,8982,8993,1,0,0,0,8983,8984,5,256,0,0,8984,8987,5,132,0,0,8985,8988,
		5,292,0,0,8986,8988,3,1156,578,0,8987,8985,1,0,0,0,8987,8986,1,0,0,0,8988,
		8993,1,0,0,0,8989,8990,5,292,0,0,8990,8991,5,132,0,0,8991,8993,3,1156,
		578,0,8992,8967,1,0,0,0,8992,8968,1,0,0,0,8992,8969,1,0,0,0,8992,8970,
		1,0,0,0,8992,8971,1,0,0,0,8992,8972,1,0,0,0,8992,8973,1,0,0,0,8992,8976,
		1,0,0,0,8992,8983,1,0,0,0,8992,8989,1,0,0,0,8993,1155,1,0,0,0,8994,8999,
		5,357,0,0,8995,8996,5,2,0,0,8996,8997,3,1398,699,0,8997,8998,5,3,0,0,8998,
		9000,1,0,0,0,8999,8995,1,0,0,0,8999,9000,1,0,0,0,9000,1157,1,0,0,0,9001,
		9002,5,30,0,0,9002,1159,1,0,0,0,9003,9004,5,235,0,0,9004,9005,3,1162,581,
		0,9005,1161,1,0,0,0,9006,9007,3,1164,582,0,9007,1163,1,0,0,0,9008,9012,
		3,1166,583,0,9009,9010,4,582,0,0,9010,9013,3,1274,637,0,9011,9013,1,0,
		0,0,9012,9009,1,0,0,0,9012,9011,1,0,0,0,9013,1165,1,0,0,0,9014,9019,3,
		1168,584,0,9015,9016,7,48,0,0,9016,9018,3,1168,584,0,9017,9015,1,0,0,0,
		9018,9021,1,0,0,0,9019,9017,1,0,0,0,9019,9020,1,0,0,0,9020,1167,1,0,0,
		0,9021,9019,1,0,0,0,9022,9027,3,1170,585,0,9023,9024,5,120,0,0,9024,9026,
		3,1170,585,0,9025,9023,1,0,0,0,9026,9029,1,0,0,0,9027,9025,1,0,0,0,9027,
		9028,1,0,0,0,9028,1169,1,0,0,0,9029,9027,1,0,0,0,9030,9035,3,1172,586,
		0,9031,9032,5,71,0,0,9032,9034,3,1172,586,0,9033,9031,1,0,0,0,9034,9037,
		1,0,0,0,9035,9033,1,0,0,0,9035,9036,1,0,0,0,9036,1171,1,0,0,0,9037,9035,
		1,0,0,0,9038,9050,3,1174,587,0,9039,9041,5,115,0,0,9040,9039,1,0,0,0,9040,
		9041,1,0,0,0,9041,9042,1,0,0,0,9042,9044,5,418,0,0,9043,9045,5,129,0,0,
		9044,9043,1,0,0,0,9044,9045,1,0,0,0,9045,9046,1,0,0,0,9046,9047,3,1174,
		587,0,9047,9048,5,71,0,0,9048,9049,3,1174,587,0,9049,9051,1,0,0,0,9050,
		9040,1,0,0,0,9050,9051,1,0,0,0,9051,1173,1,0,0,0,9052,9058,3,1176,588,
		0,9053,9055,5,115,0,0,9054,9053,1,0,0,0,9054,9055,1,0,0,0,9055,9056,1,
		0,0,0,9056,9057,5,106,0,0,9057,9059,3,1306,653,0,9058,9054,1,0,0,0,9058,
		9059,1,0,0,0,9059,1175,1,0,0,0,9060,9062,5,115,0,0,9061,9060,1,0,0,0,9061,
		9062,1,0,0,0,9062,9063,1,0,0,0,9063,9064,3,1178,589,0,9064,1177,1,0,0,
		0,9065,9067,3,1180,590,0,9066,9068,7,49,0,0,9067,9066,1,0,0,0,9067,9068,
		1,0,0,0,9068,1179,1,0,0,0,9069,9093,3,1182,591,0,9070,9072,5,154,0,0,9071,
		9073,5,115,0,0,9072,9071,1,0,0,0,9072,9073,1,0,0,0,9073,9091,1,0,0,0,9074,
		9092,5,116,0,0,9075,9092,5,134,0,0,9076,9092,5,98,0,0,9077,9092,5,396,
		0,0,9078,9079,5,94,0,0,9079,9080,5,102,0,0,9080,9092,3,1162,581,0,9081,
		9082,5,306,0,0,9082,9083,5,2,0,0,9083,9084,3,1286,643,0,9084,9085,5,3,
		0,0,9085,9092,1,0,0,0,9086,9092,5,226,0,0,9087,9089,3,1296,648,0,9088,
		9087,1,0,0,0,9088,9089,1,0,0,0,9089,9090,1,0,0,0,9090,9092,5,516,0,0,9091,
		9074,1,0,0,0,9091,9075,1,0,0,0,9091,9076,1,0,0,0,9091,9077,1,0,0,0,9091,
		9078,1,0,0,0,9091,9081,1,0,0,0,9091,9086,1,0,0,0,9091,9088,1,0,0,0,9092,
		9094,1,0,0,0,9093,9070,1,0,0,0,9093,9094,1,0,0,0,9094,1181,1,0,0,0,9095,
		9107,3,1184,592,0,9096,9097,7,50,0,0,9097,9108,3,1184,592,0,9098,9099,
		3,1278,639,0,9099,9105,3,1268,634,0,9100,9106,3,966,483,0,9101,9102,5,
		2,0,0,9102,9103,3,1162,581,0,9103,9104,5,3,0,0,9104,9106,1,0,0,0,9105,
		9100,1,0,0,0,9105,9101,1,0,0,0,9106,9108,1,0,0,0,9107,9096,1,0,0,0,9107,
		9098,1,0,0,0,9107,9108,1,0,0,0,9108,1183,1,0,0,0,9109,9123,3,1186,593,
		0,9110,9112,5,115,0,0,9111,9110,1,0,0,0,9111,9112,1,0,0,0,9112,9117,1,
		0,0,0,9113,9118,5,158,0,0,9114,9118,5,152,0,0,9115,9116,5,165,0,0,9116,
		9118,5,132,0,0,9117,9113,1,0,0,0,9117,9114,1,0,0,0,9117,9115,1,0,0,0,9118,
		9119,1,0,0,0,9119,9121,3,1186,593,0,9120,9122,3,1160,580,0,9121,9120,1,
		0,0,0,9121,9122,1,0,0,0,9122,9124,1,0,0,0,9123,9111,1,0,0,0,9123,9124,
		1,0,0,0,9124,1185,1,0,0,0,9125,9131,3,1188,594,0,9126,9127,3,1274,637,
		0,9127,9128,3,1188,594,0,9128,9130,1,0,0,0,9129,9126,1,0,0,0,9130,9133,
		1,0,0,0,9131,9129,1,0,0,0,9131,9132,1,0,0,0,9132,1187,1,0,0,0,9133,9131,
		1,0,0,0,9134,9136,3,1274,637,0,9135,9134,1,0,0,0,9135,9136,1,0,0,0,9136,
		9137,1,0,0,0,9137,9138,3,1190,595,0,9138,1189,1,0,0,0,9139,9144,3,1192,
		596,0,9140,9141,7,51,0,0,9141,9143,3,1192,596,0,9142,9140,1,0,0,0,9143,
		9146,1,0,0,0,9144,9142,1,0,0,0,9144,9145,1,0,0,0,9145,1191,1,0,0,0,9146,
		9144,1,0,0,0,9147,9152,3,1194,597,0,9148,9149,7,52,0,0,9149,9151,3,1194,
		597,0,9150,9148,1,0,0,0,9151,9154,1,0,0,0,9152,9150,1,0,0,0,9152,9153,
		1,0,0,0,9153,1193,1,0,0,0,9154,9152,1,0,0,0,9155,9158,3,1196,598,0,9156,
		9157,5,15,0,0,9157,9159,3,1196,598,0,9158,9156,1,0,0,0,9158,9159,1,0,0,
		0,9159,1195,1,0,0,0,9160,9162,7,51,0,0,9161,9160,1,0,0,0,9161,9162,1,0,
		0,0,9162,9163,1,0,0,0,9163,9164,3,1198,599,0,9164,1197,1,0,0,0,9165,9170,
		3,1200,600,0,9166,9167,5,180,0,0,9167,9168,5,449,0,0,9168,9169,5,417,0,
		0,9169,9171,3,1162,581,0,9170,9166,1,0,0,0,9170,9171,1,0,0,0,9171,1199,
		1,0,0,0,9172,9175,3,1202,601,0,9173,9174,5,81,0,0,9174,9176,3,520,260,
		0,9175,9173,1,0,0,0,9175,9176,1,0,0,0,9176,1201,1,0,0,0,9177,9182,3,1206,
		603,0,9178,9179,5,26,0,0,9179,9181,3,1116,558,0,9180,9178,1,0,0,0,9181,
		9184,1,0,0,0,9182,9180,1,0,0,0,9182,9183,1,0,0,0,9183,1203,1,0,0,0,9184,
		9182,1,0,0,0,9185,9186,6,602,-1,0,9186,9193,3,1206,603,0,9187,9188,7,51,
		0,0,9188,9193,3,1204,602,9,9189,9190,3,1274,637,0,9190,9191,3,1204,602,
		3,9191,9193,1,0,0,0,9192,9185,1,0,0,0,9192,9187,1,0,0,0,9192,9189,1,0,
		0,0,9193,9233,1,0,0,0,9194,9195,10,8,0,0,9195,9196,5,15,0,0,9196,9232,
		3,1204,602,9,9197,9198,10,7,0,0,9198,9199,7,52,0,0,9199,9232,3,1204,602,
		8,9200,9201,10,6,0,0,9201,9202,7,51,0,0,9202,9232,3,1204,602,7,9203,9204,
		10,5,0,0,9204,9205,3,1274,637,0,9205,9206,3,1204,602,6,9206,9232,1,0,0,
		0,9207,9208,10,4,0,0,9208,9209,7,50,0,0,9209,9232,3,1204,602,5,9210,9211,
		10,10,0,0,9211,9212,5,26,0,0,9212,9232,3,1116,558,0,9213,9214,10,2,0,0,
		9214,9232,3,1274,637,0,9215,9216,10,1,0,0,9216,9218,5,154,0,0,9217,9219,
		5,115,0,0,9218,9217,1,0,0,0,9218,9219,1,0,0,0,9219,9229,1,0,0,0,9220,9221,
		5,94,0,0,9221,9222,5,102,0,0,9222,9230,3,1204,602,0,9223,9224,5,306,0,
		0,9224,9225,5,2,0,0,9225,9226,3,1286,643,0,9226,9227,5,3,0,0,9227,9230,
		1,0,0,0,9228,9230,5,226,0,0,9229,9220,1,0,0,0,9229,9223,1,0,0,0,9229,9228,
		1,0,0,0,9230,9232,1,0,0,0,9231,9194,1,0,0,0,9231,9197,1,0,0,0,9231,9200,
		1,0,0,0,9231,9203,1,0,0,0,9231,9207,1,0,0,0,9231,9210,1,0,0,0,9231,9213,
		1,0,0,0,9231,9215,1,0,0,0,9232,9235,1,0,0,0,9233,9231,1,0,0,0,9233,9234,
		1,0,0,0,9234,1205,1,0,0,0,9235,9233,1,0,0,0,9236,9237,5,427,0,0,9237,9273,
		3,966,483,0,9238,9241,5,73,0,0,9239,9242,3,966,483,0,9240,9242,3,1288,
		644,0,9241,9239,1,0,0,0,9241,9240,1,0,0,0,9242,9273,1,0,0,0,9243,9244,
		5,28,0,0,9244,9273,3,1326,663,0,9245,9246,5,508,0,0,9246,9247,5,2,0,0,
		9247,9248,3,1280,640,0,9248,9249,5,3,0,0,9249,9273,1,0,0,0,9250,9251,5,
		136,0,0,9251,9273,3,966,483,0,9252,9273,3,1318,659,0,9253,9273,3,1390,
		695,0,9254,9255,5,2,0,0,9255,9256,3,1162,581,0,9256,9257,5,3,0,0,9257,
		9258,3,1326,663,0,9258,9273,1,0,0,0,9259,9273,3,1308,654,0,9260,9273,3,
		1212,606,0,9261,9263,3,966,483,0,9262,9264,3,1324,662,0,9263,9262,1,0,
		0,0,9263,9264,1,0,0,0,9264,9273,1,0,0,0,9265,9273,3,1264,632,0,9266,9273,
		3,1266,633,0,9267,9268,3,1262,631,0,9268,9269,5,163,0,0,9269,9270,3,1262,
		631,0,9270,9273,1,0,0,0,9271,9273,5,91,0,0,9272,9236,1,0,0,0,9272,9238,
		1,0,0,0,9272,9243,1,0,0,0,9272,9245,1,0,0,0,9272,9250,1,0,0,0,9272,9252,
		1,0,0,0,9272,9253,1,0,0,0,9272,9254,1,0,0,0,9272,9259,1,0,0,0,9272,9260,
		1,0,0,0,9272,9261,1,0,0,0,9272,9265,1,0,0,0,9272,9266,1,0,0,0,9272,9267,
		1,0,0,0,9272,9271,1,0,0,0,9273,1207,1,0,0,0,9274,9275,5,582,0,0,9275,1209,
		1,0,0,0,9276,9277,3,1388,694,0,9277,9299,5,2,0,0,9278,9282,3,1282,641,
		0,9279,9280,5,6,0,0,9280,9281,5,139,0,0,9281,9283,3,1284,642,0,9282,9279,
		1,0,0,0,9282,9283,1,0,0,0,9283,9285,1,0,0,0,9284,9286,3,1000,500,0,9285,
		9284,1,0,0,0,9285,9286,1,0,0,0,9286,9300,1,0,0,0,9287,9288,5,139,0,0,9288,
		9290,3,1284,642,0,9289,9291,3,1000,500,0,9290,9289,1,0,0,0,9290,9291,1,
		0,0,0,9291,9300,1,0,0,0,9292,9293,7,41,0,0,9293,9295,3,1282,641,0,9294,
		9296,3,1000,500,0,9295,9294,1,0,0,0,9295,9296,1,0,0,0,9296,9300,1,0,0,
		0,9297,9300,5,9,0,0,9298,9300,1,0,0,0,9299,9278,1,0,0,0,9299,9287,1,0,
		0,0,9299,9292,1,0,0,0,9299,9297,1,0,0,0,9299,9298,1,0,0,0,9300,9301,1,
		0,0,0,9301,9302,5,3,0,0,9302,1211,1,0,0,0,9303,9305,3,1210,605,0,9304,
		9306,3,1236,618,0,9305,9304,1,0,0,0,9305,9306,1,0,0,0,9306,9308,1,0,0,
		0,9307,9309,3,1238,619,0,9308,9307,1,0,0,0,9308,9309,1,0,0,0,9309,9311,
		1,0,0,0,9310,9312,3,1246,623,0,9311,9310,1,0,0,0,9311,9312,1,0,0,0,9312,
		9315,1,0,0,0,9313,9315,3,1216,608,0,9314,9303,1,0,0,0,9314,9313,1,0,0,
		0,9315,1213,1,0,0,0,9316,9319,3,1210,605,0,9317,9319,3,1216,608,0,9318,
		9316,1,0,0,0,9318,9317,1,0,0,0,9319,1215,1,0,0,0,9320,9321,5,146,0,0,9321,
		9322,5,100,0,0,9322,9323,5,2,0,0,9323,9324,3,1162,581,0,9324,9325,5,3,
		0,0,9325,9627,1,0,0,0,9326,9627,5,86,0,0,9327,9332,5,88,0,0,9328,9329,
		5,2,0,0,9329,9330,3,1398,699,0,9330,9331,5,3,0,0,9331,9333,1,0,0,0,9332,
		9328,1,0,0,0,9332,9333,1,0,0,0,9333,9627,1,0,0,0,9334,9339,5,89,0,0,9335,
		9336,5,2,0,0,9336,9337,3,1398,699,0,9337,9338,5,3,0,0,9338,9340,1,0,0,
		0,9339,9335,1,0,0,0,9339,9340,1,0,0,0,9340,9627,1,0,0,0,9341,9346,5,113,
		0,0,9342,9343,5,2,0,0,9343,9344,3,1398,699,0,9344,9345,5,3,0,0,9345,9347,
		1,0,0,0,9346,9342,1,0,0,0,9346,9347,1,0,0,0,9347,9627,1,0,0,0,9348,9353,
		5,114,0,0,9349,9350,5,2,0,0,9350,9351,3,1398,699,0,9351,9352,5,3,0,0,9352,
		9354,1,0,0,0,9353,9349,1,0,0,0,9353,9354,1,0,0,0,9354,9627,1,0,0,0,9355,
		9627,5,87,0,0,9356,9627,5,90,0,0,9357,9627,5,127,0,0,9358,9627,5,42,0,
		0,9359,9627,5,137,0,0,9360,9627,5,85,0,0,9361,9627,5,149,0,0,9362,9363,
		5,79,0,0,9363,9364,5,2,0,0,9364,9365,3,1162,581,0,9365,9366,5,74,0,0,9366,
		9367,3,1116,558,0,9367,9368,5,3,0,0,9368,9627,1,0,0,0,9369,9370,5,428,
		0,0,9370,9372,5,2,0,0,9371,9373,3,1292,646,0,9372,9371,1,0,0,0,9372,9373,
		1,0,0,0,9373,9374,1,0,0,0,9374,9627,5,3,0,0,9375,9376,5,527,0,0,9376,9377,
		5,2,0,0,9377,9380,3,1162,581,0,9378,9379,5,6,0,0,9379,9381,3,1296,648,
		0,9380,9378,1,0,0,0,9380,9381,1,0,0,0,9381,9382,1,0,0,0,9382,9383,5,3,
		0,0,9383,9627,1,0,0,0,9384,9385,5,441,0,0,9385,9390,5,2,0,0,9386,9391,
		3,1298,649,0,9387,9389,3,1282,641,0,9388,9387,1,0,0,0,9388,9389,1,0,0,
		0,9389,9391,1,0,0,0,9390,9386,1,0,0,0,9390,9388,1,0,0,0,9391,9392,1,0,
		0,0,9392,9627,5,3,0,0,9393,9394,5,442,0,0,9394,9396,5,2,0,0,9395,9397,
		3,1300,650,0,9396,9395,1,0,0,0,9396,9397,1,0,0,0,9397,9398,1,0,0,0,9398,
		9627,5,3,0,0,9399,9400,5,448,0,0,9400,9405,5,2,0,0,9401,9406,3,1302,651,
		0,9402,9404,3,1282,641,0,9403,9402,1,0,0,0,9403,9404,1,0,0,0,9404,9406,
		1,0,0,0,9405,9401,1,0,0,0,9405,9403,1,0,0,0,9406,9407,1,0,0,0,9407,9627,
		5,3,0,0,9408,9409,5,451,0,0,9409,9410,5,2,0,0,9410,9411,3,1162,581,0,9411,
		9412,5,74,0,0,9412,9413,3,1116,558,0,9413,9414,5,3,0,0,9414,9627,1,0,0,
		0,9415,9416,5,452,0,0,9416,9418,5,2,0,0,9417,9419,7,53,0,0,9418,9417,1,
		0,0,0,9418,9419,1,0,0,0,9419,9420,1,0,0,0,9420,9421,3,1304,652,0,9421,
		9422,5,3,0,0,9422,9627,1,0,0,0,9423,9424,5,439,0,0,9424,9425,5,2,0,0,9425,
		9426,3,1162,581,0,9426,9427,5,6,0,0,9427,9428,3,1162,581,0,9428,9429,5,
		3,0,0,9429,9627,1,0,0,0,9430,9431,5,424,0,0,9431,9432,5,2,0,0,9432,9433,
		3,1280,640,0,9433,9434,5,3,0,0,9434,9627,1,0,0,0,9435,9436,5,430,0,0,9436,
		9437,5,2,0,0,9437,9438,3,1280,640,0,9438,9439,5,3,0,0,9439,9627,1,0,0,
		0,9440,9441,5,435,0,0,9441,9442,5,2,0,0,9442,9443,3,1280,640,0,9443,9444,
		5,3,0,0,9444,9627,1,0,0,0,9445,9446,5,463,0,0,9446,9447,5,2,0,0,9447,9448,
		3,1280,640,0,9448,9449,5,3,0,0,9449,9627,1,0,0,0,9450,9451,5,464,0,0,9451,
		9452,5,2,0,0,9452,9453,5,297,0,0,9453,9459,3,1420,710,0,9454,9457,5,6,
		0,0,9455,9458,3,1222,611,0,9456,9458,3,1280,640,0,9457,9455,1,0,0,0,9457,
		9456,1,0,0,0,9458,9460,1,0,0,0,9459,9454,1,0,0,0,9459,9460,1,0,0,0,9460,
		9461,1,0,0,0,9461,9462,5,3,0,0,9462,9627,1,0,0,0,9463,9464,5,465,0,0,9464,
		9465,5,2,0,0,9465,9466,3,1206,603,0,9466,9467,3,1232,616,0,9467,9468,5,
		3,0,0,9468,9627,1,0,0,0,9469,9470,5,466,0,0,9470,9471,5,2,0,0,9471,9472,
		3,1224,612,0,9472,9473,5,3,0,0,9473,9627,1,0,0,0,9474,9475,5,467,0,0,9475,
		9476,5,2,0,0,9476,9477,3,1228,614,0,9477,9479,3,1162,581,0,9478,9480,3,
		1230,615,0,9479,9478,1,0,0,0,9479,9480,1,0,0,0,9480,9481,1,0,0,0,9481,
		9482,5,3,0,0,9482,9627,1,0,0,0,9483,9484,5,468,0,0,9484,9485,5,2,0,0,9485,
		9486,5,297,0,0,9486,9489,3,1420,710,0,9487,9488,5,6,0,0,9488,9490,3,1162,
		581,0,9489,9487,1,0,0,0,9489,9490,1,0,0,0,9490,9491,1,0,0,0,9491,9492,
		5,3,0,0,9492,9627,1,0,0,0,9493,9494,5,469,0,0,9494,9495,5,2,0,0,9495,9496,
		5,414,0,0,9496,9497,3,1162,581,0,9497,9498,5,6,0,0,9498,9500,3,1218,609,
		0,9499,9501,3,1220,610,0,9500,9499,1,0,0,0,9500,9501,1,0,0,0,9501,9502,
		1,0,0,0,9502,9503,5,3,0,0,9503,9627,1,0,0,0,9504,9505,5,470,0,0,9505,9506,
		5,2,0,0,9506,9507,3,1228,614,0,9507,9508,3,1162,581,0,9508,9509,5,74,0,
		0,9509,9510,3,1120,560,0,9510,9511,5,3,0,0,9511,9627,1,0,0,0,9512,9513,
		5,34,0,0,9513,9528,5,2,0,0,9514,9529,3,1282,641,0,9515,9517,3,1356,678,
		0,9516,9518,3,1360,680,0,9517,9516,1,0,0,0,9517,9518,1,0,0,0,9518,9520,
		1,0,0,0,9519,9521,3,1354,677,0,9520,9519,1,0,0,0,9520,9521,1,0,0,0,9521,
		9523,1,0,0,0,9522,9524,3,1350,675,0,9523,9522,1,0,0,0,9523,9524,1,0,0,
		0,9524,9529,1,0,0,0,9525,9527,3,1350,675,0,9526,9525,1,0,0,0,9526,9527,
		1,0,0,0,9527,9529,1,0,0,0,9528,9514,1,0,0,0,9528,9515,1,0,0,0,9528,9526,
		1,0,0,0,9529,9530,1,0,0,0,9530,9627,5,3,0,0,9531,9532,5,31,0,0,9532,9550,
		5,2,0,0,9533,9535,3,1364,682,0,9534,9536,3,1362,681,0,9535,9534,1,0,0,
		0,9535,9536,1,0,0,0,9536,9538,1,0,0,0,9537,9539,3,1350,675,0,9538,9537,
		1,0,0,0,9538,9539,1,0,0,0,9539,9551,1,0,0,0,9540,9542,3,968,484,0,9541,
		9543,3,1346,673,0,9542,9541,1,0,0,0,9542,9543,1,0,0,0,9543,9545,1,0,0,
		0,9544,9546,3,1350,675,0,9545,9544,1,0,0,0,9545,9546,1,0,0,0,9546,9551,
		1,0,0,0,9547,9549,3,1350,675,0,9548,9547,1,0,0,0,9548,9549,1,0,0,0,9549,
		9551,1,0,0,0,9550,9533,1,0,0,0,9550,9540,1,0,0,0,9550,9548,1,0,0,0,9551,
		9552,1,0,0,0,9552,9627,5,3,0,0,9553,9554,5,30,0,0,9554,9555,5,2,0,0,9555,
		9557,3,1344,672,0,9556,9558,3,1354,677,0,9557,9556,1,0,0,0,9557,9558,1,
		0,0,0,9558,9559,1,0,0,0,9559,9560,5,3,0,0,9560,9627,1,0,0,0,9561,9562,
		5,37,0,0,9562,9563,5,2,0,0,9563,9564,3,1162,581,0,9564,9565,5,3,0,0,9565,
		9627,1,0,0,0,9566,9567,5,38,0,0,9567,9568,5,2,0,0,9568,9570,3,1344,672,
		0,9569,9571,3,1350,675,0,9570,9569,1,0,0,0,9570,9571,1,0,0,0,9571,9572,
		1,0,0,0,9572,9573,5,3,0,0,9573,9627,1,0,0,0,9574,9575,5,41,0,0,9575,9576,
		5,2,0,0,9576,9627,5,3,0,0,9577,9578,5,36,0,0,9578,9579,5,2,0,0,9579,9580,
		3,1344,672,0,9580,9581,5,6,0,0,9581,9583,3,1162,581,0,9582,9584,3,1328,
		664,0,9583,9582,1,0,0,0,9583,9584,1,0,0,0,9584,9586,1,0,0,0,9585,9587,
		3,1350,675,0,9586,9585,1,0,0,0,9586,9587,1,0,0,0,9587,9588,1,0,0,0,9588,
		9590,3,1334,667,0,9589,9591,3,1348,674,0,9590,9589,1,0,0,0,9590,9591,1,
		0,0,0,9591,9593,1,0,0,0,9592,9594,3,1340,670,0,9593,9592,1,0,0,0,9593,
		9594,1,0,0,0,9594,9595,1,0,0,0,9595,9596,5,3,0,0,9596,9627,1,0,0,0,9597,
		9598,5,33,0,0,9598,9599,5,2,0,0,9599,9600,3,1344,672,0,9600,9601,5,6,0,
		0,9601,9603,3,1162,581,0,9602,9604,3,1328,664,0,9603,9602,1,0,0,0,9603,
		9604,1,0,0,0,9604,9606,1,0,0,0,9605,9607,3,1342,671,0,9606,9605,1,0,0,
		0,9606,9607,1,0,0,0,9607,9608,1,0,0,0,9608,9609,5,3,0,0,9609,9627,1,0,
		0,0,9610,9611,5,40,0,0,9611,9612,5,2,0,0,9612,9613,3,1344,672,0,9613,9614,
		5,6,0,0,9614,9616,3,1162,581,0,9615,9617,3,1328,664,0,9616,9615,1,0,0,
		0,9616,9617,1,0,0,0,9617,9619,1,0,0,0,9618,9620,3,1350,675,0,9619,9618,
		1,0,0,0,9619,9620,1,0,0,0,9620,9622,1,0,0,0,9621,9623,3,1340,670,0,9622,
		9621,1,0,0,0,9622,9623,1,0,0,0,9623,9624,1,0,0,0,9624,9625,5,3,0,0,9625,
		9627,1,0,0,0,9626,9320,1,0,0,0,9626,9326,1,0,0,0,9626,9327,1,0,0,0,9626,
		9334,1,0,0,0,9626,9341,1,0,0,0,9626,9348,1,0,0,0,9626,9355,1,0,0,0,9626,
		9356,1,0,0,0,9626,9357,1,0,0,0,9626,9358,1,0,0,0,9626,9359,1,0,0,0,9626,
		9360,1,0,0,0,9626,9361,1,0,0,0,9626,9362,1,0,0,0,9626,9369,1,0,0,0,9626,
		9375,1,0,0,0,9626,9384,1,0,0,0,9626,9393,1,0,0,0,9626,9399,1,0,0,0,9626,
		9408,1,0,0,0,9626,9415,1,0,0,0,9626,9423,1,0,0,0,9626,9430,1,0,0,0,9626,
		9435,1,0,0,0,9626,9440,1,0,0,0,9626,9445,1,0,0,0,9626,9450,1,0,0,0,9626,
		9463,1,0,0,0,9626,9469,1,0,0,0,9626,9474,1,0,0,0,9626,9483,1,0,0,0,9626,
		9493,1,0,0,0,9626,9504,1,0,0,0,9626,9512,1,0,0,0,9626,9531,1,0,0,0,9626,
		9553,1,0,0,0,9626,9561,1,0,0,0,9626,9566,1,0,0,0,9626,9574,1,0,0,0,9626,
		9577,1,0,0,0,9626,9597,1,0,0,0,9626,9610,1,0,0,0,9627,1217,1,0,0,0,9628,
		9629,5,406,0,0,9629,9634,3,1162,581,0,9630,9631,5,406,0,0,9631,9632,5,
		300,0,0,9632,9634,5,488,0,0,9633,9628,1,0,0,0,9633,9630,1,0,0,0,9634,1219,
		1,0,0,0,9635,9636,5,6,0,0,9636,9637,5,370,0,0,9637,9646,5,416,0,0,9638,
		9639,5,6,0,0,9639,9640,5,370,0,0,9640,9646,5,300,0,0,9641,9642,5,6,0,0,
		9642,9643,5,370,0,0,9643,9644,5,300,0,0,9644,9646,5,488,0,0,9645,9635,
		1,0,0,0,9645,9638,1,0,0,0,9645,9641,1,0,0,0,9646,1221,1,0,0,0,9647,9648,
		5,455,0,0,9648,9649,5,2,0,0,9649,9650,3,1224,612,0,9650,9651,5,3,0,0,9651,
		1223,1,0,0,0,9652,9657,3,1226,613,0,9653,9654,5,6,0,0,9654,9656,3,1226,
		613,0,9655,9653,1,0,0,0,9656,9659,1,0,0,0,9657,9655,1,0,0,0,9657,9658,
		1,0,0,0,9658,1225,1,0,0,0,9659,9657,1,0,0,0,9660,9663,3,1162,581,0,9661,
		9662,5,74,0,0,9662,9664,3,1420,710,0,9663,9661,1,0,0,0,9663,9664,1,0,0,
		0,9664,1227,1,0,0,0,9665,9666,7,54,0,0,9666,1229,1,0,0,0,9667,9668,5,323,
		0,0,9668,9672,5,409,0,0,9669,9670,5,378,0,0,9670,9672,5,409,0,0,9671,9667,
		1,0,0,0,9671,9669,1,0,0,0,9672,1231,1,0,0,0,9673,9674,5,317,0,0,9674,9689,
		3,1206,603,0,9675,9676,5,317,0,0,9676,9677,3,1206,603,0,9677,9678,3,1234,
		617,0,9678,9689,1,0,0,0,9679,9680,5,317,0,0,9680,9681,3,1234,617,0,9681,
		9682,3,1206,603,0,9682,9689,1,0,0,0,9683,9684,5,317,0,0,9684,9685,3,1234,
		617,0,9685,9686,3,1206,603,0,9686,9687,3,1234,617,0,9687,9689,1,0,0,0,
		9688,9673,1,0,0,0,9688,9675,1,0,0,0,9688,9679,1,0,0,0,9688,9683,1,0,0,
		0,9689,1233,1,0,0,0,9690,9691,5,185,0,0,9691,9692,7,55,0,0,9692,1235,1,
		0,0,0,9693,9694,5,517,0,0,9694,9695,5,104,0,0,9695,9696,5,2,0,0,9696,9697,
		3,1002,501,0,9697,9698,5,3,0,0,9698,1237,1,0,0,0,9699,9700,5,518,0,0,9700,
		9701,5,2,0,0,9701,9702,5,141,0,0,9702,9703,3,1162,581,0,9703,9704,5,3,
		0,0,9704,1239,1,0,0,0,9705,9706,5,142,0,0,9706,9707,3,1242,621,0,9707,
		1241,1,0,0,0,9708,9713,3,1244,622,0,9709,9710,5,6,0,0,9710,9712,3,1244,
		622,0,9711,9709,1,0,0,0,9712,9715,1,0,0,0,9713,9711,1,0,0,0,9713,9714,
		1,0,0,0,9714,1243,1,0,0,0,9715,9713,1,0,0,0,9716,9717,3,1414,707,0,9717,
		9718,5,74,0,0,9718,9719,3,1248,624,0,9719,1245,1,0,0,0,9720,9723,5,162,
		0,0,9721,9724,3,1248,624,0,9722,9724,3,1414,707,0,9723,9721,1,0,0,0,9723,
		9722,1,0,0,0,9724,1247,1,0,0,0,9725,9727,5,2,0,0,9726,9728,3,1250,625,
		0,9727,9726,1,0,0,0,9727,9728,1,0,0,0,9728,9730,1,0,0,0,9729,9731,3,1252,
		626,0,9730,9729,1,0,0,0,9730,9731,1,0,0,0,9731,9733,1,0,0,0,9732,9734,
		3,1000,500,0,9733,9732,1,0,0,0,9733,9734,1,0,0,0,9734,9736,1,0,0,0,9735,
		9737,3,1254,627,0,9736,9735,1,0,0,0,9736,9737,1,0,0,0,9737,9738,1,0,0,
		0,9738,9739,5,3,0,0,9739,1249,1,0,0,0,9740,9741,3,1414,707,0,9741,1251,
		1,0,0,0,9742,9743,5,316,0,0,9743,9744,5,185,0,0,9744,9745,3,1280,640,0,
		9745,1253,1,0,0,0,9746,9747,5,330,0,0,9747,9749,3,1256,628,0,9748,9750,
		3,1260,630,0,9749,9748,1,0,0,0,9749,9750,1,0,0,0,9750,9762,1,0,0,0,9751,
		9752,5,351,0,0,9752,9754,3,1256,628,0,9753,9755,3,1260,630,0,9754,9753,
		1,0,0,0,9754,9755,1,0,0,0,9755,9762,1,0,0,0,9756,9757,5,519,0,0,9757,9759,
		3,1256,628,0,9758,9760,3,1260,630,0,9759,9758,1,0,0,0,9759,9760,1,0,0,
		0,9760,9762,1,0,0,0,9761,9746,1,0,0,0,9761,9751,1,0,0,0,9761,9756,1,0,
		0,0,9762,1255,1,0,0,0,9763,9770,3,1258,629,0,9764,9765,5,418,0,0,9765,
		9766,3,1258,629,0,9766,9767,5,71,0,0,9767,9768,3,1258,629,0,9768,9770,
		1,0,0,0,9769,9763,1,0,0,0,9769,9764,1,0,0,0,9770,1257,1,0,0,0,9771,9772,
		5,393,0,0,9772,9779,7,56,0,0,9773,9774,5,472,0,0,9774,9779,5,445,0,0,9775,
		9776,3,1162,581,0,9776,9777,7,56,0,0,9777,9779,1,0,0,0,9778,9771,1,0,0,
		0,9778,9773,1,0,0,0,9778,9775,1,0,0,0,9779,1259,1,0,0,0,9780,9787,5,237,
		0,0,9781,9782,5,472,0,0,9782,9788,5,445,0,0,9783,9788,5,104,0,0,9784,9788,
		5,505,0,0,9785,9786,5,300,0,0,9786,9788,5,520,0,0,9787,9781,1,0,0,0,9787,
		9783,1,0,0,0,9787,9784,1,0,0,0,9787,9785,1,0,0,0,9788,1261,1,0,0,0,9789,
		9790,5,445,0,0,9790,9792,5,2,0,0,9791,9793,3,1280,640,0,9792,9791,1,0,
		0,0,9792,9793,1,0,0,0,9793,9794,1,0,0,0,9794,9802,5,3,0,0,9795,9796,5,
		2,0,0,9796,9797,3,1280,640,0,9797,9798,5,6,0,0,9798,9799,3,1162,581,0,
		9799,9800,5,3,0,0,9800,9802,1,0,0,0,9801,9789,1,0,0,0,9801,9795,1,0,0,
		0,9802,1263,1,0,0,0,9803,9804,5,445,0,0,9804,9806,5,2,0,0,9805,9807,3,
		1280,640,0,9806,9805,1,0,0,0,9806,9807,1,0,0,0,9807,9808,1,0,0,0,9808,
		9809,5,3,0,0,9809,1265,1,0,0,0,9810,9811,5,2,0,0,9811,9812,3,1280,640,
		0,9812,9813,5,6,0,0,9813,9814,3,1162,581,0,9814,9815,5,3,0,0,9815,1267,
		1,0,0,0,9816,9817,7,57,0,0,9817,1269,1,0,0,0,9818,9821,5,29,0,0,9819,9821,
		3,1272,636,0,9820,9818,1,0,0,0,9820,9819,1,0,0,0,9821,1271,1,0,0,0,9822,
		9823,7,58,0,0,9823,1273,1,0,0,0,9824,9831,5,29,0,0,9825,9826,5,309,0,0,
		9826,9827,5,2,0,0,9827,9828,3,682,341,0,9828,9829,5,3,0,0,9829,9831,1,
		0,0,0,9830,9824,1,0,0,0,9830,9825,1,0,0,0,9831,1275,1,0,0,0,9832,9839,
		3,1270,635,0,9833,9834,5,309,0,0,9834,9835,5,2,0,0,9835,9836,3,682,341,
		0,9836,9837,5,3,0,0,9837,9839,1,0,0,0,9838,9832,1,0,0,0,9838,9833,1,0,
		0,0,9839,1277,1,0,0,0,9840,9853,3,1270,635,0,9841,9842,5,309,0,0,9842,
		9843,5,2,0,0,9843,9844,3,682,341,0,9844,9845,5,3,0,0,9845,9853,1,0,0,0,
		9846,9853,5,158,0,0,9847,9848,5,115,0,0,9848,9853,5,158,0,0,9849,9853,
		5,152,0,0,9850,9851,5,115,0,0,9851,9853,5,152,0,0,9852,9840,1,0,0,0,9852,
		9841,1,0,0,0,9852,9846,1,0,0,0,9852,9847,1,0,0,0,9852,9849,1,0,0,0,9852,
		9850,1,0,0,0,9853,1279,1,0,0,0,9854,9859,3,1162,581,0,9855,9856,5,6,0,
		0,9856,9858,3,1162,581,0,9857,9855,1,0,0,0,9858,9861,1,0,0,0,9859,9857,
		1,0,0,0,9859,9860,1,0,0,0,9860,1281,1,0,0,0,9861,9859,1,0,0,0,9862,9867,
		3,1284,642,0,9863,9864,5,6,0,0,9864,9866,3,1284,642,0,9865,9863,1,0,0,
		0,9866,9869,1,0,0,0,9867,9865,1,0,0,0,9867,9868,1,0,0,0,9868,1283,1,0,
		0,0,9869,9867,1,0,0,0,9870,9876,3,1162,581,0,9871,9872,3,634,317,0,9872,
		9873,7,59,0,0,9873,9874,3,1162,581,0,9874,9876,1,0,0,0,9875,9870,1,0,0,
		0,9875,9871,1,0,0,0,9876,1285,1,0,0,0,9877,9882,3,1116,558,0,9878,9879,
		5,6,0,0,9879,9881,3,1116,558,0,9880,9878,1,0,0,0,9881,9884,1,0,0,0,9882,
		9880,1,0,0,0,9882,9883,1,0,0,0,9883,1287,1,0,0,0,9884,9882,1,0,0,0,9885,
		9888,5,4,0,0,9886,9889,3,1280,640,0,9887,9889,3,1290,645,0,9888,9886,1,
		0,0,0,9888,9887,1,0,0,0,9888,9889,1,0,0,0,9889,9890,1,0,0,0,9890,9891,
		5,5,0,0,9891,1289,1,0,0,0,9892,9897,3,1288,644,0,9893,9894,5,6,0,0,9894,
		9896,3,1288,644,0,9895,9893,1,0,0,0,9896,9899,1,0,0,0,9897,9895,1,0,0,
		0,9897,9898,1,0,0,0,9898,1291,1,0,0,0,9899,9897,1,0,0,0,9900,9901,3,1294,
		647,0,9901,9902,5,102,0,0,9902,9903,3,1162,581,0,9903,1293,1,0,0,0,9904,
		9913,3,1436,718,0,9905,9913,5,415,0,0,9906,9913,5,295,0,0,9907,9913,5,
		214,0,0,9908,9913,5,256,0,0,9909,9913,5,292,0,0,9910,9913,5,357,0,0,9911,
		9913,3,1400,700,0,9912,9904,1,0,0,0,9912,9905,1,0,0,0,9912,9906,1,0,0,
		0,9912,9907,1,0,0,0,9912,9908,1,0,0,0,9912,9909,1,0,0,0,9912,9910,1,0,
		0,0,9912,9911,1,0,0,0,9913,1295,1,0,0,0,9914,9915,7,60,0,0,9915,1297,1,
		0,0,0,9916,9917,3,1162,581,0,9917,9918,5,122,0,0,9918,9919,3,1162,581,
		0,9919,9920,5,102,0,0,9920,9923,3,1162,581,0,9921,9922,5,100,0,0,9922,
		9924,3,1162,581,0,9923,9921,1,0,0,0,9923,9924,1,0,0,0,9924,1299,1,0,0,
		0,9925,9926,3,1204,602,0,9926,9927,5,106,0,0,9927,9928,3,1204,602,0,9928,
		1301,1,0,0,0,9929,9930,3,1162,581,0,9930,9931,5,102,0,0,9931,9932,3,1162,
		581,0,9932,9933,5,100,0,0,9933,9934,3,1162,581,0,9934,9956,1,0,0,0,9935,
		9936,3,1162,581,0,9936,9937,5,100,0,0,9937,9938,3,1162,581,0,9938,9939,
		5,102,0,0,9939,9940,3,1162,581,0,9940,9956,1,0,0,0,9941,9942,3,1162,581,
		0,9942,9943,5,102,0,0,9943,9944,3,1162,581,0,9944,9956,1,0,0,0,9945,9946,
		3,1162,581,0,9946,9947,5,100,0,0,9947,9948,3,1162,581,0,9948,9956,1,0,
		0,0,9949,9950,3,1162,581,0,9950,9951,5,165,0,0,9951,9952,3,1162,581,0,
		9952,9953,5,235,0,0,9953,9954,3,1162,581,0,9954,9956,1,0,0,0,9955,9929,
		1,0,0,0,9955,9935,1,0,0,0,9955,9941,1,0,0,0,9955,9945,1,0,0,0,9955,9949,
		1,0,0,0,9956,1303,1,0,0,0,9957,9958,3,1162,581,0,9958,9959,5,102,0,0,9959,
		9960,3,1280,640,0,9960,9965,1,0,0,0,9961,9962,5,102,0,0,9962,9965,3,1280,
		640,0,9963,9965,3,1280,640,0,9964,9957,1,0,0,0,9964,9961,1,0,0,0,9964,
		9963,1,0,0,0,9965,1305,1,0,0,0,9966,9972,3,966,483,0,9967,9968,5,2,0,0,
		9968,9969,3,1280,640,0,9969,9970,5,3,0,0,9970,9972,1,0,0,0,9971,9966,1,
		0,0,0,9971,9967,1,0,0,0,9972,1307,1,0,0,0,9973,9975,5,78,0,0,9974,9976,
		3,1316,658,0,9975,9974,1,0,0,0,9975,9976,1,0,0,0,9976,9977,1,0,0,0,9977,
		9979,3,1310,655,0,9978,9980,3,1314,657,0,9979,9978,1,0,0,0,9979,9980,1,
		0,0,0,9980,9981,1,0,0,0,9981,9982,5,492,0,0,9982,1309,1,0,0,0,9983,9985,
		3,1312,656,0,9984,9983,1,0,0,0,9985,9986,1,0,0,0,9986,9984,1,0,0,0,9986,
		9987,1,0,0,0,9987,1311,1,0,0,0,9988,9989,5,140,0,0,9989,9990,3,1162,581,
		0,9990,9991,5,131,0,0,9991,9992,3,1162,581,0,9992,1313,1,0,0,0,9993,9994,
		5,96,0,0,9994,9995,3,1162,581,0,9995,1315,1,0,0,0,9996,9997,3,1162,581,
		0,9997,1317,1,0,0,0,9998,10000,3,1414,707,0,9999,10001,3,1324,662,0,10000,
		9999,1,0,0,0,10000,10001,1,0,0,0,10001,1319,1,0,0,0,10002,10005,5,11,0,
		0,10003,10006,3,1384,692,0,10004,10006,5,9,0,0,10005,10003,1,0,0,0,10005,
		10004,1,0,0,0,10006,10020,1,0,0,0,10007,10016,5,4,0,0,10008,10017,3,1162,
		581,0,10009,10011,3,1322,661,0,10010,10009,1,0,0,0,10010,10011,1,0,0,0,
		10011,10012,1,0,0,0,10012,10014,5,8,0,0,10013,10015,3,1322,661,0,10014,
		10013,1,0,0,0,10014,10015,1,0,0,0,10015,10017,1,0,0,0,10016,10008,1,0,
		0,0,10016,10010,1,0,0,0,10017,10018,1,0,0,0,10018,10020,5,5,0,0,10019,
		10002,1,0,0,0,10019,10007,1,0,0,0,10020,1321,1,0,0,0,10021,10022,3,1162,
		581,0,10022,1323,1,0,0,0,10023,10025,3,1320,660,0,10024,10023,1,0,0,0,
		10025,10026,1,0,0,0,10026,10024,1,0,0,0,10026,10027,1,0,0,0,10027,1325,
		1,0,0,0,10028,10030,3,1320,660,0,10029,10028,1,0,0,0,10030,10033,1,0,0,
		0,10031,10029,1,0,0,0,10031,10032,1,0,0,0,10032,1327,1,0,0,0,10033,10031,
		1,0,0,0,10034,10035,5,317,0,0,10035,10036,3,1330,665,0,10036,1329,1,0,
		0,0,10037,10038,6,665,-1,0,10038,10039,3,1332,666,0,10039,10045,1,0,0,
		0,10040,10041,10,1,0,0,10041,10042,5,6,0,0,10042,10044,3,1332,666,0,10043,
		10040,1,0,0,0,10044,10047,1,0,0,0,10045,10043,1,0,0,0,10045,10046,1,0,
		0,0,10046,1331,1,0,0,0,10047,10045,1,0,0,0,10048,10049,3,1344,672,0,10049,
		10050,5,74,0,0,10050,10051,3,1420,710,0,10051,1333,1,0,0,0,10052,10053,
		5,410,0,0,10053,10078,5,412,0,0,10054,10055,5,410,0,0,10055,10056,5,73,
		0,0,10056,10078,5,412,0,0,10057,10058,5,143,0,0,10058,10078,5,412,0,0,
		10059,10060,5,143,0,0,10060,10061,5,73,0,0,10061,10078,5,412,0,0,10062,
		10063,5,143,0,0,10063,10064,5,48,0,0,10064,10065,5,73,0,0,10065,10078,
		5,412,0,0,10066,10067,5,143,0,0,10067,10068,5,65,0,0,10068,10069,5,73,
		0,0,10069,10078,5,412,0,0,10070,10071,5,143,0,0,10071,10072,5,48,0,0,10072,
		10078,5,412,0,0,10073,10074,5,143,0,0,10074,10075,5,65,0,0,10075,10078,
		5,412,0,0,10076,10078,1,0,0,0,10077,10052,1,0,0,0,10077,10054,1,0,0,0,
		10077,10057,1,0,0,0,10077,10059,1,0,0,0,10077,10062,1,0,0,0,10077,10066,
		1,0,0,0,10077,10070,1,0,0,0,10077,10073,1,0,0,0,10077,10076,1,0,0,0,10078,
		1335,1,0,0,0,10079,10080,5,91,0,0,10080,10083,3,1162,581,0,10081,10083,
		3,1338,669,0,10082,10079,1,0,0,0,10082,10081,1,0,0,0,10083,1337,1,0,0,
		0,10084,10095,5,529,0,0,10085,10095,5,116,0,0,10086,10095,5,134,0,0,10087,
		10095,5,98,0,0,10088,10095,5,396,0,0,10089,10090,5,50,0,0,10090,10095,
		5,73,0,0,10091,10092,5,50,0,0,10092,10095,5,305,0,0,10093,10095,5,50,0,
		0,10094,10084,1,0,0,0,10094,10085,1,0,0,0,10094,10086,1,0,0,0,10094,10087,
		1,0,0,0,10094,10088,1,0,0,0,10094,10089,1,0,0,0,10094,10091,1,0,0,0,10094,
		10093,1,0,0,0,10095,1339,1,0,0,0,10096,10097,3,1336,668,0,10097,10098,
		5,118,0,0,10098,10099,5,50,0,0,10099,10112,1,0,0,0,10100,10101,3,1336,
		668,0,10101,10102,5,118,0,0,10102,10103,5,529,0,0,10103,10112,1,0,0,0,
		10104,10105,3,1336,668,0,10105,10106,5,118,0,0,10106,10107,5,50,0,0,10107,
		10108,3,1336,668,0,10108,10109,5,118,0,0,10109,10110,5,529,0,0,10110,10112,
		1,0,0,0,10111,10096,1,0,0,0,10111,10100,1,0,0,0,10111,10104,1,0,0,0,10112,
		1341,1,0,0,0,10113,10114,3,1336,668,0,10114,10115,5,118,0,0,10115,10116,
		5,529,0,0,10116,1343,1,0,0,0,10117,10119,3,1162,581,0,10118,10120,3,1346,
		673,0,10119,10118,1,0,0,0,10119,10120,1,0,0,0,10120,1345,1,0,0,0,10121,
		10122,5,67,0,0,10122,10123,5,30,0,0,10123,10124,5,232,0,0,10124,10128,
		3,1382,691,0,10125,10126,5,67,0,0,10126,10128,5,30,0,0,10127,10121,1,0,
		0,0,10127,10125,1,0,0,0,10128,1347,1,0,0,0,10129,10130,5,53,0,0,10130,
		10131,5,60,0,0,10131,10132,5,118,0,0,10132,10133,5,61,0,0,10133,10144,
		5,63,0,0,10134,10135,5,53,0,0,10135,10144,5,60,0,0,10136,10137,5,56,0,
		0,10137,10138,5,60,0,0,10138,10139,5,118,0,0,10139,10140,5,61,0,0,10140,
		10144,5,63,0,0,10141,10142,5,56,0,0,10142,10144,5,60,0,0,10143,10129,1,
		0,0,0,10143,10134,1,0,0,0,10143,10136,1,0,0,0,10143,10141,1,0,0,0,10144,
		1349,1,0,0,0,10145,10146,5,125,0,0,10146,10148,3,1116,558,0,10147,10149,
		3,1346,673,0,10148,10147,1,0,0,0,10148,10149,1,0,0,0,10149,1351,1,0,0,
		0,10150,10160,5,30,0,0,10151,10152,5,30,0,0,10152,10160,5,488,0,0,10153,
		10154,5,30,0,0,10154,10160,5,73,0,0,10155,10156,5,30,0,0,10156,10160,5,
		305,0,0,10157,10158,5,30,0,0,10158,10160,5,61,0,0,10159,10150,1,0,0,0,
		10159,10151,1,0,0,0,10159,10153,1,0,0,0,10159,10155,1,0,0,0,10159,10157,
		1,0,0,0,10160,1353,1,0,0,0,10161,10162,5,143,0,0,10162,10163,5,136,0,0,
		10163,10172,5,54,0,0,10164,10165,5,143,0,0,10165,10172,5,136,0,0,10166,
		10167,5,410,0,0,10167,10168,5,136,0,0,10168,10172,5,54,0,0,10169,10170,
		5,410,0,0,10170,10172,5,136,0,0,10171,10161,1,0,0,0,10171,10164,1,0,0,
		0,10171,10166,1,0,0,0,10171,10169,1,0,0,0,10172,1355,1,0,0,0,10173,10174,
		6,678,-1,0,10174,10175,3,1358,679,0,10175,10181,1,0,0,0,10176,10177,10,
		1,0,0,10177,10178,5,6,0,0,10178,10180,3,1358,679,0,10179,10176,1,0,0,0,
		10180,10183,1,0,0,0,10181,10179,1,0,0,0,10181,10182,1,0,0,0,10182,1357,
		1,0,0,0,10183,10181,1,0,0,0,10184,10185,3,1206,603,0,10185,10186,5,488,
		0,0,10186,10187,3,1344,672,0,10187,10193,1,0,0,0,10188,10189,3,1162,581,
		0,10189,10190,5,8,0,0,10190,10191,3,1344,672,0,10191,10193,1,0,0,0,10192,
		10184,1,0,0,0,10192,10188,1,0,0,0,10193,1359,1,0,0,0,10194,10195,5,116,
		0,0,10195,10196,5,118,0,0,10196,10201,5,116,0,0,10197,10198,5,43,0,0,10198,
		10199,5,118,0,0,10199,10201,5,116,0,0,10200,10194,1,0,0,0,10200,10197,
		1,0,0,0,10201,1361,1,0,0,0,10202,10203,5,116,0,0,10203,10204,5,118,0,0,
		10204,10209,5,116,0,0,10205,10206,5,43,0,0,10206,10207,5,118,0,0,10207,
		10209,5,116,0,0,10208,10202,1,0,0,0,10208,10205,1,0,0,0,10209,1363,1,0,
		0,0,10210,10211,6,682,-1,0,10211,10212,3,1344,672,0,10212,10218,1,0,0,
		0,10213,10214,10,1,0,0,10214,10215,5,6,0,0,10215,10217,3,1344,672,0,10216,
		10213,1,0,0,0,10217,10220,1,0,0,0,10218,10216,1,0,0,0,10218,10219,1,0,
		0,0,10219,1365,1,0,0,0,10220,10218,1,0,0,0,10221,10222,5,35,0,0,10222,
		10223,5,2,0,0,10223,10225,3,1358,679,0,10224,10226,3,1360,680,0,10225,
		10224,1,0,0,0,10225,10226,1,0,0,0,10226,10228,1,0,0,0,10227,10229,3,1354,
		677,0,10228,10227,1,0,0,0,10228,10229,1,0,0,0,10229,10230,1,0,0,0,10230,
		10231,3,1350,675,0,10231,10232,5,3,0,0,10232,10246,1,0,0,0,10233,10234,
		5,32,0,0,10234,10235,5,2,0,0,10235,10237,3,1344,672,0,10236,10238,3,1368,
		684,0,10237,10236,1,0,0,0,10237,10238,1,0,0,0,10238,10240,1,0,0,0,10239,
		10241,3,1362,681,0,10240,10239,1,0,0,0,10240,10241,1,0,0,0,10241,10242,
		1,0,0,0,10242,10243,3,1350,675,0,10243,10244,5,3,0,0,10244,10246,1,0,0,
		0,10245,10221,1,0,0,0,10245,10233,1,0,0,0,10246,1367,1,0,0,0,10247,10248,
		5,121,0,0,10248,10249,5,185,0,0,10249,10250,3,1004,502,0,10250,1369,1,
		0,0,0,10251,10252,3,1372,686,0,10252,1371,1,0,0,0,10253,10258,3,1374,687,
		0,10254,10255,5,6,0,0,10255,10257,3,1374,687,0,10256,10254,1,0,0,0,10257,
		10260,1,0,0,0,10258,10256,1,0,0,0,10258,10259,1,0,0,0,10259,1373,1,0,0,
		0,10260,10258,1,0,0,0,10261,10266,3,1162,581,0,10262,10263,5,74,0,0,10263,
		10267,3,1420,710,0,10264,10267,3,1422,711,0,10265,10267,1,0,0,0,10266,
		10262,1,0,0,0,10266,10264,1,0,0,0,10266,10265,1,0,0,0,10267,10270,1,0,
		0,0,10268,10270,5,9,0,0,10269,10261,1,0,0,0,10269,10268,1,0,0,0,10270,
		1375,1,0,0,0,10271,10276,3,1378,689,0,10272,10273,5,6,0,0,10273,10275,
		3,1378,689,0,10274,10272,1,0,0,0,10275,10278,1,0,0,0,10276,10274,1,0,0,
		0,10276,10277,1,0,0,0,10277,1377,1,0,0,0,10278,10276,1,0,0,0,10279,10281,
		3,1414,707,0,10280,10282,3,1324,662,0,10281,10280,1,0,0,0,10281,10282,
		1,0,0,0,10282,1379,1,0,0,0,10283,10288,3,1382,691,0,10284,10285,5,6,0,
		0,10285,10287,3,1382,691,0,10286,10284,1,0,0,0,10287,10290,1,0,0,0,10288,
		10286,1,0,0,0,10288,10289,1,0,0,0,10289,1381,1,0,0,0,10290,10288,1,0,0,
		0,10291,10292,3,1414,707,0,10292,1383,1,0,0,0,10293,10294,3,1420,710,0,
		10294,1385,1,0,0,0,10295,10296,3,1400,700,0,10296,1387,1,0,0,0,10297,10302,
		3,1416,708,0,10298,10299,3,1414,707,0,10299,10300,3,1324,662,0,10300,10302,
		1,0,0,0,10301,10297,1,0,0,0,10301,10298,1,0,0,0,10302,1389,1,0,0,0,10303,
		10339,3,1398,699,0,10304,10339,3,1396,698,0,10305,10339,3,1400,700,0,10306,
		10339,3,1394,697,0,10307,10339,3,1392,696,0,10308,10318,3,1388,694,0,10309,
		10319,3,1400,700,0,10310,10311,5,2,0,0,10311,10313,3,1282,641,0,10312,
		10314,3,1000,500,0,10313,10312,1,0,0,0,10313,10314,1,0,0,0,10314,10315,
		1,0,0,0,10315,10316,5,3,0,0,10316,10317,3,1400,700,0,10317,10319,1,0,0,
		0,10318,10309,1,0,0,0,10318,10310,1,0,0,0,10319,10339,1,0,0,0,10320,10321,
		3,1122,561,0,10321,10322,3,1400,700,0,10322,10339,1,0,0,0,10323,10333,
		3,1150,575,0,10324,10326,3,1400,700,0,10325,10327,3,1154,577,0,10326,10325,
		1,0,0,0,10326,10327,1,0,0,0,10327,10334,1,0,0,0,10328,10329,5,2,0,0,10329,
		10330,3,1398,699,0,10330,10331,5,3,0,0,10331,10332,3,1400,700,0,10332,
		10334,1,0,0,0,10333,10324,1,0,0,0,10333,10328,1,0,0,0,10334,10339,1,0,
		0,0,10335,10339,5,134,0,0,10336,10339,5,98,0,0,10337,10339,5,116,0,0,10338,
		10303,1,0,0,0,10338,10304,1,0,0,0,10338,10305,1,0,0,0,10338,10306,1,0,
		0,0,10338,10307,1,0,0,0,10338,10308,1,0,0,0,10338,10320,1,0,0,0,10338,
		10323,1,0,0,0,10338,10335,1,0,0,0,10338,10336,1,0,0,0,10338,10337,1,0,
		0,0,10339,1391,1,0,0,0,10340,10341,5,572,0,0,10341,1393,1,0,0,0,10342,
		10343,5,568,0,0,10343,1395,1,0,0,0,10344,10345,5,581,0,0,10345,1397,1,
		0,0,0,10346,10347,7,61,0,0,10347,1399,1,0,0,0,10348,10350,3,1402,701,0,
		10349,10351,3,1404,702,0,10350,10349,1,0,0,0,10350,10351,1,0,0,0,10351,
		1401,1,0,0,0,10352,10364,5,563,0,0,10353,10364,5,565,0,0,10354,10358,5,
		567,0,0,10355,10357,5,596,0,0,10356,10355,1,0,0,0,10357,10360,1,0,0,0,
		10358,10356,1,0,0,0,10358,10359,1,0,0,0,10359,10361,1,0,0,0,10360,10358,
		1,0,0,0,10361,10364,5,597,0,0,10362,10364,5,590,0,0,10363,10352,1,0,0,
		0,10363,10353,1,0,0,0,10363,10354,1,0,0,0,10363,10362,1,0,0,0,10364,1403,
		1,0,0,0,10365,10366,5,525,0,0,10366,10367,3,1402,701,0,10367,1405,1,0,
		0,0,10368,10374,3,1398,699,0,10369,10370,5,12,0,0,10370,10374,3,1398,699,
		0,10371,10372,5,13,0,0,10372,10374,3,1398,699,0,10373,10368,1,0,0,0,10373,
		10369,1,0,0,0,10373,10371,1,0,0,0,10374,1407,1,0,0,0,10375,10376,3,1410,
		705,0,10376,1409,1,0,0,0,10377,10381,3,1418,709,0,10378,10381,5,90,0,0,
		10379,10381,5,127,0,0,10380,10377,1,0,0,0,10380,10378,1,0,0,0,10380,10379,
		1,0,0,0,10381,1411,1,0,0,0,10382,10387,3,1410,705,0,10383,10384,5,6,0,
		0,10384,10386,3,1410,705,0,10385,10383,1,0,0,0,10386,10389,1,0,0,0,10387,
		10385,1,0,0,0,10387,10388,1,0,0,0,10388,1413,1,0,0,0,10389,10387,1,0,0,
		0,10390,10394,3,1436,718,0,10391,10394,3,1424,712,0,10392,10394,3,1426,
		713,0,10393,10390,1,0,0,0,10393,10391,1,0,0,0,10393,10392,1,0,0,0,10394,
		1415,1,0,0,0,10395,10399,3,1436,718,0,10396,10399,3,1424,712,0,10397,10399,
		3,1428,714,0,10398,10395,1,0,0,0,10398,10396,1,0,0,0,10398,10397,1,0,0,
		0,10399,1417,1,0,0,0,10400,10405,3,1436,718,0,10401,10405,3,1424,712,0,
		10402,10405,3,1426,713,0,10403,10405,3,1428,714,0,10404,10400,1,0,0,0,
		10404,10401,1,0,0,0,10404,10402,1,0,0,0,10404,10403,1,0,0,0,10405,1419,
		1,0,0,0,10406,10413,3,1436,718,0,10407,10413,3,1424,712,0,10408,10413,
		3,1426,713,0,10409,10413,3,1428,714,0,10410,10413,3,1430,715,0,10411,10413,
		5,541,0,0,10412,10406,1,0,0,0,10412,10407,1,0,0,0,10412,10408,1,0,0,0,
		10412,10409,1,0,0,0,10412,10410,1,0,0,0,10412,10411,1,0,0,0,10413,1421,
		1,0,0,0,10414,10417,3,1436,718,0,10415,10417,3,1432,716,0,10416,10414,
		1,0,0,0,10416,10415,1,0,0,0,10417,1423,1,0,0,0,10418,10419,7,62,0,0,10419,
		1425,1,0,0,0,10420,10484,5,418,0,0,10421,10484,5,419,0,0,10422,10484,5,
		420,0,0,10423,10484,5,421,0,0,10424,10484,5,422,0,0,10425,10484,3,1140,
		570,0,10426,10484,5,424,0,0,10427,10484,5,425,0,0,10428,10484,5,426,0,
		0,10429,10484,5,427,0,0,10430,10484,5,428,0,0,10431,10484,5,429,0,0,10432,
		10484,5,430,0,0,10433,10484,5,508,0,0,10434,10484,5,431,0,0,10435,10484,
		5,432,0,0,10436,10484,5,433,0,0,10437,10484,5,434,0,0,10438,10484,5,30,
		0,0,10439,10484,5,31,0,0,10440,10484,5,32,0,0,10441,10484,5,33,0,0,10442,
		10484,5,34,0,0,10443,10484,5,35,0,0,10444,10484,5,36,0,0,10445,10484,5,
		37,0,0,10446,10484,5,38,0,0,10447,10484,5,39,0,0,10448,10484,5,40,0,0,
		10449,10484,5,435,0,0,10450,10484,5,41,0,0,10451,10484,5,436,0,0,10452,
		10484,5,437,0,0,10453,10484,5,438,0,0,10454,10484,5,527,0,0,10455,10484,
		5,439,0,0,10456,10484,5,440,0,0,10457,10484,5,491,0,0,10458,10484,5,441,
		0,0,10459,10484,5,442,0,0,10460,10484,5,443,0,0,10461,10484,5,444,0,0,
		10462,10484,5,445,0,0,10463,10484,5,446,0,0,10464,10484,5,447,0,0,10465,
		10484,5,448,0,0,10466,10484,5,449,0,0,10467,10484,5,450,0,0,10468,10484,
		5,451,0,0,10469,10484,5,452,0,0,10470,10484,5,453,0,0,10471,10484,5,454,
		0,0,10472,10484,5,455,0,0,10473,10484,5,463,0,0,10474,10484,5,464,0,0,
		10475,10484,5,465,0,0,10476,10484,5,466,0,0,10477,10484,5,514,0,0,10478,
		10484,5,467,0,0,10479,10484,5,468,0,0,10480,10484,5,469,0,0,10481,10484,
		5,470,0,0,10482,10484,5,512,0,0,10483,10420,1,0,0,0,10483,10421,1,0,0,
		0,10483,10422,1,0,0,0,10483,10423,1,0,0,0,10483,10424,1,0,0,0,10483,10425,
		1,0,0,0,10483,10426,1,0,0,0,10483,10427,1,0,0,0,10483,10428,1,0,0,0,10483,
		10429,1,0,0,0,10483,10430,1,0,0,0,10483,10431,1,0,0,0,10483,10432,1,0,
		0,0,10483,10433,1,0,0,0,10483,10434,1,0,0,0,10483,10435,1,0,0,0,10483,
		10436,1,0,0,0,10483,10437,1,0,0,0,10483,10438,1,0,0,0,10483,10439,1,0,
		0,0,10483,10440,1,0,0,0,10483,10441,1,0,0,0,10483,10442,1,0,0,0,10483,
		10443,1,0,0,0,10483,10444,1,0,0,0,10483,10445,1,0,0,0,10483,10446,1,0,
		0,0,10483,10447,1,0,0,0,10483,10448,1,0,0,0,10483,10449,1,0,0,0,10483,
		10450,1,0,0,0,10483,10451,1,0,0,0,10483,10452,1,0,0,0,10483,10453,1,0,
		0,0,10483,10454,1,0,0,0,10483,10455,1,0,0,0,10483,10456,1,0,0,0,10483,
		10457,1,0,0,0,10483,10458,1,0,0,0,10483,10459,1,0,0,0,10483,10460,1,0,
		0,0,10483,10461,1,0,0,0,10483,10462,1,0,0,0,10483,10463,1,0,0,0,10483,
		10464,1,0,0,0,10483,10465,1,0,0,0,10483,10466,1,0,0,0,10483,10467,1,0,
		0,0,10483,10468,1,0,0,0,10483,10469,1,0,0,0,10483,10470,1,0,0,0,10483,
		10471,1,0,0,0,10483,10472,1,0,0,0,10483,10473,1,0,0,0,10483,10474,1,0,
		0,0,10483,10475,1,0,0,0,10483,10476,1,0,0,0,10483,10477,1,0,0,0,10483,
		10478,1,0,0,0,10483,10479,1,0,0,0,10483,10480,1,0,0,0,10483,10481,1,0,
		0,0,10483,10482,1,0,0,0,10484,1427,1,0,0,0,10485,10486,7,63,0,0,10486,
		1429,1,0,0,0,10487,10488,7,64,0,0,10488,1431,1,0,0,0,10489,10490,7,65,
		0,0,10490,1433,1,0,0,0,10491,10492,3,1414,707,0,10492,1435,1,0,0,0,10493,
		10495,5,554,0,0,10494,10496,3,1404,702,0,10495,10494,1,0,0,0,10495,10496,
		1,0,0,0,10496,10501,1,0,0,0,10497,10501,5,555,0,0,10498,10501,5,559,0,
		0,10499,10501,5,582,0,0,10500,10493,1,0,0,0,10500,10497,1,0,0,0,10500,
		10498,1,0,0,0,10500,10499,1,0,0,0,10501,1437,1,0,0,0,1046,1444,1448,1452,
		1579,1588,1597,1603,1609,1624,1636,1642,1650,1661,1665,1673,1681,1699,
		1702,1707,1716,1725,1729,1741,1747,1763,1776,1783,1791,1796,1803,1809,
		1816,1827,1831,1835,1848,1852,1857,1862,1874,1883,1896,1901,1912,1918,
		1924,1929,1940,1946,1952,1961,1971,1986,1992,1999,2004,2011,2022,2046,
		2053,2062,2071,2079,2089,2098,2107,2115,2123,2132,2141,2145,2152,2160,
		2170,2176,2180,2184,2188,2192,2197,2200,2204,2225,2231,2326,2333,2349,
		2363,2373,2375,2380,2384,2387,2393,2395,2423,2433,2446,2453,2459,2463,
		2469,2474,2477,2479,2484,2488,2492,2496,2500,2503,2507,2515,2519,2523,
		2532,2539,2544,2551,2556,2563,2568,2586,2591,2603,2608,2617,2624,2631,
		2637,2642,2646,2649,2652,2655,2658,2661,2666,2669,2672,2675,2678,2681,
		2687,2691,2694,2697,2700,2703,2705,2714,2727,2735,2741,2745,2750,2757,
		2764,2775,2782,2785,2790,2793,2800,2809,2816,2821,2824,2827,2829,2834,
		2841,2851,2861,2874,2877,2880,2887,2895,2898,2901,2908,2912,2918,2921,
		2924,2927,2939,2942,2945,2949,2963,2981,2992,3007,3023,3044,3049,3052,
		3056,3059,3065,3068,3070,3079,3088,3107,3111,3122,3131,3137,3143,3147,
		3150,3153,3156,3159,3165,3169,3176,3182,3186,3189,3192,3195,3203,3207,
		3211,3217,3221,3227,3241,3250,3267,3272,3275,3277,3287,3294,3299,3302,
		3305,3312,3315,3317,3323,3332,3342,3347,3356,3365,3369,3376,3386,3397,
		3507,3515,3518,3528,3533,3543,3554,3566,3579,3589,3602,3605,3612,3621,
		3624,3631,3633,3641,3651,3653,3661,3665,3670,3681,3685,3690,3700,3706,
		3719,3725,3727,3734,3742,3747,3762,3775,3777,3781,3801,3818,3821,3824,
		3827,3830,3838,3841,3844,3890,3893,3896,3914,3921,3930,3936,3943,3953,
		3961,3966,3978,3995,4001,4008,4016,4030,4058,4065,4079,4094,4107,4116,
		4141,4152,4219,4230,4236,4244,4255,4269,4278,4288,4300,4315,4326,4334,
		4344,4351,4354,4360,4363,4378,4391,4420,4427,4442,4451,4462,4464,4473,
		4484,4486,4493,4508,4514,4522,4528,4536,4546,4552,4560,4566,4574,4581,
		4590,4592,4617,4624,4635,4641,4650,4655,4661,4668,4673,4677,4680,4686,
		4835,4839,4844,4855,4866,4877,4888,4899,4910,4921,4933,4944,4952,4959,
		4965,4973,4978,4983,4988,4994,5001,5007,5013,5018,5024,5031,5036,5042,
		5049,5052,5065,5074,5086,5088,5105,5112,5117,5121,5125,5129,5131,5191,
		5198,5204,5215,5218,5225,5228,5238,5241,5243,5262,5274,5283,5292,5304,
		5306,5312,5316,5319,5324,5330,5333,5336,5339,5343,5347,5356,5362,5365,
		5368,5371,5373,5391,5395,5398,5401,5404,5407,5412,5415,5417,5430,5442,
		5456,5460,5472,5474,5483,5492,5500,5509,5511,5515,5524,5529,5535,5540,
		5544,5549,5557,5564,5569,5584,5593,5604,5610,5649,5659,5666,5677,5691,
		5699,5704,5712,5720,5726,5734,5740,5748,5750,5756,5764,5766,5772,5780,
		5782,5806,5813,5823,5835,5840,5853,5865,5877,5879,5885,5890,5898,5905,
		5950,5955,5962,5966,5970,5976,5980,5985,5989,5992,5994,6016,6087,6282,
		6295,6306,6319,6331,6345,6377,6391,6503,6505,6516,6527,6538,6551,6563,
		6574,6581,6802,6817,6828,6835,6889,7030,7036,7039,7049,7078,7088,7095,
		7118,7127,7139,7145,7153,7155,7159,7169,7173,7183,7186,7190,7194,7202,
		7213,7225,7229,7232,7236,7239,7244,7248,7251,7255,7258,7262,7265,7276,
		7283,7296,7310,7314,7319,7326,7333,7336,7341,7344,7353,7355,7360,7364,
		7376,7379,7386,7390,7395,7405,7414,7417,7422,7433,7437,7443,7450,7470,
		7491,7495,7500,7583,7589,7602,7606,7610,7614,7620,7627,7630,7633,7636,
		7639,7646,7648,7652,7655,7662,7664,7671,7679,7686,7691,7695,7699,7703,
		7707,7723,7730,7740,7753,7764,7771,7776,7780,7784,7789,7802,7807,7811,
		7819,7822,7826,7837,7840,7842,7858,7861,7868,7871,7876,7891,7897,7906,
		7915,7922,7925,7931,7936,7943,7947,7952,7955,7961,7965,7967,7970,7977,
		7980,7987,7995,7998,8007,8012,8018,8021,8024,8031,8035,8038,8053,8056,
		8063,8066,8073,8076,8079,8086,8099,8109,8117,8129,8131,8138,8142,8152,
		8156,8160,8164,8166,8171,8175,8179,8181,8183,8188,8193,8199,8204,8209,
		8212,8215,8218,8221,8224,8227,8230,8235,8238,8241,8244,8247,8250,8252,
		8258,8262,8271,8276,8280,8289,8299,8303,8308,8314,8326,8341,8348,8350,
		8353,8357,8361,8363,8371,8380,8386,8388,8390,8397,8401,8410,8414,8429,
		8437,8465,8472,8476,8479,8484,8488,8491,8507,8518,8523,8526,8530,8534,
		8538,8543,8547,8551,8553,8562,8567,8573,8577,8579,8586,8591,8597,8599,
		8603,8610,8615,8618,8624,8628,8637,8641,8649,8651,8658,8663,8666,8674,
		8683,8691,8693,8697,8704,8723,8732,8738,8757,8766,8772,8776,8781,8791,
		8798,8807,8810,8819,8821,8825,8830,8840,8846,8849,8856,8860,8863,8876,
		8882,8886,8890,8893,8901,8905,8909,8917,8924,8931,8935,8941,8943,8952,
		8955,8965,8981,8987,8992,8999,9012,9019,9027,9035,9040,9044,9050,9054,
		9058,9061,9067,9072,9088,9091,9093,9105,9107,9111,9117,9121,9123,9131,
		9135,9144,9152,9158,9161,9170,9175,9182,9192,9218,9229,9231,9233,9241,
		9263,9272,9282,9285,9290,9295,9299,9305,9308,9311,9314,9318,9332,9339,
		9346,9353,9372,9380,9388,9390,9396,9403,9405,9418,9457,9459,9479,9489,
		9500,9517,9520,9523,9526,9528,9535,9538,9542,9545,9548,9550,9557,9570,
		9583,9586,9590,9593,9603,9606,9616,9619,9622,9626,9633,9645,9657,9663,
		9671,9688,9713,9723,9727,9730,9733,9736,9749,9754,9759,9761,9769,9778,
		9787,9792,9801,9806,9820,9830,9838,9852,9859,9867,9875,9882,9888,9897,
		9912,9923,9955,9964,9971,9975,9979,9986,10000,10005,10010,10014,10016,
		10019,10026,10031,10045,10077,10082,10094,10111,10119,10127,10143,10148,
		10159,10171,10181,10192,10200,10208,10218,10225,10228,10237,10240,10245,
		10258,10266,10269,10276,10281,10288,10301,10313,10318,10326,10333,10338,
		10350,10358,10363,10373,10380,10387,10393,10398,10404,10412,10416,10483,
		10495,10500
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
