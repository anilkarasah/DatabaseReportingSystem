// <auto-generated />
using System;
using DatabaseReportingSystem.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaseReportingSystem.Migrations
{
    [DbContext(typeof(SystemDbContext))]
    [Migration("20241229172235_RemoveSenderIdFromMessage")]
    partial class RemoveSenderIdFromMessage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DatabaseReportingSystem.Shared.Models.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DatabaseManagementSystem")
                        .HasMaxLength(16)
                        .HasColumnType("integer");

                    b.Property<string>("SchemaHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("DatabaseReportingSystem.Shared.Models.ChatMessage", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SentAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MessageId");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("DatabaseReportingSystem.Shared.Models.ModelResponse", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModelName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTimeOffset>("CompletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MessageId", "ModelName");

                    b.ToTable("ModelResponses");
                });

            modelBuilder.Entity("DatabaseReportingSystem.Shared.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(97)
                        .HasColumnType("character varying(97)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DatabaseReportingSystem.Shared.Models.UserLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ExpiresAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenseCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<DateTimeOffset>("StartsAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLicenses");
                });

            modelBuilder.Entity("DatabaseReportingSystem.Shared.Models.Chat", b =>
                {
                    b.HasOne("DatabaseReportingSystem.Shared.Models.User", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseReportingSystem.Shared.Models.ChatMessage", b =>
                {
                    b.HasOne("DatabaseReportingSystem.Shared.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("DatabaseReportingSystem.Shared.Models.ModelResponse", b =>
                {
                    b.HasOne("DatabaseReportingSystem.Shared.Models.ChatMessage", "Message")
                        .WithMany("ModelResponses")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("DatabaseReportingSystem.Shared.Models.User", b =>
                {
                    b.OwnsOne("DatabaseReportingSystem.Shared.Models.ConnectionCredentials", "ConnectionCredentials", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ConnectionHash")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("DatabaseManagementSystem")
                                .HasColumnType("integer");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("ConnectionCredentials")
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseReportingSystem.Shared.Models.UserLicense", b =>
                {
                    b.HasOne("DatabaseReportingSystem.Shared.Models.User", "User")
                        .WithMany("Licenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseReportingSystem.Shared.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DatabaseReportingSystem.Shared.Models.ChatMessage", b =>
                {
                    b.Navigation("ModelResponses");
                });

            modelBuilder.Entity("DatabaseReportingSystem.Shared.Models.User", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Licenses");
                });
#pragma warning restore 612, 618
        }
    }
}
